{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/components/metric_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/components/metric_editor.js","mtime":1589249552392},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1ldHJpY0VkaXRvciA9IE1ldHJpY0VkaXRvcjsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9tZXRyaWNfc2VsZWN0ID0gcmVxdWlyZSgiLi9tZXRyaWNfc2VsZWN0Iik7Cgp2YXIgX3NpbmdsZV9maWVsZF9zZWxlY3QgPSByZXF1aXJlKCIuL3NpbmdsZV9maWVsZF9zZWxlY3QiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9pbmRleF9wYXR0ZXJuX3V0aWwgPSByZXF1aXJlKCIuLi9pbmRleF9wYXR0ZXJuX3V0aWwiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBmaWx0ZXJGaWVsZHNGb3JBZ2coZmllbGRzLCBhZ2dUeXBlKSB7CiAgaWYgKCFmaWVsZHMpIHsKICAgIHJldHVybiBbXTsKICB9CgogIGlmIChhZ2dUeXBlID09PSBfY29uc3RhbnRzLkFHR19UWVBFLlVOSVFVRV9DT1VOVCB8fCBhZ2dUeXBlID09PSBfY29uc3RhbnRzLkFHR19UWVBFLlRFUk1TKSB7CiAgICByZXR1cm4gKDAsIF9pbmRleF9wYXR0ZXJuX3V0aWwuZ2V0VGVybXNGaWVsZHMpKGZpZWxkcyk7CiAgfQoKICByZXR1cm4gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHsKICAgIHJldHVybiBmaWVsZC5hZ2dyZWdhdGFibGUgJiYgZmllbGQudHlwZSA9PT0gJ251bWJlcic7CiAgfSk7Cn0KCmZ1bmN0aW9uIE1ldHJpY0VkaXRvcihfcmVmKSB7CiAgdmFyIGZpZWxkcyA9IF9yZWYuZmllbGRzLAogICAgICBtZXRyaWNzRmlsdGVyID0gX3JlZi5tZXRyaWNzRmlsdGVyLAogICAgICBtZXRyaWMgPSBfcmVmLm1ldHJpYywKICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLAogICAgICByZW1vdmVCdXR0b24gPSBfcmVmLnJlbW92ZUJ1dHRvbjsKCiAgdmFyIG9uQWdnQ2hhbmdlID0gZnVuY3Rpb24gb25BZ2dDaGFuZ2UobWV0cmljQWdncmVnYXRpb25UeXBlKSB7CiAgICB2YXIgbmV3TWV0cmljUHJvcHMgPSBfb2JqZWN0U3ByZWFkKHt9LCBtZXRyaWMsIHsKICAgICAgdHlwZTogbWV0cmljQWdncmVnYXRpb25UeXBlCiAgICB9KTsgLy8gdW5zZXQgZmllbGQgd2hlbiBuZXcgYWdnIHR5cGUgZG9lcyBub3Qgc3VwcG9ydCBjdXJyZW50bHkgc2VsZWN0ZWQgZmllbGQuCgoKICAgIGlmIChtZXRyaWMuZmllbGQgJiYgbWV0cmljQWdncmVnYXRpb25UeXBlICE9PSBfY29uc3RhbnRzLkFHR19UWVBFLkNPVU5UKSB7CiAgICAgIHZhciBmaWVsZHNGb3JOZXdBZ2dUeXBlID0gZmlsdGVyRmllbGRzRm9yQWdnKGZpZWxkcywgbWV0cmljQWdncmVnYXRpb25UeXBlKTsKICAgICAgdmFyIGZvdW5kID0gZmllbGRzRm9yTmV3QWdnVHlwZS5maW5kKGZ1bmN0aW9uIChmaWVsZCkgewogICAgICAgIHJldHVybiBmaWVsZC5uYW1lID09PSBtZXRyaWMuZmllbGQ7CiAgICAgIH0pOwoKICAgICAgaWYgKCFmb3VuZCkgewogICAgICAgIG5ld01ldHJpY1Byb3BzLmZpZWxkID0gdW5kZWZpbmVkOwogICAgICB9CiAgICB9CgogICAgb25DaGFuZ2UobmV3TWV0cmljUHJvcHMpOwogIH07CgogIHZhciBvbkZpZWxkQ2hhbmdlID0gZnVuY3Rpb24gb25GaWVsZENoYW5nZShmaWVsZE5hbWUpIHsKICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoe30sIG1ldHJpYywgewogICAgICBmaWVsZDogZmllbGROYW1lCiAgICB9KSk7CiAgfTsKCiAgdmFyIG9uTGFiZWxDaGFuZ2UgPSBmdW5jdGlvbiBvbkxhYmVsQ2hhbmdlKGUpIHsKICAgIG9uQ2hhbmdlKF9vYmplY3RTcHJlYWQoe30sIG1ldHJpYywgewogICAgICBsYWJlbDogZS50YXJnZXQudmFsdWUKICAgIH0pKTsKICB9OwoKICB2YXIgZmllbGRTZWxlY3Q7CgogIGlmIChtZXRyaWMudHlwZSAmJiBtZXRyaWMudHlwZSAhPT0gX2NvbnN0YW50cy5BR0dfVFlQRS5DT1VOVCkgewogICAgZmllbGRTZWxlY3QgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubWV0cmljc0VkaXRvci5zZWxlY3RGaWVsZExhYmVsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRmllbGQnCiAgICAgIH0pLAogICAgICBkaXNwbGF5OiAiY29sdW1uQ29tcHJlc3NlZCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NpbmdsZV9maWVsZF9zZWxlY3QuU2luZ2xlRmllbGRTZWxlY3QsIHsKICAgICAgcGxhY2Vob2xkZXI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1ldHJpY3NFZGl0b3Iuc2VsZWN0RmllbGRQbGFjZWhvbGRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBmaWVsZCcKICAgICAgfSksCiAgICAgIHZhbHVlOiBtZXRyaWMuZmllbGQsCiAgICAgIG9uQ2hhbmdlOiBvbkZpZWxkQ2hhbmdlLAogICAgICBmaWVsZHM6IGZpbHRlckZpZWxkc0ZvckFnZyhmaWVsZHMsIG1ldHJpYy50eXBlKSwKICAgICAgaXNDbGVhcmFibGU6IGZhbHNlLAogICAgICBjb21wcmVzc2VkOiB0cnVlCiAgICB9KSk7CiAgfQoKICB2YXIgbGFiZWxJbnB1dDsKCiAgaWYgKG1ldHJpYy50eXBlKSB7CiAgICBsYWJlbElucHV0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1ldHJpY3NFZGl0b3IuY3VzdG9tTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDdXN0b20gbGFiZWwnCiAgICAgIH0pLAogICAgICBkaXNwbGF5OiAiY29sdW1uQ29tcHJlc3NlZCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgb25DaGFuZ2U6IG9uTGFiZWxDaGFuZ2UsCiAgICAgIHZhbHVlOiBtZXRyaWMubGFiZWwgPyBtZXRyaWMubGFiZWwgOiAnJywKICAgICAgY29tcHJlc3NlZDogdHJ1ZQogICAgfSkpOwogIH0KCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1ldHJpY3NFZGl0b3IuYWdncmVnYXRpb25MYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBZ2dyZWdhdGlvbicKICAgIH0pLAogICAgZGlzcGxheTogImNvbHVtbkNvbXByZXNzZWQiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbWV0cmljX3NlbGVjdC5NZXRyaWNTZWxlY3QsIHsKICAgIG9uQ2hhbmdlOiBvbkFnZ0NoYW5nZSwKICAgIHZhbHVlOiBtZXRyaWMudHlwZSwKICAgIG1ldHJpY3NGaWx0ZXI6IG1ldHJpY3NGaWx0ZXIsCiAgICBjb21wcmVzc2VkOiB0cnVlCiAgfSkpLCBmaWVsZFNlbGVjdCwgbGFiZWxJbnB1dCwgcmVtb3ZlQnV0dG9uKTsKfQoKTWV0cmljRWRpdG9yLnByb3BUeXBlcyA9IHsKICBtZXRyaWM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7CiAgICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoX21ldHJpY19zZWxlY3QuTUVUUklDX0FHR1JFR0FUSU9OX1ZBTFVFUyksCiAgICBmaWVsZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICAgIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nCiAgfSksCiAgZmllbGRzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXksCiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgbWV0cmljc0ZpbHRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMKfTs="},null]}