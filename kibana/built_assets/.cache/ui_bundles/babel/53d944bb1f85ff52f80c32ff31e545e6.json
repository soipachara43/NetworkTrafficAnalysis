{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/dynamic_mapping_section/dynamic_mapping_section.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/dynamic_mapping_section/dynamic_mapping_section.js","mtime":1589249554096},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkR5bmFtaWNNYXBwaW5nU2VjdGlvbiA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2RvY3VtZW50YXRpb24iKTsKCnZhciBfc2hhcmVkX2ltcG9ydHMgPSByZXF1aXJlKCIuLi8uLi8uLi9zaGFyZWRfaW1wb3J0cyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwoKCnZhciBVc2VGaWVsZCA9ICgwLCBfc2hhcmVkX2ltcG9ydHMuZ2V0VXNlRmllbGQpKHsKICBjb21wb25lbnQ6IF9zaGFyZWRfaW1wb3J0cy5GaWVsZAp9KTsKCnZhciBEeW5hbWljTWFwcGluZ1NlY3Rpb24gPSBmdW5jdGlvbiBEeW5hbWljTWFwcGluZ1NlY3Rpb24oKSB7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NoYXJlZF9pbXBvcnRzLkZvcm1Sb3csIHsKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5keW5hbWljTWFwcGluZ1RpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0R5bmFtaWMgbWFwcGluZycKICAgIH0pLAogICAgZGVzY3JpcHRpb246IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5keW5hbWljTWFwcGluZ0Rlc2NyaXB0aW9uIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEeW5hbWljIG1hcHBpbmcgYWxsb3dzIGFuIGluZGV4IHRlbXBsYXRlIHRvIGludGVycHJldCB1bm1hcHBlZCBmaWVsZHMuIHtkb2NzTGlua30iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBkb2NzTGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIGhyZWY6IF9kb2N1bWVudGF0aW9uLmRvY3VtZW50YXRpb25TZXJ2aWNlLmdldER5bmFtaWNNYXBwaW5nTGluaygpLAogICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLmR5bmFtaWNNYXBwaW5nRG9jdW1lbnRpb25MaW5rJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMZWFybiBtb3JlLicKICAgICAgICB9KSkKICAgICAgfQogICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogIm0iCiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChVc2VGaWVsZCwgewogICAgICBwYXRoOiAiZHluYW1pY01hcHBpbmcuZW5hYmxlZCIsCiAgICAgIGNvbXBvbmVudDogX3NoYXJlZF9pbXBvcnRzLlRvZ2dsZUZpZWxkLAogICAgICBjb21wb25lbnRQcm9wczogewogICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdkeW5hbWljTWFwcGluZ3NUb2dnbGUnCiAgICAgIH0KICAgIH0pKQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NoYXJlZF9pbXBvcnRzLkZvcm1EYXRhUHJvdmlkZXIsIHsKICAgIHBhdGhzVG9XYXRjaDogWydkeW5hbWljTWFwcGluZy5lbmFibGVkJywgJ2R5bmFtaWNNYXBwaW5nLmRhdGVfZGV0ZWN0aW9uJ10KICB9LCBmdW5jdGlvbiAoZm9ybURhdGEpIHsKICAgIHZhciBlbmFibGVkID0gZm9ybURhdGFbJ2R5bmFtaWNNYXBwaW5nLmVuYWJsZWQnXSwKICAgICAgICBkYXRlRGV0ZWN0aW9uID0gZm9ybURhdGFbJ2R5bmFtaWNNYXBwaW5nLmRhdGVfZGV0ZWN0aW9uJ107CgogICAgaWYgKGVuYWJsZWQgPT09IHVuZGVmaW5lZCkgewogICAgICAvLyBJZiBlbmFibGVkIGlzIG5vdCB5ZXQgZGVmaW5lZCBkb24ndCBnbyBhbnkgZnVydGhlci4KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgaWYgKGVuYWJsZWQpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVXNlRmllbGQsIHsKICAgICAgICBwYXRoOiAiZHluYW1pY01hcHBpbmcubnVtZXJpY19kZXRlY3Rpb24iLAogICAgICAgIGNvbXBvbmVudFByb3BzOiB7CiAgICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAnbnVtZXJpY0RldGVjdGlvbicKICAgICAgICB9CiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFVzZUZpZWxkLCB7CiAgICAgICAgcGF0aDogImR5bmFtaWNNYXBwaW5nLmRhdGVfZGV0ZWN0aW9uIgogICAgICB9KSwgZGF0ZURldGVjdGlvbiAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFVzZUZpZWxkLCB7CiAgICAgICAgcGF0aDogImR5bmFtaWNNYXBwaW5nLmR5bmFtaWNfZGF0ZV9mb3JtYXRzIiwKICAgICAgICBjb21wb25lbnRQcm9wczogewogICAgICAgICAgZXVpRmllbGRQcm9wczogewogICAgICAgICAgICBvcHRpb25zOiBfY29uc3RhbnRzLkFMTF9EQVRFX0ZPUk1BVF9PUFRJT05TLAogICAgICAgICAgICBub1N1Z2dlc3Rpb25zOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSkpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVXNlRmllbGQsIHsKICAgICAgICBwYXRoOiAiZHluYW1pY01hcHBpbmcudGhyb3dFcnJvcnNGb3JVbm1hcHBlZEZpZWxkcyIsCiAgICAgICAgY29tcG9uZW50OiBfc2hhcmVkX2ltcG9ydHMuQ2hlY2tCb3hGaWVsZAogICAgICB9KTsKICAgIH0KICB9KSk7Cn07CgpleHBvcnRzLkR5bmFtaWNNYXBwaW5nU2VjdGlvbiA9IER5bmFtaWNNYXBwaW5nU2VjdGlvbjs="},null]}