{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/metricbeat_migration/flyout/flyout.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/metricbeat_migration/flyout/flyout.js","mtime":1589249552568},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZseW91dCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2luc3RydWN0aW9uX3N0ZXBzID0gcmVxdWlyZSgiLi4vaW5zdHJ1Y3Rpb25fc3RlcHMiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva2liYW5hX3V0aWxzL3B1YmxpYyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2NvbnN0YW50czIgPSByZXF1aXJlKCIuLi9jb25zdGFudHMiKTsKCnZhciBfZG9jdW1lbnRhdGlvbl9saW5rcyA9IHJlcXVpcmUoInVpL2RvY3VtZW50YXRpb25fbGlua3MiKTsKCnZhciBfZm9ybWF0dGluZyA9IHJlcXVpcmUoIi4uLy4uL3NldHVwX21vZGUvZm9ybWF0dGluZyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBzdG9yYWdlID0gbmV3IF9wdWJsaWMuU3RvcmFnZSh3aW5kb3cubG9jYWxTdG9yYWdlKTsKdmFyIEVTX01PTklUT1JJTkdfVVJMX0tFWSA9ICIiLmNvbmNhdChfY29uc3RhbnRzLlNUT1JBR0VfS0VZLCAiLm1iX21pZ3JhdGlvbi5lc01vbml0b3JpbmdVcmwiKTsKdmFyIERFRkFVTFRfRVNfTU9OSVRPUklOR19VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDo5MjAwJzsKCnZhciBGbHlvdXQgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEZseW91dCwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEZseW91dChwcm9wcykgewogICAgdmFyIF9jaGVja2VkU3RhdHVzQnlTdGVwOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmx5b3V0KTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihGbHlvdXQpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzZXRFc01vbml0b3JpbmdVcmwiLCBmdW5jdGlvbiAoZXNNb25pdG9yaW5nVXJsKSB7CiAgICAgIHN0b3JhZ2Uuc2V0KEVTX01PTklUT1JJTkdfVVJMX0tFWSwgZXNNb25pdG9yaW5nVXJsKTsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBlc01vbml0b3JpbmdVcmw6IGVzTW9uaXRvcmluZ1VybAogICAgICB9KTsKICAgIH0pOwoKICAgIHZhciBfZXNNb25pdG9yaW5nVXJsID0gc3RvcmFnZS5nZXQoRVNfTU9OSVRPUklOR19VUkxfS0VZKTsKCiAgICBpZiAoIV9lc01vbml0b3JpbmdVcmwpIHsKICAgICAgX2VzTW9uaXRvcmluZ1VybCA9IHByb3BzLm1vbml0b3JpbmdIb3N0cyA/IHByb3BzLm1vbml0b3JpbmdIb3N0c1swXSA6IERFRkFVTFRfRVNfTU9OSVRPUklOR19VUkw7CiAgICB9CgogICAgX3RoaXMuY2hlY2tJbnRlcnZhbCA9IG51bGw7CiAgICB2YXIgYWN0aXZlU3RlcCA9IF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfU0VUX01PTklUT1JJTkdfVVJMOwoKICAgIGlmIChwcm9wcy5wcm9kdWN0ICYmIHByb3BzLnByb2R1Y3QuaXNQYXJ0aWFsbHlNaWdyYXRlZCkgewogICAgICBhY3RpdmVTdGVwID0gX2NvbnN0YW50czIuSU5TVFJVQ1RJT05fU1RFUF9ESVNBQkxFX0lOVEVSTkFMOwogICAgfQoKICAgIF90aGlzLnN0YXRlID0gewogICAgICBhY3RpdmVTdGVwOiBhY3RpdmVTdGVwLAogICAgICBlc01vbml0b3JpbmdVcmw6IF9lc01vbml0b3JpbmdVcmwsCiAgICAgIGNoZWNrZWRTdGF0dXNCeVN0ZXA6IChfY2hlY2tlZFN0YXR1c0J5U3RlcCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NoZWNrZWRTdGF0dXNCeVN0ZXAsIF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfRU5BQkxFX01FVFJJQ0JFQVQsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja2VkU3RhdHVzQnlTdGVwLCBfY29uc3RhbnRzMi5JTlNUUlVDVElPTl9TVEVQX0RJU0FCTEVfSU5URVJOQUwsIGZhbHNlKSwgX2RlZmluZVByb3BlcnR5KF9jaGVja2VkU3RhdHVzQnlTdGVwLCAidXNlckFja25vd2xlZGdlZE5vQ2x1c3RlclV1aWRQcm9tcHQiLCBmYWxzZSksIF9jaGVja2VkU3RhdHVzQnlTdGVwKQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhGbHlvdXQsIFt7CiAgICBrZXk6ICJmaW5pc2hlZEZseW91dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoZWRGbHlvdXQoKSB7CiAgICAgIHZhciBvbkNsb3NlID0gdGhpcy5wcm9wcy5vbkNsb3NlOwogICAgICBvbkNsb3NlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQWN0aXZlU3RlcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQWN0aXZlU3RlcCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgcHJvZHVjdCA9IF90aGlzJHByb3BzLnByb2R1Y3QsCiAgICAgICAgICBwcm9kdWN0TmFtZSA9IF90aGlzJHByb3BzLnByb2R1Y3ROYW1lLAogICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsCiAgICAgICAgICBtZXRhID0gX3RoaXMkcHJvcHMubWV0YTsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGFjdGl2ZVN0ZXAgPSBfdGhpcyRzdGF0ZS5hY3RpdmVTdGVwLAogICAgICAgICAgZXNNb25pdG9yaW5nVXJsID0gX3RoaXMkc3RhdGUuZXNNb25pdG9yaW5nVXJsLAogICAgICAgICAgY2hlY2tlZFN0YXR1c0J5U3RlcCA9IF90aGlzJHN0YXRlLmNoZWNrZWRTdGF0dXNCeVN0ZXA7CgogICAgICBzd2l0Y2ggKGFjdGl2ZVN0ZXApIHsKICAgICAgICBjYXNlIF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfU0VUX01PTklUT1JJTkdfVVJMOgogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgICAgICBmdWxsV2lkdGg6IHRydWUsCiAgICAgICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5zdGVwMS5tb25pdG9yaW5nVXJsTGFiZWwnLCB7CiAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVUkwgb2YgbW9uaXRvcmluZyBjbHVzdGVyJwogICAgICAgICAgICB9KSwKICAgICAgICAgICAgaGVscFRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLm1ldHJpY2JlYXRNaWdyYXRpb24uZmx5b3V0LnN0ZXAxLm1vbml0b3JpbmdVcmxIZWxwVGV4dCcsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlR5cGljYWxseSBhIHNpbmdsZSBVUkwuIElmIG11bHRpcGxlIFVSTHMsIHNlcGFyYXRlIHdpdGggYSBjb21tYS5cbiAgICAgICAgICAgICAgICBUaGUgcnVubmluZyBNZXRyaWNiZWF0IGluc3RhbmNlIG11c3QgYmUgYWJsZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZXNlIEVsYXN0aWNzZWFyY2ggc2VydmVycy4iCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCB7CiAgICAgICAgICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgICAgICAgICAgdmFsdWU6IGVzTW9uaXRvcmluZ1VybCwKICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnNldEVzTW9uaXRvcmluZ1VybChlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKSk7CgogICAgICAgIGNhc2UgX2NvbnN0YW50czIuSU5TVFJVQ1RJT05fU1RFUF9FTkFCTEVfTUVUUklDQkVBVDoKICAgICAgICBjYXNlIF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfRElTQUJMRV9JTlRFUk5BTDoKICAgICAgICAgIHZhciBlc01vbml0b3JpbmdVcmxzID0gZXNNb25pdG9yaW5nVXJsLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgcmV0dXJuICJcIiIuY29uY2F0KHVybCwgIlwiIik7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBpbnN0cnVjdGlvblN0ZXBzID0gKDAsIF9pbnN0cnVjdGlvbl9zdGVwcy5nZXRJbnN0cnVjdGlvblN0ZXBzKShwcm9kdWN0TmFtZSwgcHJvZHVjdCwgYWN0aXZlU3RlcCwgbWV0YSwgewogICAgICAgICAgICBkb25lV2l0aE1pZ3JhdGlvbjogb25DbG9zZSwKICAgICAgICAgICAgZXNNb25pdG9yaW5nVXJsOiBlc01vbml0b3JpbmdVcmxzLAogICAgICAgICAgICBoYXNDaGVja2VkU3RhdHVzOiBjaGVja2VkU3RhdHVzQnlTdGVwW2FjdGl2ZVN0ZXBdCiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN0ZXBzLCB7CiAgICAgICAgICAgIHN0ZXBzOiBpbnN0cnVjdGlvblN0ZXBzCiAgICAgICAgICB9KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckFjdGl2ZVN0ZXBOZXh0QnV0dG9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJBY3RpdmVTdGVwTmV4dEJ1dHRvbigpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcywKICAgICAgICAgIHByb2R1Y3QgPSBfdGhpcyRwcm9wczIucHJvZHVjdCwKICAgICAgICAgIHByb2R1Y3ROYW1lID0gX3RoaXMkcHJvcHMyLnByb2R1Y3ROYW1lOwogICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGFjdGl2ZVN0ZXAgPSBfdGhpcyRzdGF0ZTIuYWN0aXZlU3RlcCwKICAgICAgICAgIGVzTW9uaXRvcmluZ1VybCA9IF90aGlzJHN0YXRlMi5lc01vbml0b3JpbmdVcmwsCiAgICAgICAgICB1c2VyQWNrbm93bGVkZ2VkTm9DbHVzdGVyVXVpZFByb21wdCA9IF90aGlzJHN0YXRlMi51c2VyQWNrbm93bGVkZ2VkTm9DbHVzdGVyVXVpZFByb21wdDsgLy8gSXQgaXMgcG9zc2libGUgdGhhdCwgZHVyaW5nIHRoZSBtaWdyYXRpb24gc3RlcHMsIHByb2R1Y3RzIGFyZSBub3QgcmVwb3J0aW5nCiAgICAgIC8vIG1vbml0b3JpbmcgZGF0YSBmb3IgYSBwZXJpb2Qgb2YgdGltZSBvdXRzaWRlIHRoZSB3aW5kb3cgb2Ygb3VyIHNlcnZlci1zaWRlIGNoZWNrCiAgICAgIC8vIGFuZCB0aGlzIGlzIG1vc3QgbGlrZWx5IHRlbXBvcmFyeSBzbyB3ZSB3YW50IHRvIGJlIGRlZmVuc2l2ZSBhbmQgbm90IGVycm9yIG91dAogICAgICAvLyBhbmQgaG9wZWZ1bGx5IHdhaXQgZm9yIHRoZSBuZXh0IGNoZWNrIGFuZCB0aGlzIHN0YXRlIHdpbGwgYmUgc2VsZi1jb3JyZWN0ZWQuCgogICAgICBpZiAoIXByb2R1Y3QpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIHdpbGxEaXNhYmxlRG9uZUJ1dHRvbiA9ICFwcm9kdWN0LmlzRnVsbHlNaWdyYXRlZDsKICAgICAgdmFyIHdpbGxTaG93TmV4dEJ1dHRvbiA9IGFjdGl2ZVN0ZXAgIT09IF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfRElTQUJMRV9JTlRFUk5BTDsKCiAgICAgIGlmIChhY3RpdmVTdGVwID09PSBfY29uc3RhbnRzMi5JTlNUUlVDVElPTl9TVEVQX0VOQUJMRV9NRVRSSUNCRUFUKSB7CiAgICAgICAgaWYgKHByb2R1Y3ROYW1lID09PSBfY29uc3RhbnRzLkVMQVNUSUNTRUFSQ0hfU1lTVEVNX0lEKSB7CiAgICAgICAgICB3aWxsU2hvd05leHRCdXR0b24gPSBmYWxzZTsgLy8gRVMgY2FuIGJlIGZ1bGx5IG1pZ3JhdGVkIGZvciBuZXQgbmV3IHVzZXJzCgogICAgICAgICAgd2lsbERpc2FibGVEb25lQnV0dG9uID0gIXByb2R1Y3QuaXNQYXJ0aWFsbHlNaWdyYXRlZCAmJiAhcHJvZHVjdC5pc0Z1bGx5TWlncmF0ZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIERvIG5vdCBib3RoZXIgdGFraW5nIHRoZW0gdG8gdGhlIGRpc2FibGUgaW50ZXJuYWwgc3RlcCBmb3Igbm9uIEVTIHVzZSBjYXNlcwogICAgICAgICAgLy8gc2luY2UgZGlzYWJsaW5nIGlzIGFuIGluZGl2aWR1YWwgYWN0aW9uIHBlciBub2RlLCB2ZXJzdXMgRVMgd2hlcmUgaXQgaXMKICAgICAgICAgIC8vIGEgY2x1c3RlciBzZXR0aW5nCiAgICAgICAgICB3aWxsU2hvd05leHRCdXR0b24gPSAhcHJvZHVjdC5pc0Z1bGx5TWlncmF0ZWQ7CiAgICAgICAgICB3aWxsRGlzYWJsZURvbmVCdXR0b24gPSAhcHJvZHVjdC5pc0Z1bGx5TWlncmF0ZWQ7CiAgICAgICAgfQogICAgICB9IC8vIFRoaXMgaXMgYSBwb3NzaWJsZSBzY2VuYXJpbyB0aGF0IGNvbWUgdXAgZHVyaW5nIHRlc3Rpbmcgd2hlcmUgbG9nc3Rhc2gvYmVhdHMKICAgICAgLy8gaXMgbm90IG91dHB1dGluZyB0byBFUywgYnV0IGhhcyBtb25pdG9yaW5pbmcgZW5hYmxlZC4gSW4gdGhlc2Ugc2NlbmFyaW9zLAogICAgICAvLyB0aGUgbW9uaXRvcmluZyBkb2N1bWVudHMgd2lsbCBub3QgaGF2ZSBhIGBjbHVzdGVyX3V1aWRgIHNvIG9uY2UgbWlncmF0ZWQsCiAgICAgIC8vIHRoZSBpbnN0YW5jZS9ub2RlIHdpbGwgYWN0dWFsbHkgbGl2ZSBpbiB0aGUgc3RhbmRhbG9uZSBjbHVzdGVyIGxpc3RpbmcKICAgICAgLy8gaW5zdGVhZCBvZiB0aGUgb25lIGl0IGN1cnJlbnRseSBsaXZlcyBpbi4gV2UgbmVlZCB0aGUgdXNlciB0byB1bmRlcnN0YW5kCiAgICAgIC8vIHRoaXMgc28gd2UncmUgZ29pbmcgdG8gZm9yY2UgdGhlbSB0byBhY2tub3dsZWRnZSBhIHByb21wdCBzYXlpbmcgdGhpcwoKCiAgICAgIGlmIChwcm9kdWN0LmlzRnVsbHlNaWdyYXRlZCAmJiBwcm9kdWN0LmNsdXN0ZXJVdWlkID09PSBudWxsKSB7CiAgICAgICAgLy8gRGlkIHRoZXkgYWNrbm93bGVkZ2UgdGhlIHByb21wdD8KICAgICAgICBpZiAoIXVzZXJBY2tub3dsZWRnZWROb0NsdXN0ZXJVdWlkUHJvbXB0KSB7CiAgICAgICAgICB3aWxsRGlzYWJsZURvbmVCdXR0b24gPSB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHdpbGxTaG93TmV4dEJ1dHRvbikgewogICAgICAgIHZhciBpc0Rpc2FibGVkID0gZmFsc2U7CiAgICAgICAgdmFyIG5leHRTdGVwID0gbnVsbDsKCiAgICAgICAgaWYgKGFjdGl2ZVN0ZXAgPT09IF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfU0VUX01PTklUT1JJTkdfVVJMKSB7CiAgICAgICAgICBpc0Rpc2FibGVkID0gIWVzTW9uaXRvcmluZ1VybCB8fCBlc01vbml0b3JpbmdVcmwubGVuZ3RoID09PSAwOwoKICAgICAgICAgIGlmIChwcm9kdWN0LmlzUGFydGlhbGx5TWlncmF0ZWQgfHwgcHJvZHVjdC5pc0Z1bGx5TWlncmF0ZWQpIHsKICAgICAgICAgICAgbmV4dFN0ZXAgPSBfY29uc3RhbnRzMi5JTlNUUlVDVElPTl9TVEVQX0RJU0FCTEVfSU5URVJOQUw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXh0U3RlcCA9IF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfRU5BQkxFX01FVFJJQ0JFQVQ7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVTdGVwID09PSBfY29uc3RhbnRzMi5JTlNUUlVDVElPTl9TVEVQX0VOQUJMRV9NRVRSSUNCRUFUKSB7CiAgICAgICAgICBpc0Rpc2FibGVkID0gIXByb2R1Y3QuaXNQYXJ0aWFsbHlNaWdyYXRlZCAmJiAhcHJvZHVjdC5pc0Z1bGx5TWlncmF0ZWQ7CiAgICAgICAgICBuZXh0U3RlcCA9IF9jb25zdGFudHMyLklOU1RSVUNUSU9OX1NURVBfRElTQUJMRV9JTlRFUk5BTDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgICAgICB0eXBlOiAic3VibWl0IiwKICAgICAgICAgIGZpbGw6IHRydWUsCiAgICAgICAgICBpY29uVHlwZTogInNvcnRSaWdodCIsCiAgICAgICAgICBpY29uU2lkZTogInJpZ2h0IiwKICAgICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsCiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICByZXR1cm4gX3RoaXMzLnNldFN0YXRlKHsKICAgICAgICAgICAgICBhY3RpdmVTdGVwOiBuZXh0U3RlcAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5uZXh0QnV0dG9uTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05leHQnCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICAgIHR5cGU6ICJzdWJtaXQiLAogICAgICAgIGZpbGw6IHRydWUsCiAgICAgICAgaXNEaXNhYmxlZDogd2lsbERpc2FibGVEb25lQnV0dG9uLAogICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMzLmZpbmlzaGVkRmx5b3V0KCk7CiAgICAgICAgfQogICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5kb25lQnV0dG9uTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEb25lJwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RG9jdW1lbnRhdGlvblRpdGxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREb2N1bWVudGF0aW9uVGl0bGUoKSB7CiAgICAgIHZhciBwcm9kdWN0TmFtZSA9IHRoaXMucHJvcHMucHJvZHVjdE5hbWU7CiAgICAgIHZhciBkb2N1bWVudGF0aW9uVXJsID0gbnVsbDsKCiAgICAgIGlmIChwcm9kdWN0TmFtZSA9PT0gX2NvbnN0YW50cy5LSUJBTkFfU1lTVEVNX0lEKSB7CiAgICAgICAgZG9jdW1lbnRhdGlvblVybCA9ICIiLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5FTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4va2liYW5hLyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL21vbml0b3JpbmctbWV0cmljYmVhdC5odG1sIik7CiAgICAgIH0gZWxzZSBpZiAocHJvZHVjdE5hbWUgPT09IF9jb25zdGFudHMuRUxBU1RJQ1NFQVJDSF9TWVNURU1fSUQpIHsKICAgICAgICBkb2N1bWVudGF0aW9uVXJsID0gIiIuY29uY2F0KF9kb2N1bWVudGF0aW9uX2xpbmtzLkVMQVNUSUNfV0VCU0lURV9VUkwsICJndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS8iKS5jb25jYXQoX2RvY3VtZW50YXRpb25fbGlua3MuRE9DX0xJTktfVkVSU0lPTiwgIi9jb25maWd1cmluZy1tZXRyaWNiZWF0Lmh0bWwiKTsKICAgICAgfQoKICAgICAgaWYgKCFkb2N1bWVudGF0aW9uVXJsKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIHNpemU6ICJzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgIGhyZWY6IGRvY3VtZW50YXRpb25VcmwsCiAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5sZWFybk1vcmUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMZWFybiBhYm91dCB3aHkuJwogICAgICB9KSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLAogICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzMy5vbkNsb3NlLAogICAgICAgICAgaW5zdGFuY2UgPSBfdGhpcyRwcm9wczMuaW5zdGFuY2UsCiAgICAgICAgICBwcm9kdWN0TmFtZSA9IF90aGlzJHByb3BzMy5wcm9kdWN0TmFtZSwKICAgICAgICAgIHByb2R1Y3QgPSBfdGhpcyRwcm9wczMucHJvZHVjdDsKICAgICAgdmFyIGluc3RhbmNlSWRlbnRpZmllciA9ICgwLCBfZm9ybWF0dGluZy5nZXRJZGVudGlmaWVyKShwcm9kdWN0TmFtZSk7CiAgICAgIHZhciBpbnN0YW5jZU5hbWUgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5uYW1lIHx8ICgwLCBfZm9ybWF0dGluZy5mb3JtYXRQcm9kdWN0TmFtZSkocHJvZHVjdE5hbWUpOwoKICAgICAgdmFyIHRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubWV0cmljYmVhdE1pZ3JhdGlvbi5mbHlvdXQuZmx5b3V0VGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNb25pdG9yIGB7aW5zdGFuY2VOYW1lfWAge2luc3RhbmNlSWRlbnRpZmllcn0gd2l0aCBNZXRyaWNiZWF0JywKICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgIGluc3RhbmNlTmFtZTogaW5zdGFuY2VOYW1lLAogICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBpbnN0YW5jZUlkZW50aWZpZXIKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKHByb2R1Y3QuaXNOZXROZXdVc2VyKSB7CiAgICAgICAgdGl0bGUgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5mbHlvdXRUaXRsZU5ld1VzZXInLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ01vbml0b3Ige2luc3RhbmNlTmFtZX0ge2luc3RhbmNlSWRlbnRpZmllcn0gd2l0aCBNZXRyaWNiZWF0JywKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IGluc3RhbmNlSWRlbnRpZmllciwKICAgICAgICAgICAgaW5zdGFuY2VOYW1lOiBpbnN0YW5jZU5hbWUKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyIG5vQ2x1c3RlclV1aWRQcm9tcHQgPSBudWxsOwoKICAgICAgaWYgKHByb2R1Y3QuaXNGdWxseU1pZ3JhdGVkICYmIHByb2R1Y3QuY2x1c3RlclV1aWQgPT09IG51bGwpIHsKICAgICAgICBub0NsdXN0ZXJVdWlkUHJvbXB0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgICAgICBjb2xvcjogIndhcm5pbmciLAogICAgICAgICAgaWNvblR5cGU6ICJoZWxwIiwKICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5ub0NsdXN0ZXJVdWlkVGl0bGUnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTm8gY2x1c3RlciBkZXRlY3RlZCcKICAgICAgICAgIH0pCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcubWV0cmljYmVhdE1pZ3JhdGlvbi5mbHlvdXQubm9DbHVzdGVyVXVpZERlc2NyaXB0aW9uIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhpcyB7cHJvZHVjdE5hbWV9IHtpbnN0YW5jZUlkZW50aWZpZXJ9IGlzIG5vdCBjb25uZWN0ZWQgdG8gYW4gRWxhc3RpY3NlYXJjaCBjbHVzdGVyIHNvIG9uY2UgZnVsbHkgbWlncmF0ZWQsIHRoaXMge3Byb2R1Y3ROYW1lfSB7aW5zdGFuY2VJZGVudGlmaWVyfSB3aWxsIGFwcGVhciBpbiB0aGUgU3RhbmRhbG9uZSBjbHVzdGVyIGluc3RlYWQgb2YgdGhpcyBvbmUuIHtsaW5rfSIsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgcHJvZHVjdE5hbWU6IHByb2R1Y3ROYW1lLAogICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IGluc3RhbmNlSWRlbnRpZmllciwKICAgICAgICAgICAgbGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgICAgICBocmVmOiAiIy9vdmVydmlldz9fZz0oY2x1c3Rlcl91dWlkOl9fc3RhbmRhbG9uZV9jbHVzdGVyX18pIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgIH0sICJDbGljayBoZXJlIHRvIHZpZXcgdGhlIFN0YW5kYWxvbmUgY2x1c3Rlci4iKQogICAgICAgICAgfQogICAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgICAgc2l6ZTogInMiCiAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDaGVja2JveCwgewogICAgICAgICAgaWQ6ICJtb25pdG9yaW5nRmx5b3V0Tm9DbHVzdGVyVXVpZENoZWNrYm94IiwKICAgICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5tZXRyaWNiZWF0TWlncmF0aW9uLmZseW91dC5ub0NsdXN0ZXJVdWlkQ2hlY2tib3hMYWJlbCcsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZZXMsIEkgdW5kZXJzdGFuZCB0aGF0IEkgd2lsbCBuZWVkIHRvIGxvb2sgaW4gdGhlIFN0YW5kYWxvbmUgY2x1c3RlciBmb3JcbiAgICAgICAgICAgICAgICAgIHRoaXMge3Byb2R1Y3ROYW1lfSB7aW5zdGFuY2VJZGVudGlmaWVyfS4iLAogICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICBwcm9kdWN0TmFtZTogcHJvZHVjdE5hbWUsCiAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBpbnN0YW5jZUlkZW50aWZpZXIKICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBjaGVja2VkOiB0aGlzLnN0YXRlLnVzZXJBY2tub3dsZWRnZWROb0NsdXN0ZXJVdWlkUHJvbXB0LAogICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgdXNlckFja25vd2xlZGdlZE5vQ2x1c3RlclV1aWRQcm9tcHQ6IGUudGFyZ2V0LmNoZWNrZWQKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgICBzaXplOiAicyIKICAgICAgICB9KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0LCB7CiAgICAgICAgb25DbG9zZTogb25DbG9zZSwKICAgICAgICAiYXJpYS1sYWJlbGxlZGJ5IjogImZseW91dFRpdGxlIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0SGVhZGVyLCB7CiAgICAgICAgaGFzQm9yZGVyOiB0cnVlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIHsKICAgICAgICBpZDogImZseW91dFRpdGxlIgogICAgICB9LCB0aXRsZSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEJvZHksIG51bGwsIHRoaXMucmVuZGVyQWN0aXZlU3RlcCgpLCBub0NsdXN0ZXJVdWlkUHJvbXB0KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEZvb3RlciwgewogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBtYXJnaW5Cb3R0b206ICc2NHB4JwogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGp1c3RpZnlDb250ZW50OiAic3BhY2VCZXR3ZWVuIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgICBpY29uVHlwZTogImNyb3NzIiwKICAgICAgICBvbkNsaWNrOiBvbkNsb3NlLAogICAgICAgIGZsdXNoOiAibGVmdCIKICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubWV0cmljYmVhdE1pZ3JhdGlvbi5mbHlvdXQuY2xvc2VCdXR0b25MYWJlbCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0Nsb3NlJwogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCB0aGlzLnJlbmRlckFjdGl2ZVN0ZXBOZXh0QnV0dG9uKCkpKSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZseW91dDsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuRmx5b3V0ID0gRmx5b3V0Ow=="},null]}