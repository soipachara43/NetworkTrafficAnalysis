{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/uptime/public/lib/adapters/framework/new_platform_adapter.js","dependencies":[{"path":"x-pack/legacy/plugins/uptime/public/lib/adapters/framework/new_platform_adapter.js","mtime":1589249553676},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldEtpYmFuYUZyYW1ld29ya0FkYXB0ZXIgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0LWRvbSIpKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfYWxlcnRfdHlwZXMgPSByZXF1aXJlKCIuLi8uLi9hbGVydF90eXBlcyIpOwoKdmFyIF91cHRpbWVfYXBwID0gcmVxdWlyZSgiLi4vLi4vLi4vdXB0aW1lX2FwcCIpOwoKdmFyIF9jYXBhYmlsaXRpZXNfYWRhcHRlciA9IHJlcXVpcmUoIi4vY2FwYWJpbGl0aWVzX2FkYXB0ZXIiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9hcG9sbG9fY2xpZW50X2FkYXB0ZXIgPSByZXF1aXJlKCIuL2Fwb2xsb19jbGllbnRfYWRhcHRlciIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKdmFyIGdldEtpYmFuYUZyYW1ld29ya0FkYXB0ZXIgPSBmdW5jdGlvbiBnZXRLaWJhbmFGcmFtZXdvcmtBZGFwdGVyKGNvcmUsIHBsdWdpbnMpIHsKICB2YXIgY2FwYWJpbGl0aWVzID0gY29yZS5hcHBsaWNhdGlvbi5jYXBhYmlsaXRpZXMsCiAgICAgIF9jb3JlJGNocm9tZSA9IGNvcmUuY2hyb21lLAogICAgICBzZXRCYWRnZSA9IF9jb3JlJGNocm9tZS5zZXRCYWRnZSwKICAgICAgc2V0SGVscEV4dGVuc2lvbiA9IF9jb3JlJGNocm9tZS5zZXRIZWxwRXh0ZW5zaW9uLAogICAgICBfY29yZSRkb2NMaW5rcyA9IGNvcmUuZG9jTGlua3MsCiAgICAgIERPQ19MSU5LX1ZFUlNJT04gPSBfY29yZSRkb2NMaW5rcy5ET0NfTElOS19WRVJTSU9OLAogICAgICBFTEFTVElDX1dFQlNJVEVfVVJMID0gX2NvcmUkZG9jTGlua3MuRUxBU1RJQ19XRUJTSVRFX1VSTCwKICAgICAgYmFzZVBhdGggPSBjb3JlLmh0dHAuYmFzZVBhdGgsCiAgICAgIGkxOG4gPSBjb3JlLmkxOG47CiAgdmFyIGF1dG9jb21wbGV0ZSA9IHBsdWdpbnMuZGF0YS5hdXRvY29tcGxldGUsCiAgICAgIHRyaWdnZXJzX2FjdGlvbnNfdWkgPSBwbHVnaW5zLnRyaWdnZXJzX2FjdGlvbnNfdWk7CgogIF9hbGVydF90eXBlcy5hbGVydFR5cGVJbml0aWFsaXplcnMuZm9yRWFjaChmdW5jdGlvbiAoaW5pdCkgewogICAgcmV0dXJuIHRyaWdnZXJzX2FjdGlvbnNfdWkuYWxlcnRUeXBlUmVnaXN0cnkucmVnaXN0ZXIoaW5pdCh7CiAgICAgIGF1dG9jb21wbGV0ZTogYXV0b2NvbXBsZXRlCiAgICB9KSk7CiAgfSk7CgogIHZhciBicmVhZGNydW1icyA9IFtdOwogIGNvcmUuY2hyb21lLmdldEJyZWFkY3J1bWJzJCgpLnN1YnNjcmliZShmdW5jdGlvbiAobmV4dEJyZWFkY3J1bWJzKSB7CiAgICBicmVhZGNydW1icyA9IG5leHRCcmVhZGNydW1icyB8fCBbXTsKICB9KTsKCiAgdmFyIF9nZXRJbnRlZ3JhdGVkQXBwQXZhaSA9ICgwLCBfY2FwYWJpbGl0aWVzX2FkYXB0ZXIuZ2V0SW50ZWdyYXRlZEFwcEF2YWlsYWJpbGl0eSkoY2FwYWJpbGl0aWVzLCBfY29uc3RhbnRzLklOVEVHUkFURURfU09MVVRJT05TKSwKICAgICAgYXBtID0gX2dldEludGVncmF0ZWRBcHBBdmFpLmFwbSwKICAgICAgaW5mcmFzdHJ1Y3R1cmUgPSBfZ2V0SW50ZWdyYXRlZEFwcEF2YWkuaW5mcmFzdHJ1Y3R1cmUsCiAgICAgIGxvZ3MgPSBfZ2V0SW50ZWdyYXRlZEFwcEF2YWkubG9nczsKCiAgdmFyIGNhblNhdmUgPSAoMCwgX2xvZGFzaC5nZXQpKGNhcGFiaWxpdGllcywgJ3VwdGltZS5zYXZlJywgZmFsc2UpOwogIHZhciBwcm9wcyA9IHsKICAgIGJhc2VQYXRoOiBiYXNlUGF0aC5nZXQoKSwKICAgIGNhblNhdmU6IGNhblNhdmUsCiAgICBjbGllbnQ6ICgwLCBfYXBvbGxvX2NsaWVudF9hZGFwdGVyLmNyZWF0ZUFwb2xsb0NsaWVudCkoIiIuY29uY2F0KGJhc2VQYXRoLmdldCgpLCAiL2FwaS91cHRpbWUvZ3JhcGhxbCIpLCAndHJ1ZScpLAogICAgY29yZTogY29yZSwKICAgIGRhcmtNb2RlOiBjb3JlLnVpU2V0dGluZ3MuZ2V0KF9jb25zdGFudHMuREVGQVVMVF9EQVJLX01PREUpLAogICAgY29tbW9ubHlVc2VkUmFuZ2VzOiBjb3JlLnVpU2V0dGluZ3MuZ2V0KF9jb25zdGFudHMuREVGQVVMVF9USU1FUElDS0VSX1FVSUNLX1JBTkdFUyksCiAgICBpMThuOiBpMThuLAogICAgaXNBcG1BdmFpbGFibGU6IGFwbSwKICAgIGlzSW5mcmFBdmFpbGFibGU6IGluZnJhc3RydWN0dXJlLAogICAgaXNMb2dzQXZhaWxhYmxlOiBsb2dzLAogICAga2liYW5hQnJlYWRjcnVtYnM6IGJyZWFkY3J1bWJzLAogICAgcGx1Z2luczogcGx1Z2lucywKICAgIHJlbmRlckdsb2JhbEhlbHBDb250cm9sczogZnVuY3Rpb24gcmVuZGVyR2xvYmFsSGVscENvbnRyb2xzKCkgewogICAgICByZXR1cm4gc2V0SGVscEV4dGVuc2lvbih7CiAgICAgICAgYXBwTmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnVwdGltZS5oZWFkZXIuYXBwTmFtZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVXB0aW1lJwogICAgICAgIH0pLAogICAgICAgIGxpbmtzOiBbewogICAgICAgICAgbGlua1R5cGU6ICdkb2N1bWVudGF0aW9uJywKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChFTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4va2liYW5hLyIpLmNvbmNhdChET0NfTElOS19WRVJTSU9OLCAiL3hwYWNrLXVwdGltZS5odG1sIikKICAgICAgICB9LCB7CiAgICAgICAgICBsaW5rVHlwZTogJ2Rpc2N1c3MnLAogICAgICAgICAgaHJlZjogJ2h0dHBzOi8vZGlzY3Vzcy5lbGFzdGljLmNvL2MvdXB0aW1lJwogICAgICAgIH1dCiAgICAgIH0pOwogICAgfSwKICAgIHJvdXRlckJhc2VuYW1lOiBiYXNlUGF0aC5wcmVwZW5kKF9jb25zdGFudHMuUExVR0lOLlJPVVRFUl9CQVNFX05BTUUpLAogICAgc2V0QmFkZ2U6IHNldEJhZGdlLAogICAgc2V0QnJlYWRjcnVtYnM6IGNvcmUuY2hyb21lLnNldEJyZWFkY3J1bWJzCiAgfTsKICByZXR1cm4gewogICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVuZGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShlbGVtZW50KSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgX3JlYWN0RG9tLmRlZmF1bHQucmVuZGVyKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3VwdGltZV9hcHAuVXB0aW1lQXBwLCBwcm9wcyksIGVsZW1lbnQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcmVuZGVyKF94KSB7CiAgICAgICAgcmV0dXJuIF9yZW5kZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlbmRlcjsKICAgIH0oKQogIH07Cn07CgpleHBvcnRzLmdldEtpYmFuYUZyYW1ld29ya0FkYXB0ZXIgPSBnZXRLaWJhbmFGcmFtZXdvcmtBZGFwdGVyOw=="},null]}