{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/components/map_listing.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/components/map_listing.js","mtime":1589249552392},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1hcExpc3RpbmcgPSBleHBvcnRzLkVNUFRZX0ZJTFRFUiA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9ub3RpZnkgPSByZXF1aXJlKCJ1aS9ub3RpZnkiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2hlbHBfbWVudV91dGlsID0gcmVxdWlyZSgiLi4vaGVscF9tZW51X3V0aWwiKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgRU1QVFlfRklMVEVSID0gJyc7CmV4cG9ydHMuRU1QVFlfRklMVEVSID0gRU1QVFlfRklMVEVSOwoKdmFyIE1hcExpc3RpbmcgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKE1hcExpc3RpbmcsIF9SZWFjdCRDb21wb25lbnQpOwoKICBmdW5jdGlvbiBNYXBMaXN0aW5nKCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYXBMaXN0aW5nKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE1hcExpc3RpbmcpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHsKICAgICAgaGFzSW5pdGlhbEZldGNoUmV0dXJuZWQ6IGZhbHNlLAogICAgICBpc0ZldGNoaW5nSXRlbXM6IGZhbHNlLAogICAgICBzaG93RGVsZXRlTW9kYWw6IGZhbHNlLAogICAgICBzaG93TGltaXRFcnJvcjogZmFsc2UsCiAgICAgIGZpbHRlcjogRU1QVFlfRklMVEVSLAogICAgICBpdGVtczogW10sCiAgICAgIHNlbGVjdGVkSWRzOiBbXSwKICAgICAgcGFnZTogMCwKICAgICAgcGVyUGFnZTogMjAKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImRlYm91bmNlZEZldGNoIiwgX2xvZGFzaC5kZWZhdWx0LmRlYm91bmNlKAogICAgLyojX19QVVJFX18qLwogICAgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZmlsdGVyKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmZpbmQoZmlsdGVyKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGlzIGNoZWNrIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBzZWFyY2ggcmVzdWx0cyBjb21lIGJhY2sgaW4gYSBkaWZmZXJlbnQKICAgICAgICAgICAgICAgIC8vIG9yZGVyIHRoYW4gdGhleSB3ZXJlIHNlbnQgb3V0LiBPbmx5IGxvYWQgcmVzdWx0cyBmb3IgdGhlIG1vc3QgcmVjZW50IHNlYXJjaC4KICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIgPT09IF90aGlzLnN0YXRlLmZpbHRlcikgewogICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgaGFzSW5pdGlhbEZldGNoUmV0dXJuZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZ0l0ZW1zOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBpdGVtczogcmVzcG9uc2UuaGl0cywKICAgICAgICAgICAgICAgICAgICB0b3RhbEl0ZW1zOiByZXNwb25zZS50b3RhbCwKICAgICAgICAgICAgICAgICAgICBzaG93TGltaXRFcnJvcjogcmVzcG9uc2UudG90YWwgPiBfdGhpcy5wcm9wcy5saXN0aW5nTGltaXQKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKSwgMzAwKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZmV0Y2hJdGVtcyIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGlzRmV0Y2hpbmdJdGVtczogdHJ1ZQogICAgICB9LCBfdGhpcy5kZWJvdW5jZWRGZXRjaC5iaW5kKG51bGwsIF90aGlzLnN0YXRlLmZpbHRlcikpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZGVsZXRlU2VsZWN0ZWRJdGVtcyIsCiAgICAvKiNfX1BVUkVfXyovCiAgICBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmRlbGV0ZShfdGhpcy5zdGF0ZS5zZWxlY3RlZElkcyk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNTsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgIF9ub3RpZnkudG9hc3ROb3RpZmljYXRpb25zLmFkZERhbmdlcih7CiAgICAgICAgICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubWFwTGlzdGluZy51bmFibGVUb0RlbGV0ZVRvYXN0VGl0bGUnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVW5hYmxlIHRvIGRlbGV0ZSBtYXAocykiCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHRleHQ6ICIiLmNvbmNhdChfY29udGV4dDIudDApCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgX3RoaXMuZmV0Y2hJdGVtcygpOwoKICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICBzZWxlY3RlZElkczogW10KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgX3RoaXMuY2xvc2VEZWxldGVNb2RhbCgpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDVdXSk7CiAgICB9KSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNsb3NlRGVsZXRlTW9kYWwiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBzaG93RGVsZXRlTW9kYWw6IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib3BlbkRlbGV0ZU1vZGFsIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2hvd0RlbGV0ZU1vZGFsOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25UYWJsZUNoYW5nZSIsIGZ1bmN0aW9uIChfcmVmMykgewogICAgICB2YXIgcGFnZSA9IF9yZWYzLnBhZ2UsCiAgICAgICAgICBfcmVmMyRzb3J0ID0gX3JlZjMuc29ydCwKICAgICAgICAgIHNvcnQgPSBfcmVmMyRzb3J0ID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJHNvcnQ7CiAgICAgIHZhciBwYWdlSW5kZXggPSBwYWdlLmluZGV4LAogICAgICAgICAgcGFnZVNpemUgPSBwYWdlLnNpemU7CiAgICAgIHZhciBzb3J0RmllbGQgPSBzb3J0LmZpZWxkLAogICAgICAgICAgc29ydERpcmVjdGlvbiA9IHNvcnQuZGlyZWN0aW9uOyAvLyAzcmQgc29ydGluZyBzdGF0ZSB0aGF0IGlzIG5vdCBjYXB0dXJlZCBieSBzb3J0IC0gbmF0aXZlIG9yZGVyIChubyBzb3J0KQogICAgICAvLyB3aGVuIHN3aXRjaGluZyBmcm9tIGRlc2MgdG8gYXNjIGZvciB0aGUgc2FtZSBmaWVsZCAtIHVzZSBuYXRpdmUgb3JkZXIKCiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zb3J0RmllbGQgPT09IHNvcnRGaWVsZCAmJiBfdGhpcy5zdGF0ZS5zb3J0RGlyZWN0aW9uID09PSAnZGVzYycgJiYgc29ydERpcmVjdGlvbiA9PT0gJ2FzYycpIHsKICAgICAgICBzb3J0RmllbGQgPSBudWxsOwogICAgICAgIHNvcnREaXJlY3Rpb24gPSBudWxsOwogICAgICB9CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgcGFnZTogcGFnZUluZGV4LAogICAgICAgIHBlclBhZ2U6IHBhZ2VTaXplLAogICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkLAogICAgICAgIHNvcnREaXJlY3Rpb246IHNvcnREaXJlY3Rpb24KICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnZXRQYWdlT2ZJdGVtcyIsIGZ1bmN0aW9uICgpIHsKICAgICAgLy8gZG8gbm90IHNvcnQgb3JpZ2luYWwgbGlzdCB0byBwcmVzZXJ2ZSBlbGFzdGljc2VhcmNoIHJhbmtpbmcgb3JkZXIKICAgICAgdmFyIGl0ZW1zQ29weSA9IF90aGlzLnN0YXRlLml0ZW1zLnNsaWNlKCk7CgogICAgICBpZiAoX3RoaXMuc3RhdGUuc29ydEZpZWxkKSB7CiAgICAgICAgaXRlbXNDb3B5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHZhciBmaWVsZEEgPSBfbG9kYXNoLmRlZmF1bHQuZ2V0KGEsIF90aGlzLnN0YXRlLnNvcnRGaWVsZCwgJycpOwoKICAgICAgICAgIHZhciBmaWVsZEIgPSBfbG9kYXNoLmRlZmF1bHQuZ2V0KGIsIF90aGlzLnN0YXRlLnNvcnRGaWVsZCwgJycpOwoKICAgICAgICAgIHZhciBvcmRlciA9IDE7CgogICAgICAgICAgaWYgKF90aGlzLnN0YXRlLnNvcnREaXJlY3Rpb24gPT09ICdkZXNjJykgewogICAgICAgICAgICBvcmRlciA9IC0xOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBvcmRlciAqIGZpZWxkQS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoZmllbGRCLnRvTG93ZXJDYXNlKCkpOwogICAgICAgIH0pOwogICAgICB9IC8vIElmIGJlZ2luIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbGVuZ3RoIG9mIHRoZSBzZXF1ZW5jZSwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQuCgoKICAgICAgdmFyIHN0YXJ0SW5kZXggPSBfdGhpcy5zdGF0ZS5wYWdlICogX3RoaXMuc3RhdGUucGVyUGFnZTsgLy8gSWYgZW5kIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbGVuZ3RoIG9mIHRoZSBzZXF1ZW5jZSwgc2xpY2UgZXh0cmFjdHMgdGhyb3VnaCB0byB0aGUgZW5kIG9mIHRoZSBzZXF1ZW5jZSAoYXJyLmxlbmd0aCkuCgogICAgICB2YXIgbGFzdEluZGV4ID0gc3RhcnRJbmRleCArIF90aGlzLnN0YXRlLnBlclBhZ2U7CiAgICAgIHJldHVybiBpdGVtc0NvcHkuc2xpY2Uoc3RhcnRJbmRleCwgbGFzdEluZGV4KTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhNYXBMaXN0aW5nLCBbewogICAga2V5OiAiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHsKICAgICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsVW5tb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlOwogICAgICB0aGlzLmRlYm91bmNlZEZldGNoLmNhbmNlbCgpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHsKICAgICAgdGhpcy5mZXRjaEl0ZW1zKCk7CiAgICAgICgwLCBfaGVscF9tZW51X3V0aWwuYWRkSGVscE1lbnVUb0FwcENocm9tZSkoX2Nocm9tZS5kZWZhdWx0KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoYXNOb0l0ZW1zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNOb0l0ZW1zKCkgewogICAgICBpZiAoIXRoaXMuc3RhdGUuaXNGZXRjaGluZ0l0ZW1zICYmIHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoID09PSAwICYmICF0aGlzLnN0YXRlLmZpbHRlcikgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQ29uZmlybURlbGV0ZU1vZGFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDb25maXJtRGVsZXRlTW9kYWwoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpT3ZlcmxheU1hc2ssIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb25maXJtTW9kYWwsIHsKICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubWFwTGlzdGluZy5kZWxldGVTZWxlY3RlZEl0ZW1zVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0RlbGV0ZSBzZWxlY3RlZCBpdGVtcz8nCiAgICAgICAgfSksCiAgICAgICAgb25DYW5jZWw6IHRoaXMuY2xvc2VEZWxldGVNb2RhbCwKICAgICAgICBvbkNvbmZpcm06IHRoaXMuZGVsZXRlU2VsZWN0ZWRJdGVtcywKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5tYXBMaXN0aW5nLmNhbmNlbFRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDYW5jZWwnCiAgICAgICAgfSksCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcExpc3RpbmcuZGVsZXRlVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0RlbGV0ZScKICAgICAgICB9KSwKICAgICAgICBkZWZhdWx0Rm9jdXNlZEJ1dHRvbjogImNhbmNlbCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLm1hcExpc3RpbmcuZGVsZXRlV2FybmluZyIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgY2FuJ3QgcmVjb3ZlciBkZWxldGVkIGl0ZW1zLiIKICAgICAgfSkpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyTGlzdGluZ0xpbWl0V2FybmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGlzdGluZ0xpbWl0V2FybmluZygpIHsKICAgICAgaWYgKHRoaXMuc3RhdGUuc2hvd0xpbWl0RXJyb3IpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNhbGxPdXQsIHsKICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5tYXBMaXN0aW5nLmxpbWl0RXhjZWVkZWRUaXRsZScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMaXN0aW5nIGxpbWl0IGV4Y2VlZGVkJwogICAgICAgICAgfSksCiAgICAgICAgICBjb2xvcjogIndhcm5pbmciLAogICAgICAgICAgaWNvblR5cGU6ICJoZWxwIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLm1hcExpc3RpbmcubGltaXRIZWxwRGVzY3JpcHRpb24iLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgaGF2ZSB7dG90YWxJdGVtc30gaXRlbXMsIGJ1dCB5b3VyIDxzdHJvbmc+bGlzdGluZ0xpbWl0PC9zdHJvbmc+IHNldHRpbmcgcHJldmVudHMgdGhlIHRhYmxlIGJlbG93IGZyb20gZGlzcGxheWluZyBtb3JlIHRoYW4ge2xpc3RpbmdMaW1pdH0uIFlvdSBjYW4gY2hhbmdlIHRoaXMgc2V0dGluZyB1bmRlciAiLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIHRvdGFsSXRlbXM6IHRoaXMuc3RhdGUudG90YWxJdGVtcywKICAgICAgICAgICAgbGlzdGluZ0xpbWl0OiB0aGlzLnByb3BzLmxpc3RpbmdMaW1pdAogICAgICAgICAgfQogICAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgaHJlZjogIiMvbWFuYWdlbWVudC9raWJhbmEvc2V0dGluZ3MiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2subWFwcy5tYXBMaXN0aW5nLmFkdmFuY2VkU2V0dGluZ3NMaW5rVGV4dCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkFkdmFuY2VkIFNldHRpbmdzIgogICAgICAgIH0pKSwgIi4iKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICAgIHNpemU6ICJtIgogICAgICAgIH0pKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlck5vUmVzdWx0c01lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck5vUmVzdWx0c01lc3NhZ2UoKSB7CiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRmV0Y2hpbmdJdGVtcykgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuaGFzTm9JdGVtcygpKSB7CiAgICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcExpc3Rpbmcubm9JdGVtc0Rlc2NyaXB0aW9uJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMb29rcyBsaWtlIHlvdSBkb24ndCBoYXZlIGFueSBtYXBzLiBDbGljayB0aGUgY3JlYXRlIGJ1dHRvbiB0byBjcmVhdGUgb25lLiIKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcExpc3Rpbmcubm9NYXRjaERlc2NyaXB0aW9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTm8gaXRlbXMgbWF0Y2hlZCB5b3VyIHNlYXJjaC4nCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclNlYXJjaEJhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyU2VhcmNoQmFyKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBkZWxldGVCdG47CgogICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZElkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgZGVsZXRlQnRuID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBncm93OiBmYWxzZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub3BlbkRlbGV0ZU1vZGFsLAogICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImRlbGV0ZVNlbGVjdGVkSXRlbXMiLAogICAgICAgICAga2V5OiAiZGVsZXRlIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1hcHMubWFwTGlzdGluZy5kZWxldGVTZWxlY3RlZEJ1dHRvbkxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVsZXRlIHNlbGVjdGVkIgogICAgICAgIH0pKSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCBudWxsLCBkZWxldGVCdG4sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkU2VhcmNoLCB7CiAgICAgICAgImFyaWEtbGFiZWwiOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5tYXBMaXN0aW5nLnNlYXJjaEFyaWFMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRmlsdGVyIGl0ZW1zJwogICAgICAgIH0pLAogICAgICAgIHBsYWNlaG9sZGVyOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5tYXBMaXN0aW5nLnNlYXJjaFBsYWNlaG9sZGVyJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTZWFyY2guLi4nCiAgICAgICAgfSksCiAgICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmZpbHRlciwKICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsKICAgICAgICAgICAgZmlsdGVyOiBlLnRhcmdldC52YWx1ZQogICAgICAgICAgfSwgX3RoaXMyLmZldGNoSXRlbXMpOwogICAgICAgIH0sCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNlYXJjaEZpbHRlciIKICAgICAgfSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJUYWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyVGFibGUoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHRhYmxlQ29sdW1ucyA9IFt7CiAgICAgICAgZmllbGQ6ICd0aXRsZScsCiAgICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubWFwTGlzdGluZy50aXRsZUZpZWxkVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RpdGxlJwogICAgICAgIH0pLAogICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGZpZWxkLCByZWNvcmQpIHsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICBocmVmOiAiIy9tYXAvIi5jb25jYXQocmVjb3JkLmlkKSwKICAgICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogIm1hcExpc3RpbmdUaXRsZUxpbmstIi5jb25jYXQocmVjb3JkLnRpdGxlLnNwbGl0KCcgJykuam9pbignLScpKQogICAgICAgICAgfSwgZmllbGQpOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnZGVzY3JpcHRpb24nLAogICAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcExpc3RpbmcuZGVzY3JpcHRpb25GaWVsZFRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEZXNjcmlwdGlvbicKICAgICAgICB9KSwKICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfV07CiAgICAgIHZhciBwYWdpbmF0aW9uID0gewogICAgICAgIHBhZ2VJbmRleDogdGhpcy5zdGF0ZS5wYWdlLAogICAgICAgIHBhZ2VTaXplOiB0aGlzLnN0YXRlLnBlclBhZ2UsCiAgICAgICAgdG90YWxJdGVtQ291bnQ6IHRoaXMuc3RhdGUuaXRlbXMubGVuZ3RoLAogICAgICAgIHBhZ2VTaXplT3B0aW9uczogWzEwLCAyMCwgNTBdCiAgICAgIH07CiAgICAgIHZhciBzZWxlY3Rpb24gPSBmYWxzZTsKCiAgICAgIGlmICghdGhpcy5wcm9wcy5yZWFkT25seSkgewogICAgICAgIHNlbGVjdGlvbiA9IHsKICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiBvblNlbGVjdGlvbkNoYW5nZShzZWxlY3Rpb24pIHsKICAgICAgICAgICAgX3RoaXMzLnNldFN0YXRlKHsKICAgICAgICAgICAgICBzZWxlY3RlZElkczogc2VsZWN0aW9uLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIHNvcnRpbmcgPSB7fTsKCiAgICAgIGlmICh0aGlzLnN0YXRlLnNvcnRGaWVsZCkgewogICAgICAgIHNvcnRpbmcuc29ydCA9IHsKICAgICAgICAgIGZpZWxkOiB0aGlzLnN0YXRlLnNvcnRGaWVsZCwKICAgICAgICAgIGRpcmVjdGlvbjogdGhpcy5zdGF0ZS5zb3J0RGlyZWN0aW9uCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIGl0ZW1zID0gdGhpcy5zdGF0ZS5pdGVtcy5sZW5ndGggPT09IDAgPyBbXSA6IHRoaXMuZ2V0UGFnZU9mSXRlbXMoKTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYXNpY1RhYmxlLCB7CiAgICAgICAgaXRlbUlkOiAnaWQnLAogICAgICAgIGl0ZW1zOiBpdGVtcywKICAgICAgICBsb2FkaW5nOiB0aGlzLnN0YXRlLmlzRmV0Y2hpbmdJdGVtcywKICAgICAgICBjb2x1bW5zOiB0YWJsZUNvbHVtbnMsCiAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24sCiAgICAgICAgbm9JdGVtc01lc3NhZ2U6IHRoaXMucmVuZGVyTm9SZXN1bHRzTWVzc2FnZSgpLAogICAgICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb24sCiAgICAgICAgc29ydGluZzogc29ydGluZywKICAgICAgICBvbkNoYW5nZTogdGhpcy5vblRhYmxlQ2hhbmdlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckxpc3RpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxpc3RpbmcoKSB7CiAgICAgIHZhciBjcmVhdGVCdXR0b247CgogICAgICBpZiAoIXRoaXMucHJvcHMucmVhZE9ubHkpIHsKICAgICAgICBjcmVhdGVCdXR0b24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgICAgICBocmVmOiAiIy9tYXAiLAogICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogIm5ld01hcExpbmsiLAogICAgICAgICAgZmlsbDogdHJ1ZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLm1hcHMubWFwTGlzdGluZy5jcmVhdGVNYXBCdXR0b25MYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkNyZWF0ZSBtYXAiCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgdGhpcy5zdGF0ZS5zaG93RGVsZXRlTW9kYWwgJiYgdGhpcy5yZW5kZXJDb25maXJtRGVsZXRlTW9kYWwoKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGp1c3RpZnlDb250ZW50OiAic3BhY2VCZXR3ZWVuIiwKICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidG9wLW5hdiIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgc2l6ZTogImwiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgxIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1hcHMubWFwTGlzdGluZy5saXN0aW5nVGFibGVUaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJNYXBzIgogICAgICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgY3JlYXRlQnV0dG9uKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIHRoaXMucmVuZGVyTGlzdGluZ0xpbWl0V2FybmluZygpLCB0aGlzLnJlbmRlclNlYXJjaEJhcigpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCB0aGlzLnJlbmRlclRhYmxlKCkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclBhZ2VDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQYWdlQ29udGVudCgpIHsKICAgICAgaWYgKCF0aGlzLnN0YXRlLmhhc0luaXRpYWxGZXRjaFJldHVybmVkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCB7CiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uOiAiY2VudGVyIgogICAgICB9LCB0aGlzLnJlbmRlckxpc3RpbmcoKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZSwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtYXBzTGlzdGluZ1BhZ2UiLAogICAgICAgIHJlc3RyaWN0V2lkdGg6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VCb2R5LCBudWxsLCB0aGlzLnJlbmRlclBhZ2VDb250ZW50KCkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBNYXBMaXN0aW5nOwp9KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7CgpleHBvcnRzLk1hcExpc3RpbmcgPSBNYXBMaXN0aW5nOwpNYXBMaXN0aW5nLnByb3BUeXBlcyA9IHsKICByZWFkT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCwKICBmaW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIGRlbGV0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBsaXN0aW5nTGltaXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZAp9Ow=="},null]}