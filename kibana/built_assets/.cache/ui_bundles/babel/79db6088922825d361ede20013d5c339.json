{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/sections/home/auto_follow_pattern_list/components/detail_panel/detail_panel.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/sections/home/auto_follow_pattern_list/components/detail_panel/detail_panel.js","mtime":1589249552196},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRldGFpbFBhbmVsID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2luZGV4X21hbmFnZW1lbnQvcHVibGljIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9jb21wb25lbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgRGV0YWlsUGFuZWwgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKERldGFpbFBhbmVsLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gRGV0YWlsUGFuZWwoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV0YWlsUGFuZWwpOwoKICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRGV0YWlsUGFuZWwpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKERldGFpbFBhbmVsLCBbewogICAga2V5OiAicmVuZGVyQXV0b0ZvbGxvd1BhdHRlcm4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckF1dG9Gb2xsb3dQYXR0ZXJuKF9yZWYpIHsKICAgICAgdmFyIGZvbGxvd0luZGV4UGF0dGVyblByZWZpeCA9IF9yZWYuZm9sbG93SW5kZXhQYXR0ZXJuUHJlZml4LAogICAgICAgICAgZm9sbG93SW5kZXhQYXR0ZXJuU3VmZml4ID0gX3JlZi5mb2xsb3dJbmRleFBhdHRlcm5TdWZmaXgsCiAgICAgICAgICByZW1vdGVDbHVzdGVyID0gX3JlZi5yZW1vdGVDbHVzdGVyLAogICAgICAgICAgbGVhZGVySW5kZXhQYXR0ZXJucyA9IF9yZWYubGVhZGVySW5kZXhQYXR0ZXJucywKICAgICAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic2VjdGlvbiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3QsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3RUaXRsZSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgc2l6ZTogInhzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxQYW5lbC5zdGF0dXNMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTdGF0dXMiCiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3REZXNjcmlwdGlvbiwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJzdGF0dXMiCiAgICAgIH0sICFhY3RpdmUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSGVhbHRoLCB7CiAgICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxQYW5lbC5wYXVzZWRTdGF0dXMiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUGF1c2VkIgogICAgICB9KSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSGVhbHRoLCB7CiAgICAgICAgY29sb3I6ICJzdWNjZXNzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxQYW5lbC5hY3RpdmVTdGF0dXMiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQWN0aXZlIgogICAgICB9KSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNlY3Rpb24iLCB7CiAgICAgICAgImFyaWEtbGFiZWxsZWRieSI6ICJjY3JBdXRvRm9sbG93UGF0dGVybkRldGFpbFNldHRpbmdzVGl0bGUiLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJzZXR0aW5nc1NlY3Rpb24iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIHsKICAgICAgICBpZDogImNjckF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsU2V0dGluZ3NUaXRsZSIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsUGFuZWwuc3RhdHVzVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2V0dGluZ3MiCiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3QsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAic2V0dGluZ3NWYWx1ZXMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaXB0aW9uTGlzdFRpdGxlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hdXRvRm9sbG93UGF0dGVybkRldGFpbFBhbmVsLnJlbW90ZUNsdXN0ZXJMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSZW1vdGUgY2x1c3RlciIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaXB0aW9uTGlzdERlc2NyaXB0aW9uLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJlbW90ZUNsdXN0ZXIiCiAgICAgIH0sIHJlbW90ZUNsdXN0ZXIpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpcHRpb25MaXN0VGl0bGUsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJ4cyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsUGFuZWwubGVhZGVyUGF0dGVybnNMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMZWFkZXIgcGF0dGVybnMiCiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3REZXNjcmlwdGlvbiwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsZWFkZXJJbmRleFBhdHRlcm5zIgogICAgICB9LCBsZWFkZXJJbmRleFBhdHRlcm5zLmpvaW4oJywgJykpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaXB0aW9uTGlzdFRpdGxlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hdXRvRm9sbG93UGF0dGVybkRldGFpbFBhbmVsLnByZWZpeExhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlByZWZpeCIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaXB0aW9uTGlzdERlc2NyaXB0aW9uLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInBhdHRlcm5QcmVmaXgiCiAgICAgIH0sIGZvbGxvd0luZGV4UGF0dGVyblByZWZpeCB8fCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJlbSIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hdXRvRm9sbG93UGF0dGVybkRldGFpbFBhbmVsLnByZWZpeEVtcHR5VmFsdWUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTm8gcHJlZml4IgogICAgICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpcHRpb25MaXN0VGl0bGUsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJ4cyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsUGFuZWwuc3VmZml4TGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU3VmZml4IgogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpcHRpb25MaXN0RGVzY3JpcHRpb24sIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicGF0dGVyblN1ZmZpeCIKICAgICAgfSwgZm9sbG93SW5kZXhQYXR0ZXJuU3VmZml4IHx8IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImVtIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsUGFuZWwuc3VmZml4RW1wdHlWYWx1ZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJObyBzdWZmaXgiCiAgICAgIH0pKSkpKSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJJbmRpY2VzUHJldmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVySW5kaWNlc1ByZXZpZXcocHJlZml4LCBzdWZmaXgsIGxlYWRlckluZGV4UGF0dGVybnMpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNlY3Rpb24iLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImluZGljZXNQcmV2aWV3U2VjdGlvbiIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tcG9uZW50cy5BdXRvRm9sbG93UGF0dGVybkluZGljZXNQcmV2aWV3LCB7CiAgICAgICAgcHJlZml4OiBwcmVmaXgsCiAgICAgICAgc3VmZml4OiBzdWZmaXgsCiAgICAgICAgbGVhZGVySW5kZXhQYXR0ZXJuczogbGVhZGVySW5kZXhQYXR0ZXJucwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQXV0b0ZvbGxvd1BhdHRlcm5Ob3RGb3VuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQXV0b0ZvbGxvd1BhdHRlcm5Ob3RGb3VuZCgpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRCb2R5LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJmbGV4U3RhcnQiLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgICAgIGd1dHRlclNpemU6ICJzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgICAgIHNpemU6ICJtIiwKICAgICAgICB0eXBlOiAiYWxlcnQiLAogICAgICAgIGNvbG9yOiAiZGFuZ2VyIgogICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dENvbG9yLCB7CiAgICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxQYW5lbC5ub3RGb3VuZExhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkF1dG8tZm9sbG93IHBhdHRlcm4gbm90IGZvdW5kIgogICAgICB9KSkpKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckF1dG9Gb2xsb3dQYXR0ZXJuRXJyb3JzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJBdXRvRm9sbG93UGF0dGVybkVycm9ycyhhdXRvRm9sbG93UGF0dGVybikgewogICAgICBpZiAoIWF1dG9Gb2xsb3dQYXR0ZXJuLmVycm9ycy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNlY3Rpb24iLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImVycm9ycyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGp1c3RpZnlDb250ZW50OiAiZmxleFN0YXJ0IiwKICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgICAgICBndXR0ZXJTaXplOiAicyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICB0eXBlOiAiYWxlcnQiLAogICAgICAgIGNvbG9yOiAiZGFuZ2VyIgogICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJzIiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGl0bGVFcnJvcnMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsUGFuZWwucmVjZW50RXJyb3JzVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVjZW50IGVycm9ycyIKICAgICAgfSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgidWwiLCBudWxsLCBhdXRvRm9sbG93UGF0dGVybi5lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvciwgaSkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJsaSIsIHsKICAgICAgICAgIGtleTogaSwKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyZWNlbnRFcnJvciIKICAgICAgICB9LCBlcnJvci5hdXRvRm9sbG93RXhjZXB0aW9uLnJlYXNvbik7CiAgICAgIH0pKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckZseW91dEJvZHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckZseW91dEJvZHkoKSB7CiAgICAgIHZhciBhdXRvRm9sbG93UGF0dGVybiA9IHRoaXMucHJvcHMuYXV0b0ZvbGxvd1BhdHRlcm47CgogICAgICBpZiAoIWF1dG9Gb2xsb3dQYXR0ZXJuKSB7CiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQXV0b0ZvbGxvd1BhdHRlcm5Ob3RGb3VuZCgpOwogICAgICB9CgogICAgICB2YXIgZm9sbG93SW5kZXhQYXR0ZXJuUHJlZml4ID0gYXV0b0ZvbGxvd1BhdHRlcm4uZm9sbG93SW5kZXhQYXR0ZXJuUHJlZml4LAogICAgICAgICAgZm9sbG93SW5kZXhQYXR0ZXJuU3VmZml4ID0gYXV0b0ZvbGxvd1BhdHRlcm4uZm9sbG93SW5kZXhQYXR0ZXJuU3VmZml4LAogICAgICAgICAgbGVhZGVySW5kZXhQYXR0ZXJucyA9IGF1dG9Gb2xsb3dQYXR0ZXJuLmxlYWRlckluZGV4UGF0dGVybnM7CiAgICAgIHZhciBpbmRleE1hbmFnZW1lbnRGaWx0ZXI7CgogICAgICBpZiAoZm9sbG93SW5kZXhQYXR0ZXJuUHJlZml4KSB7CiAgICAgICAgaW5kZXhNYW5hZ2VtZW50RmlsdGVyID0gIm5hbWU6Ii5jb25jYXQoZm9sbG93SW5kZXhQYXR0ZXJuUHJlZml4KTsKICAgICAgfSBlbHNlIGlmIChmb2xsb3dJbmRleFBhdHRlcm5TdWZmaXgpIHsKICAgICAgICBpbmRleE1hbmFnZW1lbnRGaWx0ZXIgPSAibmFtZToiLmNvbmNhdChmb2xsb3dJbmRleFBhdHRlcm5TdWZmaXgpOwogICAgICB9CgogICAgICB2YXIgaW5kZXhNYW5hZ2VtZW50VXJpID0gKDAsIF9wdWJsaWMuZ2V0SW5kZXhMaXN0VXJpKShpbmRleE1hbmFnZW1lbnRGaWx0ZXIpOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEJvZHksIG51bGwsIHRoaXMucmVuZGVyQXV0b0ZvbGxvd1BhdHRlcm4oYXV0b0ZvbGxvd1BhdHRlcm4pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCB0aGlzLnJlbmRlckluZGljZXNQcmV2aWV3KGZvbGxvd0luZGV4UGF0dGVyblByZWZpeCwgZm9sbG93SW5kZXhQYXR0ZXJuU3VmZml4LCBsZWFkZXJJbmRleFBhdHRlcm5zKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJsIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICBocmVmOiBpbmRleE1hbmFnZW1lbnRVcmksCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInZpZXdJbmRleE1hbmFnZW1lbnRMaW5rIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxQYW5lbC52aWV3SW5kaWNlc0xpbmsiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVmlldyB5b3VyIGZvbGxvd2VyIGluZGljZXMgaW4gSW5kZXggTWFuYWdlbWVudCIKICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogImwiCiAgICAgIH0pLCB0aGlzLnJlbmRlckF1dG9Gb2xsb3dQYXR0ZXJuRXJyb3JzKGF1dG9Gb2xsb3dQYXR0ZXJuKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyRmx5b3V0Rm9vdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJGbHlvdXRGb290ZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBhdXRvRm9sbG93UGF0dGVybiA9IF90aGlzJHByb3BzLmF1dG9Gb2xsb3dQYXR0ZXJuLAogICAgICAgICAgY2xvc2VEZXRhaWxQYW5lbCA9IF90aGlzJHByb3BzLmNsb3NlRGV0YWlsUGFuZWw7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0Rm9vdGVyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgICAgIGljb25UeXBlOiAiY3Jvc3MiLAogICAgICAgIGZsdXNoOiAibGVmdCIsCiAgICAgICAgb25DbGljazogY2xvc2VEZXRhaWxQYW5lbCwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY2xvc2VGbHlvdXRCdXR0b24iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5hdXRvRm9sbG93UGF0dGVybkRldGFpbFBhbmVsLmNsb3NlQnV0dG9uTGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ2xvc2UiCiAgICAgIH0pKSksIGF1dG9Gb2xsb3dQYXR0ZXJuICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkF1dG9Gb2xsb3dQYXR0ZXJuQWN0aW9uTWVudSwgewogICAgICAgIGVkaXQ6IHRydWUsCiAgICAgICAgYXJyb3dEaXJlY3Rpb246ICJ1cCIsCiAgICAgICAgcGF0dGVybnM6IFthdXRvRm9sbG93UGF0dGVybl0KICAgICAgfSkpKSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBhdXRvRm9sbG93UGF0dGVybklkID0gX3RoaXMkcHJvcHMyLmF1dG9Gb2xsb3dQYXR0ZXJuSWQsCiAgICAgICAgICBjbG9zZURldGFpbFBhbmVsID0gX3RoaXMkcHJvcHMyLmNsb3NlRGV0YWlsUGFuZWw7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0LCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsIiwKICAgICAgICBvbkNsb3NlOiBjbG9zZURldGFpbFBhbmVsLAogICAgICAgICJhcmlhLWxhYmVsbGVkYnkiOiAiYXV0b0ZvbGxvd1BhdHRlcm5EZXRhaWxzRmx5b3V0VGl0bGUiLAogICAgICAgIHNpemU6ICJtIiwKICAgICAgICBtYXhXaWR0aDogNDAwCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRIZWFkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJtIiwKICAgICAgICBpZDogImF1dG9Gb2xsb3dQYXR0ZXJuRGV0YWlsc0ZseW91dFRpdGxlIiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGl0bGUiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgYXV0b0ZvbGxvd1BhdHRlcm5JZCkpKSwgdGhpcy5yZW5kZXJGbHlvdXRCb2R5KCksIHRoaXMucmVuZGVyRmx5b3V0Rm9vdGVyKCkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERldGFpbFBhbmVsOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKZXhwb3J0cy5EZXRhaWxQYW5lbCA9IERldGFpbFBhbmVsOwoKX2RlZmluZVByb3BlcnR5KERldGFpbFBhbmVsLCAicHJvcFR5cGVzIiwgewogIGFwaVN0YXR1czogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBhdXRvRm9sbG93UGF0dGVybklkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIGF1dG9Gb2xsb3dQYXR0ZXJuOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LAogIGNsb3NlRGV0YWlsUGFuZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKfSk7"},null]}