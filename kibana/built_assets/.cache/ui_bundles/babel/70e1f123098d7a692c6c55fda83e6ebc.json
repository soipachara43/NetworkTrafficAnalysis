{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/discover/np_ready/angular/discover.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/discover/np_ready/angular/discover.js","mtime":1589249549678},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

var _lodash = _interopRequireDefault(require("lodash"));

var _react = _interopRequireDefault(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _moment = _interopRequireDefault(require("moment"));

var _datemath = _interopRequireDefault(require("@elastic/datemath"));

var _i18n = require("@kbn/i18n");

var _discover_state = require("./discover_state");

var _public = require("../../../../../../../plugins/inspector/public");

var _public2 = require("../../../../../../../plugins/saved_objects/public");

var _doc_table = require("./doc_table");

var columnActions = _interopRequireWildcard(require("./doc_table/actions/columns"));

var _discover = _interopRequireDefault(require("./discover.html"));

var _show_open_search_panel = require("../components/top_nav/show_open_search_panel");

var _help_menu_util = require("../components/help_menu/help_menu_util");

require("../components/fetch_error");

var _get_painless_error = require("./get_painless_error");

var _response_handler = require("./response_handler");

var _kibana_services = require("../../kibana_services");

var _breadcrumbs = require("../helpers/breadcrumbs");

var _public3 = require("../../../../../../../plugins/data/public");

var _get_index_pattern_id = require("../helpers/get_index_pattern_id");

var _public4 = require("../../../../../../../plugins/kibana_legacy/public");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _getServices = (0, _kibana_services.getServices)(),
    core = _getServices.core,
    chrome = _getServices.chrome,
    data = _getServices.data,
    history = _getServices.history,
    indexPatterns = _getServices.indexPatterns,
    filterManager = _getServices.filterManager,
    share = _getServices.share,
    timefilter = _getServices.timefilter,
    toastNotifications = _getServices.toastNotifications,
    config = _getServices.uiSettings,
    visualizations = _getServices.visualizations;

var fetchStatuses = {
  UNINITIALIZED: 'uninitialized',
  LOADING: 'loading',
  COMPLETE: 'complete'
};
var app = (0, _kibana_services.getAngularModule)();
app.config(function ($routeProvider) {
  var defaults = {
    requireDefaultIndex: true,
    requireUICapability: 'discover.show',
    k7Breadcrumbs: function k7Breadcrumbs($route, $injector) {
      return $injector.invoke($route.current.params.id ? _breadcrumbs.getSavedSearchBreadcrumbs : _breadcrumbs.getRootBreadcrumbs);
    },
    badge: function badge(uiCapabilities) {
      if (uiCapabilities.discover.save) {
        return undefined;
      }

      return {
        text: _i18n.i18n.translate('kbn.discover.badge.readOnly.text', {
          defaultMessage: 'Read only'
        }),
        tooltip: _i18n.i18n.translate('kbn.discover.badge.readOnly.tooltip', {
          defaultMessage: 'Unable to save searches'
        }),
        iconType: 'glasses'
      };
    }
  };
  $routeProvider.when('/discover/:id?', _objectSpread({}, defaults, {
    template: _discover.default,
    reloadOnSearch: false,
    resolve: {
      savedObjects: function savedObjects($route, Promise) {
        var savedSearchId = $route.current.params.id;
        return (0, _kibana_services.ensureDefaultIndexPattern)(core, data, history).then(function () {
          var _getState = (0, _discover_state.getState)({
            history: history
          }),
              appStateContainer = _getState.appStateContainer;

          var _appStateContainer$ge = appStateContainer.getState(),
              index = _appStateContainer$ge.index;

          return Promise.props({
            ip: indexPatterns.getCache().then(function (indexPatternList) {
              /**
               *  In making the indexPattern modifiable it was placed in appState. Unfortunately,
               *  the load order of AppState conflicts with the load order of many other things
               *  so in order to get the name of the index we should use, and to switch to the
               *  default if necessary, we parse the appState with a temporary State object and
               *  then destroy it immediatly after we're done
               *
               *  @type {State}
               */
              var id = (0, _get_index_pattern_id.getIndexPatternId)(index, indexPatternList, config.get('defaultIndex'));
              return Promise.props({
                list: indexPatternList,
                loaded: indexPatterns.get(id),
                stateVal: index,
                stateValFound: !!index && id === index
              });
            }),
            savedSearch: (0, _kibana_services.getServices)().getSavedSearchById(savedSearchId).then(function (savedSearch) {
              if (savedSearchId) {
                chrome.recentlyAccessed.add(savedSearch.getFullPath(), savedSearch.title, savedSearchId);
              }

              return savedSearch;
            }).catch((0, _kibana_services.redirectWhenMissing)({
              history: history,
              mapping: {
                search: '/discover',
                'index-pattern': '/management/kibana/objects/savedSearches/' + $route.current.params.id
              },
              toastNotifications: toastNotifications,
              onBeforeRedirect: function onBeforeRedirect() {
                (0, _kibana_services.getUrlTracker)().setTrackedUrl('/discover');
              }
            }))
          });
        });
      }
    }
  }));
});
app.directive('discoverApp', function () {
  return {
    restrict: 'E',
    controllerAs: 'discoverApp',
    controller: discoverController
  };
});

function discoverController($element, $route, $scope, $timeout, $window, Promise, localStorage, uiCapabilities) {
  var _this = this;

  var isDefaultType = _public3.indexPatterns.isDefault;
  var subscriptions = new _rxjs.Subscription();
  var $fetchObservable = new _rxjs.Subject();
  var inspectorRequest;
  var savedSearch = $route.current.locals.savedObjects.savedSearch;
  $scope.searchSource = savedSearch.searchSource;
  $scope.indexPattern = resolveIndexPatternLoading(); //used for functional testing

  $scope.fetchCounter = 0;

  var getTimeField = function getTimeField() {
    return isDefaultType($scope.indexPattern) ? $scope.indexPattern.timeFieldName : undefined;
  };

  var _getState2 = (0, _discover_state.getState)({
    defaultAppState: getStateDefaults(),
    storeInSessionStorage: config.get('state:storeInSessionStorage'),
    history: history
  }),
      appStateContainer = _getState2.appStateContainer,
      startStateSync = _getState2.startSync,
      stopStateSync = _getState2.stopSync,
      setAppState = _getState2.setAppState,
      replaceUrlAppState = _getState2.replaceUrlAppState,
      isAppStateDirty = _getState2.isAppStateDirty,
      kbnUrlStateStorage = _getState2.kbnUrlStateStorage,
      getPreviousAppState = _getState2.getPreviousAppState,
      resetInitialAppState = _getState2.resetInitialAppState;

  if (appStateContainer.getState().index !== $scope.indexPattern.id) {
    //used index pattern is different than the given by url/state which is invalid
    setAppState({
      index: $scope.indexPattern.id
    });
  }

  $scope.state = _objectSpread({}, appStateContainer.getState()); // syncs `_g` portion of url with query services

  var _syncQueryStateWithUr = (0, _public3.syncQueryStateWithUrl)(data.query, kbnUrlStateStorage),
      stopSyncingGlobalStateWithUrl = _syncQueryStateWithUr.stop; // sync initial app filters from state to filterManager


  filterManager.setAppFilters(_lodash.default.cloneDeep(appStateContainer.getState().filters));
  var stopSyncingQueryAppStateWithStateContainer = (0, _public3.connectToQueryState)(data.query, appStateContainer, {
    filters: _public3.esFilters.FilterStateStore.APP_STATE
  });
  var appStateUnsubscribe = appStateContainer.subscribe(
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(newState) {
      var _splitState, newStatePartial, _splitState2, oldStatePartial;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _splitState = (0, _discover_state.splitState)(newState), newStatePartial = _splitState.state;
              _splitState2 = (0, _discover_state.splitState)(getPreviousAppState()), oldStatePartial = _splitState2.state;

              if (!_lodash.default.isEqual(newStatePartial, oldStatePartial)) {
                $scope.$evalAsync(
                /*#__PURE__*/
                _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee() {
                  var changes;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          $scope.state = _objectSpread({}, newState); // detect changes that should trigger fetching of new data

                          changes = ['interval', 'sort', 'query'].filter(function (prop) {
                            return !_lodash.default.isEqual(newStatePartial[prop], oldStatePartial[prop]);
                          });

                          if (changes.length) {
                            $fetchObservable.next();
                          }

                        case 3:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));
              }

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }()); // this listener is waiting for such a path http://localhost:5601/app/kibana#/discover
  // which could be set through pressing "New" button in top nav or go to "Discover" plugin from the sidebar
  // to reload the page in a right way

  var unlistenHistoryBasePath = history.listen(function (_ref3) {
    var pathname = _ref3.pathname,
        search = _ref3.search,
        hash = _ref3.hash;

    if (!search && !hash && pathname === '/discover') {
      $route.reload();
    }
  });

  $scope.setIndexPattern =
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(id) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return replaceUrlAppState({
                index: id
              });

            case 2:
              $route.reload();

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }(); // update data source when filters update


  subscriptions.add((0, _kibana_services.subscribeWithScope)($scope, filterManager.getUpdates$(), {
    next: function next() {
      $scope.state.filters = filterManager.getAppFilters();
      $scope.updateDataSource();
    }
  }, function (error) {
    return (0, _public4.addFatalError)(core.fatalErrors, error);
  }));
  var inspectorAdapters = {
    requests: new _public.RequestAdapter()
  };

  $scope.timefilterUpdateHandler = function (ranges) {
    timefilter.setTime({
      from: (0, _moment.default)(ranges.from).toISOString(),
      to: (0, _moment.default)(ranges.to).toISOString(),
      mode: 'absolute'
    });
  };

  $scope.intervalOptions = _public3.search.aggs.intervalOptions;
  $scope.minimumVisibleRows = 50;
  $scope.fetchStatus = fetchStatuses.UNINITIALIZED;
  $scope.showSaveQuery = uiCapabilities.discover.saveQuery;
  $scope.$watch(function () {
    return uiCapabilities.discover.saveQuery;
  }, function (newCapability) {
    $scope.showSaveQuery = newCapability;
  });

  $scope.intervalEnabled = function (interval) {
    return interval.val !== 'custom';
  };

  var abortController;
  $scope.$on('$destroy', function () {
    if (abortController) abortController.abort();
    savedSearch.destroy();
    subscriptions.unsubscribe();
    appStateUnsubscribe();
    stopStateSync();
    stopSyncingGlobalStateWithUrl();
    stopSyncingQueryAppStateWithStateContainer();
    unlistenHistoryBasePath();
  });

  var getTopNavLinks = function getTopNavLinks() {
    var newSearch = {
      id: 'new',
      label: _i18n.i18n.translate('kbn.discover.localMenu.localMenu.newSearchTitle', {
        defaultMessage: 'New'
      }),
      description: _i18n.i18n.translate('kbn.discover.localMenu.newSearchDescription', {
        defaultMessage: 'New Search'
      }),
      run: function run() {
        $scope.$evalAsync(function () {
          history.push('/discover');
        });
      },
      testId: 'discoverNewButton'
    };
    var saveSearch = {
      id: 'save',
      label: _i18n.i18n.translate('kbn.discover.localMenu.saveTitle', {
        defaultMessage: 'Save'
      }),
      description: _i18n.i18n.translate('kbn.discover.localMenu.saveSearchDescription', {
        defaultMessage: 'Save Search'
      }),
      testId: 'discoverSaveButton',
      run: function () {
        var _run = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee4() {
          var onSave, saveModal;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  onSave = function onSave(_ref5) {
                    var newTitle = _ref5.newTitle,
                        newCopyOnSave = _ref5.newCopyOnSave,
                        isTitleDuplicateConfirmed = _ref5.isTitleDuplicateConfirmed,
                        onTitleDuplicate = _ref5.onTitleDuplicate;
                    var currentTitle = savedSearch.title;
                    savedSearch.title = newTitle;
                    savedSearch.copyOnSave = newCopyOnSave;
                    var saveOptions = {
                      confirmOverwrite: false,
                      isTitleDuplicateConfirmed: isTitleDuplicateConfirmed,
                      onTitleDuplicate: onTitleDuplicate
                    };
                    return saveDataSource(saveOptions).then(function (response) {
                      // If the save wasn't successful, put the original values back.
                      if (!response.id || response.error) {
                        savedSearch.title = currentTitle;
                      } else {
                        resetInitialAppState();
                      }

                      return response;
                    });
                  };

                  saveModal = _react.default.createElement(_public2.SavedObjectSaveModal, {
                    onSave: onSave,
                    onClose: function onClose() {},
                    title: savedSearch.title,
                    showCopyOnSave: !!savedSearch.id,
                    objectType: "search",
                    description: _i18n.i18n.translate('kbn.discover.localMenu.saveSaveSearchDescription', {
                      defaultMessage: 'Save your Discover search so you can use it in visualizations and dashboards'
                    }),
                    showDescription: false
                  });
                  (0, _public2.showSaveModal)(saveModal, core.i18n.Context);

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function run() {
          return _run.apply(this, arguments);
        }

        return run;
      }()
    };
    var openSearch = {
      id: 'open',
      label: _i18n.i18n.translate('kbn.discover.localMenu.openTitle', {
        defaultMessage: 'Open'
      }),
      description: _i18n.i18n.translate('kbn.discover.localMenu.openSavedSearchDescription', {
        defaultMessage: 'Open Saved Search'
      }),
      testId: 'discoverOpenButton',
      run: function run() {
        (0, _show_open_search_panel.showOpenSearchPanel)({
          makeUrl: function makeUrl(searchId) {
            return "#/discover/".concat(encodeURIComponent(searchId));
          },
          I18nContext: core.i18n.Context
        });
      }
    };
    var shareSearch = {
      id: 'share',
      label: _i18n.i18n.translate('kbn.discover.localMenu.shareTitle', {
        defaultMessage: 'Share'
      }),
      description: _i18n.i18n.translate('kbn.discover.localMenu.shareSearchDescription', {
        defaultMessage: 'Share Search'
      }),
      testId: 'shareTopNavButton',
      run: function () {
        var _run2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee5(anchorElement) {
          var sharingData;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this.getSharingData();

                case 2:
                  sharingData = _context5.sent;
                  share.toggleShareContextMenu({
                    anchorElement: anchorElement,
                    allowEmbed: false,
                    allowShortUrl: uiCapabilities.discover.createShortUrl,
                    shareableUrl: (0, _kibana_services.unhashUrl)(window.location.href),
                    objectId: savedSearch.id,
                    objectType: 'search',
                    sharingData: _objectSpread({}, sharingData, {
                      title: savedSearch.title
                    }),
                    isDirty: !savedSearch.id || isAppStateDirty()
                  });

                case 4:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function run(_x3) {
          return _run2.apply(this, arguments);
        }

        return run;
      }()
    };
    var inspectSearch = {
      id: 'inspect',
      label: _i18n.i18n.translate('kbn.discover.localMenu.inspectTitle', {
        defaultMessage: 'Inspect'
      }),
      description: _i18n.i18n.translate('kbn.discover.localMenu.openInspectorForSearchDescription', {
        defaultMessage: 'Open Inspector for search'
      }),
      testId: 'openInspectorButton',
      run: function run() {
        (0, _kibana_services.getServices)().inspector.open(inspectorAdapters, {
          title: savedSearch.title
        });
      }
    };
    return [newSearch].concat(_toConsumableArray(uiCapabilities.discover.save ? [saveSearch] : []), [openSearch, shareSearch, inspectSearch]);
  };

  $scope.topNavMenu = getTopNavLinks();
  $scope.searchSource.setField('index', $scope.indexPattern).setField('highlightAll', true).setField('version', true); // Even when searching rollups, we want to use the default strategy so that we get back a
  // document-like response.

  $scope.searchSource.setPreferredSearchStrategyId('default'); // searchSource which applies time range

  var timeRangeSearchSource = savedSearch.searchSource.create();

  if (isDefaultType($scope.indexPattern)) {
    timeRangeSearchSource.setField('filter', function () {
      return timefilter.createFilter($scope.indexPattern);
    });
  }

  $scope.searchSource.setParent(timeRangeSearchSource);
  var pageTitleSuffix = savedSearch.id && savedSearch.title ? ": ".concat(savedSearch.title) : '';
  chrome.docTitle.change("Discover".concat(pageTitleSuffix));

  var discoverBreadcrumbsTitle = _i18n.i18n.translate('kbn.discover.discoverBreadcrumbTitle', {
    defaultMessage: 'Discover'
  });

  if (savedSearch.id && savedSearch.title) {
    chrome.setBreadcrumbs([{
      text: discoverBreadcrumbsTitle,
      href: '#/discover'
    }, {
      text: savedSearch.title
    }]);
  } else {
    chrome.setBreadcrumbs([{
      text: discoverBreadcrumbsTitle
    }]);
  }

  $scope.screenTitle = savedSearch.title;

  var getFieldCounts =
  /*#__PURE__*/
  function () {
    var _ref6 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!($scope.fetchStatus === fetchStatuses.COMPLETE)) {
                _context6.next = 2;
                break;
              }

              return _context6.abrupt("return", $scope.fieldCounts);

            case 2:
              _context6.next = 4;
              return new Promise(function (resolve) {
                var unwatch = $scope.$watch('fetchStatus', function (newValue) {
                  if (newValue === fetchStatuses.COMPLETE) {
                    unwatch();
                    resolve($scope.fieldCounts);
                  }
                });
              });

            case 4:
              return _context6.abrupt("return", _context6.sent);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function getFieldCounts() {
      return _ref6.apply(this, arguments);
    };
  }();

  var getSharingDataFields =
  /*#__PURE__*/
  function () {
    var _ref7 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee7(selectedFields, timeFieldName, hideTimeColumn) {
      var fieldCounts, fields;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(selectedFields.length === 1 && selectedFields[0] === '_source')) {
                _context7.next = 5;
                break;
              }

              _context7.next = 3;
              return getFieldCounts();

            case 3:
              fieldCounts = _context7.sent;
              return _context7.abrupt("return", {
                searchFields: null,
                selectFields: _lodash.default.keys(fieldCounts).sort()
              });

            case 5:
              fields = timeFieldName && !hideTimeColumn ? [timeFieldName].concat(_toConsumableArray(selectedFields)) : selectedFields;
              return _context7.abrupt("return", {
                searchFields: fields,
                selectFields: fields
              });

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }));

    return function getSharingDataFields(_x4, _x5, _x6) {
      return _ref7.apply(this, arguments);
    };
  }();

  this.getSharingData =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8() {
    var searchSource, _ref9, searchFields, selectFields, body;

    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            searchSource = $scope.searchSource.createCopy();
            _context8.next = 3;
            return getSharingDataFields($scope.state.columns, $scope.indexPattern.timeFieldName, config.get('doc_table:hideTimeColumn'));

          case 3:
            _ref9 = _context8.sent;
            searchFields = _ref9.searchFields;
            selectFields = _ref9.selectFields;
            searchSource.setField('fields', searchFields);
            searchSource.setField('sort', (0, _doc_table.getSortForSearchSource)($scope.state.sort, $scope.indexPattern, config.get('discover:sort:defaultOrder')));
            searchSource.setField('highlight', null);
            searchSource.setField('highlightAll', null);
            searchSource.setField('aggs', null);
            searchSource.setField('size', null);
            _context8.next = 14;
            return searchSource.getSearchRequestBody();

          case 14:
            body = _context8.sent;
            return _context8.abrupt("return", {
              searchRequest: {
                index: searchSource.getField('index').title,
                body: body
              },
              fields: selectFields,
              metaFields: $scope.indexPattern.metaFields,
              conflictedTypesFields: $scope.indexPattern.fields.filter(function (f) {
                return f.type === 'conflict';
              }).map(function (f) {
                return f.name;
              }),
              indexPatternId: searchSource.getField('index').id
            });

          case 16:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  function getStateDefaults() {
    var query = $scope.searchSource.getField('query') || (0, _public3.getDefaultQuery)(localStorage.get('kibana.userQueryLanguage') || config.get('search:queryLanguage'));
    return {
      query: query,
      sort: (0, _doc_table.getSortArray)(savedSearch.sort, $scope.indexPattern),
      columns: savedSearch.columns.length > 0 ? savedSearch.columns : config.get('defaultColumns').slice(),
      index: $scope.indexPattern.id,
      interval: 'auto',
      filters: _lodash.default.cloneDeep($scope.searchSource.getOwnField('filter'))
    };
  }

  $scope.state.index = $scope.indexPattern.id;
  $scope.state.sort = (0, _doc_table.getSortArray)($scope.state.sort, $scope.indexPattern);

  $scope.getBucketIntervalToolTipText = function () {
    return _i18n.i18n.translate('kbn.discover.bucketIntervalTooltip', {
      defaultMessage: 'This interval creates {bucketsDescription} to show in the selected time range, so it has been scaled to {bucketIntervalDescription}',
      values: {
        bucketsDescription: $scope.bucketInterval.scale > 1 ? _i18n.i18n.translate('kbn.discover.bucketIntervalTooltip.tooLargeBucketsText', {
          defaultMessage: 'buckets that are too large'
        }) : _i18n.i18n.translate('kbn.discover.bucketIntervalTooltip.tooManyBucketsText', {
          defaultMessage: 'too many buckets'
        }),
        bucketIntervalDescription: $scope.bucketInterval.description
      }
    });
  };

  $scope.opts = {
    // number of records to fetch, then paginate through
    sampleSize: config.get('discover:sampleSize'),
    timefield: getTimeField(),
    savedSearch: savedSearch,
    indexPatternList: $route.current.locals.savedObjects.ip.list
  };

  var shouldSearchOnPageLoad = function shouldSearchOnPageLoad() {
    // A saved search is created on every page load, so we check the ID to see if we're loading a
    // previously saved search or if it is just transient
    return config.get('discover:searchOnPageLoad') || savedSearch.id !== undefined || timefilter.getRefreshInterval().pause === false;
  };

  var init = _lodash.default.once(function () {
    $scope.updateDataSource().then(
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee9() {
      var searchBarChanges;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              searchBarChanges = (0, _rxjs.merge)(timefilter.getAutoRefreshFetch$(), timefilter.getFetch$(), filterManager.getFetches$(), $fetchObservable).pipe((0, _operators.debounceTime)(100));
              subscriptions.add((0, _kibana_services.subscribeWithScope)($scope, searchBarChanges, {
                next: $scope.fetch
              }, function (error) {
                return (0, _public4.addFatalError)(core.fatalErrors, error);
              }));
              subscriptions.add((0, _kibana_services.subscribeWithScope)($scope, timefilter.getTimeUpdate$(), {
                next: function next() {
                  $scope.updateTime();
                }
              }, function (error) {
                return (0, _public4.addFatalError)(core.fatalErrors, error);
              })); //Handling change oft the histogram interval

              $scope.$watch('state.interval', function (newInterval, oldInterval) {
                if (newInterval !== oldInterval) {
                  setAppState({
                    interval: newInterval
                  });
                }
              });
              $scope.$watchMulti(['rows', 'fetchStatus'], function updateResultState() {
                var prev = {};
                var status = {
                  UNINITIALIZED: 'uninitialized',
                  LOADING: 'loading',
                  // initial data load
                  READY: 'ready',
                  // results came back
                  NO_RESULTS: 'none' // no results came back

                };

                function pick(rows, oldRows, fetchStatus) {
                  // initial state, pretend we're already loading if we're about to execute a search so
                  // that the uninitilized message doesn't flash on screen
                  if (rows == null && oldRows == null && shouldSearchOnPageLoad()) {
                    return status.LOADING;
                  }

                  if (fetchStatus === fetchStatuses.UNINITIALIZED) {
                    return status.UNINITIALIZED;
                  }

                  var rowsEmpty = _lodash.default.isEmpty(rows);

                  if (rowsEmpty && fetchStatus === fetchStatuses.LOADING) return status.LOADING;else if (!rowsEmpty) return status.READY;else return status.NO_RESULTS;
                }

                return function () {
                  var current = {
                    rows: $scope.rows,
                    fetchStatus: $scope.fetchStatus
                  };
                  $scope.resultState = pick(current.rows, prev.rows, current.fetchStatus, prev.fetchStatus);
                  prev = current;
                };
              }());

              if (getTimeField()) {
                setupVisualization();
                $scope.updateTime();
              }

              init.complete = true;

              if (shouldSearchOnPageLoad()) {
                $fetchObservable.next();
              }

            case 8:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
  });

  function saveDataSource(_x7) {
    return _saveDataSource.apply(this, arguments);
  }

  function _saveDataSource() {
    _saveDataSource = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(saveOptions) {
      var id;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return $scope.updateDataSource();

            case 2:
              savedSearch.columns = $scope.state.columns;
              savedSearch.sort = $scope.state.sort;
              _context10.prev = 4;
              _context10.next = 7;
              return savedSearch.save(saveOptions);

            case 7:
              id = _context10.sent;
              $scope.$evalAsync(function () {
                if (id) {
                  toastNotifications.addSuccess({
                    title: _i18n.i18n.translate('kbn.discover.notifications.savedSearchTitle', {
                      defaultMessage: "Search '{savedSearchTitle}' was saved",
                      values: {
                        savedSearchTitle: savedSearch.title
                      }
                    }),
                    'data-test-subj': 'saveSearchSuccess'
                  });

                  if (savedSearch.id !== $route.current.params.id) {
                    history.push("/discover/".concat(encodeURIComponent(savedSearch.id)));
                  } else {
                    // Update defaults so that "reload saved query" functions correctly
                    setAppState(getStateDefaults());
                    chrome.docTitle.change(savedSearch.lastSavedTitle);
                  }
                }
              });
              return _context10.abrupt("return", {
                id: id
              });

            case 12:
              _context10.prev = 12;
              _context10.t0 = _context10["catch"](4);
              toastNotifications.addDanger({
                title: _i18n.i18n.translate('kbn.discover.notifications.notSavedSearchTitle', {
                  defaultMessage: "Search '{savedSearchTitle}' was not saved.",
                  values: {
                    savedSearchTitle: savedSearch.title
                  }
                }),
                text: _context10.t0.message
              });
              return _context10.abrupt("return", {
                error: _context10.t0
              });

            case 16:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, null, [[4, 12]]);
    }));
    return _saveDataSource.apply(this, arguments);
  }

  $scope.opts.fetch = $scope.fetch = function () {
    // ignore requests to fetch before the app inits
    if (!init.complete) return;
    $scope.fetchCounter++;
    $scope.fetchError = undefined; // Abort any in-progress requests before fetching again

    if (abortController) abortController.abort();
    abortController = new AbortController();
    $scope.updateDataSource().then(setupVisualization).then(function () {
      $scope.fetchStatus = fetchStatuses.LOADING;
      logInspectorRequest();
      return $scope.searchSource.fetch({
        abortSignal: abortController.signal
      });
    }).then(onResults).catch(function (error) {
      // If the request was aborted then no need to surface this error in the UI
      if (error instanceof Error && error.name === 'AbortError') return;
      var fetchError = (0, _get_painless_error.getPainlessError)(error);

      if (fetchError) {
        $scope.fetchError = fetchError;
      } else {
        var _error$body;

        toastNotifications.addError(error, {
          title: _i18n.i18n.translate('kbn.discover.errorLoadingData', {
            defaultMessage: 'Error loading data'
          }),
          toastMessage: error.shortMessage || ((_error$body = error.body) === null || _error$body === void 0 ? void 0 : _error$body.message)
        });
      }
    });
  };

  $scope.updateQuery = function (_ref11) {
    var query = _ref11.query;
    var isUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (!_lodash.default.isEqual(query, appStateContainer.getState().query) || isUpdate === false) {
      setAppState({
        query: query
      });
      $fetchObservable.next();
    }
  };

  $scope.updateSavedQueryId = function (newSavedQueryId) {
    if (newSavedQueryId) {
      setAppState({
        savedQuery: newSavedQueryId
      });
    } else {
      // remove savedQueryId from state
      var state = _objectSpread({}, appStateContainer.getState());

      delete state.savedQuery;
      appStateContainer.set(state);
    }
  };

  function getDimensions(aggs, timeRange) {
    var _aggs = _slicedToArray(aggs, 2),
        metric = _aggs[0],
        agg = _aggs[1];

    agg.params.timeRange = timeRange;
    var bounds = agg.params.timeRange ? timefilter.calculateBounds(agg.params.timeRange) : null;
    agg.buckets.setBounds(bounds);

    var _agg$buckets$getInter = agg.buckets.getInterval(),
        esUnit = _agg$buckets$getInter.esUnit,
        esValue = _agg$buckets$getInter.esValue;

    return {
      x: {
        accessor: 0,
        label: agg.makeLabel(),
        format: _public3.fieldFormats.serialize(agg),
        params: {
          date: true,
          interval: _moment.default.duration(esValue, esUnit),
          intervalESValue: esValue,
          intervalESUnit: esUnit,
          format: agg.buckets.getScaledDateFormat(),
          bounds: agg.buckets.getBounds()
        }
      },
      y: {
        accessor: 1,
        format: _public3.fieldFormats.serialize(metric),
        label: metric.makeLabel()
      }
    };
  }

  function onResults(resp) {
    inspectorRequest.stats((0, _kibana_services.getResponseInspectorStats)($scope.searchSource, resp)).ok({
      json: resp
    });

    if (getTimeField()) {
      var tabifiedData = (0, _kibana_services.tabifyAggResponse)($scope.vis.data.aggs, resp);
      $scope.searchSource.rawResponse = resp;
      $scope.histogramData = (0, _response_handler.discoverResponseHandler)(tabifiedData, getDimensions($scope.vis.data.aggs.aggs, $scope.timeRange));

      if ($scope.vis.data.aggs.aggs[1]) {
        $scope.bucketInterval = $scope.vis.data.aggs.aggs[1].buckets.getInterval();
      }
    }

    $scope.hits = resp.hits.total;
    $scope.rows = resp.hits.hits; // if we haven't counted yet, reset the counts

    var counts = $scope.fieldCounts = $scope.fieldCounts || {};
    $scope.rows.forEach(function (hit) {
      var fields = Object.keys($scope.indexPattern.flattenHit(hit));
      fields.forEach(function (fieldName) {
        counts[fieldName] = (counts[fieldName] || 0) + 1;
      });
    });
    $scope.fetchStatus = fetchStatuses.COMPLETE;
  }

  function logInspectorRequest() {
    inspectorAdapters.requests.reset();

    var title = _i18n.i18n.translate('kbn.discover.inspectorRequestDataTitle', {
      defaultMessage: 'data'
    });

    var description = _i18n.i18n.translate('kbn.discover.inspectorRequestDescription', {
      defaultMessage: 'This request queries Elasticsearch to fetch the data for the search.'
    });

    inspectorRequest = inspectorAdapters.requests.start(title, {
      description: description
    });
    inspectorRequest.stats((0, _kibana_services.getRequestInspectorStats)($scope.searchSource));
    $scope.searchSource.getSearchRequestBody().then(function (body) {
      inspectorRequest.json(body);
    });
  }

  $scope.updateTime = function () {
    //this is the timerange for the histogram, should be refactored
    $scope.timeRange = {
      from: _datemath.default.parse(timefilter.getTime().from),
      to: _datemath.default.parse(timefilter.getTime().to, {
        roundUp: true
      })
    };
  };

  $scope.toMoment = function (datetime) {
    return (0, _moment.default)(datetime).format(config.get('dateFormat'));
  };

  $scope.resetQuery = function () {
    history.push("/discover/".concat(encodeURIComponent($route.current.params.id)));
  };

  $scope.newQuery = function () {
    history.push('/discover');
  };

  $scope.updateDataSource = function () {
    var indexPattern = $scope.indexPattern,
        searchSource = $scope.searchSource;
    searchSource.setField('index', $scope.indexPattern).setField('size', $scope.opts.sampleSize).setField('sort', (0, _doc_table.getSortForSearchSource)($scope.state.sort, indexPattern, config.get('discover:sort:defaultOrder'))).setField('query', $scope.state.query || null).setField('filter', filterManager.getFilters());
    return Promise.resolve();
  };

  $scope.setSortOrder = function setSortOrder(sort) {
    setAppState({
      sort: sort
    });
  }; // TODO: On array fields, negating does not negate the combination, rather all terms


  $scope.filterQuery = function (field, values, operation) {
    $scope.indexPattern.popularizeField(field, 1);

    var newFilters = _public3.esFilters.generateFilters(filterManager, field, values, operation, $scope.indexPattern.id);

    return filterManager.addFilters(newFilters);
  };

  $scope.addColumn = function addColumn(columnName) {
    $scope.indexPattern.popularizeField(columnName, 1);
    var columns = columnActions.addColumn($scope.state.columns, columnName);
    setAppState({
      columns: columns
    });
  };

  $scope.removeColumn = function removeColumn(columnName) {
    $scope.indexPattern.popularizeField(columnName, 1);
    var columns = columnActions.removeColumn($scope.state.columns, columnName);
    setAppState({
      columns: columns
    });
  };

  $scope.moveColumn = function moveColumn(columnName, newIndex) {
    var columns = columnActions.moveColumn($scope.state.columns, columnName, newIndex);
    setAppState({
      columns: columns
    });
  };

  $scope.scrollToTop = function () {
    $window.scrollTo(0, 0);
  };

  $scope.scrollToBottom = function () {
    // delay scrolling to after the rows have been rendered
    $timeout(function () {
      $element.find('#discoverBottomMarker').focus();
    }, 0);
  };

  $scope.showAllRows = function () {
    $scope.minimumVisibleRows = $scope.hits;
  };

  function setupVisualization() {
    return _setupVisualization.apply(this, arguments);
  }

  function _setupVisualization() {
    _setupVisualization = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee11() {
      var histogramInterval, visStateAggs;
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (getTimeField()) {
                _context11.next = 2;
                break;
              }

              return _context11.abrupt("return");

            case 2:
              histogramInterval = $scope.state.interval;
              visStateAggs = [{
                type: 'count',
                schema: 'metric'
              }, {
                type: 'date_histogram',
                schema: 'segment',
                params: {
                  field: getTimeField(),
                  interval: histogramInterval,
                  timeRange: timefilter.getTime()
                }
              }];
              $scope.vis = visualizations.createVis('histogram', {
                title: savedSearch.title,
                params: {
                  addLegend: false,
                  addTimeMarker: true
                },
                data: {
                  aggs: visStateAggs,
                  indexPattern: $scope.searchSource.getField('index').id,
                  searchSource: $scope.searchSource
                }
              });
              $scope.searchSource.onRequestStart(function (searchSource, options) {
                if (!$scope.vis) return;
                return $scope.vis.data.aggs.onSearchRequestStart(searchSource, options);
              });
              $scope.searchSource.setField('aggs', function () {
                if (!$scope.vis) return;
                return $scope.vis.data.aggs.toDsl();
              });

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }));
    return _setupVisualization.apply(this, arguments);
  }

  function getIndexPatternWarning(index) {
    return _i18n.i18n.translate('kbn.discover.valueIsNotConfiguredIndexPatternIDWarningTitle', {
      defaultMessage: '{stateVal} is not a configured index pattern ID',
      values: {
        stateVal: "\"".concat(index, "\"")
      }
    });
  }

  function resolveIndexPatternLoading() {
    var _$route$current$local = $route.current.locals.savedObjects.ip,
        loadedIndexPattern = _$route$current$local.loaded,
        stateVal = _$route$current$local.stateVal,
        stateValFound = _$route$current$local.stateValFound;
    var ownIndexPattern = $scope.searchSource.getOwnField('index');

    if (ownIndexPattern && !stateVal) {
      return ownIndexPattern;
    }

    if (stateVal && !stateValFound) {
      var warningTitle = getIndexPatternWarning();

      if (ownIndexPattern) {
        toastNotifications.addWarning({
          title: warningTitle,
          text: _i18n.i18n.translate('kbn.discover.showingSavedIndexPatternWarningDescription', {
            defaultMessage: 'Showing the saved index pattern: "{ownIndexPatternTitle}" ({ownIndexPatternId})',
            values: {
              ownIndexPatternTitle: ownIndexPattern.title,
              ownIndexPatternId: ownIndexPattern.id
            }
          })
        });
        return ownIndexPattern;
      }

      toastNotifications.addWarning({
        title: warningTitle,
        text: _i18n.i18n.translate('kbn.discover.showingDefaultIndexPatternWarningDescription', {
          defaultMessage: 'Showing the default index pattern: "{loadedIndexPatternTitle}" ({loadedIndexPatternId})',
          values: {
            loadedIndexPatternTitle: loadedIndexPattern.title,
            loadedIndexPatternId: loadedIndexPattern.id
          }
        })
      });
    }

    return loadedIndexPattern;
  }

  (0, _help_menu_util.addHelpMenuToAppChrome)(chrome);
  init(); // Propagate current app state to url, then start syncing

  replaceUrlAppState().then(function () {
    return startStateSync();
  });
}"},null]}