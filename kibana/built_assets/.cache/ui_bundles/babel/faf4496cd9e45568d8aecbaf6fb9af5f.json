{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_datasource/operations/operations.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_datasource/operations/operations.js","mtime":1589249552316},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldE9wZXJhdGlvbnMgPSBnZXRPcGVyYXRpb25zOwpleHBvcnRzLmlzQ29sdW1uVHJhbnNmZXJhYmxlID0gaXNDb2x1bW5UcmFuc2ZlcmFibGU7CmV4cG9ydHMuZ2V0T3BlcmF0aW9uRGlzcGxheSA9IGdldE9wZXJhdGlvbkRpc3BsYXk7CmV4cG9ydHMuZ2V0T3BlcmF0aW9uVHlwZXNGb3JGaWVsZCA9IGdldE9wZXJhdGlvblR5cGVzRm9yRmllbGQ7CmV4cG9ydHMuaXNEb2N1bWVudE9wZXJhdGlvbiA9IGlzRG9jdW1lbnRPcGVyYXRpb247CmV4cG9ydHMuZ2V0QXZhaWxhYmxlT3BlcmF0aW9uc0J5TWV0YWRhdGEgPSBnZXRBdmFpbGFibGVPcGVyYXRpb25zQnlNZXRhZGF0YTsKZXhwb3J0cy5jaGFuZ2VGaWVsZCA9IGNoYW5nZUZpZWxkOwpleHBvcnRzLmJ1aWxkQ29sdW1uID0gYnVpbGRDb2x1bW47Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAib3BlcmF0aW9uRGVmaW5pdGlvbk1hcCIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9kZWZpbml0aW9ucy5vcGVyYXRpb25EZWZpbml0aW9uTWFwOwogIH0KfSk7Cgp2YXIgX2RlZmluaXRpb25zID0gcmVxdWlyZSgiLi9kZWZpbml0aW9ucyIpOwoKdmFyIF9kb2N1bWVudF9maWVsZCA9IHJlcXVpcmUoIi4uL2RvY3VtZW50X2ZpZWxkIik7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKioKICogUmV0dXJucyBhbGwgYXZhaWxhYmxlIG9wZXJhdGlvbiB0eXBlcyBhcyBhIGxpc3QgYXQgcnVudGltZS4KICogVGhpcyB3aWxsIGJlIGFuIGFycmF5IG9mIGVhY2ggbWVtYmVyIG9mIHRoZSB1bmlvbiB0eXBlIGBPcGVyYXRpb25UeXBlYAogKiB3aXRob3V0IGFueSBndWFyYW50ZWVkIG9yZGVyCiAqLwoKCmZ1bmN0aW9uIGdldE9wZXJhdGlvbnMoKSB7CiAgcmV0dXJuIE9iamVjdC5rZXlzKF9kZWZpbml0aW9ucy5vcGVyYXRpb25EZWZpbml0aW9uTWFwKTsKfQovKioKICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBjb2x1bW4gY2FuIGJlIGFwcGxpZWQgdG8gdGhlIGdpdmVuIGluZGV4IHBhdHRlcm4KICovCgoKZnVuY3Rpb24gaXNDb2x1bW5UcmFuc2ZlcmFibGUoY29sdW1uLCBuZXdJbmRleFBhdHRlcm4pIHsKICByZXR1cm4gX2RlZmluaXRpb25zLm9wZXJhdGlvbkRlZmluaXRpb25NYXBbY29sdW1uLm9wZXJhdGlvblR5cGVdLmlzVHJhbnNmZXJhYmxlKGNvbHVtbiwgbmV3SW5kZXhQYXR0ZXJuKTsKfQovKioKICogUmV0dXJucyBhIGxpc3Qgb2YgdGhlIGRpc3BsYXkgbmFtZXMgb2YgYWxsIG9wZXJhdGlvbnMgd2l0aCBhbnkgZ3VhcmFudGVlZCBvcmRlci4KICovCgoKZnVuY3Rpb24gZ2V0T3BlcmF0aW9uRGlzcGxheSgpIHsKICB2YXIgZGlzcGxheSA9IHt9OwoKICBfZGVmaW5pdGlvbnMub3BlcmF0aW9uRGVmaW5pdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikgewogICAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsCiAgICAgICAgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lOwogICAgZGlzcGxheVt0eXBlXSA9IHsKICAgICAgdHlwZTogdHlwZSwKICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lCiAgICB9OwogIH0pOwoKICByZXR1cm4gZGlzcGxheTsKfQovKioKICogUmV0dXJucyBhbGwgYE9wZXJhdGlvblR5cGVgcyB0aGF0IGNhbiBidWlsZCBhIGNvbHVtbiB1c2luZyBgYnVpbGRDb2x1bW5gIGJhc2VkIG9uIHRoZQogKiBwYXNzZWQgaW4gZmllbGQuCiAqLwoKCmZ1bmN0aW9uIGdldE9wZXJhdGlvblR5cGVzRm9yRmllbGQoZmllbGQpIHsKICByZXR1cm4gX2RlZmluaXRpb25zLm9wZXJhdGlvbkRlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAob3BlcmF0aW9uRGVmaW5pdGlvbikgewogICAgcmV0dXJuICdnZXRQb3NzaWJsZU9wZXJhdGlvbkZvckZpZWxkJyBpbiBvcGVyYXRpb25EZWZpbml0aW9uICYmIG9wZXJhdGlvbkRlZmluaXRpb24uZ2V0UG9zc2libGVPcGVyYXRpb25Gb3JGaWVsZChmaWVsZCk7CiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIChiLnByaW9yaXR5IHx8IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSkgLSAoYS5wcmlvcml0eSB8fCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpOwogIH0pLm1hcChmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciB0eXBlID0gX3JlZjIudHlwZTsKICAgIHJldHVybiB0eXBlOwogIH0pOwp9Cgp2YXIgZG9jdW1lbnRPcGVyYXRpb25zOwoKZnVuY3Rpb24gaXNEb2N1bWVudE9wZXJhdGlvbih0eXBlKSB7CiAgLy8gVGhpcyBjYW4ndCBiZSBkb25lIGF0IHRoZSByb290IGxldmVsLCBiZWNhdXNlIGl0IGJyZWFrcyB0ZXN0cywgdGhhbmtzIHRvIG1vY2tpbmcgb2RkaXRpZXMKICAvLyBzbyB3ZSBkbyBpdCBoZXJlLCBhbmQgY2FjaGUgdGhlIHJlc3VsdC4KICBkb2N1bWVudE9wZXJhdGlvbnMgPSBkb2N1bWVudE9wZXJhdGlvbnMgfHwgbmV3IFNldChnZXRPcGVyYXRpb25UeXBlc0ZvckZpZWxkKF9kb2N1bWVudF9maWVsZC5kb2N1bWVudEZpZWxkKSk7CiAgcmV0dXJuIGRvY3VtZW50T3BlcmF0aW9ucy5oYXModHlwZSk7Cn0KLyoqCiAqIFJldHVybnMgYWxsIHBvc3NpYmxlIG9wZXJhdGlvbnMgKG1hdGNoZXMgYmV0d2VlbiBvcGVyYXRpb25zIGFuZCBmaWVsZHMgb2YgdGhlIGluZGV4CiAqIHBhdHRlcm4gcGx1cyBtYXRjaGVzIGZvciBvcGVyYXRpb25zIGFuZCBkb2N1bWVudHMgb2YgdGhlIGluZGV4IHBhdHRlcm4pIGluZGV4ZWQgYnkgdGhlCiAqIG1ldGEgZGF0YSBvZiB0aGUgb3BlcmF0aW9uLgogKgogKiBUaGUgcmVzdWx0aW5nIGxpc3QgaXMgZmlsdGVyZWQgZG93biBieSB0aGUgYGZpbHRlck9wZXJhdGlvbnNgIGZ1bmN0aW9uIHBhc3NlZCBpbiBieQogKiB0aGUgY3VycmVudCB2aXN1YWxpemF0aW9uIHRvIGRldGVybWluZSB3aGljaCBvcGVyYXRpb25zIGFuZCBmaWVsZCBhcmUgYXBwbGljYWJsZSBmb3IKICogYSBnaXZlbiBkaW1lbnNpb24uCiAqCiAqIEV4YW1wbGUgb3V0cHV0OgogKiBgYGAKICogWwogKiAgICB7CiAqICAgICAgb3BlcmF0aW9uTWV0YURhdGE6IHsgZGF0YVR5cGU6ICdzdHJpbmcnLCBpc0J1Y2tldGVkOiB0cnVlIH0sCiAqICAgICAgb3BlcmF0aW9uczogWyd0ZXJtcyddCiAqICAgIH0sCiAqICAgIHsKICogICAgICBvcGVyYXRpb25NZXRhRGF0YTogeyBkYXRhVHlwZTogJ251bWJlcicsIGlzQnVja2V0ZWQ6IGZhbHNlIH0sCiAqICAgICAgb3BlcmF0aW9uczogWydhdmcnLCAnbWluJywgJ21heCddCiAqICAgIH0sCiAqIF0KICogYGBgCiAqLwoKCmZ1bmN0aW9uIGdldEF2YWlsYWJsZU9wZXJhdGlvbnNCeU1ldGFkYXRhKGluZGV4UGF0dGVybikgewogIHZhciBvcGVyYXRpb25CeU1ldGFkYXRhID0ge307CgogIHZhciBhZGRUb01hcCA9IGZ1bmN0aW9uIGFkZFRvTWFwKG9wZXJhdGlvbiwgb3BlcmF0aW9uTWV0YWRhdGEpIHsKICAgIGlmICghb3BlcmF0aW9uTWV0YWRhdGEpIHJldHVybjsKICAgIHZhciBrZXkgPSBKU09OLnN0cmluZ2lmeShvcGVyYXRpb25NZXRhZGF0YSk7CgogICAgaWYgKG9wZXJhdGlvbkJ5TWV0YWRhdGFba2V5XSkgewogICAgICBvcGVyYXRpb25CeU1ldGFkYXRhW2tleV0ub3BlcmF0aW9ucy5wdXNoKG9wZXJhdGlvbik7CiAgICB9IGVsc2UgewogICAgICBvcGVyYXRpb25CeU1ldGFkYXRhW2tleV0gPSB7CiAgICAgICAgb3BlcmF0aW9uTWV0YURhdGE6IG9wZXJhdGlvbk1ldGFkYXRhLAogICAgICAgIG9wZXJhdGlvbnM6IFtvcGVyYXRpb25dCiAgICAgIH07CiAgICB9CiAgfTsKCiAgX2RlZmluaXRpb25zLm9wZXJhdGlvbkRlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdGlvbkRlZmluaXRpb24pIHsKICAgIGluZGV4UGF0dGVybi5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgYWRkVG9NYXAoewogICAgICAgIHR5cGU6ICdmaWVsZCcsCiAgICAgICAgb3BlcmF0aW9uVHlwZTogb3BlcmF0aW9uRGVmaW5pdGlvbi50eXBlLAogICAgICAgIGZpZWxkOiBmaWVsZC5uYW1lCiAgICAgIH0sIGdldFBvc3NpYmxlT3BlcmF0aW9uRm9yRmllbGQob3BlcmF0aW9uRGVmaW5pdGlvbiwgZmllbGQpKTsKICAgIH0pOwogIH0pOwoKICByZXR1cm4gT2JqZWN0LnZhbHVlcyhvcGVyYXRpb25CeU1ldGFkYXRhKTsKfQoKZnVuY3Rpb24gZ2V0UG9zc2libGVPcGVyYXRpb25Gb3JGaWVsZChvcGVyYXRpb25EZWZpbml0aW9uLCBmaWVsZCkgewogIHJldHVybiAnZ2V0UG9zc2libGVPcGVyYXRpb25Gb3JGaWVsZCcgaW4gb3BlcmF0aW9uRGVmaW5pdGlvbiA/IG9wZXJhdGlvbkRlZmluaXRpb24uZ2V0UG9zc2libGVPcGVyYXRpb25Gb3JGaWVsZChmaWVsZCkgOiB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIGdldERlZmluaXRpb24oZmluZEZ1bmN0aW9uKSB7CiAgdmFyIGNhbmRpZGF0ZXMgPSBfZGVmaW5pdGlvbnMub3BlcmF0aW9uRGVmaW5pdGlvbnMuZmlsdGVyKGZpbmRGdW5jdGlvbik7CgogIHJldHVybiBjYW5kaWRhdGVzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIChhLnByaW9yaXR5IHx8IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSkgPiAoYi5wcmlvcml0eSB8fCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpID8gYSA6IGI7CiAgfSk7Cn0KLyoqCiAqIENoYW5nZXMgdGhlIGZpZWxkIG9mIHRoZSBwYXNzZWQgaW4gY29sdW0uIFRvIGRvIHNvLCB0aGlzIG1ldGhvZCB1c2VzIHRoZSBgb25GaWVsZENoYW5nZWAgZnVuY3Rpb24gb2YKICogdGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uIG9mIHRoZSBjb2x1bW4uIFJldHVybnMgYSBuZXcgY29sdW1uIG9iamVjdCB3aXRoIHRoZSBmaWVsZCBjaGFuZ2VkLgogKiBAcGFyYW0gY29sdW1uIFRoZSBjb2x1bW4gb2JqZWN0IHdpdGggdGhlIG9sZCBmaWVsZCBjb25maWd1cmVkCiAqIEBwYXJhbSBpbmRleFBhdHRlcm4gVGhlIGluZGV4IHBhdHRlcm4gYXNzb2NpYXRlZCB0byB0aGUgbGF5ZXIgb2YgdGhlIGNvbHVtbgogKiBAcGFyYW0gbmV3RmllbGQgVGhlIG5ldyBmaWVsZCB0aGUgY29sdW1uIHNob3VsZCBiZSBzd2l0Y2hlZCB0bwogKi8KCgpmdW5jdGlvbiBjaGFuZ2VGaWVsZChjb2x1bW4sIGluZGV4UGF0dGVybiwgbmV3RmllbGQpIHsKICB2YXIgb3BlcmF0aW9uRGVmaW5pdGlvbiA9IF9kZWZpbml0aW9ucy5vcGVyYXRpb25EZWZpbml0aW9uTWFwW2NvbHVtbi5vcGVyYXRpb25UeXBlXTsKCiAgaWYgKCEoJ29uRmllbGRDaGFuZ2UnIGluIG9wZXJhdGlvbkRlZmluaXRpb24pKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFyaWFudCBlcnJvcjogQ2Fubm90IGNoYW5nZSBmaWVsZCBpZiBvcGVyYXRpb24gaXNuJ3QgYSBmaWVsZCBiYXNlZCBvcGVyYWl0b24iKTsKICB9CgogIHJldHVybiBvcGVyYXRpb25EZWZpbml0aW9uLm9uRmllbGRDaGFuZ2UoY29sdW1uLCBpbmRleFBhdHRlcm4sIG5ld0ZpZWxkKTsKfQovKioKICogQnVpbGRzIGEgY29sdW1uIG9iamVjdCBiYXNlZCBvbiB0aGUgY29udGV4dCBwYXNzZWQgaW4uIEl0IHRyaWVzCiAqIHRvIGZpbmQgdGhlIGFwcGxpY2FibGUgb3BlcmF0aW9uIGRlZmluaXRpb24gYW5kIHRoZW4gY2FsbHMgdGhlIGBidWlsZENvbHVtbmAKICogZnVuY3Rpb24gb2YgdGhhdCBkZWZpbml0aW9uLiBJdCBwYXNzZXMgaW4gdGhlIGdpdmVuIGBmaWVsZGAgKGlmIGF2YWlsYWJsZSksCiAqIGBzdWdnZXN0ZWRQcmlvcml0eWAsIGBsYXllcklkYCBhbmQgdGhlIGN1cnJlbnRseSBleGlzdGluZyBgY29sdW1uc2AuCiAqICogSWYgYG9wYCBpcyBzcGVjaWZpZWQsIHRoZSBzcGVjaWZpZWQgb3BlcmF0aW9uIGRlZmluaXRpb24gaXMgdXNlZCBkaXJlY3RseS4KICogKiBJZiBgYXNEb2N1bWVudE9wZXJhdGlvbmAgaXMgdHJ1ZSwgdGhlIGZpcnN0IG1hdGNoaW5nIGRvY3VtZW50LW9wZXJhdGlvbiBpcyB1c2VkLgogKiAqIElmIGBmaWVsZGAgaXMgc3BlY2lmaWVkLCB0aGUgZmlyc3QgbWF0Y2hpbmcgZmllbGQgYmFzZWQgb3BlcmF0aW9uIGFwcGxpY2FibGUgdG8gdGhlIGZpZWxkIGlzIHVzZWQuCiAqLwoKCmZ1bmN0aW9uIGJ1aWxkQ29sdW1uKF9yZWYzKSB7CiAgdmFyIG9wID0gX3JlZjMub3AsCiAgICAgIGNvbHVtbnMgPSBfcmVmMy5jb2x1bW5zLAogICAgICBmaWVsZCA9IF9yZWYzLmZpZWxkLAogICAgICBsYXllcklkID0gX3JlZjMubGF5ZXJJZCwKICAgICAgaW5kZXhQYXR0ZXJuID0gX3JlZjMuaW5kZXhQYXR0ZXJuLAogICAgICBzdWdnZXN0ZWRQcmlvcml0eSA9IF9yZWYzLnN1Z2dlc3RlZFByaW9yaXR5LAogICAgICBwcmV2aW91c0NvbHVtbiA9IF9yZWYzLnByZXZpb3VzQ29sdW1uOwogIHZhciBvcGVyYXRpb25EZWZpbml0aW9uOwoKICBpZiAob3ApIHsKICAgIG9wZXJhdGlvbkRlZmluaXRpb24gPSBfZGVmaW5pdGlvbnMub3BlcmF0aW9uRGVmaW5pdGlvbk1hcFtvcF07CiAgfSBlbHNlIGlmIChmaWVsZCkgewogICAgb3BlcmF0aW9uRGVmaW5pdGlvbiA9IGdldERlZmluaXRpb24oZnVuY3Rpb24gKGRlZmluaXRpb24pIHsKICAgICAgcmV0dXJuIEJvb2xlYW4oZ2V0UG9zc2libGVPcGVyYXRpb25Gb3JGaWVsZChkZWZpbml0aW9uLCBmaWVsZCkpOwogICAgfSk7CiAgfQoKICBpZiAoIW9wZXJhdGlvbkRlZmluaXRpb24pIHsKICAgIHRocm93IG5ldyBFcnJvcignTm8gc3VpdGFibGUgb3BlcmF0aW9uIGZvdW5kIGZvciBnaXZlbiBwYXJhbWV0ZXJzJyk7CiAgfQoKICB2YXIgYmFzZU9wdGlvbnMgPSB7CiAgICBjb2x1bW5zOiBjb2x1bW5zLAogICAgc3VnZ2VzdGVkUHJpb3JpdHk6IHN1Z2dlc3RlZFByaW9yaXR5LAogICAgbGF5ZXJJZDogbGF5ZXJJZCwKICAgIGluZGV4UGF0dGVybjogaW5kZXhQYXR0ZXJuLAogICAgcHJldmlvdXNDb2x1bW46IHByZXZpb3VzQ29sdW1uCiAgfTsKCiAgaWYgKCFmaWVsZCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhcmlhbnQgZXJyb3I6ICIuY29uY2F0KG9wZXJhdGlvbkRlZmluaXRpb24udHlwZSwgIiBvcGVyYXRpb24gcmVxdWlyZXMgZmllbGQiKSk7CiAgfQoKICB2YXIgbmV3Q29sdW1uID0gb3BlcmF0aW9uRGVmaW5pdGlvbi5idWlsZENvbHVtbihfb2JqZWN0U3ByZWFkKHt9LCBiYXNlT3B0aW9ucywgewogICAgZmllbGQ6IGZpZWxkCiAgfSkpOwogIHJldHVybiBuZXdDb2x1bW47Cn0="},null]}