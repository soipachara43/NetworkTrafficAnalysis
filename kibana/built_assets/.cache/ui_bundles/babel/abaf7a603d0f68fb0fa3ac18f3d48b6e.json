{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/containers/metrics_explorer/use_metrics_explorer_options.js","dependencies":[{"path":"x-pack/plugins/infra/public/containers/metrics_explorer/use_metrics_explorer_options.js","mtime":1589249554285},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1ldHJpY3NFeHBsb3Jlck9wdGlvbnNDb250YWluZXIgPSBleHBvcnRzLnVzZU1ldHJpY3NFeHBsb3Jlck9wdGlvbnMgPSBleHBvcnRzLkRFRkFVTFRfT1BUSU9OUyA9IGV4cG9ydHMuREVGQVVMVF9NRVRSSUNTID0gZXhwb3J0cy5ERUZBVUxUX0NIQVJUX09QVElPTlMgPSBleHBvcnRzLkRFRkFVTFRfVElNRVJBTkdFID0gZXhwb3J0cy5NZXRyaWNzRXhwbG9yZXJZQXhpc01vZGUgPSBleHBvcnRzLk1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZSA9IHZvaWQgMDsKCnZhciBfY29uc3RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImNvbnN0YXRlIikpOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX2NvbG9yX3BhbGV0dGUgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vY29sb3JfcGFsZXR0ZSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZTsKZXhwb3J0cy5NZXRyaWNzRXhwbG9yZXJDaGFydFR5cGUgPSBNZXRyaWNzRXhwbG9yZXJDaGFydFR5cGU7CgooZnVuY3Rpb24gKE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZSkgewogIE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZVsibGluZSJdID0gImxpbmUiOwogIE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZVsiYXJlYSJdID0gImFyZWEiOwogIE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZVsiYmFyIl0gPSAiYmFyIjsKfSkoTWV0cmljc0V4cGxvcmVyQ2hhcnRUeXBlIHx8IChleHBvcnRzLk1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZSA9IE1ldHJpY3NFeHBsb3JlckNoYXJ0VHlwZSA9IHt9KSk7Cgp2YXIgTWV0cmljc0V4cGxvcmVyWUF4aXNNb2RlOwpleHBvcnRzLk1ldHJpY3NFeHBsb3JlcllBeGlzTW9kZSA9IE1ldHJpY3NFeHBsb3JlcllBeGlzTW9kZTsKCihmdW5jdGlvbiAoTWV0cmljc0V4cGxvcmVyWUF4aXNNb2RlKSB7CiAgTWV0cmljc0V4cGxvcmVyWUF4aXNNb2RlWyJmcm9tWmVybyJdID0gImZyb21aZXJvIjsKICBNZXRyaWNzRXhwbG9yZXJZQXhpc01vZGVbImF1dG8iXSA9ICJhdXRvIjsKfSkoTWV0cmljc0V4cGxvcmVyWUF4aXNNb2RlIHx8IChleHBvcnRzLk1ldHJpY3NFeHBsb3JlcllBeGlzTW9kZSA9IE1ldHJpY3NFeHBsb3JlcllBeGlzTW9kZSA9IHt9KSk7Cgp2YXIgREVGQVVMVF9USU1FUkFOR0UgPSB7CiAgZnJvbTogJ25vdy0xaCcsCiAgdG86ICdub3cnLAogIGludGVydmFsOiAnPj0xMHMnCn07CmV4cG9ydHMuREVGQVVMVF9USU1FUkFOR0UgPSBERUZBVUxUX1RJTUVSQU5HRTsKdmFyIERFRkFVTFRfQ0hBUlRfT1BUSU9OUyA9IHsKICB0eXBlOiBNZXRyaWNzRXhwbG9yZXJDaGFydFR5cGUubGluZSwKICB5QXhpc01vZGU6IE1ldHJpY3NFeHBsb3JlcllBeGlzTW9kZS5mcm9tWmVybywKICBzdGFjazogZmFsc2UKfTsKZXhwb3J0cy5ERUZBVUxUX0NIQVJUX09QVElPTlMgPSBERUZBVUxUX0NIQVJUX09QVElPTlM7CnZhciBERUZBVUxUX01FVFJJQ1MgPSBbewogIGFnZ3JlZ2F0aW9uOiAnYXZnJywKICBmaWVsZDogJ3N5c3RlbS5jcHUudXNlci5wY3QnLAogIGNvbG9yOiBfY29sb3JfcGFsZXR0ZS5NZXRyaWNzRXhwbG9yZXJDb2xvci5jb2xvcjAKfSwgewogIGFnZ3JlZ2F0aW9uOiAnYXZnJywKICBmaWVsZDogJ2t1YmVybmV0ZXMucG9kLmNwdS51c2FnZS5ub2RlLnBjdCcsCiAgY29sb3I6IF9jb2xvcl9wYWxldHRlLk1ldHJpY3NFeHBsb3JlckNvbG9yLmNvbG9yMQp9LCB7CiAgYWdncmVnYXRpb246ICdhdmcnLAogIGZpZWxkOiAnZG9ja2VyLmNwdS50b3RhbC5wY3QnLAogIGNvbG9yOiBfY29sb3JfcGFsZXR0ZS5NZXRyaWNzRXhwbG9yZXJDb2xvci5jb2xvcjIKfV07CmV4cG9ydHMuREVGQVVMVF9NRVRSSUNTID0gREVGQVVMVF9NRVRSSUNTOwp2YXIgREVGQVVMVF9PUFRJT05TID0gewogIGFnZ3JlZ2F0aW9uOiAnYXZnJywKICBtZXRyaWNzOiBERUZBVUxUX01FVFJJQ1MKfTsKZXhwb3J0cy5ERUZBVUxUX09QVElPTlMgPSBERUZBVUxUX09QVElPTlM7CgpmdW5jdGlvbiBwYXJzZUpzb25PckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkgewogIGlmICghdmFsdWUpIHsKICAgIHJldHVybiBkZWZhdWx0VmFsdWU7CiAgfQoKICB0cnkgewogICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpOwogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiBkZWZhdWx0VmFsdWU7CiAgfQp9CgpmdW5jdGlvbiB1c2VTdGF0ZVdpdGhMb2NhbFN0b3JhZ2Uoa2V5LCBkZWZhdWx0U3RhdGUpIHsKICB2YXIgc3RvcmFnZVN0YXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHBhcnNlSnNvbk9yRGVmYXVsdChzdG9yYWdlU3RhdGUsIGRlZmF1bHRTdGF0ZSkpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgc3RhdGUgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRTdGF0ZSA9IF91c2VTdGF0ZTJbMV07CgogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7CiAgfSwgW2tleSwgc3RhdGVdKTsKICByZXR1cm4gW3N0YXRlLCBzZXRTdGF0ZV07Cn0KCnZhciB1c2VNZXRyaWNzRXhwbG9yZXJPcHRpb25zID0gZnVuY3Rpb24gdXNlTWV0cmljc0V4cGxvcmVyT3B0aW9ucygpIHsKICB2YXIgX3VzZVN0YXRlV2l0aExvY2FsU3RvID0gdXNlU3RhdGVXaXRoTG9jYWxTdG9yYWdlKCdNZXRyaWNzRXhwbG9yZXJPcHRpb25zJywgREVGQVVMVF9PUFRJT05TKSwKICAgICAgX3VzZVN0YXRlV2l0aExvY2FsU3RvMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZVdpdGhMb2NhbFN0bywgMiksCiAgICAgIG9wdGlvbnMgPSBfdXNlU3RhdGVXaXRoTG9jYWxTdG8yWzBdLAogICAgICBzZXRPcHRpb25zID0gX3VzZVN0YXRlV2l0aExvY2FsU3RvMlsxXTsKCiAgdmFyIF91c2VTdGF0ZVdpdGhMb2NhbFN0bzMgPSB1c2VTdGF0ZVdpdGhMb2NhbFN0b3JhZ2UoJ01ldHJpY3NFeHBsb3JlclRpbWVSYW5nZScsIERFRkFVTFRfVElNRVJBTkdFKSwKICAgICAgX3VzZVN0YXRlV2l0aExvY2FsU3RvNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZVdpdGhMb2NhbFN0bzMsIDIpLAogICAgICBjdXJyZW50VGltZXJhbmdlID0gX3VzZVN0YXRlV2l0aExvY2FsU3RvNFswXSwKICAgICAgc2V0VGltZVJhbmdlID0gX3VzZVN0YXRlV2l0aExvY2FsU3RvNFsxXTsKCiAgdmFyIF91c2VTdGF0ZVdpdGhMb2NhbFN0bzUgPSB1c2VTdGF0ZVdpdGhMb2NhbFN0b3JhZ2UoJ01ldHJpY3NFeHBsb3JlckNoYXJ0T3B0aW9ucycsIERFRkFVTFRfQ0hBUlRfT1BUSU9OUyksCiAgICAgIF91c2VTdGF0ZVdpdGhMb2NhbFN0bzYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGVXaXRoTG9jYWxTdG81LCAyKSwKICAgICAgY2hhcnRPcHRpb25zID0gX3VzZVN0YXRlV2l0aExvY2FsU3RvNlswXSwKICAgICAgc2V0Q2hhcnRPcHRpb25zID0gX3VzZVN0YXRlV2l0aExvY2FsU3RvNlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgaXNBdXRvUmVsb2FkaW5nID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0QXV0b1JlbG9hZGluZyA9IF91c2VTdGF0ZTRbMV07CgogIHJldHVybiB7CiAgICBkZWZhdWx0Vmlld1N0YXRlOiB7CiAgICAgIG9wdGlvbnM6IERFRkFVTFRfT1BUSU9OUywKICAgICAgY2hhcnRPcHRpb25zOiBERUZBVUxUX0NIQVJUX09QVElPTlMsCiAgICAgIGN1cnJlbnRUaW1lcmFuZ2U6IERFRkFVTFRfVElNRVJBTkdFCiAgICB9LAogICAgb3B0aW9uczogb3B0aW9ucywKICAgIGNoYXJ0T3B0aW9uczogY2hhcnRPcHRpb25zLAogICAgc2V0Q2hhcnRPcHRpb25zOiBzZXRDaGFydE9wdGlvbnMsCiAgICBjdXJyZW50VGltZXJhbmdlOiBjdXJyZW50VGltZXJhbmdlLAogICAgaXNBdXRvUmVsb2FkaW5nOiBpc0F1dG9SZWxvYWRpbmcsCiAgICBzZXRPcHRpb25zOiBzZXRPcHRpb25zLAogICAgc2V0VGltZVJhbmdlOiBzZXRUaW1lUmFuZ2UsCiAgICBzdGFydEF1dG9SZWxvYWQ6IGZ1bmN0aW9uIHN0YXJ0QXV0b1JlbG9hZCgpIHsKICAgICAgcmV0dXJuIHNldEF1dG9SZWxvYWRpbmcodHJ1ZSk7CiAgICB9LAogICAgc3RvcEF1dG9SZWxvYWQ6IGZ1bmN0aW9uIHN0b3BBdXRvUmVsb2FkKCkgewogICAgICByZXR1cm4gc2V0QXV0b1JlbG9hZGluZyhmYWxzZSk7CiAgICB9CiAgfTsKfTsKCmV4cG9ydHMudXNlTWV0cmljc0V4cGxvcmVyT3B0aW9ucyA9IHVzZU1ldHJpY3NFeHBsb3Jlck9wdGlvbnM7CnZhciBNZXRyaWNzRXhwbG9yZXJPcHRpb25zQ29udGFpbmVyID0gKDAsIF9jb25zdGF0ZS5kZWZhdWx0KSh1c2VNZXRyaWNzRXhwbG9yZXJPcHRpb25zKTsKZXhwb3J0cy5NZXRyaWNzRXhwbG9yZXJPcHRpb25zQ29udGFpbmVyID0gTWV0cmljc0V4cGxvcmVyT3B0aW9uc0NvbnRhaW5lcjs="},null]}