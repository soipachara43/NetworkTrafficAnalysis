{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/beats/overview/overview.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/beats/overview/overview.js","mtime":1589249552512},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkJlYXRzT3ZlcnZpZXcgPSBCZWF0c092ZXJ2aWV3OwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2xhdGVzdF9hY3RpdmUgPSByZXF1aXJlKCIuL2xhdGVzdF9hY3RpdmUiKTsKCnZhciBfbGF0ZXN0X3ZlcnNpb25zID0gcmVxdWlyZSgiLi9sYXRlc3RfdmVyc2lvbnMiKTsKCnZhciBfbGF0ZXN0X3R5cGVzID0gcmVxdWlyZSgiLi9sYXRlc3RfdHlwZXMiKTsKCnZhciBfID0gcmVxdWlyZSgiLi4vIik7Cgp2YXIgX2NoYXJ0ID0gcmVxdWlyZSgiLi4vLi4vY2hhcnQiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gcmVuZGVyTGF0ZXN0QWN0aXZlKGxhdGVzdEFjdGl2ZSwgbGF0ZXN0VHlwZXMsIGxhdGVzdFZlcnNpb25zKSB7CiAgaWYgKGxhdGVzdFR5cGVzICYmIGxhdGVzdFR5cGVzLmxlbmd0aCA+IDApIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIHdyYXA6IHRydWUKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgc2l6ZTogInMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5iZWF0cy5vdmVydmlldy5hY3RpdmVCZWF0c0luTGFzdERheVRpdGxlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBY3RpdmUgQmVhdHMgaW4gTGFzdCBEYXkiCiAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xhdGVzdF9hY3RpdmUuTGF0ZXN0QWN0aXZlLCB7CiAgICAgIGxhdGVzdEFjdGl2ZTogbGF0ZXN0QWN0aXZlCiAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcuYmVhdHMub3ZlcnZpZXcudG9wNUJlYXRUeXBlc0luTGFzdERheVRpdGxlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUb3AgNSBCZWF0IFR5cGVzIGluIExhc3QgRGF5IgogICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAicyIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYXRlc3RfdHlwZXMuTGF0ZXN0VHlwZXMsIHsKICAgICAgbGF0ZXN0VHlwZXM6IGxhdGVzdFR5cGVzCiAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcuYmVhdHMub3ZlcnZpZXcudG9wNVZlcnNpb25zSW5MYXN0RGF5VGl0bGUiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlRvcCA1IFZlcnNpb25zIGluIExhc3QgRGF5IgogICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAicyIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYXRlc3RfdmVyc2lvbnMuTGF0ZXN0VmVyc2lvbnMsIHsKICAgICAgbGF0ZXN0VmVyc2lvbnM6IGxhdGVzdFZlcnNpb25zCiAgICB9KSkpKTsKICB9CgogIHZhciBjYWxsb3V0TXNnID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcuYmVhdHMub3ZlcnZpZXcubm9BY3Rpdml0eURlc2NyaXB0aW9uJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdIaSB0aGVyZSEgVGhpcyBhcmVhIGlzIHdoZXJlIHlvdXIgbGF0ZXN0IEJlYXRzIGFjdGl2aXR5IHdvdWxkIHNob3cgdXAsICcgKyAiYnV0IHlvdSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGFjdGl2aXR5IHdpdGhpbiB0aGUgbGFzdCBkYXkuIgogIH0pOwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNhbGxPdXQsIHsKICAgIHRpdGxlOiBjYWxsb3V0TXNnLAogICAgaWNvblR5cGU6ICJnZWFyIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJub1JlY2VudEFjdGl2aXR5TWVzc2FnZSIKICB9KTsKfQoKZnVuY3Rpb24gQmVhdHNPdmVydmlldyhfcmVmKSB7CiAgdmFyIGxhdGVzdEFjdGl2ZSA9IF9yZWYubGF0ZXN0QWN0aXZlLAogICAgICBsYXRlc3RUeXBlcyA9IF9yZWYubGF0ZXN0VHlwZXMsCiAgICAgIGxhdGVzdFZlcnNpb25zID0gX3JlZi5sYXRlc3RWZXJzaW9ucywKICAgICAgc3RhdHMgPSBfcmVmLnN0YXRzLAogICAgICBtZXRyaWNzID0gX3JlZi5tZXRyaWNzLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImxhdGVzdEFjdGl2ZSIsICJsYXRlc3RUeXBlcyIsICJsYXRlc3RWZXJzaW9ucyIsICJzdGF0cyIsICJtZXRyaWNzIl0pOwoKICB2YXIgc2VyaWVzVG9TaG93ID0gW21ldHJpY3MuYmVhdF9ldmVudF9yYXRlcywgbWV0cmljcy5iZWF0X2ZhaWxfcmF0ZXMsIG1ldHJpY3MuYmVhdF90aHJvdWdocHV0X3JhdGVzLCBtZXRyaWNzLmJlYXRfb3V0cHV0X2Vycm9yc107CiAgdmFyIGNoYXJ0cyA9IHNlcmllc1RvU2hvdy5tYXAoZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIHN0eWxlOiB7CiAgICAgICAgbWluV2lkdGg6ICc0NSUnCiAgICAgIH0sCiAgICAgIGtleTogaW5kZXgKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnQuTW9uaXRvcmluZ1RpbWVzZXJpZXNDb250YWluZXIsIF9leHRlbmRzKHsKICAgICAgc2VyaWVzOiBkYXRhCiAgICB9LCBwcm9wcykpKSk7CiAgfSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUJvZHksIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlQ29udGVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfLlN0YXRzLCB7CiAgICBzdGF0czogc3RhdHMKICB9KSwgcmVuZGVyTGF0ZXN0QWN0aXZlKGxhdGVzdEFjdGl2ZSwgbGF0ZXN0VHlwZXMsIGxhdGVzdFZlcnNpb25zKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIHdyYXA6IHRydWUKICB9LCBjaGFydHMpKSkpOwp9"},null]}