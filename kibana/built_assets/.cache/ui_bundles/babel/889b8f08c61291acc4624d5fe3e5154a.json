{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/visualize/np_ready/legacy_app.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/visualize/np_ready/legacy_app.js","mtime":1589249549862},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRWaXN1YWxpemVBcHAgPSBpbml0VmlzdWFsaXplQXBwOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9oaXN0b3J5ID0gcmVxdWlyZSgiaGlzdG9yeSIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2tpYmFuYV91dGlscy9wdWJsaWMiKTsKCnZhciBfZWRpdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL2VkaXRvci9lZGl0b3IuaHRtbCIpKTsKCnZhciBfdmlzdWFsaXplX2xpc3RpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vbGlzdGluZy92aXN1YWxpemVfbGlzdGluZy5odG1sIikpOwoKdmFyIF92aXN1YWxpemVfYXBwID0gcmVxdWlyZSgiLi92aXN1YWxpemVfYXBwIik7Cgp2YXIgX3Zpc3VhbGl6ZV9jb25zdGFudHMgPSByZXF1aXJlKCIuL3Zpc3VhbGl6ZV9jb25zdGFudHMiKTsKCnZhciBfdmlzdWFsaXplX2xpc3RpbmcyID0gcmVxdWlyZSgiLi9saXN0aW5nL3Zpc3VhbGl6ZV9saXN0aW5nIik7Cgp2YXIgX2JyZWFkY3J1bWJzID0gcmVxdWlyZSgiLi9icmVhZGNydW1icyIpOwoKdmFyIF9wdWJsaWMyID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9kaXNjb3Zlci9wdWJsaWMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgZ2V0UmVzb2x2ZWRSZXN1bHRzID0gZnVuY3Rpb24gZ2V0UmVzb2x2ZWRSZXN1bHRzKGRlcHMpIHsKICB2YXIgY29yZSA9IGRlcHMuY29yZSwKICAgICAgZGF0YSA9IGRlcHMuZGF0YSwKICAgICAgdmlzdWFsaXphdGlvbnMgPSBkZXBzLnZpc3VhbGl6YXRpb25zOwogIHZhciByZXN1bHRzID0ge307CiAgcmV0dXJuIGZ1bmN0aW9uIChzYXZlZFZpcykgewogICAgcmVzdWx0cy5zYXZlZFZpcyA9IHNhdmVkVmlzOwogICAgcmV0dXJuIHZpc3VhbGl6YXRpb25zLmNvbnZlcnRUb1NlcmlhbGl6ZWRWaXMoc2F2ZWRWaXMpLnRoZW4oZnVuY3Rpb24gKHNlcmlhbGl6ZWRWaXMpIHsKICAgICAgcmV0dXJuIHZpc3VhbGl6YXRpb25zLmNyZWF0ZVZpcyhzZXJpYWxpemVkVmlzLnR5cGUsIHNlcmlhbGl6ZWRWaXMpOwogICAgfSkudGhlbihmdW5jdGlvbiAodmlzKSB7CiAgICAgIGlmICh2aXMudHlwZS5zZXR1cCkgewogICAgICAgIHJldHVybiB2aXMudHlwZS5zZXR1cCh2aXMpLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiB2aXM7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2aXM7CiAgICB9KS50aGVuKGZ1bmN0aW9uICh2aXMpIHsKICAgICAgcmVzdWx0cy52aXMgPSB2aXM7CiAgICAgIHJldHVybiBkZXBzLmVtYmVkZGFibGUuZ2V0RW1iZWRkYWJsZUZhY3RvcnkoJ3Zpc3VhbGl6YXRpb24nKS5jcmVhdGVGcm9tT2JqZWN0KHJlc3VsdHMudmlzLCB7CiAgICAgICAgdGltZVJhbmdlOiBkYXRhLnF1ZXJ5LnRpbWVmaWx0ZXIudGltZWZpbHRlci5nZXRUaW1lKCksCiAgICAgICAgZmlsdGVyczogZGF0YS5xdWVyeS5maWx0ZXJNYW5hZ2VyLmdldEZpbHRlcnMoKQogICAgICB9KTsKICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVtYmVkZGFibGVIYW5kbGVyKSB7CiAgICAgIHJlc3VsdHMuZW1iZWRkYWJsZUhhbmRsZXIgPSBlbWJlZGRhYmxlSGFuZGxlcjsKCiAgICAgIGlmIChyZXN1bHRzLnZpcy5kYXRhLnNhdmVkU2VhcmNoSWQpIHsKICAgICAgICByZXR1cm4gKDAsIF9wdWJsaWMyLmNyZWF0ZVNhdmVkU2VhcmNoZXNMb2FkZXIpKHsKICAgICAgICAgIHNhdmVkT2JqZWN0c0NsaWVudDogY29yZS5zYXZlZE9iamVjdHMuY2xpZW50LAogICAgICAgICAgaW5kZXhQYXR0ZXJuczogZGF0YS5pbmRleFBhdHRlcm5zLAogICAgICAgICAgY2hyb21lOiBjb3JlLmNocm9tZSwKICAgICAgICAgIG92ZXJsYXlzOiBjb3JlLm92ZXJsYXlzCiAgICAgICAgfSkuZ2V0KHJlc3VsdHMudmlzLmRhdGEuc2F2ZWRTZWFyY2hJZCk7CiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhdmVkU2VhcmNoKSB7CiAgICAgIGlmIChzYXZlZFNlYXJjaCkgewogICAgICAgIHJlc3VsdHMuc2F2ZWRTZWFyY2ggPSBzYXZlZFNlYXJjaDsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdHM7CiAgICB9KTsKICB9Owp9OwoKZnVuY3Rpb24gaW5pdFZpc3VhbGl6ZUFwcChhcHAsIGRlcHMpIHsKICAoMCwgX3Zpc3VhbGl6ZV9hcHAuaW5pdFZpc3VhbGl6ZUFwcERpcmVjdGl2ZSkoYXBwLCBkZXBzKTsKICBhcHAuZmFjdG9yeSgnaGlzdG9yeScsIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAoMCwgX2hpc3RvcnkuY3JlYXRlSGFzaEhpc3RvcnkpKCk7CiAgfSk7CiAgYXBwLmZhY3RvcnkoJ2tiblVybFN0YXRlU3RvcmFnZScsIGZ1bmN0aW9uIChoaXN0b3J5KSB7CiAgICByZXR1cm4gKDAsIF9wdWJsaWMuY3JlYXRlS2JuVXJsU3RhdGVTdG9yYWdlKSh7CiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksCiAgICAgIHVzZUhhc2g6IGRlcHMudWlTZXR0aW5ncy5nZXQoJ3N0YXRlOnN0b3JlSW5TZXNzaW9uU3RvcmFnZScpCiAgICB9KTsKICB9KTsKICBhcHAuY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikgewogICAgdmFyIGRlZmF1bHRzID0gewogICAgICByZWxvYWRPblNlYXJjaDogZmFsc2UsCiAgICAgIHJlcXVpcmVVSUNhcGFiaWxpdHk6ICd2aXN1YWxpemUuc2hvdycsCiAgICAgIGJhZGdlOiBmdW5jdGlvbiBiYWRnZSgpIHsKICAgICAgICBpZiAoZGVwcy52aXN1YWxpemVDYXBhYmlsaXRpZXMuc2F2ZSkgewogICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5iYWRnZS5yZWFkT25seS50ZXh0JywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlYWQgb25seScKICAgICAgICAgIH0pLAogICAgICAgICAgdG9vbHRpcDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi52aXN1YWxpemUuYmFkZ2UucmVhZE9ubHkudG9vbHRpcCcsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVbmFibGUgdG8gc2F2ZSB2aXN1YWxpemF0aW9ucycKICAgICAgICAgIH0pLAogICAgICAgICAgaWNvblR5cGU6ICdnbGFzc2VzJwogICAgICAgIH07CiAgICAgIH0KICAgIH07CiAgICAkcm91dGVQcm92aWRlci53aGVuKF92aXN1YWxpemVfY29uc3RhbnRzLlZpc3VhbGl6ZUNvbnN0YW50cy5MQU5ESU5HX1BBR0VfUEFUSCwgX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdHMsIHsKICAgICAgdGVtcGxhdGU6IF92aXN1YWxpemVfbGlzdGluZy5kZWZhdWx0LAogICAgICBrN0JyZWFkY3J1bWJzOiBfYnJlYWRjcnVtYnMuZ2V0TGFuZGluZ0JyZWFkY3J1bWJzLAogICAgICBjb250cm9sbGVyOiBfdmlzdWFsaXplX2xpc3RpbmcyLlZpc3VhbGl6ZUxpc3RpbmdDb250cm9sbGVyLAogICAgICBjb250cm9sbGVyQXM6ICdsaXN0aW5nQ29udHJvbGxlcicsCiAgICAgIHJlc29sdmU6IHsKICAgICAgICBjcmVhdGVOZXdWaXM6IGZ1bmN0aW9uIGNyZWF0ZU5ld1ZpcygpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAogICAgICAgIGhhc0RlZmF1bHRJbmRleDogZnVuY3Rpb24gaGFzRGVmYXVsdEluZGV4KGhpc3RvcnkpIHsKICAgICAgICAgIHJldHVybiAoMCwgX3B1YmxpYy5lbnN1cmVEZWZhdWx0SW5kZXhQYXR0ZXJuKShkZXBzLmNvcmUsIGRlcHMuZGF0YSwgaGlzdG9yeSk7CiAgICAgICAgfQogICAgICB9CiAgICB9KSkud2hlbihfdmlzdWFsaXplX2NvbnN0YW50cy5WaXN1YWxpemVDb25zdGFudHMuV0laQVJEX1NURVBfMV9QQUdFX1BBVEgsIF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRzLCB7CiAgICAgIHRlbXBsYXRlOiBfdmlzdWFsaXplX2xpc3RpbmcuZGVmYXVsdCwKICAgICAgazdCcmVhZGNydW1iczogX2JyZWFkY3J1bWJzLmdldFdpemFyZFN0ZXAxQnJlYWRjcnVtYnMsCiAgICAgIGNvbnRyb2xsZXI6IF92aXN1YWxpemVfbGlzdGluZzIuVmlzdWFsaXplTGlzdGluZ0NvbnRyb2xsZXIsCiAgICAgIGNvbnRyb2xsZXJBczogJ2xpc3RpbmdDb250cm9sbGVyJywKICAgICAgcmVzb2x2ZTogewogICAgICAgIGNyZWF0ZU5ld1ZpczogZnVuY3Rpb24gY3JlYXRlTmV3VmlzKCkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSwKICAgICAgICBoYXNEZWZhdWx0SW5kZXg6IGZ1bmN0aW9uIGhhc0RlZmF1bHRJbmRleChoaXN0b3J5KSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9wdWJsaWMuZW5zdXJlRGVmYXVsdEluZGV4UGF0dGVybikoZGVwcy5jb3JlLCBkZXBzLmRhdGEsIGhpc3RvcnkpOwogICAgICAgIH0KICAgICAgfQogICAgfSkpLndoZW4oX3Zpc3VhbGl6ZV9jb25zdGFudHMuVmlzdWFsaXplQ29uc3RhbnRzLkNSRUFURV9QQVRILCBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0cywgewogICAgICB0ZW1wbGF0ZTogX2VkaXRvci5kZWZhdWx0LAogICAgICBrN0JyZWFkY3J1bWJzOiBfYnJlYWRjcnVtYnMuZ2V0Q3JlYXRlQnJlYWRjcnVtYnMsCiAgICAgIHJlc29sdmU6IHsKICAgICAgICByZXNvbHZlZDogZnVuY3Rpb24gcmVzb2x2ZWQoJHJvdXRlLCBoaXN0b3J5KSB7CiAgICAgICAgICB2YXIgY29yZSA9IGRlcHMuY29yZSwKICAgICAgICAgICAgICBkYXRhID0gZGVwcy5kYXRhLAogICAgICAgICAgICAgIHNhdmVkVmlzdWFsaXphdGlvbnMgPSBkZXBzLnNhdmVkVmlzdWFsaXphdGlvbnMsCiAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbnMgPSBkZXBzLnZpc3VhbGl6YXRpb25zLAogICAgICAgICAgICAgIHRvYXN0Tm90aWZpY2F0aW9ucyA9IGRlcHMudG9hc3ROb3RpZmljYXRpb25zOwogICAgICAgICAgdmFyIHZpc1R5cGVzID0gdmlzdWFsaXphdGlvbnMuYWxsKCk7CiAgICAgICAgICB2YXIgdmlzVHlwZSA9ICgwLCBfbG9kYXNoLmZpbmQpKHZpc1R5cGVzLCB7CiAgICAgICAgICAgIG5hbWU6ICRyb3V0ZS5jdXJyZW50LnBhcmFtcy50eXBlCiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBzaG91bGRIYXZlSW5kZXggPSB2aXNUeXBlLnJlcXVpcmVzU2VhcmNoICYmIHZpc1R5cGUub3B0aW9ucy5zaG93SW5kZXhTZWxlY3Rpb247CiAgICAgICAgICB2YXIgaGFzSW5kZXggPSAkcm91dGUuY3VycmVudC5wYXJhbXMuaW5kZXhQYXR0ZXJuIHx8ICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5zYXZlZFNlYXJjaElkOwoKICAgICAgICAgIGlmIChzaG91bGRIYXZlSW5kZXggJiYgIWhhc0luZGV4KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5jcmVhdGVWaXN1YWxpemF0aW9uLm5vSW5kZXhQYXR0ZXJuT3JTYXZlZFNlYXJjaElkRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnWW91IG11c3QgcHJvdmlkZSBlaXRoZXIgYW4gaW5kZXhQYXR0ZXJuIG9yIGEgc2F2ZWRTZWFyY2hJZCcKICAgICAgICAgICAgfSkpOwogICAgICAgICAgfSAvLyBUaGlzIGRlbGF5IGlzIG5lZWRlZCB0byBwcmV2ZW50IHNvbWUgbmF2aWdhdGlvbiBpc3N1ZXMgaW4gRmlyZWZveC9TYWZhcmkuCiAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMva2liYW5hL2lzc3Vlcy82NTE2MQoKCiAgICAgICAgICB2YXIgZGVsYXkgPSBmdW5jdGlvbiBkZWxheShyZXMpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXMpOwogICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH07CgogICAgICAgICAgcmV0dXJuICgwLCBfcHVibGljLmVuc3VyZURlZmF1bHRJbmRleFBhdHRlcm4pKGNvcmUsIGRhdGEsIGhpc3RvcnkpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gc2F2ZWRWaXN1YWxpemF0aW9ucy5nZXQoJHJvdXRlLmN1cnJlbnQucGFyYW1zKTsKICAgICAgICAgIH0pLnRoZW4oZ2V0UmVzb2x2ZWRSZXN1bHRzKGRlcHMpKS50aGVuKGRlbGF5KS5jYXRjaCgoMCwgX3B1YmxpYy5yZWRpcmVjdFdoZW5NaXNzaW5nKSh7CiAgICAgICAgICAgIGhpc3Rvcnk6IGhpc3RvcnksCiAgICAgICAgICAgIG1hcHBpbmc6IF92aXN1YWxpemVfY29uc3RhbnRzLlZpc3VhbGl6ZUNvbnN0YW50cy5MQU5ESU5HX1BBR0VfUEFUSCwKICAgICAgICAgICAgdG9hc3ROb3RpZmljYXRpb25zOiB0b2FzdE5vdGlmaWNhdGlvbnMKICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pKS53aGVuKCIiLmNvbmNhdChfdmlzdWFsaXplX2NvbnN0YW50cy5WaXN1YWxpemVDb25zdGFudHMuRURJVF9QQVRILCAiLzppZCIpLCBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0cywgewogICAgICB0ZW1wbGF0ZTogX2VkaXRvci5kZWZhdWx0LAogICAgICBrN0JyZWFkY3J1bWJzOiBfYnJlYWRjcnVtYnMuZ2V0RWRpdEJyZWFkY3J1bWJzLAogICAgICByZXNvbHZlOiB7CiAgICAgICAgcmVzb2x2ZWQ6IGZ1bmN0aW9uIHJlc29sdmVkKCRyb3V0ZSwgaGlzdG9yeSkgewogICAgICAgICAgdmFyIGNocm9tZSA9IGRlcHMuY2hyb21lLAogICAgICAgICAgICAgIGNvcmUgPSBkZXBzLmNvcmUsCiAgICAgICAgICAgICAgZGF0YSA9IGRlcHMuZGF0YSwKICAgICAgICAgICAgICBzYXZlZFZpc3VhbGl6YXRpb25zID0gZGVwcy5zYXZlZFZpc3VhbGl6YXRpb25zLAogICAgICAgICAgICAgIHRvYXN0Tm90aWZpY2F0aW9ucyA9IGRlcHMudG9hc3ROb3RpZmljYXRpb25zOwogICAgICAgICAgcmV0dXJuICgwLCBfcHVibGljLmVuc3VyZURlZmF1bHRJbmRleFBhdHRlcm4pKGNvcmUsIGRhdGEsIGhpc3RvcnkpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gc2F2ZWRWaXN1YWxpemF0aW9ucy5nZXQoJHJvdXRlLmN1cnJlbnQucGFyYW1zLmlkKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhdmVkVmlzKSB7CiAgICAgICAgICAgIGNocm9tZS5yZWNlbnRseUFjY2Vzc2VkLmFkZChzYXZlZFZpcy5nZXRGdWxsUGF0aCgpLCBzYXZlZFZpcy50aXRsZSwgc2F2ZWRWaXMuaWQpOwogICAgICAgICAgICByZXR1cm4gc2F2ZWRWaXM7CiAgICAgICAgICB9KS50aGVuKGdldFJlc29sdmVkUmVzdWx0cyhkZXBzKSkuY2F0Y2goKDAsIF9wdWJsaWMucmVkaXJlY3RXaGVuTWlzc2luZykoewogICAgICAgICAgICBoaXN0b3J5OiBoaXN0b3J5LAogICAgICAgICAgICBtYXBwaW5nOiB7CiAgICAgICAgICAgICAgdmlzdWFsaXphdGlvbjogX3Zpc3VhbGl6ZV9jb25zdGFudHMuVmlzdWFsaXplQ29uc3RhbnRzLkxBTkRJTkdfUEFHRV9QQVRILAogICAgICAgICAgICAgIHNlYXJjaDogJy9tYW5hZ2VtZW50L2tpYmFuYS9vYmplY3RzL3NhdmVkVmlzdWFsaXphdGlvbnMvJyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5pZCwKICAgICAgICAgICAgICAnaW5kZXgtcGF0dGVybic6ICcvbWFuYWdlbWVudC9raWJhbmEvb2JqZWN0cy9zYXZlZFZpc3VhbGl6YXRpb25zLycgKyAkcm91dGUuY3VycmVudC5wYXJhbXMuaWQsCiAgICAgICAgICAgICAgJ2luZGV4LXBhdHRlcm4tZmllbGQnOiAnL21hbmFnZW1lbnQva2liYW5hL29iamVjdHMvc2F2ZWRWaXN1YWxpemF0aW9ucy8nICsgJHJvdXRlLmN1cnJlbnQucGFyYW1zLmlkCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvYXN0Tm90aWZpY2F0aW9uczogdG9hc3ROb3RpZmljYXRpb25zLAogICAgICAgICAgICBvbkJlZm9yZVJlZGlyZWN0OiBmdW5jdGlvbiBvbkJlZm9yZVJlZGlyZWN0KCkgewogICAgICAgICAgICAgIGRlcHMuc2V0QWN0aXZlVXJsKF92aXN1YWxpemVfY29uc3RhbnRzLlZpc3VhbGl6ZUNvbnN0YW50cy5MQU5ESU5HX1BBR0VfUEFUSCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pKS53aGVuKCJ2aXN1YWxpemUvOnRhaWwqPyIsIHsKICAgICAgcmVkaXJlY3RUbzogIi8iLmNvbmNhdChkZXBzLmNvbmZpZy5kZWZhdWx0QXBwSWQpCiAgICB9KTsKICB9KTsKfQ=="},null]}