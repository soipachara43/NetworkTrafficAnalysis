{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/visualize/np_ready/editor/editor.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/visualize/np_ready/editor/editor.js","mtime":1589249549866},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRFZGl0b3JEaXJlY3RpdmUgPSBpbml0RWRpdG9yRGlyZWN0aXZlOwoKdmFyIF9hbmd1bGFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJhbmd1bGFyIikpOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcnhqcyA9IHJlcXVpcmUoInJ4anMiKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldmVudHMgPSByZXF1aXJlKCJldmVudHMiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfbGliID0gcmVxdWlyZSgiLi9saWIiKTsKCnZhciBfdmlzdWFsaXplX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uL3Zpc3VhbGl6ZV9jb25zdGFudHMiKTsKCnZhciBfYnJlYWRjcnVtYnMgPSByZXF1aXJlKCIuLi9icmVhZGNydW1icyIpOwoKdmFyIF9oZWxwX21lbnVfdXRpbCA9IHJlcXVpcmUoIi4uL2hlbHBfbWVudS9oZWxwX21lbnVfdXRpbCIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2tpYmFuYV91dGlscy9wdWJsaWMiKTsKCnZhciBfcHVibGljMiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BsdWdpbnMva2liYW5hX3JlYWN0L3B1YmxpYyIpOwoKdmFyIF9wdWJsaWMzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9raWJhbmFfbGVnYWN5L3B1YmxpYyIpOwoKdmFyIF9wdWJsaWM0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9zYXZlZF9vYmplY3RzL3B1YmxpYyIpOwoKdmFyIF9wdWJsaWM1ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF92aXN1YWxpemF0aW9uX2VkaXRvciA9IHJlcXVpcmUoIi4vdmlzdWFsaXphdGlvbl9lZGl0b3IiKTsKCnZhciBfdmlzdWFsaXphdGlvbiA9IHJlcXVpcmUoIi4vdmlzdWFsaXphdGlvbiIpOwoKdmFyIF9sZWdhY3lfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uL2xlZ2FjeV9pbXBvcnRzIik7Cgp2YXIgX2tpYmFuYV9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uLy4uL2tpYmFuYV9zZXJ2aWNlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIGluaXRFZGl0b3JEaXJlY3RpdmUoYXBwLCBkZXBzKSB7CiAgYXBwLmRpcmVjdGl2ZSgndmlzdWFsaXplQXBwJywgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgY29udHJvbGxlckFzOiAndmlzdWFsaXplQXBwJywKICAgICAgY29udHJvbGxlcjogVmlzdWFsaXplQXBwQ29udHJvbGxlcgogICAgfTsKICB9KTsKICAoMCwgX3Zpc3VhbGl6YXRpb25fZWRpdG9yLmluaXRWaXNFZGl0b3JEaXJlY3RpdmUpKGFwcCwgZGVwcyk7CiAgKDAsIF92aXN1YWxpemF0aW9uLmluaXRWaXN1YWxpemF0aW9uRGlyZWN0aXZlKShhcHAsIGRlcHMpOwp9CgpmdW5jdGlvbiBWaXN1YWxpemVBcHBDb250cm9sbGVyKCRzY29wZSwgJHJvdXRlLCAkaW5qZWN0b3IsICR0aW1lb3V0LCBrYm5VcmxTdGF0ZVN0b3JhZ2UsIGhpc3RvcnkpIHsKICB2YXIgX2dldFNlcnZpY2VzID0gKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0U2VydmljZXMpKCksCiAgICAgIGluZGV4UGF0dGVybnMgPSBfZ2V0U2VydmljZXMuaW5kZXhQYXR0ZXJucywKICAgICAgbG9jYWxTdG9yYWdlID0gX2dldFNlcnZpY2VzLmxvY2FsU3RvcmFnZSwKICAgICAgdmlzdWFsaXplQ2FwYWJpbGl0aWVzID0gX2dldFNlcnZpY2VzLnZpc3VhbGl6ZUNhcGFiaWxpdGllcywKICAgICAgc2hhcmUgPSBfZ2V0U2VydmljZXMuc2hhcmUsCiAgICAgIHF1ZXJ5U2VydmljZSA9IF9nZXRTZXJ2aWNlcy5kYXRhLnF1ZXJ5LAogICAgICB0b2FzdE5vdGlmaWNhdGlvbnMgPSBfZ2V0U2VydmljZXMudG9hc3ROb3RpZmljYXRpb25zLAogICAgICBjaHJvbWUgPSBfZ2V0U2VydmljZXMuY2hyb21lLAogICAgICBnZXRCYXNlUGF0aCA9IF9nZXRTZXJ2aWNlcy5nZXRCYXNlUGF0aCwKICAgICAgX2dldFNlcnZpY2VzJGNvcmUgPSBfZ2V0U2VydmljZXMuY29yZSwKICAgICAgZG9jTGlua3MgPSBfZ2V0U2VydmljZXMkY29yZS5kb2NMaW5rcywKICAgICAgZmF0YWxFcnJvcnMgPSBfZ2V0U2VydmljZXMkY29yZS5mYXRhbEVycm9ycywKICAgICAgc2F2ZWRRdWVyeVNlcnZpY2UgPSBfZ2V0U2VydmljZXMuc2F2ZWRRdWVyeVNlcnZpY2UsCiAgICAgIHVpU2V0dGluZ3MgPSBfZ2V0U2VydmljZXMudWlTZXR0aW5ncywKICAgICAgSTE4bkNvbnRleHQgPSBfZ2V0U2VydmljZXMuSTE4bkNvbnRleHQsCiAgICAgIHNldEFjdGl2ZVVybCA9IF9nZXRTZXJ2aWNlcy5zZXRBY3RpdmVVcmwsCiAgICAgIHZpc3VhbGl6YXRpb25zID0gX2dldFNlcnZpY2VzLnZpc3VhbGl6YXRpb25zOwoKICB2YXIgZmlsdGVyTWFuYWdlciA9IHF1ZXJ5U2VydmljZS5maWx0ZXJNYW5hZ2VyLAogICAgICB0aW1lZmlsdGVyID0gcXVlcnlTZXJ2aWNlLnRpbWVmaWx0ZXIudGltZWZpbHRlcjsgLy8gc3RhcnRzIHN5bmNpbmcgYF9nYCBwb3J0aW9uIG9mIHVybCB3aXRoIHF1ZXJ5IHNlcnZpY2VzCgogIHZhciBfc3luY1F1ZXJ5U3RhdGVXaXRoVXIgPSAoMCwgX3B1YmxpYzUuc3luY1F1ZXJ5U3RhdGVXaXRoVXJsKShxdWVyeVNlcnZpY2UsIGtiblVybFN0YXRlU3RvcmFnZSksCiAgICAgIHN0b3BTeW5jaW5nUXVlcnlTZXJ2aWNlU3RhdGVXaXRoVXJsID0gX3N5bmNRdWVyeVN0YXRlV2l0aFVyLnN0b3A7IC8vIFJldHJpZXZlIHRoZSByZXNvbHZlZCBTYXZlZFZpcyBpbnN0YW5jZS4KCgogIHZhciBfJHJvdXRlJGN1cnJlbnQkbG9jYWwgPSAkcm91dGUuY3VycmVudC5sb2NhbHMucmVzb2x2ZWQsCiAgICAgIHZpcyA9IF8kcm91dGUkY3VycmVudCRsb2NhbC52aXMsCiAgICAgIHNhdmVkVmlzID0gXyRyb3V0ZSRjdXJyZW50JGxvY2FsLnNhdmVkVmlzLAogICAgICBzYXZlZFNlYXJjaCA9IF8kcm91dGUkY3VycmVudCRsb2NhbC5zYXZlZFNlYXJjaCwKICAgICAgZW1iZWRkYWJsZUhhbmRsZXIgPSBfJHJvdXRlJGN1cnJlbnQkbG9jYWwuZW1iZWRkYWJsZUhhbmRsZXI7CiAgJHNjb3BlLmV2ZW50RW1pdHRlciA9IG5ldyBfZXZlbnRzLkV2ZW50RW1pdHRlcigpOwoKICB2YXIgX2FwcGx5VmlzID0gZnVuY3Rpb24gX2FwcGx5VmlzKCkgewogICAgJHNjb3BlLiRhcHBseSgpOwogIH07IC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZGlnZXN0IGN5Y2xlLiBUaGlzIGlzIG5lZWRlZCB3aGVuIHZpcyBpcyB1cGRhdGVkIGZyb20gYSBnbG9iYWwgYW5ndWxhciBsaWtlIGluIHZpc3VhbGl6ZV9lbWJlZGRhYmxlLmpzLgoKCiAgJHNjb3BlLmV2ZW50RW1pdHRlci5vbignYXBwbHknLCBfYXBwbHlWaXMpOyAvLyB2aXMgaXMgaW5zdGFuY2Ugb2Ygc3JjL2xlZ2FjeS91aS9wdWJsaWMvdmlzL3Zpcy5qcy4KICAvLyBTZWFyY2hTb3VyY2UgaXMgYSBwcm9taXNlLWJhc2VkIHN0cmVhbSBvZiBzZWFyY2ggcmVzdWx0cyB0aGF0IGNhbiBpbmhlcml0IGZyb20gb3RoZXIgc2VhcmNoIHNvdXJjZXMuCgogIHZhciBzZWFyY2hTb3VyY2UgPSB2aXMuZGF0YS5zZWFyY2hTb3VyY2U7CiAgJHNjb3BlLnZpcyA9IHZpczsKICAkc2NvcGUuc2F2ZWRTZWFyY2ggPSBzYXZlZFNlYXJjaDsKICB2YXIgJGFwcFN0YXR1cyA9IHsKICAgIGRpcnR5OiAhc2F2ZWRWaXMuaWQKICB9OwogIHZhciBkZWZhdWx0UXVlcnkgPSB7CiAgICBxdWVyeTogJycsCiAgICBsYW5ndWFnZTogbG9jYWxTdG9yYWdlLmdldCgna2liYW5hLnVzZXJRdWVyeUxhbmd1YWdlJykgfHwgdWlTZXR0aW5ncy5nZXQoJ3NlYXJjaDpxdWVyeUxhbmd1YWdlJykKICB9OwoKICB2YXIgdmlzU3RhdGVUb0VkaXRvclN0YXRlID0gZnVuY3Rpb24gdmlzU3RhdGVUb0VkaXRvclN0YXRlKCkgewogICAgdmFyIHNhdmVkVmlzU3RhdGUgPSB2aXN1YWxpemF0aW9ucy5jb252ZXJ0RnJvbVNlcmlhbGl6ZWRWaXModmlzLnNlcmlhbGl6ZSgpKTsKICAgIHJldHVybiB7CiAgICAgIHVpU3RhdGU6IHZpcy51aVN0YXRlLnRvSlNPTigpLAogICAgICBxdWVyeTogdmlzLmRhdGEuc2VhcmNoU291cmNlLmdldE93bkZpZWxkKCdxdWVyeScpIHx8IGRlZmF1bHRRdWVyeSwKICAgICAgZmlsdGVyczogdmlzLmRhdGEuc2VhcmNoU291cmNlLmdldE93bkZpZWxkKCdmaWx0ZXInKSB8fCBbXSwKICAgICAgdmlzOiBfb2JqZWN0U3ByZWFkKHt9LCBzYXZlZFZpc1N0YXRlLnZpc1N0YXRlLCB7CiAgICAgICAgdGl0bGU6IHZpcy50aXRsZQogICAgICB9KSwKICAgICAgbGlua2VkOiAhIXNhdmVkVmlzLnNhdmVkU2VhcmNoSWQKICAgIH07CiAgfTsKCiAgdmFyIHN0YXRlRGVmYXVsdHMgPSB2aXNTdGF0ZVRvRWRpdG9yU3RhdGUoKTsKCiAgdmFyIF91c2VWaXN1YWxpemVBcHBTdGF0ZSA9ICgwLCBfbGliLnVzZVZpc3VhbGl6ZUFwcFN0YXRlKSh7CiAgICBzdGF0ZURlZmF1bHRzOiBzdGF0ZURlZmF1bHRzLAogICAga2JuVXJsU3RhdGVTdG9yYWdlOiBrYm5VcmxTdGF0ZVN0b3JhZ2UKICB9KSwKICAgICAgc3RhdGVDb250YWluZXIgPSBfdXNlVmlzdWFsaXplQXBwU3RhdGUuc3RhdGVDb250YWluZXIsCiAgICAgIHN0b3BTdGF0ZVN5bmMgPSBfdXNlVmlzdWFsaXplQXBwU3RhdGUuc3RvcFN0YXRlU3luYzsKCiAgJHNjb3BlLmV2ZW50RW1pdHRlci5vbignZGlydHlTdGF0ZUNoYW5nZScsIGZ1bmN0aW9uIChfcmVmKSB7CiAgICB2YXIgaXNEaXJ0eSA9IF9yZWYuaXNEaXJ0eTsKCiAgICBpZiAoIWlzRGlydHkpIHsKICAgICAgc3RhdGVDb250YWluZXIudHJhbnNpdGlvbnMudXBkYXRlVmlzU3RhdGUodmlzU3RhdGVUb0VkaXRvclN0YXRlKCkudmlzKTsKICAgIH0KCiAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICRzY29wZS5kaXJ0eSA9IGlzRGlydHk7CiAgICB9KTsKICB9KTsKICAkc2NvcGUuZXZlbnRFbWl0dGVyLm9uKCd1cGRhdGVWaXMnLCBmdW5jdGlvbiAoKSB7CiAgICBlbWJlZGRhYmxlSGFuZGxlci5yZWxvYWQoKTsKICB9KTsKICAkc2NvcGUuZW1iZWRkYWJsZUhhbmRsZXIgPSBlbWJlZGRhYmxlSGFuZGxlcjsKICAkc2NvcGUudG9wTmF2TWVudSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmlzdWFsaXplQ2FwYWJpbGl0aWVzLnNhdmUgPyBbewogICAgaWQ6ICdzYXZlJywKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnRvcE5hdk1lbnUuc2F2ZVZpc3VhbGl6YXRpb25CdXR0b25MYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdzYXZlJwogICAgfSksCiAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi52aXN1YWxpemUudG9wTmF2TWVudS5zYXZlVmlzdWFsaXphdGlvbkJ1dHRvbkFyaWFMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTYXZlIFZpc3VhbGl6YXRpb24nCiAgICB9KSwKICAgIHRlc3RJZDogJ3Zpc3VhbGl6ZVNhdmVCdXR0b24nLAogICAgZGlzYWJsZUJ1dHRvbjogZnVuY3Rpb24gZGlzYWJsZUJ1dHRvbigpIHsKICAgICAgcmV0dXJuIEJvb2xlYW4oJHNjb3BlLmRpcnR5KTsKICAgIH0sCiAgICB0b29sdGlwOiBmdW5jdGlvbiB0b29sdGlwKCkgewogICAgICBpZiAoJHNjb3BlLmRpcnR5KSB7CiAgICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLnRvcE5hdk1lbnUuc2F2ZVZpc3VhbGl6YXRpb25EaXNhYmxlZEJ1dHRvblRvb2x0aXAnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FwcGx5IG9yIERpc2NhcmQgeW91ciBjaGFuZ2VzIGJlZm9yZSBzYXZpbmcnCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBydW46IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9ydW4gPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBvblNhdmUsIGNvbmZpcm1CdXR0b25MYWJlbCwgc2F2ZU1vZGFsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG9uU2F2ZSA9IGZ1bmN0aW9uIG9uU2F2ZShfcmVmMikgewogICAgICAgICAgICAgICAgICB2YXIgbmV3VGl0bGUgPSBfcmVmMi5uZXdUaXRsZSwKICAgICAgICAgICAgICAgICAgICAgIG5ld0NvcHlPblNhdmUgPSBfcmVmMi5uZXdDb3B5T25TYXZlLAogICAgICAgICAgICAgICAgICAgICAgaXNUaXRsZUR1cGxpY2F0ZUNvbmZpcm1lZCA9IF9yZWYyLmlzVGl0bGVEdXBsaWNhdGVDb25maXJtZWQsCiAgICAgICAgICAgICAgICAgICAgICBvblRpdGxlRHVwbGljYXRlID0gX3JlZjIub25UaXRsZUR1cGxpY2F0ZSwKICAgICAgICAgICAgICAgICAgICAgIG5ld0Rlc2NyaXB0aW9uID0gX3JlZjIubmV3RGVzY3JpcHRpb247CiAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGl0bGUgPSBzYXZlZFZpcy50aXRsZTsKICAgICAgICAgICAgICAgICAgc2F2ZWRWaXMudGl0bGUgPSBuZXdUaXRsZTsKICAgICAgICAgICAgICAgICAgc2F2ZWRWaXMuY29weU9uU2F2ZSA9IG5ld0NvcHlPblNhdmU7CiAgICAgICAgICAgICAgICAgIHNhdmVkVmlzLmRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247CiAgICAgICAgICAgICAgICAgIHZhciBzYXZlT3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgICAgICBjb25maXJtT3ZlcndyaXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBpc1RpdGxlRHVwbGljYXRlQ29uZmlybWVkOiBpc1RpdGxlRHVwbGljYXRlQ29uZmlybWVkLAogICAgICAgICAgICAgICAgICAgIG9uVGl0bGVEdXBsaWNhdGU6IG9uVGl0bGVEdXBsaWNhdGUKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvU2F2ZShzYXZlT3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc2F2ZSB3YXNuJ3Qgc3VjY2Vzc2Z1bCwgcHV0IHRoZSBvcmlnaW5hbCB2YWx1ZXMgYmFjay4KICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmlkIHx8IHJlc3BvbnNlLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICBzYXZlZFZpcy50aXRsZSA9IGN1cnJlbnRUaXRsZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25MYWJlbCA9ICRzY29wZS5pc0FkZFRvRGFzaE1vZGUoKSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgICAgICAgIGlkOiAia2JuLnZpc3VhbGl6ZS5zYXZlRGlhbG9nLnNhdmVBbmRBZGRUb0Rhc2hib2FyZEJ1dHRvbkxhYmVsIiwKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZlIGFuZCBhZGQgdG8gZGFzaGJvYXJkIgogICAgICAgICAgICAgICAgfSkgOiBudWxsOwogICAgICAgICAgICAgICAgc2F2ZU1vZGFsID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcHVibGljNC5TYXZlZE9iamVjdFNhdmVNb2RhbCwgewogICAgICAgICAgICAgICAgICBvblNhdmU6IG9uU2F2ZSwKICAgICAgICAgICAgICAgICAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LAogICAgICAgICAgICAgICAgICB0aXRsZTogc2F2ZWRWaXMudGl0bGUsCiAgICAgICAgICAgICAgICAgIHNob3dDb3B5T25TYXZlOiBzYXZlZFZpcy5pZCA/IHRydWUgOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgb2JqZWN0VHlwZTogInZpc3VhbGl6YXRpb24iLAogICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uTGFiZWw6IGNvbmZpcm1CdXR0b25MYWJlbCwKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHNhdmVkVmlzLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICBzaG93RGVzY3JpcHRpb246IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgKDAsIF9wdWJsaWM0LnNob3dTYXZlTW9kYWwpKHNhdmVNb2RhbCwgSTE4bkNvbnRleHQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcnVuKCkgewogICAgICAgIHJldHVybiBfcnVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBydW47CiAgICB9KCkKICB9XSA6IFtdKSwgW3sKICAgIGlkOiAnc2hhcmUnLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udG9wTmF2TWVudS5zaGFyZVZpc3VhbGl6YXRpb25CdXR0b25MYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdzaGFyZScKICAgIH0pLAogICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLnRvcE5hdk1lbnUuc2hhcmVWaXN1YWxpemF0aW9uQnV0dG9uQXJpYUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1NoYXJlIFZpc3VhbGl6YXRpb24nCiAgICB9KSwKICAgIHRlc3RJZDogJ3NoYXJlVG9wTmF2QnV0dG9uJywKICAgIHJ1bjogZnVuY3Rpb24gcnVuKGFuY2hvckVsZW1lbnQpIHsKICAgICAgdmFyIGhhc1VuYXBwbGllZENoYW5nZXMgPSAkc2NvcGUuZGlydHk7CiAgICAgIHZhciBoYXNVbnNhdmVkQ2hhbmdlcyA9ICRhcHBTdGF0dXMuZGlydHk7CiAgICAgIHNoYXJlLnRvZ2dsZVNoYXJlQ29udGV4dE1lbnUoewogICAgICAgIGFuY2hvckVsZW1lbnQ6IGFuY2hvckVsZW1lbnQsCiAgICAgICAgYWxsb3dFbWJlZDogdHJ1ZSwKICAgICAgICBhbGxvd1Nob3J0VXJsOiB2aXN1YWxpemVDYXBhYmlsaXRpZXMuY3JlYXRlU2hvcnRVcmwsCiAgICAgICAgc2hhcmVhYmxlVXJsOiAoMCwgX3B1YmxpYy51bmhhc2hVcmwpKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSwKICAgICAgICBvYmplY3RJZDogc2F2ZWRWaXMuaWQsCiAgICAgICAgb2JqZWN0VHlwZTogJ3Zpc3VhbGl6YXRpb24nLAogICAgICAgIHNoYXJpbmdEYXRhOiB7CiAgICAgICAgICB0aXRsZTogc2F2ZWRWaXMudGl0bGUKICAgICAgICB9LAogICAgICAgIGlzRGlydHk6IGhhc1VuYXBwbGllZENoYW5nZXMgfHwgaGFzVW5zYXZlZENoYW5nZXMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAgaWQ6ICdpbnNwZWN0b3InLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udG9wTmF2TWVudS5vcGVuSW5zcGVjdG9yQnV0dG9uTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnaW5zcGVjdCcKICAgIH0pLAogICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLnRvcE5hdk1lbnUub3Blbkluc3BlY3RvckJ1dHRvbkFyaWFMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdPcGVuIEluc3BlY3RvciBmb3IgdmlzdWFsaXphdGlvbicKICAgIH0pLAogICAgdGVzdElkOiAnb3Blbkluc3BlY3RvckJ1dHRvbicsCiAgICBkaXNhYmxlQnV0dG9uOiBmdW5jdGlvbiBkaXNhYmxlQnV0dG9uKCkgewogICAgICByZXR1cm4gIWVtYmVkZGFibGVIYW5kbGVyLmhhc0luc3BlY3RvciB8fCAhZW1iZWRkYWJsZUhhbmRsZXIuaGFzSW5zcGVjdG9yKCk7CiAgICB9LAogICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgIHZhciBpbnNwZWN0b3JTZXNzaW9uID0gZW1iZWRkYWJsZUhhbmRsZXIub3Blbkluc3BlY3RvcigpOyAvLyBDbG9zZSB0aGUgaW5zcGVjdG9yIGlmIHRoaXMgc2NvcGUgaXMgZGVzdHJveWVkIChlLmcuIGJlY2F1c2UgdGhlIHVzZXIgbmF2aWdhdGVzIGF3YXkpLgoKICAgICAgdmFyIHJlbW92ZVdhdGNoID0gJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGluc3BlY3RvclNlc3Npb24uY2xvc2UoKTsKICAgICAgfSk7IC8vIFJlbW92ZSB0aGF0IHdhdGNoIGluIGNhc2UgdGhlIHVzZXIgY2xvc2VzIHRoZSBpbnNwZWN0b3Igc2Vzc2lvbiBoZXJzZWxmLgoKICAgICAgaW5zcGVjdG9yU2Vzc2lvbi5vbkNsb3NlLmZpbmFsbHkocmVtb3ZlV2F0Y2gpOwogICAgfSwKICAgIHRvb2x0aXA6IGZ1bmN0aW9uIHRvb2x0aXAoKSB7CiAgICAgIGlmICghZW1iZWRkYWJsZUhhbmRsZXIuaGFzSW5zcGVjdG9yIHx8ICFlbWJlZGRhYmxlSGFuZGxlci5oYXNJbnNwZWN0b3IoKSkgewogICAgICAgIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS50b3BOYXZNZW51Lm9wZW5JbnNwZWN0b3JEaXNhYmxlZEJ1dHRvblRvb2x0aXAnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlRoaXMgdmlzdWFsaXphdGlvbiBkb2Vzbid0IHN1cHBvcnQgYW55IGluc3BlY3RvcnMuIgogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAgaWQ6ICdyZWZyZXNoJywKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnRvcE5hdk1lbnUucmVmcmVzaEJ1dHRvbkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ3JlZnJlc2gnCiAgICB9KSwKICAgIGRlc2NyaXB0aW9uOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS50b3BOYXZNZW51LnJlZnJlc2hCdXR0b25BcmlhTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVmcmVzaCcKICAgIH0pLAogICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgIGVtYmVkZGFibGVIYW5kbGVyLnJlbG9hZCgpOwogICAgfSwKICAgIHRlc3RJZDogJ3Zpc3VhbGl6ZVJlZnJlc2hCdXR0b24nCiAgfV0pOwoKICBpZiAoc2F2ZWRWaXMuaWQpIHsKICAgIGNocm9tZS5kb2NUaXRsZS5jaGFuZ2Uoc2F2ZWRWaXMudGl0bGUpOwogIH0gLy8gc3luYyBpbml0aWFsIGFwcCBmaWx0ZXJzIGZyb20gc3RhdGUgdG8gZmlsdGVyTWFuYWdlcgoKCiAgZmlsdGVyTWFuYWdlci5zZXRBcHBGaWx0ZXJzKF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAoc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKS5maWx0ZXJzKSk7IC8vIHNldHVwIHN5bmNpbmcgb2YgYXBwIGZpbHRlcnMgYmV0d2VlbiBhcHBTdGF0ZSBhbmQgZmlsdGVyTWFuYWdlcgoKICB2YXIgc3RvcFN5bmNpbmdBcHBGaWx0ZXJzID0gKDAsIF9wdWJsaWM1LmNvbm5lY3RUb1F1ZXJ5U3RhdGUpKHF1ZXJ5U2VydmljZSwgewogICAgc2V0OiBmdW5jdGlvbiBzZXQoX3JlZjMpIHsKICAgICAgdmFyIGZpbHRlcnMgPSBfcmVmMy5maWx0ZXJzOwogICAgICByZXR1cm4gc3RhdGVDb250YWluZXIudHJhbnNpdGlvbnMuc2V0KCdmaWx0ZXJzJywgZmlsdGVycyk7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZmlsdGVyczogc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKS5maWx0ZXJzCiAgICAgIH07CiAgICB9LAogICAgc3RhdGUkOiBzdGF0ZUNvbnRhaW5lci5zdGF0ZSQucGlwZSgoMCwgX29wZXJhdG9ycy5tYXApKGZ1bmN0aW9uIChzdGF0ZSkgewogICAgICByZXR1cm4gewogICAgICAgIGZpbHRlcnM6IHN0YXRlLmZpbHRlcnMKICAgICAgfTsKICAgIH0pKQogIH0sIHsKICAgIGZpbHRlcnM6IF9wdWJsaWM1LmVzRmlsdGVycy5GaWx0ZXJTdGF0ZVN0b3JlLkFQUF9TVEFURQogIH0pOwoKICB2YXIgc3RvcEFsbFN5bmNpbmcgPSBmdW5jdGlvbiBzdG9wQWxsU3luY2luZygpIHsKICAgIHN0b3BTdGF0ZVN5bmMoKTsKICAgIHN0b3BTeW5jaW5nUXVlcnlTZXJ2aWNlU3RhdGVXaXRoVXJsKCk7CiAgICBzdG9wU3luY2luZ0FwcEZpbHRlcnMoKTsKICB9OyAvLyBUaGUgc2F2ZWRWaXMgaXMgcHVsbGVkIGZyb20gZWxhc3RpY3NlYXJjaCwgYnV0IHRoZSBhcHBTdGF0ZSBpcyBwdWxsZWQgZnJvbSB0aGUgdXJsLCB3aXRoIHRoZQogIC8vIGRlZmF1bHRzIGFwcGxpZWQuIElmIHRoZSB1cmwgd2FzIGZyb20gYSBwcmV2aW91cyBzZXNzaW9uIHdoaWNoIGluY2x1ZGVkIG1vZGlmaWNhdGlvbnMgdG8gdGhlCiAgLy8gYXBwU3RhdGUgdGhlbiB0aGV5IHdvbid0IGJlIGVxdWFsLgoKCiAgaWYgKCFfbG9kYXNoLmRlZmF1bHQuaXNFcXVhbChzdGF0ZUNvbnRhaW5lci5nZXRTdGF0ZSgpLnZpcywgc3RhdGVEZWZhdWx0cy52aXMpKSB7CiAgICB0cnkgewogICAgICB2YXIgX3N0YXRlQ29udGFpbmVyJGdldFN0ID0gc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKS52aXMsCiAgICAgICAgICBhZ2dzID0gX3N0YXRlQ29udGFpbmVyJGdldFN0LmFnZ3MsCiAgICAgICAgICB2aXNTdGF0ZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfc3RhdGVDb250YWluZXIkZ2V0U3QsIFsiYWdncyJdKTsKCiAgICAgIHZpcy5zZXRTdGF0ZShfb2JqZWN0U3ByZWFkKHt9LCB2aXNTdGF0ZSwgewogICAgICAgIGRhdGE6IHsKICAgICAgICAgIGFnZ3M6IGFnZ3MKICAgICAgICB9CiAgICAgIH0pKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIC8vIHN0b3Agc3luY2luZyB1cmwgdXBkdGVzIHdpdGggdGhlIHN0YXRlIHRvIHByZXZlbnQgZXh0cmEgc3luY2luZwogICAgICBzdG9wQWxsU3luY2luZygpOwogICAgICB0b2FzdE5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyh7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLnZpc3VhbGl6YXRpb25UeXBlSW52YWxpZE5vdGlmaWNhdGlvbk1lc3NhZ2UnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0ludmFsaWQgdmlzdWFsaXphdGlvbiB0eXBlJwogICAgICAgIH0pLAogICAgICAgIHRleHQ6ICgwLCBfcHVibGljMi50b01vdW50UG9pbnQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3B1YmxpYzIuTWFya2Rvd25TaW1wbGUsIG51bGwsIGVycm9yLm1lc3NhZ2UpKQogICAgICB9KTsKICAgICAgaGlzdG9yeS5yZXBsYWNlKCIiLmNvbmNhdChfdmlzdWFsaXplX2NvbnN0YW50cy5WaXN1YWxpemVDb25zdGFudHMuTEFORElOR19QQUdFX1BBVEgsICI/bm90Rm91bmQ9dmlzdWFsaXphdGlvbiIpKTsgLy8gcHJldmVudCBmdXJ0aGVyIGNvbnRyb2xsZXIgZXhlY3V0aW9uCgogICAgICByZXR1cm47CiAgICB9CiAgfQoKICAkc2NvcGUuZmlsdGVycyA9IGZpbHRlck1hbmFnZXIuZ2V0RmlsdGVycygpOwoKICAkc2NvcGUub25GaWx0ZXJzVXBkYXRlZCA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7CiAgICAvLyBUaGUgZmlsdGVycyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IHdoZW4gdGhlIGZpbHRlck1hbmFnZXIgZW1pdHMgYW4gdXBkYXRlIGV2ZW50IChzZWUgYmVsb3cpCiAgICBmaWx0ZXJNYW5hZ2VyLnNldEZpbHRlcnMoZmlsdGVycyk7CiAgfTsKCiAgJHNjb3BlLnNob3dTYXZlUXVlcnkgPSB2aXN1YWxpemVDYXBhYmlsaXRpZXMuc2F2ZVF1ZXJ5OwogICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHZpc3VhbGl6ZUNhcGFiaWxpdGllcy5zYXZlUXVlcnk7CiAgfSwgZnVuY3Rpb24gKG5ld0NhcGFiaWxpdHkpIHsKICAgICRzY29wZS5zaG93U2F2ZVF1ZXJ5ID0gbmV3Q2FwYWJpbGl0eTsKICB9KTsKCiAgdmFyIHVwZGF0ZVNhdmVkUXVlcnlGcm9tVXJsID0gZnVuY3Rpb24gdXBkYXRlU2F2ZWRRdWVyeUZyb21Vcmwoc2F2ZWRRdWVyeUlkKSB7CiAgICBpZiAoIXNhdmVkUXVlcnlJZCkgewogICAgICBkZWxldGUgJHNjb3BlLnNhdmVkUXVlcnk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoJHNjb3BlLnNhdmVkUXVlcnkgJiYgJHNjb3BlLnNhdmVkUXVlcnkuaWQgPT09IHNhdmVkUXVlcnlJZCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgc2F2ZWRRdWVyeVNlcnZpY2UuZ2V0U2F2ZWRRdWVyeShzYXZlZFF1ZXJ5SWQpLnRoZW4oZnVuY3Rpb24gKHNhdmVkUXVlcnkpIHsKICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS51cGRhdGVTYXZlZFF1ZXJ5KHNhdmVkUXVlcnkpOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIGluaXQoKSB7CiAgICBpZiAodmlzLmRhdGEuaW5kZXhQYXR0ZXJuKSB7CiAgICAgICRzY29wZS5pbmRleFBhdHRlcm4gPSB2aXMuZGF0YS5pbmRleFBhdHRlcm47CiAgICB9IGVsc2UgewogICAgICBpbmRleFBhdHRlcm5zLmdldERlZmF1bHQoKS50aGVuKGZ1bmN0aW9uIChkZWZhdWx0SW5kZXhQYXR0ZXJuKSB7CiAgICAgICAgJHNjb3BlLmluZGV4UGF0dGVybiA9IGRlZmF1bHRJbmRleFBhdHRlcm47CiAgICAgIH0pOwogICAgfQoKICAgIHZhciBpbml0aWFsU3RhdGUgPSBzdGF0ZUNvbnRhaW5lci5nZXRTdGF0ZSgpOwoKICAgIHZhciBoYW5kbGVMaW5rZWRTZWFyY2ggPSBmdW5jdGlvbiBoYW5kbGVMaW5rZWRTZWFyY2gobGlua2VkKSB7CiAgICAgIGlmIChsaW5rZWQgJiYgIXNhdmVkVmlzLnNhdmVkU2VhcmNoSWQgJiYgc2F2ZWRTZWFyY2gpIHsKICAgICAgICBzYXZlZFZpcy5zYXZlZFNlYXJjaElkID0gc2F2ZWRTZWFyY2guaWQ7CiAgICAgICAgdmlzLmRhdGEuc2F2ZWRTZWFyY2hJZCA9IHNhdmVkU2VhcmNoLmlkOwogICAgICAgIHNlYXJjaFNvdXJjZS5zZXRQYXJlbnQoc2F2ZWRTZWFyY2guc2VhcmNoU291cmNlKTsKICAgICAgfSBlbHNlIGlmICghbGlua2VkICYmIHNhdmVkVmlzLnNhdmVkU2VhcmNoSWQpIHsKICAgICAgICBkZWxldGUgc2F2ZWRWaXMuc2F2ZWRTZWFyY2hJZDsKICAgICAgICBkZWxldGUgdmlzLmRhdGEuc2F2ZWRTZWFyY2hJZDsKICAgICAgfQogICAgfTsgLy8gQ3JlYXRlIGEgUGVyc2lzdGVkU3RhdGUgaW5zdGFuY2UgZm9yIHVpU3RhdGUuCgoKICAgIHZhciBfbWFrZVN0YXRlZnVsID0gKDAsIF9saWIubWFrZVN0YXRlZnVsKSgndWlTdGF0ZScsIHN0YXRlQ29udGFpbmVyKSwKICAgICAgICBwZXJzaXN0ZWRTdGF0ZSA9IF9tYWtlU3RhdGVmdWwucGVyc2lzdGVkU3RhdGUsCiAgICAgICAgdW5zdWJzY3JpYmVQZXJzaXN0ZWQgPSBfbWFrZVN0YXRlZnVsLnVuc3Vic2NyaWJlUGVyc2lzdGVkLAogICAgICAgIHBlcnNpc3RPbkNoYW5nZSA9IF9tYWtlU3RhdGVmdWwucGVyc2lzdE9uQ2hhbmdlOwoKICAgIHZpcy51aVN0YXRlID0gcGVyc2lzdGVkU3RhdGU7CiAgICAkc2NvcGUudWlTdGF0ZSA9IHBlcnNpc3RlZFN0YXRlOwogICAgJHNjb3BlLnNhdmVkVmlzID0gc2F2ZWRWaXM7CiAgICAkc2NvcGUucXVlcnkgPSBpbml0aWFsU3RhdGUucXVlcnk7CiAgICAkc2NvcGUuc2VhcmNoU291cmNlID0gc2VhcmNoU291cmNlOwogICAgJHNjb3BlLnJlZnJlc2hJbnRlcnZhbCA9IHRpbWVmaWx0ZXIuZ2V0UmVmcmVzaEludGVydmFsKCk7CiAgICBoYW5kbGVMaW5rZWRTZWFyY2goaW5pdGlhbFN0YXRlLmxpbmtlZCk7CiAgICB2YXIgYWRkVG9EYXNoTW9kZSA9ICRyb3V0ZS5jdXJyZW50LnBhcmFtc1tfbGVnYWN5X2ltcG9ydHMuRGFzaGJvYXJkQ29uc3RhbnRzLkFERF9WSVNVQUxJWkFUSU9OX1RPX0RBU0hCT0FSRF9NT0RFX1BBUkFNXTsKICAgICgwLCBfcHVibGljLnJlbW92ZVF1ZXJ5UGFyYW0pKGhpc3RvcnksIF9sZWdhY3lfaW1wb3J0cy5EYXNoYm9hcmRDb25zdGFudHMuQUREX1ZJU1VBTElaQVRJT05fVE9fREFTSEJPQVJEX01PREVfUEFSQU0pOwoKICAgICRzY29wZS5pc0FkZFRvRGFzaE1vZGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBhZGRUb0Rhc2hNb2RlOwogICAgfTsKCiAgICAkc2NvcGUuc2hvd0ZpbHRlckJhciA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHZpcy50eXBlLm9wdGlvbnMuc2hvd0ZpbHRlckJhcjsKICAgIH07CgogICAgJHNjb3BlLnNob3dRdWVyeUlucHV0ID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdmlzLnR5cGUucmVxdWlyZXNTZWFyY2ggJiYgdmlzLnR5cGUub3B0aW9ucy5zaG93UXVlcnlCYXI7CiAgICB9OwoKICAgICRzY29wZS5zaG93UXVlcnlCYXJUaW1lUGlja2VyID0gZnVuY3Rpb24gKCkgewogICAgICAvLyB0c3ZiIGxvYWRzIHdpdGhvdXQgYW4gaW5kZXhQYXR0ZXJuIGluaXRpYWxseSAoVE9ETyBpbnZlc3RpZ2F0ZSkuCiAgICAgIC8vIGhpZGUgdGltZWZpbHRlciBvbmx5IGlmIHRpbWVGaWVsZE5hbWUgaXMgZXhwbGljaXRseSB1bmRlZmluZWQuCiAgICAgIHZhciBoYXNUaW1lRmllbGQgPSB2aXMuZGF0YS5pbmRleFBhdHRlcm4gPyAhIXZpcy5kYXRhLmluZGV4UGF0dGVybi50aW1lRmllbGROYW1lIDogdHJ1ZTsKICAgICAgcmV0dXJuIHZpcy50eXBlLm9wdGlvbnMuc2hvd1RpbWVQaWNrZXIgJiYgaGFzVGltZUZpZWxkOwogICAgfTsKCiAgICAkc2NvcGUudGltZVJhbmdlID0gdGltZWZpbHRlci5nZXRUaW1lKCk7CiAgICB2YXIgdW5zdWJzY3JpYmVTdGF0ZVVwZGF0ZXMgPSBzdGF0ZUNvbnRhaW5lci5zdWJzY3JpYmUoZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgIHZhciBuZXdRdWVyeSA9ICgwLCBfbGVnYWN5X2ltcG9ydHMubWlncmF0ZUxlZ2FjeVF1ZXJ5KShzdGF0ZS5xdWVyeSk7CgogICAgICBpZiAoIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKHN0YXRlLnF1ZXJ5LCBuZXdRdWVyeSkpIHsKICAgICAgICBzdGF0ZUNvbnRhaW5lci50cmFuc2l0aW9ucy5zZXQoJ3F1ZXJ5JywgbmV3UXVlcnkpOwogICAgICB9CgogICAgICBwZXJzaXN0T25DaGFuZ2Uoc3RhdGUpOwogICAgICB1cGRhdGVTYXZlZFF1ZXJ5RnJvbVVybChzdGF0ZS5zYXZlZFF1ZXJ5KTsgLy8gaWYgdGhlIGJyb3dzZXIgaGlzdG9yeSB3YXMgY2hhbmdlZCBtYW51YWxseSB3ZSBuZWVkIHRvIHJlZmxlY3QgY2hhbmdlcyBpbiB0aGUgZWRpdG9yCgogICAgICBpZiAoIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKF9vYmplY3RTcHJlYWQoe30sIHZpc3VhbGl6YXRpb25zLmNvbnZlcnRGcm9tU2VyaWFsaXplZFZpcyh2aXMuc2VyaWFsaXplKCkpLnZpc1N0YXRlLCB7CiAgICAgICAgdGl0bGU6IHZpcy50aXRsZQogICAgICB9KSwgc3RhdGUudmlzKSkgewogICAgICAgIHZhciBfc3RhdGUkdmlzID0gc3RhdGUudmlzLAogICAgICAgICAgICBfYWdncyA9IF9zdGF0ZSR2aXMuYWdncywKICAgICAgICAgICAgX3Zpc1N0YXRlID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9zdGF0ZSR2aXMsIFsiYWdncyJdKTsKCiAgICAgICAgdmlzLnNldFN0YXRlKF9vYmplY3RTcHJlYWQoe30sIF92aXNTdGF0ZSwgewogICAgICAgICAgZGF0YTogewogICAgICAgICAgICBhZ2dzOiBfYWdncwogICAgICAgICAgfQogICAgICAgIH0pKTsKICAgICAgICBlbWJlZGRhYmxlSGFuZGxlci5yZWxvYWQoKTsKICAgICAgICAkc2NvcGUuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZUVkaXRvcicpOwogICAgICB9CgogICAgICAkYXBwU3RhdHVzLmRpcnR5ID0gdHJ1ZTsKICAgICAgJHNjb3BlLmZldGNoKCk7CiAgICB9KTsKCiAgICB2YXIgdXBkYXRlVGltZVJhbmdlID0gZnVuY3Rpb24gdXBkYXRlVGltZVJhbmdlKCkgewogICAgICAkc2NvcGUudGltZVJhbmdlID0gdGltZWZpbHRlci5nZXRUaW1lKCk7CiAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdyZW5kZXInKTsKICAgIH07IC8vIHVwZGF0ZSB0aGUgcXVlcnkgaWYgc2F2ZWRRdWVyeSBpcyBzdG9yZWQKCgogICAgdXBkYXRlU2F2ZWRRdWVyeUZyb21VcmwoaW5pdGlhbFN0YXRlLnNhdmVkUXVlcnkpOwogICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBuZXcgX3J4anMuU3Vic2NyaXB0aW9uKCk7CiAgICBzdWJzY3JpcHRpb25zLmFkZCgoMCwgX2xlZ2FjeV9pbXBvcnRzLnN1YnNjcmliZVdpdGhTY29wZSkoJHNjb3BlLCB0aW1lZmlsdGVyLmdldFJlZnJlc2hJbnRlcnZhbFVwZGF0ZSQoKSwgewogICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkgewogICAgICAgICRzY29wZS5yZWZyZXNoSW50ZXJ2YWwgPSB0aW1lZmlsdGVyLmdldFJlZnJlc2hJbnRlcnZhbCgpOwogICAgICB9CiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgcmV0dXJuICgwLCBfcHVibGljMy5hZGRGYXRhbEVycm9yKShmYXRhbEVycm9ycywgZXJyb3IpOwogICAgfSkpOwogICAgc3Vic2NyaXB0aW9ucy5hZGQoKDAsIF9sZWdhY3lfaW1wb3J0cy5zdWJzY3JpYmVXaXRoU2NvcGUpKCRzY29wZSwgdGltZWZpbHRlci5nZXRUaW1lVXBkYXRlJCgpLCB7CiAgICAgIG5leHQ6IHVwZGF0ZVRpbWVSYW5nZQogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHJldHVybiAoMCwgX3B1YmxpYzMuYWRkRmF0YWxFcnJvcikoZmF0YWxFcnJvcnMsIGVycm9yKTsKICAgIH0pKTsKICAgIHN1YnNjcmlwdGlvbnMuYWRkKGNocm9tZS5nZXRJc1Zpc2libGUkKCkuc3Vic2NyaWJlKGZ1bmN0aW9uIChpc1Zpc2libGUpIHsKICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5pc1Zpc2libGUgPSBpc1Zpc2libGU7CiAgICAgIH0pOwogICAgfSkpOyAvLyB1cGRhdGUgdGhlIHNlYXJjaFNvdXJjZSB3aGVuIHF1ZXJ5IHVwZGF0ZXMKCiAgICAkc2NvcGUuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc3RhdGVDb250YWluZXIkZ2V0U3QyID0gc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKSwKICAgICAgICAgIHF1ZXJ5ID0gX3N0YXRlQ29udGFpbmVyJGdldFN0Mi5xdWVyeSwKICAgICAgICAgIGxpbmtlZCA9IF9zdGF0ZUNvbnRhaW5lciRnZXRTdDIubGlua2VkLAogICAgICAgICAgZmlsdGVycyA9IF9zdGF0ZUNvbnRhaW5lciRnZXRTdDIuZmlsdGVyczsKCiAgICAgICRzY29wZS5xdWVyeSA9IHF1ZXJ5OwogICAgICBoYW5kbGVMaW5rZWRTZWFyY2gobGlua2VkKTsKICAgICAgdmlzLmRhdGEuc2VhcmNoU291cmNlLnNldEZpZWxkKCdxdWVyeScsIHF1ZXJ5KTsKICAgICAgdmlzLmRhdGEuc2VhcmNoU291cmNlLnNldEZpZWxkKCdmaWx0ZXInLCBmaWx0ZXJzKTsKICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlbmRlcicpOwogICAgfTsgLy8gdXBkYXRlIHRoZSBzZWFyY2hTb3VyY2Ugd2hlbiBmaWx0ZXJzIHVwZGF0ZQoKCiAgICBzdWJzY3JpcHRpb25zLmFkZCgoMCwgX2xlZ2FjeV9pbXBvcnRzLnN1YnNjcmliZVdpdGhTY29wZSkoJHNjb3BlLCBmaWx0ZXJNYW5hZ2VyLmdldFVwZGF0ZXMkKCksIHsKICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgICAkc2NvcGUuZmlsdGVycyA9IGZpbHRlck1hbmFnZXIuZ2V0RmlsdGVycygpOwogICAgICB9CiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgcmV0dXJuICgwLCBfcHVibGljMy5hZGRGYXRhbEVycm9yKShmYXRhbEVycm9ycywgZXJyb3IpOwogICAgfSkpOwogICAgc3Vic2NyaXB0aW9ucy5hZGQoKDAsIF9sZWdhY3lfaW1wb3J0cy5zdWJzY3JpYmVXaXRoU2NvcGUpKCRzY29wZSwgZmlsdGVyTWFuYWdlci5nZXRGZXRjaGVzJCgpLCB7CiAgICAgIG5leHQ6ICRzY29wZS5mZXRjaAogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHJldHVybiAoMCwgX3B1YmxpYzMuYWRkRmF0YWxFcnJvcikoZmF0YWxFcnJvcnMsIGVycm9yKTsKICAgIH0pKTsKICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgICBpZiAoJHNjb3BlLl9oYW5kbGVyKSB7CiAgICAgICAgJHNjb3BlLl9oYW5kbGVyLmRlc3Ryb3koKTsKICAgICAgfQoKICAgICAgc2F2ZWRWaXMuZGVzdHJveSgpOwogICAgICBzdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7CiAgICAgICRzY29wZS5ldmVudEVtaXR0ZXIub2ZmKCdhcHBseScsIF9hcHBseVZpcyk7CiAgICAgIHVuc3Vic2NyaWJlUGVyc2lzdGVkKCk7CiAgICAgIHVuc3Vic2NyaWJlU3RhdGVVcGRhdGVzKCk7CiAgICAgIHN0b3BBbGxTeW5jaW5nKCk7CiAgICB9KTsKICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3JlbmRlcicpOwogICAgfSk7CiAgfQoKICAkc2NvcGUudXBkYXRlUXVlcnlBbmRGZXRjaCA9IGZ1bmN0aW9uIChfcmVmNCkgewogICAgdmFyIHF1ZXJ5ID0gX3JlZjQucXVlcnksCiAgICAgICAgZGF0ZVJhbmdlID0gX3JlZjQuZGF0ZVJhbmdlOwogICAgdmFyIGlzVXBkYXRlID0gcXVlcnkgJiYgIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKHF1ZXJ5LCBzdGF0ZUNvbnRhaW5lci5nZXRTdGF0ZSgpLnF1ZXJ5KSB8fCBkYXRlUmFuZ2UgJiYgIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKGRhdGVSYW5nZSwgJHNjb3BlLnRpbWVSYW5nZSk7CiAgICBzdGF0ZUNvbnRhaW5lci50cmFuc2l0aW9ucy5zZXQoJ3F1ZXJ5JywgcXVlcnkpOwogICAgdGltZWZpbHRlci5zZXRUaW1lKGRhdGVSYW5nZSk7IC8vIElmIG5vdGhpbmcgaGFzIGNoYW5nZWQsIHRyaWdnZXIgdGhlIGZldGNoIG1hbnVhbGx5LCBvdGhlcndpc2UgaXQgd2lsbCBoYXBwZW4gYXMgYSByZXN1bHQgb2YgdGhlIGNoYW5nZXMKCiAgICBpZiAoIWlzVXBkYXRlKSB7CiAgICAgIGVtYmVkZGFibGVIYW5kbGVyLnJlbG9hZCgpOwogICAgfQogIH07CgogICRzY29wZS5vblJlZnJlc2hDaGFuZ2UgPSBmdW5jdGlvbiAoX3JlZjUpIHsKICAgIHZhciBpc1BhdXNlZCA9IF9yZWY1LmlzUGF1c2VkLAogICAgICAgIHJlZnJlc2hJbnRlcnZhbCA9IF9yZWY1LnJlZnJlc2hJbnRlcnZhbDsKICAgIHRpbWVmaWx0ZXIuc2V0UmVmcmVzaEludGVydmFsKHsKICAgICAgcGF1c2U6IGlzUGF1c2VkLAogICAgICB2YWx1ZTogcmVmcmVzaEludGVydmFsID8gcmVmcmVzaEludGVydmFsIDogJHNjb3BlLnJlZnJlc2hJbnRlcnZhbC52YWx1ZQogICAgfSk7CiAgfTsKCiAgJHNjb3BlLm9uQ2xlYXJTYXZlZFF1ZXJ5ID0gZnVuY3Rpb24gKCkgewogICAgZGVsZXRlICRzY29wZS5zYXZlZFF1ZXJ5OwogICAgc3RhdGVDb250YWluZXIudHJhbnNpdGlvbnMucmVtb3ZlU2F2ZWRRdWVyeShkZWZhdWx0UXVlcnkpOwogICAgZmlsdGVyTWFuYWdlci5zZXRGaWx0ZXJzKGZpbHRlck1hbmFnZXIuZ2V0R2xvYmFsRmlsdGVycygpKTsKICB9OwoKICB2YXIgdXBkYXRlU3RhdGVGcm9tU2F2ZWRRdWVyeSA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlRnJvbVNhdmVkUXVlcnkoc2F2ZWRRdWVyeSkgewogICAgc3RhdGVDb250YWluZXIudHJhbnNpdGlvbnMudXBkYXRlRnJvbVNhdmVkUXVlcnkoc2F2ZWRRdWVyeSk7CiAgICB2YXIgc2F2ZWRRdWVyeUZpbHRlcnMgPSBzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMuZmlsdGVycyB8fCBbXTsKICAgIHZhciBnbG9iYWxGaWx0ZXJzID0gZmlsdGVyTWFuYWdlci5nZXRHbG9iYWxGaWx0ZXJzKCk7CiAgICBmaWx0ZXJNYW5hZ2VyLnNldEZpbHRlcnMoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShnbG9iYWxGaWx0ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHNhdmVkUXVlcnlGaWx0ZXJzKSkpOwoKICAgIGlmIChzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMudGltZWZpbHRlcikgewogICAgICB0aW1lZmlsdGVyLnNldFRpbWUoewogICAgICAgIGZyb206IHNhdmVkUXVlcnkuYXR0cmlidXRlcy50aW1lZmlsdGVyLmZyb20sCiAgICAgICAgdG86IHNhdmVkUXVlcnkuYXR0cmlidXRlcy50aW1lZmlsdGVyLnRvCiAgICAgIH0pOwoKICAgICAgaWYgKHNhdmVkUXVlcnkuYXR0cmlidXRlcy50aW1lZmlsdGVyLnJlZnJlc2hJbnRlcnZhbCkgewogICAgICAgIHRpbWVmaWx0ZXIuc2V0UmVmcmVzaEludGVydmFsKHNhdmVkUXVlcnkuYXR0cmlidXRlcy50aW1lZmlsdGVyLnJlZnJlc2hJbnRlcnZhbCk7CiAgICAgIH0KICAgIH0KICB9OwoKICAkc2NvcGUudXBkYXRlU2F2ZWRRdWVyeSA9IGZ1bmN0aW9uIChzYXZlZFF1ZXJ5KSB7CiAgICAkc2NvcGUuc2F2ZWRRdWVyeSA9IHNhdmVkUXVlcnk7CiAgICB1cGRhdGVTdGF0ZUZyb21TYXZlZFF1ZXJ5KHNhdmVkUXVlcnkpOwogIH07CiAgLyoqCiAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzICJTYXZlIiBidXR0b24uCiAgICovCgoKICBmdW5jdGlvbiBkb1NhdmUoc2F2ZU9wdGlvbnMpIHsKICAgIC8vIHZpcy50aXRsZSB3YXMgbm90IGJvdW5kIGFuZCBpdCdzIG5lZWRlZCB0byByZWZsZWN0IHRpdGxlIGludG8gdmlzU3RhdGUKICAgIHN0YXRlQ29udGFpbmVyLnRyYW5zaXRpb25zLnNldFZpcyh7CiAgICAgIHRpdGxlOiBzYXZlZFZpcy50aXRsZSwKICAgICAgdHlwZTogc2F2ZWRWaXMudHlwZSB8fCBzdGF0ZUNvbnRhaW5lci5nZXRTdGF0ZSgpLnZpcy50eXBlCiAgICB9KTsKICAgIHNhdmVkVmlzLnNlYXJjaFNvdXJjZS5zZXRGaWVsZCgncXVlcnknLCBzdGF0ZUNvbnRhaW5lci5nZXRTdGF0ZSgpLnF1ZXJ5KTsKICAgIHNhdmVkVmlzLnNlYXJjaFNvdXJjZS5zZXRGaWVsZCgnZmlsdGVyJywgc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKS5maWx0ZXJzKTsKICAgIHNhdmVkVmlzLnZpc1N0YXRlID0gc3RhdGVDb250YWluZXIuZ2V0U3RhdGUoKS52aXM7CiAgICBzYXZlZFZpcy51aVN0YXRlSlNPTiA9IF9hbmd1bGFyLmRlZmF1bHQudG9Kc29uKCRzY29wZS51aVN0YXRlLnRvSlNPTigpKTsKICAgICRhcHBTdGF0dXMuZGlydHkgPSBmYWxzZTsKICAgIHJldHVybiBzYXZlZFZpcy5zYXZlKHNhdmVPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChpZCkgewogICAgICAkc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKGlkKSB7CiAgICAgICAgICB0b2FzdE5vdGlmaWNhdGlvbnMuYWRkU3VjY2Vzcyh7CiAgICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS50b3BOYXZNZW51LnNhdmVWaXN1YWxpemF0aW9uLnN1Y2Nlc3NOb3RpZmljYXRpb25UZXh0JywgewogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2F2ZWQgJ3t2aXNUaXRsZX0nIiwKICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgIHZpc1RpdGxlOiBzYXZlZFZpcy50aXRsZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdzYXZlVmlzdWFsaXphdGlvblN1Y2Nlc3MnCiAgICAgICAgICB9KTsKCiAgICAgICAgICBpZiAoJHNjb3BlLmlzQWRkVG9EYXNoTW9kZSgpKSB7CiAgICAgICAgICAgIHZhciBzYXZlZFZpc3VhbGl6YXRpb25QYXJzZWRVcmwgPSBuZXcgX2xlZ2FjeV9pbXBvcnRzLktpYmFuYVBhcnNlZFVybCh7CiAgICAgICAgICAgICAgYmFzZVBhdGg6IGdldEJhc2VQYXRoKCksCiAgICAgICAgICAgICAgYXBwSWQ6IF9wdWJsaWMzLmtibkJhc2VVcmwuc2xpY2UoJy9hcHAvJy5sZW5ndGgpLAogICAgICAgICAgICAgIGFwcFBhdGg6ICIiLmNvbmNhdChfdmlzdWFsaXplX2NvbnN0YW50cy5WaXN1YWxpemVDb25zdGFudHMuRURJVF9QQVRILCAiLyIpLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoc2F2ZWRWaXMuaWQpKQogICAgICAgICAgICB9KTsgLy8gTWFudWFsbHkgaW5zZXJ0IGEgbmV3IHVybCBzbyB0aGUgYmFjayBidXR0b24gd2lsbCBvcGVuIHRoZSBzYXZlZCB2aXN1YWxpemF0aW9uLgoKICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHNhdmVkVmlzdWFsaXphdGlvblBhcnNlZFVybC5hcHBQYXRoKTsKICAgICAgICAgICAgc2V0QWN0aXZlVXJsKHNhdmVkVmlzdWFsaXphdGlvblBhcnNlZFVybC5hcHBQYXRoKTsKICAgICAgICAgICAgdmFyIGxhc3REYXNoYm9hcmRBYnNvbHV0ZVVybCA9IGNocm9tZS5uYXZMaW5rcy5nZXQoJ2tpYmFuYTpkYXNoYm9hcmQnKS51cmw7CiAgICAgICAgICAgIHZhciBkYXNoYm9hcmRQYXJzZWRVcmwgPSAoMCwgX2xlZ2FjeV9pbXBvcnRzLmFic29sdXRlVG9QYXJzZWRVcmwpKGxhc3REYXNoYm9hcmRBYnNvbHV0ZVVybCwgZ2V0QmFzZVBhdGgoKSk7CiAgICAgICAgICAgIGRhc2hib2FyZFBhcnNlZFVybC5hZGRRdWVyeVBhcmFtZXRlcihfbGVnYWN5X2ltcG9ydHMuRGFzaGJvYXJkQ29uc3RhbnRzLkFERF9FTUJFRERBQkxFX1RZUEUsIF9sZWdhY3lfaW1wb3J0cy5WSVNVQUxJWkVfRU1CRUREQUJMRV9UWVBFKTsKICAgICAgICAgICAgZGFzaGJvYXJkUGFyc2VkVXJsLmFkZFF1ZXJ5UGFyYW1ldGVyKF9sZWdhY3lfaW1wb3J0cy5EYXNoYm9hcmRDb25zdGFudHMuQUREX0VNQkVEREFCTEVfSUQsIHNhdmVkVmlzLmlkKTsKICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGRhc2hib2FyZFBhcnNlZFVybC5hcHBQYXRoKTsKICAgICAgICAgIH0gZWxzZSBpZiAoc2F2ZWRWaXMuaWQgPT09ICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5pZCkgewogICAgICAgICAgICBjaHJvbWUuZG9jVGl0bGUuY2hhbmdlKHNhdmVkVmlzLmxhc3RTYXZlZFRpdGxlKTsKICAgICAgICAgICAgY2hyb21lLnNldEJyZWFkY3J1bWJzKCRpbmplY3Rvci5pbnZva2UoX2JyZWFkY3J1bWJzLmdldEVkaXRCcmVhZGNydW1icykpOwogICAgICAgICAgICBzYXZlZFZpcy52aXMudGl0bGUgPSBzYXZlZFZpcy50aXRsZTsKICAgICAgICAgICAgc2F2ZWRWaXMudmlzLmRlc2NyaXB0aW9uID0gc2F2ZWRWaXMuZGVzY3JpcHRpb247CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UoX29iamVjdFNwcmVhZCh7fSwgaGlzdG9yeS5sb2NhdGlvbiwgewogICAgICAgICAgICAgIHBhdGhuYW1lOiAiIi5jb25jYXQoX3Zpc3VhbGl6ZV9jb25zdGFudHMuVmlzdWFsaXplQ29uc3RhbnRzLkVESVRfUEFUSCwgIi8iKS5jb25jYXQoc2F2ZWRWaXMuaWQpCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gewogICAgICAgIGlkOiBpZAogICAgICB9OwogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgdG9hc3ROb3RpZmljYXRpb25zLmFkZERhbmdlcih7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLnRvcE5hdk1lbnUuc2F2ZVZpc3VhbGl6YXRpb24uZmFpbHVyZU5vdGlmaWNhdGlvblRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIG9uIHNhdmluZyAne3Zpc1RpdGxlfSciLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIHZpc1RpdGxlOiBzYXZlZFZpcy50aXRsZQogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIHRleHQ6IGVycm9yLm1lc3NhZ2UsCiAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ3NhdmVWaXN1YWxpemF0aW9uRXJyb3InCiAgICAgIH0pOwogICAgICByZXR1cm4gewogICAgICAgIGVycm9yOiBlcnJvcgogICAgICB9OwogICAgfSk7CiAgfQoKICB2YXIgdW5saW5rRnJvbVNhdmVkU2VhcmNoID0gZnVuY3Rpb24gdW5saW5rRnJvbVNhdmVkU2VhcmNoKCkgewogICAgdmFyIHNlYXJjaFNvdXJjZVBhcmVudCA9IHNhdmVkU2VhcmNoLnNlYXJjaFNvdXJjZTsKICAgIHZhciBzZWFyY2hTb3VyY2VHcmFuZHBhcmVudCA9IHNlYXJjaFNvdXJjZVBhcmVudC5nZXRQYXJlbnQoKTsKICAgIHZhciBjdXJyZW50SW5kZXggPSBzZWFyY2hTb3VyY2VQYXJlbnQuZ2V0RmllbGQoJ2luZGV4Jyk7CiAgICBzZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ2luZGV4JywgY3VycmVudEluZGV4KTsKICAgIHNlYXJjaFNvdXJjZS5zZXRQYXJlbnQoc2VhcmNoU291cmNlR3JhbmRwYXJlbnQpOwogICAgc3RhdGVDb250YWluZXIudHJhbnNpdGlvbnMudW5saW5rU2F2ZWRTZWFyY2goewogICAgICBxdWVyeTogc2VhcmNoU291cmNlUGFyZW50LmdldEZpZWxkKCdxdWVyeScpLAogICAgICBwYXJlbnRGaWx0ZXJzOiBzZWFyY2hTb3VyY2VQYXJlbnQuZ2V0T3duRmllbGQoJ2ZpbHRlcicpCiAgICB9KTsKICAgIHRvYXN0Tm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLmxpbmtlZFRvU2VhcmNoLnVubGlua1N1Y2Nlc3NOb3RpZmljYXRpb25UZXh0JywgewogICAgICBkZWZhdWx0TWVzc2FnZTogIlVubGlua2VkIGZyb20gc2F2ZWQgc2VhcmNoICd7c2VhcmNoVGl0bGV9JyIsCiAgICAgIHZhbHVlczogewogICAgICAgIHNlYXJjaFRpdGxlOiBzYXZlZFNlYXJjaC50aXRsZQogICAgICB9CiAgICB9KSk7CiAgfTsKCiAgJHNjb3BlLmdldEFkZGl0aW9uYWxNZXNzYWdlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICc8aSBjbGFzcz0ia3VpSWNvbiBmYS1mbGFzayI+PC9pPicgKyBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5leHBlcmltZW50YWxWaXNJbmZvVGV4dCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUaGlzIHZpc3VhbGl6YXRpb24gaXMgbWFya2VkIGFzIGV4cGVyaW1lbnRhbC4nCiAgICB9KSArICcgJyArIHZpcy50eXBlLmZlZWRiYWNrTWVzc2FnZTsKICB9OwoKICAkc2NvcGUuZXZlbnRFbWl0dGVyLm9uKCd1bmxpbmtGcm9tU2F2ZWRTZWFyY2gnLCB1bmxpbmtGcm9tU2F2ZWRTZWFyY2gpOwogICgwLCBfaGVscF9tZW51X3V0aWwuYWRkSGVscE1lbnVUb0FwcENocm9tZSkoY2hyb21lLCBkb2NMaW5rcyk7CiAgaW5pdCgpOwp9"},null]}