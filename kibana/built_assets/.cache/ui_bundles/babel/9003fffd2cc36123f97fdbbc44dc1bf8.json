{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/document_fields/fields/edit_field/update_field_provider.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/document_fields/fields/edit_field/update_field_provider.js","mtime":1589249554112},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlVwZGF0ZUZpZWxkUHJvdmlkZXIgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbWFwcGluZ3Nfc3RhdGUgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9tYXBwaW5nc19zdGF0ZSIpOwoKdmFyIF9saWIgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9saWIiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29uc3RhbnRzIik7Cgp2YXIgX21vZGFsX2NvbmZpcm1hdGlvbl9kZWxldGVfZmllbGRzID0gcmVxdWlyZSgiLi4vbW9kYWxfY29uZmlybWF0aW9uX2RlbGV0ZV9maWVsZHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIFVwZGF0ZUZpZWxkUHJvdmlkZXIgPSBmdW5jdGlvbiBVcGRhdGVGaWVsZFByb3ZpZGVyKF9yZWYpIHsKICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoewogICAgaXNNb2RhbE9wZW46IGZhbHNlCiAgfSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBzdGF0ZSA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldFN0YXRlID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIGRpc3BhdGNoID0gKDAsIF9tYXBwaW5nc19zdGF0ZS51c2VEaXNwYXRjaCkoKTsKCiAgdmFyIF91c2VNYXBwaW5nc1N0YXRlID0gKDAsIF9tYXBwaW5nc19zdGF0ZS51c2VNYXBwaW5nc1N0YXRlKSgpLAogICAgICBmaWVsZHMgPSBfdXNlTWFwcGluZ3NTdGF0ZS5maWVsZHM7CgogIHZhciBieUlkID0gZmllbGRzLmJ5SWQsCiAgICAgIGFsaWFzZXMgPSBmaWVsZHMuYWxpYXNlczsKCiAgdmFyIGNvbmZpcm1CdXR0b25UZXh0ID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IudXBkYXRlRmllbGQuY29uZmlybWF0aW9uTW9kYWwuY29uZmlybURlc2NyaXB0aW9uJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdDb25maXJtIHR5cGUgY2hhbmdlJwogIH0pOwoKICB2YXIgbW9kYWxUaXRsZTsKCiAgaWYgKHN0YXRlLmZpZWxkKSB7CiAgICB2YXIgc291cmNlID0gc3RhdGUuZmllbGQuc291cmNlOwogICAgbW9kYWxUaXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLnVwZGF0ZUZpZWxkLmNvbmZpcm1hdGlvbk1vZGFsLnRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogIkNvbmZpcm0gY2hhbmdlICd7ZmllbGROYW1lfScgdHlwZSB0byAne2ZpZWxkVHlwZX0nLiIsCiAgICAgIHZhbHVlczogewogICAgICAgIGZpZWxkTmFtZTogc291cmNlLm5hbWUsCiAgICAgICAgZmllbGRUeXBlOiBzb3VyY2UudHlwZQogICAgICB9CiAgICB9KTsKICB9CgogIHZhciBjbG9zZU1vZGFsID0gZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHsKICAgIHNldFN0YXRlKHsKICAgICAgaXNNb2RhbE9wZW46IGZhbHNlCiAgICB9KTsKICB9OwoKICB2YXIgdXBkYXRlRmllbGQgPSBmdW5jdGlvbiB1cGRhdGVGaWVsZChmaWVsZCkgewogICAgdmFyIHByZXZpb3VzRmllbGQgPSBieUlkW2ZpZWxkLmlkXTsKCiAgICB2YXIgd2lsbERlbGV0ZUNoaWxkRmllbGRzID0gZnVuY3Rpb24gd2lsbERlbGV0ZUNoaWxkRmllbGRzKG9sZFR5cGUsIG5ld1R5cGUpIHsKICAgICAgdmFyIGhhc0NoaWxkRmllbGRzID0gZmllbGQuaGFzQ2hpbGRGaWVsZHMsCiAgICAgICAgICBoYXNNdWx0aUZpZWxkcyA9IGZpZWxkLmhhc011bHRpRmllbGRzOwoKICAgICAgaWYgKCFoYXNDaGlsZEZpZWxkcyAmJiAhaGFzTXVsdGlGaWVsZHMpIHsKICAgICAgICAvLyBObyBjaGlsZCBvciBtdWx0aS1maWVsZHMgd2lsbCBiZSBkZWxldGVkLCBubyBjb25maXJtYXRpb24gbmVlZGVkLgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgcmV0dXJuICgwLCBfbGliLnNob3VsZERlbGV0ZUNoaWxkRmllbGRzQWZ0ZXJUeXBlQ2hhbmdlKShvbGRUeXBlLCBuZXdUeXBlKTsKICAgIH07CgogICAgaWYgKGZpZWxkLnNvdXJjZS50eXBlICE9PSBwcmV2aW91c0ZpZWxkLnNvdXJjZS50eXBlKSB7CiAgICAgIC8vIEFycmF5IG9mIGFsbCB0aGUgYWxpYXNlcyBwb2ludGluZyB0byB0aGUgY3VycmVudCBmaWVsZCBiZWVpbmcgdXBkYXRlZAogICAgICB2YXIgYWxpYXNlc09uRmllbGQgPSBhbGlhc2VzW2ZpZWxkLmlkXSB8fCBbXTsgLy8gQXJyYXkgb2YgYWxsIHRoZSBhbGlhc2VzIHBvaW50aW5nIHRvIHRoZSBjdXJyZW50IGZpZWxkICsgYWxsIGl0cyBwb3NzaWJsZSBjaGlsZHJlbgoKICAgICAgdmFyIGFsaWFzZXNPbkZpZWxkQW5kRGVzY2VuZGFudHMgPSAoMCwgX2xpYi5nZXRBbGxEZXNjZW5kYW50QWxpYXNlcykoZmllbGQsIGZpZWxkcyk7CiAgICAgIHZhciBpc1JlZmVyZW5jZWRCeUFsaWFzID0gYWxpYXNlc09uRmllbGQgJiYgQm9vbGVhbihhbGlhc2VzT25GaWVsZC5sZW5ndGgpOwogICAgICB2YXIgbmV4dFR5cGVDYW5IYXZlQWxpYXMgPSAhX2NvbnN0YW50cy5QQVJBTUVURVJTX0RFRklOSVRJT04ucGF0aC50YXJnZXRUeXBlc05vdEFsbG93ZWQuaW5jbHVkZXMoZmllbGQuc291cmNlLnR5cGUpOyAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmLCBieSBjaGFuZ2luZyB0aGUgdHlwZSwgd2Ugd2lsbCBhbHNvCiAgICAgIC8vIGRlbGV0ZSBwb3NzaWJsZSBjaGlsZCBwcm9wZXJ0aWVzICgiZmllbGRzIiBvciAicHJvcGVydGllcyIpLgogICAgICAvLyBJZiB3ZSB3aWxsLCB3ZSBuZWVkIHRvIHdhcm4gdGhlIHVzZXIgYWJvdXQgaXQuCgogICAgICB2YXIgcmVxdWlyZXNDb25maXJtYXRpb247CiAgICAgIHZhciBhbGlhc2VzVG9EZWxldGUgPSBbXTsKCiAgICAgIGlmIChpc1JlZmVyZW5jZWRCeUFsaWFzICYmICFuZXh0VHlwZUNhbkhhdmVBbGlhcykgewogICAgICAgIGFsaWFzZXNUb0RlbGV0ZSA9IGFsaWFzZXNPbkZpZWxkQW5kRGVzY2VuZGFudHM7CiAgICAgICAgcmVxdWlyZXNDb25maXJtYXRpb24gPSB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIHJlcXVpcmVzQ29uZmlybWF0aW9uID0gd2lsbERlbGV0ZUNoaWxkRmllbGRzKHByZXZpb3VzRmllbGQuc291cmNlLnR5cGUsIGZpZWxkLnNvdXJjZS50eXBlKTsKCiAgICAgICAgaWYgKHJlcXVpcmVzQ29uZmlybWF0aW9uKSB7CiAgICAgICAgICBhbGlhc2VzVG9EZWxldGUgPSBhbGlhc2VzT25GaWVsZEFuZERlc2NlbmRhbnRzLmZpbHRlciggLy8gV2Ugd2lsbCBvbmx5IGRlbGV0ZSBhbGlhc2VzIHRoYXQgcG9pbnRzIHRvIHBvc3NpYmxlIGNoaWxkcmVuLCAqTk9UKiB0aGUgZmllbGQgaXRzZWxmCiAgICAgICAgICBmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgcmV0dXJuIGFsaWFzZXNPbkZpZWxkLmluY2x1ZGVzKGlkKSA9PT0gZmFsc2U7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChyZXF1aXJlc0NvbmZpcm1hdGlvbikgewogICAgICAgIHNldFN0YXRlKHsKICAgICAgICAgIGlzTW9kYWxPcGVuOiB0cnVlLAogICAgICAgICAgZmllbGQ6IGZpZWxkLAogICAgICAgICAgYWxpYXNlczogQm9vbGVhbihhbGlhc2VzVG9EZWxldGUubGVuZ3RoKSA/IGFsaWFzZXNUb0RlbGV0ZS5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgIHJldHVybiBieUlkW2lkXS5wYXRoLmpvaW4oJyA+ICcpOwogICAgICAgICAgfSkuc29ydCgpIDogdW5kZWZpbmVkCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9CgogICAgZGlzcGF0Y2goewogICAgICB0eXBlOiAnZmllbGQuZWRpdCcsCiAgICAgIHZhbHVlOiBmaWVsZC5zb3VyY2UKICAgIH0pOwogIH07CgogIHZhciBjb25maXJtVHlwZVVwZGF0ZSA9IGZ1bmN0aW9uIGNvbmZpcm1UeXBlVXBkYXRlKCkgewogICAgZGlzcGF0Y2goewogICAgICB0eXBlOiAnZmllbGQuZWRpdCcsCiAgICAgIHZhbHVlOiBzdGF0ZS5maWVsZC5zb3VyY2UKICAgIH0pOwogICAgY2xvc2VNb2RhbCgpOwogIH07CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbih1cGRhdGVGaWVsZCksIHN0YXRlLmlzTW9kYWxPcGVuICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX21vZGFsX2NvbmZpcm1hdGlvbl9kZWxldGVfZmllbGRzLk1vZGFsQ29uZmlybWF0aW9uRGVsZXRlRmllbGRzLCB7CiAgICB0aXRsZTogbW9kYWxUaXRsZSwKICAgIGNoaWxkRmllbGRzOiBzdGF0ZS5maWVsZCAmJiBzdGF0ZS5maWVsZC5jaGlsZEZpZWxkcywKICAgIGFsaWFzZXM6IHN0YXRlLmFsaWFzZXMsCiAgICBieUlkOiBieUlkLAogICAgY29uZmlybUJ1dHRvblRleHQ6IGNvbmZpcm1CdXR0b25UZXh0LAogICAgb25Db25maXJtOiBjb25maXJtVHlwZVVwZGF0ZSwKICAgIG9uQ2FuY2VsOiBjbG9zZU1vZGFsCiAgfSkpOwp9OwoKZXhwb3J0cy5VcGRhdGVGaWVsZFByb3ZpZGVyID0gVXBkYXRlRmllbGRQcm92aWRlcjs="},null]}