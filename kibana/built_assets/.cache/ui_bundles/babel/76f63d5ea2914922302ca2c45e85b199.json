{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/WatcherFlyout.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/components/app/ServiceDetails/ServiceIntegrations/WatcherFlyout.js","mtime":1589249551583},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuV2F0Y2hlckZseW91dCA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX21vbWVudFRpbWV6b25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQtdGltZXpvbmUiKSk7Cgp2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9zdHlsZWRDb21wb25lbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJzdHlsZWQtY29tcG9uZW50cyIpKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva2liYW5hX3JlYWN0L3B1YmxpYyIpOwoKdmFyIF9LaWJhbmFMaW5rID0gcmVxdWlyZSgiLi4vLi4vLi4vc2hhcmVkL0xpbmtzL0tpYmFuYUxpbmsiKTsKCnZhciBfY3JlYXRlRXJyb3JHcm91cFdhdGNoID0gcmVxdWlyZSgiLi9jcmVhdGVFcnJvckdyb3VwV2F0Y2giKTsKCnZhciBfRWxhc3RpY0RvY3NMaW5rID0gcmVxdWlyZSgiLi4vLi4vLi4vc2hhcmVkL0xpbmtzL0VsYXN0aWNEb2NzTGluayIpOwoKdmFyIF9BcG1QbHVnaW5Db250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29udGV4dC9BcG1QbHVnaW5Db250ZXh0Iik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFNtYWxsSW5wdXQgPSBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0LmRpdi53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIlNtYWxsSW5wdXQiLAogIGNvbXBvbmVudElkOiAiZGxpZmQ5LTAiCn0pKFsiLmV1aUZvcm1Sb3d7bWF4LXdpZHRoOjg1cHg7fS5ldWlGb3JtSGVscFRleHR7d2lkdGg6MjAwcHg7fSJdKTsKCnZhciBXYXRjaGVyRmx5b3V0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhXYXRjaGVyRmx5b3V0LCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gV2F0Y2hlckZseW91dCgpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2F0Y2hlckZseW91dCk7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihXYXRjaGVyRmx5b3V0KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29udGV4dCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIHNjaGVkdWxlOiAnZGFpbHknLAogICAgICB0aHJlc2hvbGQ6IDEwLAogICAgICBhY3Rpb25zOiB7CiAgICAgICAgc2xhY2s6IGZhbHNlLAogICAgICAgIGVtYWlsOiBmYWxzZQogICAgICB9LAogICAgICBpbnRlcnZhbDogewogICAgICAgIHZhbHVlOiAxMCwKICAgICAgICB1bml0OiAnbScKICAgICAgfSwKICAgICAgZGFpbHk6ICcwODowMCcsCiAgICAgIGVtYWlsczogJycsCiAgICAgIHNsYWNrVXJsOiAnJwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VTY2hlZHVsZSIsIGZ1bmN0aW9uIChzY2hlZHVsZSkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2NoZWR1bGU6IHNjaGVkdWxlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VUaHJlc2hvbGQiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHRocmVzaG9sZDogcGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlLCAxMCkKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNoYW5nZURhaWx5VW5pdCIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgZGFpbHk6IGV2ZW50LnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ2hhbmdlSW50ZXJ2YWxWYWx1ZSIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaW50ZXJ2YWw6IHsKICAgICAgICAgIHZhbHVlOiBwYXJzZUludChldmVudC50YXJnZXQudmFsdWUsIDEwKSwKICAgICAgICAgIHVuaXQ6IF90aGlzLnN0YXRlLmludGVydmFsLnVuaXQKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VJbnRlcnZhbFVuaXQiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGludGVydmFsOiB7CiAgICAgICAgICB2YWx1ZTogX3RoaXMuc3RhdGUuaW50ZXJ2YWwudmFsdWUsCiAgICAgICAgICB1bml0OiBldmVudC50YXJnZXQudmFsdWUKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VBY3Rpb24iLCBmdW5jdGlvbiAoYWN0aW9uTmFtZSkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgYWN0aW9uczogX29iamVjdFNwcmVhZCh7fSwgX3RoaXMuc3RhdGUuYWN0aW9ucywgX2RlZmluZVByb3BlcnR5KHt9LCBhY3Rpb25OYW1lLCAhX3RoaXMuc3RhdGUuYWN0aW9uc1thY3Rpb25OYW1lXSkpCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VFbWFpbHMiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGVtYWlsczogZXZlbnQudGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25DaGFuZ2VTbGFja1VybCIsIGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2xhY2tVcmw6IGV2ZW50LnRhcmdldC52YWx1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNyZWF0ZVdhdGNoIiwgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIGluZGV4UGF0dGVyblRpdGxlID0gX3JlZi5pbmRleFBhdHRlcm5UaXRsZTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgc2VydmljZU5hbWUgPSBfdGhpcy5wcm9wcy51cmxQYXJhbXMuc2VydmljZU5hbWU7CiAgICAgICAgdmFyIGNvcmUgPSBfdGhpcy5jb250ZXh0LmNvcmU7CgogICAgICAgIGlmICghc2VydmljZU5hbWUpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBlbWFpbHMgPSBfdGhpcy5zdGF0ZS5hY3Rpb25zLmVtYWlsID8gX3RoaXMuc3RhdGUuZW1haWxzLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChlbWFpbCkgewogICAgICAgICAgcmV0dXJuIGVtYWlsLnRyaW0oKTsKICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGVtYWlsKSB7CiAgICAgICAgICByZXR1cm4gISFlbWFpbDsKICAgICAgICB9KSA6IFtdOwogICAgICAgIHZhciBzbGFja1VybCA9IF90aGlzLnN0YXRlLmFjdGlvbnMuc2xhY2sgPyBfdGhpcy5zdGF0ZS5zbGFja1VybCA6ICcnOwogICAgICAgIHZhciBzY2hlZHVsZSA9IF90aGlzLnN0YXRlLnNjaGVkdWxlID09PSAnaW50ZXJ2YWwnID8gewogICAgICAgICAgaW50ZXJ2YWw6ICIiLmNvbmNhdChfdGhpcy5zdGF0ZS5pbnRlcnZhbC52YWx1ZSkuY29uY2F0KF90aGlzLnN0YXRlLmludGVydmFsLnVuaXQpCiAgICAgICAgfSA6IHsKICAgICAgICAgIGRhaWx5OiB7CiAgICAgICAgICAgIGF0OiAiIi5jb25jYXQoX3RoaXMuc3RhdGUuZGFpbHkpCiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB2YXIgdGltZVJhbmdlID0gX3RoaXMuc3RhdGUuc2NoZWR1bGUgPT09ICdpbnRlcnZhbCcgPyB7CiAgICAgICAgICB2YWx1ZTogX3RoaXMuc3RhdGUuaW50ZXJ2YWwudmFsdWUsCiAgICAgICAgICB1bml0OiBfdGhpcy5zdGF0ZS5pbnRlcnZhbC51bml0CiAgICAgICAgfSA6IHsKICAgICAgICAgIHZhbHVlOiAyNCwKICAgICAgICAgIHVuaXQ6ICdoJwogICAgICAgIH07CiAgICAgICAgcmV0dXJuICgwLCBfY3JlYXRlRXJyb3JHcm91cFdhdGNoLmNyZWF0ZUVycm9yR3JvdXBXYXRjaCkoewogICAgICAgICAgaHR0cDogY29yZS5odHRwLAogICAgICAgICAgZW1haWxzOiBlbWFpbHMsCiAgICAgICAgICBzY2hlZHVsZTogc2NoZWR1bGUsCiAgICAgICAgICBzZXJ2aWNlTmFtZTogc2VydmljZU5hbWUsCiAgICAgICAgICBzbGFja1VybDogc2xhY2tVcmwsCiAgICAgICAgICB0aHJlc2hvbGQ6IF90aGlzLnN0YXRlLnRocmVzaG9sZCwKICAgICAgICAgIHRpbWVSYW5nZTogdGltZVJhbmdlLAogICAgICAgICAgYXBtSW5kZXhQYXR0ZXJuVGl0bGU6IGluZGV4UGF0dGVyblRpdGxlCiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoKTsKCiAgICAgICAgICBfdGhpcy5hZGRTdWNjZXNzVG9hc3QoaWQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CgogICAgICAgICAgX3RoaXMuYWRkRXJyb3JUb2FzdCgpOwogICAgICAgIH0pOwogICAgICB9OwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiYWRkRXJyb3JUb2FzdCIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNvcmUgPSBfdGhpcy5jb250ZXh0LmNvcmU7CiAgICAgIGNvcmUubm90aWZpY2F0aW9ucy50b2FzdHMuYWRkV2FybmluZyh7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwud2F0Y2hDcmVhdGlvbkZhaWxlZE5vdGlmaWNhdGlvblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdXYXRjaCBjcmVhdGlvbiBmYWlsZWQnCiAgICAgICAgfSksCiAgICAgICAgdGV4dDogKDAsIF9wdWJsaWMudG9Nb3VudFBvaW50KShfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwud2F0Y2hDcmVhdGlvbkZhaWxlZE5vdGlmaWNhdGlvblRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ01ha2Ugc3VyZSB5b3VyIHVzZXIgaGFzIHBlcm1pc3Npb24gdG8gY3JlYXRlIHdhdGNoZXMuJwogICAgICAgIH0pKSkKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJhZGRTdWNjZXNzVG9hc3QiLCBmdW5jdGlvbiAoaWQpIHsKICAgICAgdmFyIGNvcmUgPSBfdGhpcy5jb250ZXh0LmNvcmU7CiAgICAgIGNvcmUubm90aWZpY2F0aW9ucy50b2FzdHMuYWRkU3VjY2Vzcyh7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwud2F0Y2hDcmVhdGVkTm90aWZpY2F0aW9uVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05ldyB3YXRjaCBjcmVhdGVkIScKICAgICAgICB9KSwKICAgICAgICB0ZXh0OiAoMCwgX3B1YmxpYy50b01vdW50UG9pbnQpKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC53YXRjaENyZWF0ZWROb3RpZmljYXRpb25UZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUaGUgd2F0Y2ggaXMgbm93IHJlYWR5IGFuZCB3aWxsIHNlbmQgZXJyb3IgcmVwb3J0cyBmb3Ige3NlcnZpY2VOYW1lfS4nLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBfdGhpcy5wcm9wcy51cmxQYXJhbXMuc2VydmljZU5hbWUKICAgICAgICAgIH0KICAgICAgICB9KSwgJyAnLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXBtUGx1Z2luQ29udGV4dC5BcG1QbHVnaW5Db250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgICB2YWx1ZTogX3RoaXMuY29udGV4dAogICAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9LaWJhbmFMaW5rLktpYmFuYUxpbmssIHsKICAgICAgICAgIHBhdGg6ICIvbWFuYWdlbWVudC9lbGFzdGljc2VhcmNoL3dhdGNoZXIvd2F0Y2hlcy93YXRjaC8iLmNvbmNhdChpZCkKICAgICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLndhdGNoQ3JlYXRlZE5vdGlmaWNhdGlvblRleHQudmlld1dhdGNoTGlua1RleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1ZpZXcgd2F0Y2gnCiAgICAgICAgfSkpKSkpCiAgICAgIH0pOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFdhdGNoZXJGbHlvdXQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBkYWlseVRpbWUgPSB0aGlzLnN0YXRlLmRhaWx5OwogICAgICB2YXIgaW5wdXRUaW1lID0gIiIuY29uY2F0KGRhaWx5VGltZSwgIloiKTsgLy8gQWRkIHR6IHRvIG1ha2UgaW50byBVVEMKCiAgICAgIHZhciBpbnB1dEZvcm1hdCA9ICdISDptbVonOyAvLyBQYXJzZSBhcyAyNCBob3VyIHcuIHR6CgogICAgICB2YXIgZGFpbHlUaW1lRm9ybWF0dGVkID0gKDAsIF9tb21lbnRUaW1lem9uZS5kZWZhdWx0KShpbnB1dFRpbWUsIGlucHV0Rm9ybWF0KS5mb3JtYXQoJ0hIOm1tJyk7IC8vIEZvcm1hdCBhcyAyNGgKCiAgICAgIHZhciBkYWlseVRpbWUxMkhvdXJGb3JtYXR0ZWQgPSAoMCwgX21vbWVudFRpbWV6b25lLmRlZmF1bHQpKGlucHV0VGltZSwgaW5wdXRGb3JtYXQpLmZvcm1hdCgnaGg6bW0gQSAoeiknKTsgLy8gRm9ybWF0IGFzIDEyaCB3LiB0egogICAgICAvLyBHZW5lcmF0ZSBVVEMgaG91cnMgZm9yIERhaWx5IFJlcG9ydCBzZWxlY3QgZmllbGQKCiAgICAgIHZhciBpbnRlcnZhbEhvdXJzID0gKDAsIF9sb2Rhc2gucmFuZ2UpKDI0KS5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICB2YXIgaG91ciA9ICgwLCBfbG9kYXNoLnBhZExlZnQpKGkudG9TdHJpbmcoKSwgMiwgJzAnKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdmFsdWU6ICIiLmNvbmNhdChob3VyLCAiOjAwIiksCiAgICAgICAgICB0ZXh0OiAiIi5jb25jYXQoaG91ciwgIjowMCBVVEMiKQogICAgICAgIH07CiAgICAgIH0pOwoKICAgICAgdmFyIGZseW91dEJvZHkgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5mb3JtRGVzY3JpcHRpb24iLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhpcyBmb3JtIHdpbGwgYXNzaXN0IGluIGNyZWF0aW5nIGEgV2F0Y2ggdGhhdCBjYW4gbm90aWZ5IHlvdSBvZiBlcnJvciBvY2N1cnJlbmNlcyBmcm9tIHRoaXMgc2VydmljZS4gVG8gbGVhcm4gbW9yZSBhYm91dCBXYXRjaGVyLCBwbGVhc2UgcmVhZCBvdXIge2RvY3VtZW50YXRpb25MaW5rfS4iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgZG9jdW1lbnRhdGlvbkxpbms6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9FbGFzdGljRG9jc0xpbmsuRWxhc3RpY0RvY3NMaW5rLCB7CiAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgIHNlY3Rpb246ICIveC1wYWNrIiwKICAgICAgICAgICAgcGF0aDogIi93YXRjaGVyLWdldHRpbmctc3RhcnRlZC5odG1sIgogICAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5mb3JtRGVzY3JpcHRpb24uZG9jdW1lbnRhdGlvbkxpbmtUZXh0JywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ2RvY3VtZW50YXRpb24nCiAgICAgICAgICB9KSkKICAgICAgICB9CiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDQiLCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLmNvbmRpdGlvblRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ29uZGl0aW9uJwogICAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLm9jY3VycmVuY2VzVGhyZXNob2xkTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ09jY3VycmVuY2VzIHRocmVzaG9sZCBwZXIgZXJyb3IgZ3JvdXAnCiAgICAgICAgfSksCiAgICAgICAgaGVscFRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwub2NjdXJyZW5jZXNUaHJlc2hvbGRIZWxwVGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhyZXNob2xkIHRvIGJlIG1ldCBmb3IgZXJyb3IgZ3JvdXAgdG8gYmUgaW5jbHVkZWQgaW4gcmVwb3J0LicKICAgICAgICB9KSwKICAgICAgICBjb21wcmVzc2VkOiB0cnVlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGROdW1iZXIsIHsKICAgICAgICBpY29uOiAibnVtYmVyIiwKICAgICAgICBtaW46IDEsCiAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudGhyZXNob2xkLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlVGhyZXNob2xkCiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwudHJpZ2dlclNjaGVkdWxlVGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUcmlnZ2VyIHNjaGVkdWxlJwogICAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIHNpemU6ICJ4cyIsCiAgICAgICAgY29sb3I6ICJzdWJkdWVkIgogICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLnRyaWdnZXJTY2hlZHVsZURlc2NyaXB0aW9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ2hvb3NlIHRoZSB0aW1lIGludGVydmFsIGZvciB0aGUgcmVwb3J0LCB3aGVuIHRoZSB0aHJlc2hvbGQgaXMgZXhjZWVkZWQuJwogICAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVJhZGlvLCB7CiAgICAgICAgaWQ6ICJkYWlseSIsCiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwuZGFpbHlSZXBvcnRSYWRpb0J1dHRvbkxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEYWlseSByZXBvcnQnCiAgICAgICAgfSksCiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5vbkNoYW5nZVNjaGVkdWxlKCdkYWlseScpOwogICAgICAgIH0sCiAgICAgICAgY2hlY2tlZDogdGhpcy5zdGF0ZS5zY2hlZHVsZSA9PT0gJ2RhaWx5JwogICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGhlbHBUZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLmRhaWx5UmVwb3J0SGVscFRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RoZSBkYWlseSByZXBvcnQgd2lsbCBiZSBzZW50IGF0IHtkYWlseVRpbWVGb3JtYXR0ZWR9IC8ge2RhaWx5VGltZTEySG91ckZvcm1hdHRlZH0uJywKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBkYWlseVRpbWVGb3JtYXR0ZWQ6IGRhaWx5VGltZUZvcm1hdHRlZCwKICAgICAgICAgICAgZGFpbHlUaW1lMTJIb3VyRm9ybWF0dGVkOiBkYWlseVRpbWUxMkhvdXJGb3JtYXR0ZWQKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBjb21wcmVzc2VkOiB0cnVlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU2VsZWN0LCB7CiAgICAgICAgdmFsdWU6IGRhaWx5VGltZSwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZURhaWx5VW5pdCwKICAgICAgICBvcHRpb25zOiBpbnRlcnZhbEhvdXJzLAogICAgICAgIGRpc2FibGVkOiB0aGlzLnN0YXRlLnNjaGVkdWxlICE9PSAnZGFpbHknCiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUmFkaW8sIHsKICAgICAgICBpZDogImludGVydmFsIiwKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5pbnRlcnZhbFJhZGlvQnV0dG9uTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0ludGVydmFsJwogICAgICAgIH0pLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIub25DaGFuZ2VTY2hlZHVsZSgnaW50ZXJ2YWwnKTsKICAgICAgICB9LAogICAgICAgIGNoZWNrZWQ6IHRoaXMuc3RhdGUuc2NoZWR1bGUgPT09ICdpbnRlcnZhbCcKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogIm0iCiAgICAgIH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNtYWxsSW5wdXQsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGhlbHBUZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLmludGVydmFsSGVscFRleHQnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RpbWUgaW50ZXJ2YWwgYmV0d2VlbiByZXBvcnRzLicKICAgICAgICB9KSwKICAgICAgICBjb21wcmVzc2VkOiB0cnVlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGROdW1iZXIsIHsKICAgICAgICBjb21wcmVzc2VkOiB0cnVlLAogICAgICAgIGljb246ICJjbG9jayIsCiAgICAgICAgbWluOiAxLAogICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmludGVydmFsLnZhbHVlLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW50ZXJ2YWxWYWx1ZSwKICAgICAgICBkaXNhYmxlZDogdGhpcy5zdGF0ZS5zY2hlZHVsZSAhPT0gJ2ludGVydmFsJwogICAgICB9KSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGNvbXByZXNzZWQ6IHRydWUKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTZWxlY3QsIHsKICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5pbnRlcnZhbC51bml0LAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQ2hhbmdlSW50ZXJ2YWxVbml0LAogICAgICAgIGNvbXByZXNzZWQ6IHRydWUsCiAgICAgICAgb3B0aW9uczogW3sKICAgICAgICAgIHZhbHVlOiAnbScsCiAgICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLmludGVydmFsVW5pdC5taW5zTGFiZWwnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnbWlucycKICAgICAgICAgIH0pCiAgICAgICAgfSwgewogICAgICAgICAgdmFsdWU6ICdoJywKICAgICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwuaW50ZXJ2YWxVbml0Lmhyc0xhYmVsJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ2hycycKICAgICAgICAgIH0pCiAgICAgICAgfV0sCiAgICAgICAgZGlzYWJsZWQ6IHRoaXMuc3RhdGUuc2NoZWR1bGUgIT09ICdpbnRlcnZhbCcKICAgICAgfSkpKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwuYWN0aW9uc1RpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQWN0aW9ucycKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICBzaXplOiAieHMiLAogICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5hY3Rpb25zRGVzY3JpcHRpb24nLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSZXBvcnRzIGNhbiBiZSBzZW50IGJ5IGVtYWlsIG9yIHBvc3RlZCB0byBhIFNsYWNrIGNoYW5uZWwuIEVhY2ggcmVwb3J0IHdpbGwgaW5jbHVkZSB0aGUgdG9wIDEwIGVycm9ycyBzb3J0ZWQgYnkgb2NjdXJyZW5jZS4nCiAgICAgIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3dpdGNoLCB7CiAgICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwuc2VuZEVtYWlsTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbmQgZW1haWwnCiAgICAgICAgfSksCiAgICAgICAgY2hlY2tlZDogdGhpcy5zdGF0ZS5hY3Rpb25zLmVtYWlsLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIub25DaGFuZ2VBY3Rpb24oJ2VtYWlsJyk7CiAgICAgICAgfQogICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIHRoaXMuc3RhdGUuYWN0aW9ucy5lbWFpbCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5yZWNpcGllbnRzTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlY2lwaWVudHMgKHNlcGFyYXRlZCB3aXRoIGNvbW1hKScKICAgICAgICB9KSwKICAgICAgICBjb21wcmVzc2VkOiB0cnVlLAogICAgICAgIGhlbHBUZXh0OiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInhwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5yZWNpcGllbnRzSGVscFRleHQiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJZiB5b3UgaGF2ZSBub3QgY29uZmlndXJlZCBlbWFpbCwgcGxlYXNlIHNlZSB0aGUge2RvY3VtZW50YXRpb25MaW5rfS4iLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIGRvY3VtZW50YXRpb25MaW5rOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRWxhc3RpY0RvY3NMaW5rLkVsYXN0aWNEb2NzTGluaywgewogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgc2VjdGlvbjogIi94LXBhY2siLAogICAgICAgICAgICAgIHBhdGg6ICIvYWN0aW9ucy1lbWFpbC5odG1sI2NvbmZpZ3VyaW5nLWVtYWlsIgogICAgICAgICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLmVuYWJsZUVycm9yUmVwb3J0c1BhbmVsLnJlY2lwaWVudHNIZWxwVGV4dC5kb2N1bWVudGF0aW9uTGlua1RleHQnLCB7CiAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdkb2N1bWVudGF0aW9uJwogICAgICAgICAgICB9KSkKICAgICAgICAgIH0KICAgICAgICB9KSkKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICBjb21wcmVzc2VkOiB0cnVlLAogICAgICAgIGljb246ICJ1c2VyIiwKICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lbWFpbHMsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2VFbWFpbHMKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTd2l0Y2gsIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5zZW5kU2xhY2tOb3RpZmljYXRpb25MYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VuZCBTbGFjayBub3RpZmljYXRpb24nCiAgICAgICAgfSksCiAgICAgICAgY2hlY2tlZDogdGhpcy5zdGF0ZS5hY3Rpb25zLnNsYWNrLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHsKICAgICAgICAgIHJldHVybiBfdGhpczIub25DaGFuZ2VBY3Rpb24oJ3NsYWNrJyk7CiAgICAgICAgfQogICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIHRoaXMuc3RhdGUuYWN0aW9ucy5zbGFjayAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5zbGFja1dlYmhvb2tVUkxMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2xhY2sgV2ViaG9vayBVUkwnCiAgICAgICAgfSksCiAgICAgICAgY29tcHJlc3NlZDogdHJ1ZSwKICAgICAgICBoZWxwVGV4dDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5hcG0uc2VydmljZURldGFpbHMuZW5hYmxlRXJyb3JSZXBvcnRzUGFuZWwuc2xhY2tXZWJob29rVVJMSGVscFRleHQiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUbyBnZXQgYSBTbGFjayB3ZWJob29rLCBwbGVhc2Ugc2VlIHRoZSB7ZG9jdW1lbnRhdGlvbkxpbmt9LiIsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkxpbms6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2V0LnNsYWNrLmhlbHAvaGMvZW4tdXMvYXJ0aWNsZXMvMTE1MDA1MjY1MDYzLUluY29taW5nLVdlYkhvb2tzLWZvci1TbGFjayIKICAgICAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5zbGFja1dlYmhvb2tVUkxIZWxwVGV4dC5kb2N1bWVudGF0aW9uTGlua1RleHQnLCB7CiAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdkb2N1bWVudGF0aW9uJwogICAgICAgICAgICB9KSkKICAgICAgICAgIH0KICAgICAgICB9KSkKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICBjb21wcmVzc2VkOiB0cnVlLAogICAgICAgIGljb246ICJsaW5rIiwKICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5zbGFja1VybCwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZVNsYWNrVXJsCiAgICAgIH0pKSkpOwoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0LCB7CiAgICAgICAgb25DbG9zZTogdGhpcy5wcm9wcy5vbkNsb3NlLAogICAgICAgIHNpemU6ICJzIgogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEhlYWRlciwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5lbmFibGVFcnJvclJlcG9ydHNUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VuYWJsZSBlcnJvciByZXBvcnRzJwogICAgICB9KSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRCb2R5LCBudWxsLCBmbHlvdXRCb2R5KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRGb290ZXIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJmbGV4RW5kIgogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0FwbVBsdWdpbkNvbnRleHQuQXBtUGx1Z2luQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgdmFyIGNvbmZpZyA9IF9yZWYyLmNvbmZpZzsKICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMi5jcmVhdGVXYXRjaChjb25maWcpLAogICAgICAgICAgZmlsbDogdHJ1ZSwKICAgICAgICAgIGRpc2FibGVkOiAhX3RoaXMyLnN0YXRlLmFjdGlvbnMuZW1haWwgJiYgIV90aGlzMi5zdGF0ZS5hY3Rpb25zLnNsYWNrCiAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS5zZXJ2aWNlRGV0YWlscy5lbmFibGVFcnJvclJlcG9ydHNQYW5lbC5jcmVhdGVXYXRjaEJ1dHRvbkxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgd2F0Y2gnCiAgICAgICAgfSkpOwogICAgICB9KSkpKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV2F0Y2hlckZseW91dDsKfShfcmVhY3QyLkNvbXBvbmVudCk7CgpleHBvcnRzLldhdGNoZXJGbHlvdXQgPSBXYXRjaGVyRmx5b3V0OwoKX2RlZmluZVByb3BlcnR5KFdhdGNoZXJGbHlvdXQsICJjb250ZXh0VHlwZSIsIF9BcG1QbHVnaW5Db250ZXh0LkFwbVBsdWdpbkNvbnRleHQpOw=="},null]}