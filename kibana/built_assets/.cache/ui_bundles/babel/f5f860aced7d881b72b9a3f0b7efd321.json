{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/uptime/public/components/higher_order/uptime_graphql_query.js","dependencies":[{"path":"x-pack/legacy/plugins/uptime/public/components/higher_order/uptime_graphql_query.js","mtime":1589249553628},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLndpdGhVcHRpbWVHcmFwaFFMID0gd2l0aFVwdGltZUdyYXBoUUw7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0QXBvbGxvID0gcmVxdWlyZSgicmVhY3QtYXBvbGxvIik7Cgp2YXIgX2Zvcm1hdF9lcnJvcl9saXN0ID0gcmVxdWlyZSgiLi4vLi4vbGliL2hlbHBlci9mb3JtYXRfZXJyb3JfbGlzdCIpOwoKdmFyIF9jb250ZXh0cyA9IHJlcXVpcmUoIi4uLy4uL2NvbnRleHRzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9leHRlbmRzKCkgewogIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKCiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KLyoqCiAqIFRoaXMgSE9DIGFic3RyYWN0cyB0aGUgdGFzayBvZiBxdWVyeWluZyBvdXIgR3JhcGhRTCBlbmRwb2ludCwKICogd2hpY2ggZWxpbWluYXRlcyB0aGUgbmVlZCBmb3IgYSBsb3Qgb2YgYm9pbGVycGxhdGUgY29kZSBpbiB0aGUgb3RoZXIgY29tcG9uZW50cy4KICoKICogQHR5cGUgVCAtIHRoZSBleHBlY3RlZCByZXN1bHQncyB0eXBlCiAqIEB0eXBlIFAgLSBhbnkgcHJvcHMgdGhlIHdyYXBwZWQgY29tcG9uZW50IHdpbGwgcmVxdWlyZQogKiBAcGFyYW0gV3JhcHBlZENvbXBvbmVudCAtIHRoZSBjb25zdW1pbmcgY29tcG9uZW50CiAqIEBwYXJhbSBxdWVyeSAtIHRoZSBncmFwaFFMIHF1ZXJ5CiAqLwoKCmZ1bmN0aW9uIHdpdGhVcHRpbWVHcmFwaFFMKFdyYXBwZWRDb21wb25lbnQsIHF1ZXJ5KSB7CiAgcmV0dXJuICgwLCBfcmVhY3RBcG9sbG8ud2l0aEFwb2xsbykoZnVuY3Rpb24gKHByb3BzKSB7CiAgICB2YXIgX3VzZUNvbnRleHQgPSAoMCwgX3JlYWN0LnVzZUNvbnRleHQpKF9jb250ZXh0cy5VcHRpbWVSZWZyZXNoQ29udGV4dCksCiAgICAgICAgbGFzdFJlZnJlc2ggPSBfdXNlQ29udGV4dC5sYXN0UmVmcmVzaDsKCiAgICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkodHJ1ZSksCiAgICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgICAgbG9hZGluZyA9IF91c2VTdGF0ZTJbMF0sCiAgICAgICAgc2V0TG9hZGluZyA9IF91c2VTdGF0ZTJbMV07CgogICAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSh1bmRlZmluZWQpLAogICAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgICBkYXRhID0gX3VzZVN0YXRlNFswXSwKICAgICAgICBzZXREYXRhID0gX3VzZVN0YXRlNFsxXTsKCiAgICB2YXIgX3VzZVN0YXRlNSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHVuZGVmaW5lZCksCiAgICAgICAgX3VzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTUsIDIpLAogICAgICAgIGVycm9ycyA9IF91c2VTdGF0ZTZbMF0sCiAgICAgICAgc2V0RXJyb3JzID0gX3VzZVN0YXRlNlsxXTsKCiAgICB2YXIgdXBkYXRlU3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZShsb2FkaW5nVmFsLCBkYXRhVmFsLCBlcnJvcnNWYWwpIHsKICAgICAgc2V0TG9hZGluZyhsb2FkaW5nVmFsKTsKICAgICAgc2V0RGF0YShkYXRhVmFsKTsKICAgICAgc2V0RXJyb3JzKGVycm9yc1ZhbCk7CiAgICB9OwoKICAgIHZhciBjbGllbnQgPSBwcm9wcy5jbGllbnQsCiAgICAgICAgaW1wbGVtZW50c0N1c3RvbUVycm9yU3RhdGUgPSBwcm9wcy5pbXBsZW1lbnRzQ3VzdG9tRXJyb3JTdGF0ZSwKICAgICAgICB2YXJpYWJsZXMgPSBwcm9wcy52YXJpYWJsZXM7CgogICAgdmFyIGZldGNoID0gZnVuY3Rpb24gZmV0Y2goKSB7CiAgICAgIHNldExvYWRpbmcodHJ1ZSk7CiAgICAgIGNsaWVudC5xdWVyeSh7CiAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLAogICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICB1cGRhdGVTdGF0ZShyZXN1bHQubG9hZGluZywgcmVzdWx0LmRhdGEsIHJlc3VsdC5lcnJvcnMpOwogICAgICB9LCBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgdXBkYXRlU3RhdGUoZmFsc2UsIHVuZGVmaW5lZCwgcmVzdWx0LmdyYXBoUUxFcnJvcnMpOwogICAgICB9KTsKICAgIH07CgogICAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgICAgZmV0Y2goKTsKICAgICAgLyoqCiAgICAgICAqIElmIHRoZSBgdGhlbmAgaGFuZGxlciBpbiBgZmV0Y2hgJ3MgcHJvbWlzZSBpcyBmaXJlZCBhZnRlcgogICAgICAgKiB0aGlzIGNvbXBvbmVudCBoYXMgdW5tb3VudGVkLCBpdCB3aWxsIHRyeSB0byBzZXQgc3RhdGUgb24gYW4KICAgICAgICogdW5tb3VudGVkIGNvbXBvbmVudCwgd2hpY2ggaW5kaWNhdGVzIGEgbWVtb3J5IGxlYWsgYW5kIHdpbGwgdHJpZ2dlcgogICAgICAgKiBSZWFjdCB3YXJuaW5ncy4KICAgICAgICoKICAgICAgICogV2UgY291bnRlcmFjdCB0aGlzIHNpZGUgZWZmZWN0IGJ5IHByb3ZpZGluZyBhIGNsZWFudXAgZnVuY3Rpb24gdGhhdCB3aWxsCiAgICAgICAqIHJlYXNzaWduIHRoZSB1cGRhdGUgZnVuY3Rpb24gdG8gZG8gbm90aGluZyB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZXMuCiAgICAgICAqLwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyB0aGlzIGNvbXBvbmVudCBpcyBwbGFubmVkIHRvIGJlIGRlcHJlY2F0ZWQsIGZvciB0aGUgdGltZSBiZWluZwogICAgICAgIC8vIHdlIHdpbGwgd2FudCB0byBwcmVzZXJ2ZSB0aGlzIGZvciB0aGUgcmVhc29uIGFib3ZlLgogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMKICAgICAgICB1cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKCkge307CiAgICAgIH07CiAgICB9LCBbdmFyaWFibGVzLCBsYXN0UmVmcmVzaF0pOwoKICAgIGlmICghaW1wbGVtZW50c0N1c3RvbUVycm9yU3RhdGUgJiYgZXJyb3JzICYmIGVycm9ycy5sZW5ndGggPiAwKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgKDAsIF9mb3JtYXRfZXJyb3JfbGlzdC5mb3JtYXRVcHRpbWVHcmFwaFFMRXJyb3JMaXN0KShlcnJvcnMpKTsKICAgIH0KCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsKICAgICAgbG9hZGluZzogbG9hZGluZywKICAgICAgZGF0YTogZGF0YSwKICAgICAgZXJyb3JzOiBlcnJvcnMKICAgIH0pKTsKICB9KTsKfQ=="},null]}