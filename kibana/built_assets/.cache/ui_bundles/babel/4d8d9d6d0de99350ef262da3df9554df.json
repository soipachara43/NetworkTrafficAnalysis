{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/visualizations/public/np_ready/public/saved_visualizations/saved_visualization_references.js","dependencies":[{"path":"src/legacy/core_plugins/visualizations/public/np_ready/public/saved_visualizations/saved_visualization_references.js","mtime":1589249550170},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmV4dHJhY3RSZWZlcmVuY2VzID0gZXh0cmFjdFJlZmVyZW5jZXM7CmV4cG9ydHMuaW5qZWN0UmVmZXJlbmNlcyA9IGluamVjdFJlZmVyZW5jZXM7CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKCmZ1bmN0aW9uIGV4dHJhY3RSZWZlcmVuY2VzKF9yZWYpIHsKICB2YXIgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcywKICAgICAgX3JlZiRyZWZlcmVuY2VzID0gX3JlZi5yZWZlcmVuY2VzLAogICAgICByZWZlcmVuY2VzID0gX3JlZiRyZWZlcmVuY2VzID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkcmVmZXJlbmNlczsKCiAgdmFyIHVwZGF0ZWRBdHRyaWJ1dGVzID0gX29iamVjdFNwcmVhZCh7fSwgYXR0cmlidXRlcyk7CgogIHZhciB1cGRhdGVkUmVmZXJlbmNlcyA9IF90b0NvbnN1bWFibGVBcnJheShyZWZlcmVuY2VzKTsgLy8gRXh0cmFjdCBzYXZlZCBzZWFyY2gKCgogIGlmICh1cGRhdGVkQXR0cmlidXRlcy5zYXZlZFNlYXJjaElkKSB7CiAgICB1cGRhdGVkUmVmZXJlbmNlcy5wdXNoKHsKICAgICAgbmFtZTogJ3NlYXJjaF8wJywKICAgICAgdHlwZTogJ3NlYXJjaCcsCiAgICAgIGlkOiBTdHJpbmcodXBkYXRlZEF0dHJpYnV0ZXMuc2F2ZWRTZWFyY2hJZCkKICAgIH0pOwogICAgZGVsZXRlIHVwZGF0ZWRBdHRyaWJ1dGVzLnNhdmVkU2VhcmNoSWQ7CiAgICB1cGRhdGVkQXR0cmlidXRlcy5zYXZlZFNlYXJjaFJlZk5hbWUgPSAnc2VhcmNoXzAnOwogIH0gLy8gRXh0cmFjdCBpbmRleCBwYXR0ZXJucyBmcm9tIGNvbnRyb2xzCgoKICBpZiAodXBkYXRlZEF0dHJpYnV0ZXMudmlzU3RhdGUpIHsKICAgIHZhciB2aXNTdGF0ZSA9IEpTT04ucGFyc2UoU3RyaW5nKHVwZGF0ZWRBdHRyaWJ1dGVzLnZpc1N0YXRlKSk7CiAgICB2YXIgY29udHJvbHMgPSB2aXNTdGF0ZS5wYXJhbXMgJiYgdmlzU3RhdGUucGFyYW1zLmNvbnRyb2xzIHx8IFtdOwogICAgY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbCwgaSkgewogICAgICBpZiAoIWNvbnRyb2wuaW5kZXhQYXR0ZXJuKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBjb250cm9sLmluZGV4UGF0dGVyblJlZk5hbWUgPSAiY29udHJvbF8iLmNvbmNhdChpLCAiX2luZGV4X3BhdHRlcm4iKTsKICAgICAgdXBkYXRlZFJlZmVyZW5jZXMucHVzaCh7CiAgICAgICAgbmFtZTogY29udHJvbC5pbmRleFBhdHRlcm5SZWZOYW1lLAogICAgICAgIHR5cGU6ICdpbmRleC1wYXR0ZXJuJywKICAgICAgICBpZDogY29udHJvbC5pbmRleFBhdHRlcm4KICAgICAgfSk7CiAgICAgIGRlbGV0ZSBjb250cm9sLmluZGV4UGF0dGVybjsKICAgIH0pOwogICAgdXBkYXRlZEF0dHJpYnV0ZXMudmlzU3RhdGUgPSBKU09OLnN0cmluZ2lmeSh2aXNTdGF0ZSk7CiAgfQoKICByZXR1cm4gewogICAgcmVmZXJlbmNlczogdXBkYXRlZFJlZmVyZW5jZXMsCiAgICBhdHRyaWJ1dGVzOiB1cGRhdGVkQXR0cmlidXRlcwogIH07Cn0KCmZ1bmN0aW9uIGluamVjdFJlZmVyZW5jZXMoc2F2ZWRPYmplY3QsIHJlZmVyZW5jZXMpIHsKICBpZiAoc2F2ZWRPYmplY3Quc2F2ZWRTZWFyY2hSZWZOYW1lKSB7CiAgICB2YXIgc2F2ZWRTZWFyY2hSZWZlcmVuY2UgPSByZWZlcmVuY2VzLmZpbmQoZnVuY3Rpb24gKHJlZmVyZW5jZSkgewogICAgICByZXR1cm4gcmVmZXJlbmNlLm5hbWUgPT09IHNhdmVkT2JqZWN0LnNhdmVkU2VhcmNoUmVmTmFtZTsKICAgIH0pOwoKICAgIGlmICghc2F2ZWRTZWFyY2hSZWZlcmVuY2UpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3VsZCBub3QgZmluZCBzYXZlZCBzZWFyY2ggcmVmZXJlbmNlIFwiIi5jb25jYXQoc2F2ZWRPYmplY3Quc2F2ZWRTZWFyY2hSZWZOYW1lLCAiXCIiKSk7CiAgICB9CgogICAgc2F2ZWRPYmplY3Quc2F2ZWRTZWFyY2hJZCA9IHNhdmVkU2VhcmNoUmVmZXJlbmNlLmlkOwogICAgZGVsZXRlIHNhdmVkT2JqZWN0LnNhdmVkU2VhcmNoUmVmTmFtZTsKICB9CgogIGlmIChzYXZlZE9iamVjdC52aXNTdGF0ZSkgewogICAgdmFyIGNvbnRyb2xzID0gc2F2ZWRPYmplY3QudmlzU3RhdGUucGFyYW1zICYmIHNhdmVkT2JqZWN0LnZpc1N0YXRlLnBhcmFtcy5jb250cm9scyB8fCBbXTsKICAgIGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wpIHsKICAgICAgaWYgKCFjb250cm9sLmluZGV4UGF0dGVyblJlZk5hbWUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciByZWZlcmVuY2UgPSByZWZlcmVuY2VzLmZpbmQoZnVuY3Rpb24gKHJlZikgewogICAgICAgIHJldHVybiByZWYubmFtZSA9PT0gY29udHJvbC5pbmRleFBhdHRlcm5SZWZOYW1lOwogICAgICB9KTsKCiAgICAgIGlmICghcmVmZXJlbmNlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDb3VsZCBub3QgZmluZCBpbmRleCBwYXR0ZXJuIHJlZmVyZW5jZSBcIiIuY29uY2F0KGNvbnRyb2wuaW5kZXhQYXR0ZXJuUmVmTmFtZSwgIlwiIikpOwogICAgICB9CgogICAgICBjb250cm9sLmluZGV4UGF0dGVybiA9IHJlZmVyZW5jZS5pZDsKICAgICAgZGVsZXRlIGNvbnRyb2wuaW5kZXhQYXR0ZXJuUmVmTmFtZTsKICAgIH0pOwogIH0KfQ=="},null]}