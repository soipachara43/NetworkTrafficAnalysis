{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/embeddable/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_action.js","dependencies":[{"path":"src/plugins/embeddable/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_action.js","mtime":1589249550763},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFkZFBhbmVsQWN0aW9uID0gZXhwb3J0cy5BQ1RJT05fQUREX1BBTkVMID0gdm9pZCAwOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vdHlwZXMiKTsKCnZhciBfb3Blbl9hZGRfcGFuZWxfZmx5b3V0ID0gcmVxdWlyZSgiLi9vcGVuX2FkZF9wYW5lbF9mbHlvdXQiKTsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgQUNUSU9OX0FERF9QQU5FTCA9ICdBQ1RJT05fQUREX1BBTkVMJzsKZXhwb3J0cy5BQ1RJT05fQUREX1BBTkVMID0gQUNUSU9OX0FERF9QQU5FTDsKCnZhciBBZGRQYW5lbEFjdGlvbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFkZFBhbmVsQWN0aW9uKGdldEZhY3RvcnksIGdldEFsbEZhY3Rvcmllcywgb3ZlcmxheXMsIG5vdGlmaWNhdGlvbnMsIFNhdmVkT2JqZWN0RmluZGVyKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWRkUGFuZWxBY3Rpb24pOwoKICAgIHRoaXMuZ2V0RmFjdG9yeSA9IGdldEZhY3Rvcnk7CiAgICB0aGlzLmdldEFsbEZhY3RvcmllcyA9IGdldEFsbEZhY3RvcmllczsKICAgIHRoaXMub3ZlcmxheXMgPSBvdmVybGF5czsKICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IG5vdGlmaWNhdGlvbnM7CiAgICB0aGlzLlNhdmVkT2JqZWN0RmluZGVyID0gU2F2ZWRPYmplY3RGaW5kZXI7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ0eXBlIiwgQUNUSU9OX0FERF9QQU5FTCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpZCIsIEFDVElPTl9BRERfUEFORUwpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFkZFBhbmVsQWN0aW9uLCBbewogICAga2V5OiAiZ2V0RGlzcGxheU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKCkgewogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2VtYmVkZGFibGVBcGkuYWRkUGFuZWwuZGlzcGxheU5hbWUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQgcGFuZWwnCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEljb25UeXBlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJY29uVHlwZSgpIHsKICAgICAgcmV0dXJuICdwbHVzSW5DaXJjbGVGaWxsZWQnOwogICAgfQogIH0sIHsKICAgIGtleTogImlzQ29tcGF0aWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2lzQ29tcGF0aWJsZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgICAgIHZhciBlbWJlZGRhYmxlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVtYmVkZGFibGUgPSBfcmVmLmVtYmVkZGFibGU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBlbWJlZGRhYmxlLmdldElzQ29udGFpbmVyKCkgJiYgZW1iZWRkYWJsZS5nZXRJbnB1dCgpLnZpZXdNb2RlID09PSBfdHlwZXMuVmlld01vZGUuRURJVCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBpc0NvbXBhdGlibGUoX3gpIHsKICAgICAgICByZXR1cm4gX2lzQ29tcGF0aWJsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaXNDb21wYXRpYmxlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZXhlY3V0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2V4ZWN1dGUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfcmVmMikgewogICAgICAgIHZhciBlbWJlZGRhYmxlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBlbWJlZGRhYmxlID0gX3JlZjIuZW1iZWRkYWJsZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9ICFlbWJlZGRhYmxlLmdldElzQ29udGFpbmVyKCk7CgogICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0Mi50MCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ29tcGF0aWJsZSh7CiAgICAgICAgICAgICAgICAgIGVtYmVkZGFibGU6IGVtYmVkZGFibGUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSAhX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGlmICghX2NvbnRleHQyLnQwKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250ZXh0IGlzIGluY29tcGF0aWJsZScpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAoMCwgX29wZW5fYWRkX3BhbmVsX2ZseW91dC5vcGVuQWRkUGFuZWxGbHlvdXQpKHsKICAgICAgICAgICAgICAgICAgZW1iZWRkYWJsZTogZW1iZWRkYWJsZSwKICAgICAgICAgICAgICAgICAgZ2V0RmFjdG9yeTogdGhpcy5nZXRGYWN0b3J5LAogICAgICAgICAgICAgICAgICBnZXRBbGxGYWN0b3JpZXM6IHRoaXMuZ2V0QWxsRmFjdG9yaWVzLAogICAgICAgICAgICAgICAgICBvdmVybGF5czogdGhpcy5vdmVybGF5cywKICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uczogdGhpcy5ub3RpZmljYXRpb25zLAogICAgICAgICAgICAgICAgICBTYXZlZE9iamVjdEZpbmRlcjogdGhpcy5TYXZlZE9iamVjdEZpbmRlcgogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGUoX3gyKSB7CiAgICAgICAgcmV0dXJuIF9leGVjdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBleGVjdXRlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQWRkUGFuZWxBY3Rpb247Cn0oKTsKCmV4cG9ydHMuQWRkUGFuZWxBY3Rpb24gPSBBZGRQYW5lbEFjdGlvbjs="},null]}