{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/app.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/app.js","mtime":1589249552179},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFwcCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9yZWFjdFJvdXRlckRvbSA9IHJlcXVpcmUoInJlYWN0LXJvdXRlci1kb20iKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfbm90aWZpY2F0aW9ucyA9IHJlcXVpcmUoIi4vc2VydmljZXMvbm90aWZpY2F0aW9ucyIpOwoKdmFyIF9jb21wb25lbnRzID0gcmVxdWlyZSgiLi9jb21wb25lbnRzIik7Cgp2YXIgX3JvdXRpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vc2VydmljZXMvcm91dGluZyIpKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiLi9zZXJ2aWNlcy9hcGkiKTsKCnZhciBfc2VjdGlvbnMgPSByZXF1aXJlKCIuL3NlY3Rpb25zIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgQXBwQ29tcG9uZW50ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhBcHBDb21wb25lbnQsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBBcHBDb21wb25lbnQoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFwcENvbXBvbmVudCk7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihBcHBDb21wb25lbnQpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfdGhpcy5yZWdpc3RlclJvdXRlcigpOwoKICAgIF90aGlzLnN0YXRlID0gewogICAgICBpc0ZldGNoaW5nUGVybWlzc2lvbnM6IGZhbHNlLAogICAgICBmZXRjaFBlcm1pc3Npb25FcnJvcjogdW5kZWZpbmVkLAogICAgICBoYXNQZXJtaXNzaW9uOiBmYWxzZSwKICAgICAgbWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOiBbXQogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhBcHBDb21wb25lbnQsIFt7CiAgICBrZXk6ICJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkgewogICAgICBfcm91dGluZy5kZWZhdWx0LnVzZXJIYXNMZWZ0QXBwID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB0aGlzLmNoZWNrUGVybWlzc2lvbnMoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsVW5tb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAgIF9yb3V0aW5nLmRlZmF1bHQudXNlckhhc0xlZnRBcHAgPSB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImNoZWNrUGVybWlzc2lvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jaGVja1Blcm1pc3Npb25zID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3JlZiwgaGFzUGVybWlzc2lvbiwgbWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zOiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9hcGkubG9hZFBlcm1pc3Npb25zKSgpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBfcmVmID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGhhc1Blcm1pc3Npb24gPSBfcmVmLmhhc1Blcm1pc3Npb247CiAgICAgICAgICAgICAgICBtaXNzaW5nQ2x1c3RlclByaXZpbGVnZXMgPSBfcmVmLm1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlczsKICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nUGVybWlzc2lvbnM6IGZhbHNlLAogICAgICAgICAgICAgICAgICBoYXNQZXJtaXNzaW9uOiBoYXNQZXJtaXNzaW9uLAogICAgICAgICAgICAgICAgICBtaXNzaW5nQ2x1c3RlclByaXZpbGVnZXM6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQudDAgJiYgX2NvbnRleHQudDAuYm9keSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZmV0Y2hQZXJtaXNzaW9uRXJyb3I6IF9jb250ZXh0LnQwCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICAvLyBUaGlzIGVycm9yIGlzbid0IGFuIEhUVFAgZXJyb3IsIHNvIGxldCB0aGUgZmF0YWwgZXJyb3Igc2NyZWVuIHRlbGwgdGhlIHVzZXIgc29tZXRoaW5nCiAgICAgICAgICAgICAgICAvLyB1bmV4cGVjdGVkIGhhcHBlbmVkLgogICAgICAgICAgICAgICAgKDAsIF9ub3RpZmljYXRpb25zLmdldEZhdGFsRXJyb3JzKSgpLmFkZChfY29udGV4dC50MCwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmFwcC5jaGVja1Blcm1pc3Npb25zRmF0YWxFcnJvclRpdGxlJywgewogICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0Nyb3NzLUNsdXN0ZXIgUmVwbGljYXRpb24gYXBwJwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1sxLCAxMF1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY2hlY2tQZXJtaXNzaW9ucygpIHsKICAgICAgICByZXR1cm4gX2NoZWNrUGVybWlzc2lvbnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNoZWNrUGVybWlzc2lvbnM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJyZWdpc3RlclJvdXRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJSb3V0ZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBoaXN0b3J5ID0gX3RoaXMkcHJvcHMuaGlzdG9yeSwKICAgICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMubG9jYXRpb247CiAgICAgIF9yb3V0aW5nLmRlZmF1bHQucmVhY3RSb3V0ZXIgPSB7CiAgICAgICAgaGlzdG9yeTogaGlzdG9yeSwKICAgICAgICByb3V0ZTogewogICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uCiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgICAgaXNGZXRjaGluZ1Blcm1pc3Npb25zID0gX3RoaXMkc3RhdGUuaXNGZXRjaGluZ1Blcm1pc3Npb25zLAogICAgICAgICAgZmV0Y2hQZXJtaXNzaW9uRXJyb3IgPSBfdGhpcyRzdGF0ZS5mZXRjaFBlcm1pc3Npb25FcnJvciwKICAgICAgICAgIGhhc1Blcm1pc3Npb24gPSBfdGhpcyRzdGF0ZS5oYXNQZXJtaXNzaW9uLAogICAgICAgICAgbWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzID0gX3RoaXMkc3RhdGUubWlzc2luZ0NsdXN0ZXJQcml2aWxlZ2VzOwoKICAgICAgaWYgKGlzRmV0Y2hpbmdQZXJtaXNzaW9ucykgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUNvbnRlbnQsIHsKICAgICAgICAgIGhvcml6b250YWxQb3NpdGlvbjogImNlbnRlciIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgICAgICAgIGd1dHRlclNpemU6ICJtIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTG9hZGluZ1NwaW5uZXIsIHsKICAgICAgICAgIHNpemU6ICJsIgogICAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICAgIHNpemU6ICJzIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLnBlcm1pc3Npb25DaGVja1RpdGxlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ2hlY2tpbmcgcGVybWlzc2lvbnNcdTIwMjYiCiAgICAgICAgfSkpKSkpKTsKICAgICAgfQoKICAgICAgaWYgKGZldGNoUGVybWlzc2lvbkVycm9yKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLlNlY3Rpb25FcnJvciwgewogICAgICAgICAgdGl0bGU6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLnBlcm1pc3Npb25DaGVja0Vycm9yVGl0bGUiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGNoZWNraW5nIHBlcm1pc3Npb25zIgogICAgICAgICAgfSksCiAgICAgICAgICBlcnJvcjogZmV0Y2hQZXJtaXNzaW9uRXJyb3IKICAgICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgICAgc2l6ZTogIm0iCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCB7CiAgICAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICJjZW50ZXIiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUVtcHR5UHJvbXB0LCB7CiAgICAgICAgICBpY29uVHlwZTogInNlY3VyaXR5QXBwIiwKICAgICAgICAgIGljb25Db2xvcjogbnVsbCwKICAgICAgICAgIHRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLmRlbmllZFBlcm1pc3Npb25UaXRsZSIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiWW91J3JlIG1pc3NpbmcgY2x1c3RlciBwcml2aWxlZ2VzIgogICAgICAgICAgfSkpLAogICAgICAgICAgYm9keTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uYXBwLmRlbmllZFBlcm1pc3Npb25EZXNjcmlwdGlvbiIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVG8gdXNlIENyb3NzLUNsdXN0ZXIgUmVwbGljYXRpb24sIHlvdSBtdXN0IGhhdmUge2NsdXN0ZXJQcml2aWxlZ2VzQ291bnQsIHBsdXJhbCwgb25lIHt0aGlzIGNsdXN0ZXIgcHJpdmlsZWdlfSBvdGhlciB7dGhlc2UgY2x1c3RlciBwcml2aWxlZ2VzfX06IHtjbHVzdGVyUHJpdmlsZWdlc30uIiwKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgY2x1c3RlclByaXZpbGVnZXM6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcy5qb2luKCcsICcpLAogICAgICAgICAgICAgIGNsdXN0ZXJQcml2aWxlZ2VzQ291bnQ6IG1pc3NpbmdDbHVzdGVyUHJpdmlsZWdlcy5sZW5ndGgKICAgICAgICAgICAgfQogICAgICAgICAgfSkpCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uU3dpdGNoLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5SZWRpcmVjdCwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIGZyb206ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCksCiAgICAgICAgdG86ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9mb2xsb3dlcl9pbmRpY2VzIikKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICAgICAgZXhhY3Q6IHRydWUsCiAgICAgICAgcGF0aDogIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9QQVRILCAiL2F1dG9fZm9sbG93X3BhdHRlcm5zL2FkZCIpLAogICAgICAgIGNvbXBvbmVudDogX3NlY3Rpb25zLkF1dG9Gb2xsb3dQYXR0ZXJuQWRkCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Sb3V0ZSwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIHBhdGg6ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9hdXRvX2ZvbGxvd19wYXR0ZXJucy9lZGl0LzppZCIpLAogICAgICAgIGNvbXBvbmVudDogX3NlY3Rpb25zLkF1dG9Gb2xsb3dQYXR0ZXJuRWRpdAogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uUm91dGUsIHsKICAgICAgICBleGFjdDogdHJ1ZSwKICAgICAgICBwYXRoOiAiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX1BBVEgsICIvZm9sbG93ZXJfaW5kaWNlcy9hZGQiKSwKICAgICAgICBjb21wb25lbnQ6IF9zZWN0aW9ucy5Gb2xsb3dlckluZGV4QWRkCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlckRvbS5Sb3V0ZSwgewogICAgICAgIGV4YWN0OiB0cnVlLAogICAgICAgIHBhdGg6ICIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgIi9mb2xsb3dlcl9pbmRpY2VzL2VkaXQvOmlkIiksCiAgICAgICAgY29tcG9uZW50OiBfc2VjdGlvbnMuRm9sbG93ZXJJbmRleEVkaXQKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyRG9tLlJvdXRlLCB7CiAgICAgICAgZXhhY3Q6IHRydWUsCiAgICAgICAgcGF0aDogIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9QQVRILCAiLzpzZWN0aW9uIiksCiAgICAgICAgY29tcG9uZW50OiBfc2VjdGlvbnMuQ3Jvc3NDbHVzdGVyUmVwbGljYXRpb25Ib21lCiAgICAgIH0pKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXBwQ29tcG9uZW50Owp9KF9yZWFjdC5Db21wb25lbnQpOwoKX2RlZmluZVByb3BlcnR5KEFwcENvbXBvbmVudCwgInByb3BUeXBlcyIsIHsKICBoaXN0b3J5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoewogICAgcHVzaDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICAgIGNyZWF0ZUhyZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKICB9KS5pc1JlcXVpcmVkCn0pOwoKdmFyIEFwcCA9ICgwLCBfcmVhY3RSb3V0ZXJEb20ud2l0aFJvdXRlcikoQXBwQ29tcG9uZW50KTsKZXhwb3J0cy5BcHAgPSBBcHA7"},null]}