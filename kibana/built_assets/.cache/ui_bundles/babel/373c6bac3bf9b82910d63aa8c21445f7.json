{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/inspector/public/view_registry.js","dependencies":[{"path":"src/plugins/inspector/public/view_registry.js","mtime":1589249550919},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuSW5zcGVjdG9yVmlld1JlZ2lzdHJ5ID0gdm9pZCAwOwoKdmFyIF9ldmVudHMgPSByZXF1aXJlKCJldmVudHMiKTsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKioKICogQGNhbGxiYWNrIHZpZXdTaG91bGRTaG93RnVuYwogKiBAcGFyYW0ge29iamVjdH0gYWRhcHRlcnMgLSBBIGxpc3Qgb2YgYWRhcHRlcnMgdG8gY2hlY2sgd2hldGhlciBvciBub3QgdGhpcyB2aWV3CiAqICAgIHNob3VsZCBiZSBzaG93biBmb3IuCiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIC0gaWYgdGhpcyB2aWV3IHNob3VsZCBiZSBzaG93biBmb3IgdGhlIGdpdmVuIGFkYXB0ZXJzLgogKi8KCi8qKgogKiBBIHJlZ2lzdHJ5IHRoYXQgd2lsbCBob2xkIGluc3BlY3RvciB2aWV3cy4KICovCgoKdmFyIEluc3BlY3RvclZpZXdSZWdpc3RyeSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHsKICBfaW5oZXJpdHMoSW5zcGVjdG9yVmlld1JlZ2lzdHJ5LCBfRXZlbnRFbWl0dGVyKTsKCiAgZnVuY3Rpb24gSW5zcGVjdG9yVmlld1JlZ2lzdHJ5KCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnNwZWN0b3JWaWV3UmVnaXN0cnkpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoSW5zcGVjdG9yVmlld1JlZ2lzdHJ5KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidmlld3MiLCBbXSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEluc3BlY3RvclZpZXdSZWdpc3RyeSwgW3sKICAgIGtleTogInJlZ2lzdGVyIiwKCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIGEgbmV3IGluc3BlY3RvciB2aWV3IHRvIHRoZSByZWdpc3RyeS4gQ2hlY2sgdGhlIFJFQURNRS5tZCBpbiB0aGUKICAgICAqIGluc3BlY3RvciBkaXJlY3RvcnkgZm9yIG1vcmUgaW5mb3JtYXRpb24gb2YgdGhlIG9iamVjdCBmb3JtYXQgdG8gcmVnaXN0ZXIKICAgICAqIGhlcmUuIFRoaXMgd2lsbCBhbHNvIGVtaXQgYSAnY2hhbmdlJyBldmVudCBvbiB0aGUgcmVnaXN0cnkgaXRzZWxmLgogICAgICoKICAgICAqIEBwYXJhbSB7SW5zcGVjdG9yVmlld0Rlc2NyaXB0aW9ufSB2aWV3IC0gVGhlIHZpZXcgZGVzY3JpcHRpb24gdG8gYWRkIHRvIHRoZSByZWdpc3RyeS4KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKHZpZXcpIHsKICAgICAgaWYgKCF2aWV3KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnZpZXdzLnB1c2godmlldyk7IC8vIEtlZXAgcmVnaXN0cnkgc29ydGVkIGJ5IHRoZSBvcmRlciBwcm9wZXJ0eQoKICAgICAgdGhpcy52aWV3cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIChhLm9yZGVyIHx8IE51bWJlci5NQVhfVkFMVUUpIC0gKGIub3JkZXIgfHwgTnVtYmVyLk1BWF9WQUxVRSk7CiAgICAgIH0pOwogICAgICB0aGlzLmVtaXQoJ2NoYW5nZScpOwogICAgfQogICAgLyoqCiAgICAgKiBSZXRyaWV2ZSBhbGwgdmlld3MgY3VycmVudGx5IHJlZ2lzdGVyZWQgd2l0aCB0aGUgcmVnaXN0cnkuCiAgICAgKiBAcmV0dXJucyB7SW5zcGVjdG9yVmlld0Rlc2NyaXB0aW9uW119IEEgYnkgYG9yZGVyYCBzb3J0ZWQgbGlzdCBvZiBhbGwgcmVnaXN0ZXJlZAogICAgICogICAgaW5zcGVjdG9yIHZpZXdzLgogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEFsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsKCkgewogICAgICByZXR1cm4gdGhpcy52aWV3czsKICAgIH0KICAgIC8qKgogICAgICogUmV0cmlldmUgYWxsIHJlZ2lzdGVyZWQgdmlld3MsIHRoYXQgd2FudCB0byBiZSB2aXNpYmxlIGZvciB0aGUgc3BlY2lmaWVkIGFkYXB0ZXJzLgogICAgICogQHBhcmFtIHtvYmplY3R9IGFkYXB0ZXJzIC0gYW4gYWRhcHRlciBjb25maWd1cmF0aW9uCiAgICAgKiBAcmV0dXJucyB7SW5zcGVjdG9yVmlld0Rlc2NyaXB0aW9uW119IEFsbCBpbmVzcGVjdG9yIHZpZXcgZGVzY3JpcHRpb25zIHZpc2libGUKICAgICAqICAgIGZvciB0aGUgc3BlY2lmaWMgYWRhcHRlcnMuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0VmlzaWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmlzaWJsZShhZGFwdGVycykgewogICAgICBpZiAoIWFkYXB0ZXJzKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy52aWV3cy5maWx0ZXIoZnVuY3Rpb24gKHZpZXcpIHsKICAgICAgICByZXR1cm4gIXZpZXcuc2hvdWxkU2hvdyB8fCB2aWV3LnNob3VsZFNob3coYWRhcHRlcnMpOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJbnNwZWN0b3JWaWV3UmVnaXN0cnk7Cn0oX2V2ZW50cy5FdmVudEVtaXR0ZXIpOwoKZXhwb3J0cy5JbnNwZWN0b3JWaWV3UmVnaXN0cnkgPSBJbnNwZWN0b3JWaWV3UmVnaXN0cnk7"},null]}