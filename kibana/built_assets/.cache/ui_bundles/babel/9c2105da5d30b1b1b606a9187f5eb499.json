{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/modules.js","dependencies":[{"path":"src/legacy/ui/public/modules.js","mtime":1589249550231},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmxpbmsgPSBsaW5rOwpleHBvcnRzLmdldCA9IGdldDsKZXhwb3J0cy5jbG9zZSA9IGNsb3NlOwpleHBvcnRzLnVpTW9kdWxlcyA9IHZvaWQgMDsKCnZhciBfYW5ndWxhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiYW5ndWxhciIpKTsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCgovKioKICogVGhpcyBtb2R1bGUgaXMgdXNlZCBieSBLaWJhbmEgdG8gY3JlYXRlIGFuZCByZXVzZSBhbmd1bGFyIG1vZHVsZXMuIEFuZ3VsYXIgbW9kdWxlcwogKiBjYW4gb25seSBiZSBjcmVhdGVkIG9uY2UgYW5kIG5lZWQgdG8gaGF2ZSB0aGVpciBkZXBlbmRlbmNpZXMgYXQgY3JlYXRpb24uIFRoaXMgaXMKICogaGFyZC9pbXBvc3NpYmxlIHRvIGRvIGluIHJlcXVpcmUuanMgc2luY2UgYWxsIG9mIHRoZSBkZXBlbmRlbmNpZXMgZm9yIGEgbW9kdWxlIGFyZQogKiBsb2FkZWQgYmVmb3JlIGl0IGlzLgogKgogKiBIZXJlIGlzIGFuIGV4YW1wbGU6CiAqCiAqIAlJbiB0aGUgc2NlbmFyaW8gYmVsb3csIHJlcXVpcmUuanMgd291bGQgbG9hZCBkaXJlY3RpdmUuanMgZmlyc3QgYmVjYXVzZSBpdCBpcyBhCiAqIAlkZXBlbmRlbmN5IG9mIGFwcC5qcy4gVGhpcyB3b3VsZCBjYXVzZSB0aGUgY2FsbCB0byBgYW5ndWxhci5tb2R1bGUoJ2FwcCcpYCB0bwogKiAJZXhlY3V0ZSBiZWZvcmUgdGhlIG1vZHVsZSBpcyBhY3R1YWxseSBjcmVhdGVkLiBUaGlzIGNhdXNlcyBhbmd1bGFyIHRvIHRocm93IGFuCiAqIAllcnJvci4gVGhpcyBlZmZlY3QgaXMgbWFnbmlmaWVkIHdoZW4gYXBwLmpzIGxpbmtzIG9mZiB0byBtYW55IGRpZmZlcmVudCBtb2R1bGVzLgogKgogKiAJVGhpcyBpcyBub3JtYWxseSBzb2x2ZWQgYnkgY3JlYXRpbmcgdW5pcXVlIG1vZHVsZXMgcGVyIGZpbGUsIGxpc3RlZCBhcyB0aGUgMXN0CiAqIAlhbHRlcm5hdGUgc29sdXRpb24gYmVsb3cuIFVuZm9ydHVuYXRlbHkgdGhpcyBzb2x1dGlvbiB3b3VsZCBoYXZlIHJlcXVpcmVkIHRoYXQKICogCXdlIHJlcGxpY2F0ZSBvdXIgcmVxdWlyZSBzdGF0ZW1lbnRzLgogKgogKiAgCWFwcC5qcwogKiAgICAgIGBgYAogKiAgICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLmJvb3RzdHJhcCddKQogKiAgICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgZnVuY3Rpb24gKCkgeyAuLi4gfSk7CiAqCiAqICAgICAgcmVxdWlyZSgnLi9kaXJlY3RpdmUnKTsKICogICAgICBgYGAKICoKICogICAgZGlyZWN0aXZlLmpzCiAqICAgICAgYGBgCiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpCiAqICAgICAgLmRpcmVjdGl2ZSgnc29tZURpcmVjdGl2ZScsIGZ1bmN0aW9uICgpIHsgLi4uIH0pOwogKiAgICAgIGBgYAogKgogKiBCZWZvcmUgdGFraW5nIHRoaXMgYXBwcm9hY2ggd2Ugc2F3IHRocmVlIHBvc3NpYmxlIHNvbHV0aW9uczoKICogICAxLiByZXBsaWNhdGUgb3VyIGpzIG1vZHVsZXMgaW4gYW5ndWxhciBtb2R1bGVzL3VzZSBhIGRpZmZlcmVudCBtb2R1bGUgcGVyIGZpbGUKICogICAyLiBjcmVhdGUgYSBzaW5nbGUgbW9kdWxlIG91dHNpZGUgb2Ygb3VyIGpzIG1vZHVsZXMgYW5kIHNoYXJlIGl0CiAqICAgMy4gdXNlIGEgaGVscGVyIGxpYiB0byBkeW5hbWljYWxseSBjcmVhdGUgbW9kdWxlcyBhcyBuZWVkZWQuCiAqCiAqIFdlIGRlY2lkZWQgdG8gZ28gd2l0aCAjMwogKgogKiBUaGlzIGVuZHMgdXAgd29ya2luZyBieSBjcmVhdGluZyBhIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IHRoZSBjb2RlIGJhc2UgY3JlYXRlcyBieQogKiBjYWxsaW5nIGBtb2R1bGVzLmdldChuYW1lKWAgd2l0aCBkaWZmZXJlbnQgbmFtZXMsIGFuZCB0aGVuIGJlZm9yZSBib290c3RyYXBwaW5nCiAqIHRoZSBhcHBsaWNhdGlvbiBraWJhbmEgdXNlcyBgbW9kdWxlcy5saW5rKClgIHRvIHNldCB0aGUgZGVwZW5kZW5jaWVzIG9mIHRoZSAia2liYW5hIgogKiBtb2R1bGUgdG8gaW5jbHVkZSBldmVyeSBkZWZpbmVkIG1vZHVsZS4gVGhpcyBndWFyYW50ZWVzIHRoYXQga2liYW5hIGNhbiBhbHdheXMgZmluZAogKiBhbnkgYW5ndWxhciBkZXBlbmRlbmN5IGRlZmluZWQgaW4gdGhlIGtpYmFuYSBjb2RlIGJhc2UuIFRoaXMgKiphbHNvKiogbWVhbnMgdGhhdAogKiBQcml2YXRlIG1vZHVsZXMgYXJlIGFibGUgdG8gZmluZCBhbnkgZGVwZW5kZW5jeSwgc2luY2UgdGhleSBhcmUgaW5qZWN0ZWQgdXNpbmcgdGhlCiAqICJraWJhbmEiIG1vZHVsZSdzIGluamVjdG9yLgogKgogKi8KdmFyIGV4aXN0aW5nTW9kdWxlcyA9IHt9Owp2YXIgbGlua3MgPSBbXTsKLyoqCiAqIFRha2UgYW4gYW5ndWxhciBtb2R1bGUgYW5kIGV4dGVuZHMgdGhlIGRlcGVuZGVuY2llcyBmb3IgdGhhdCBtb2R1bGUgdG8gaW5jbHVkZSBhbGwgb2YgdGhlIG1vZHVsZXMKICogY3JlYXRlZCB1c2luZyBgdWkvbW9kdWxlc2AKICoKICogQHBhcmFtICB7QW5ndWxhck1vZHVsZX0gbW9kdWxlIC0gdGhlIG1vZHVsZSB0byBleHRlbmQKICogQHJldHVybiB7dW5kZWZpbmVkfQogKi8KCmZ1bmN0aW9uIGxpbmsobW9kdWxlKSB7CiAgLy8gYXMgbW9kdWxlcyBhcmUgZGVmaW5lZCB0aGV5IHdpbGwgYmUgc2V0IGFzIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBhcHAKICBsaW5rcy5wdXNoKG1vZHVsZSk7IC8vIG1lcmdlIGluIHRoZSBleGlzdGluZyBtb2R1bGVzCgogIG1vZHVsZS5yZXF1aXJlcyA9IF9sb2Rhc2guZGVmYXVsdC51bmlvbihtb2R1bGUucmVxdWlyZXMsIF9sb2Rhc2guZGVmYXVsdC5rZXlzKGV4aXN0aW5nTW9kdWxlcykpOwp9Ci8qKgogKiBUaGUgcHJpbWFyeSBtZWFucyBvZiBpbnRlcmFjdGluZyB3aXRoIGB1aS9tb2R1bGVzYC4gUmV0dXJucyBhbiBhbmd1bGFyIG1vZHVsZS4gSWYgdGhlIG1vZHVsZSBhbHJlYWR5CiAqIGV4aXN0cyB0aGUgZXhpc3RpbmcgdmVyc2lvbiB3aWxsIGJlIHJldHVybmVkLiBgZGVwZW5kZW5jaWVzYCBhcmUgZWl0aGVyIHNldCBhcyBvciBtZXJnZWQgaW50byB0aGUKICogbW9kdWxlcyB0b3RhbCBkZXBlbmRlbmNpZXMuCiAqCiAqIFRoaXMgaXMgaW4gY29udHJhc3QgdG8gdGhlIGBhbmd1bGFyLm1vZHVsZShuYW1lLCBbZGVwZW5kZW5jaWVzXSlgIGZ1bmN0aW9uIHdoaWNoIHdpbGwgb25seQogKiBjcmVhdGUgYSBtb2R1bGUgaWYgdGhlIGBkZXBlbmRlbmNpZXNgIGxpc3QgaXMgcGFzc2VkIGFuZCBnZXQgYW4gZXhpc3RpbmcgbW9kdWxlIGlmIG5vIGRlcGVuZGVuY2llcwogKiBhcmUgcGFzc2VkLiBUaGlzIHJlcXVpcmVzIGtub3dpbmcgdGhlIG9yZGVyIHRoYXQgeW91ciBmaWxlcyB3aWxsIGxvYWQsIHdoaWNoIHdlIGNhbid0IGd1YXJhbnRlZS4KICoKICogQHBhcmFtICB7c3RyaW5nfSBtb2R1bGVOYW1lIC0gdGhlIHVuaXF1ZSBuYW1lIGZvciB0aGlzIG1vZHVsZQogKiBAcGFyYW0gIHthcnJheVtzdHJpbmddfSBbcmVxdWlyZXM9W11dIC0gdGhlIG90aGVyIG1vZHVsZXMgdGhpcyBtb2R1bGUgcmVxdWlyZXMKICogQHJldHVybiB7QW5ndWxhck1vZHVsZX0KICovCgoKZnVuY3Rpb24gZ2V0KG1vZHVsZU5hbWUsIHJlcXVpcmVzKSB7CiAgdmFyIG1vZHVsZSA9IGV4aXN0aW5nTW9kdWxlc1ttb2R1bGVOYW1lXTsKCiAgaWYgKG1vZHVsZSA9PT0gdm9pZCAwKSB7CiAgICAvLyBjcmVhdGUgdGhlIG1vZHVsZQogICAgbW9kdWxlID0gZXhpc3RpbmdNb2R1bGVzW21vZHVsZU5hbWVdID0gX2FuZ3VsYXIuZGVmYXVsdC5tb2R1bGUobW9kdWxlTmFtZSwgW10pOwogICAgbW9kdWxlLmNsb3NlID0gX2xvZGFzaC5kZWZhdWx0LnBhcnRpYWwoY2xvc2UsIG1vZHVsZU5hbWUpOyAvLyBlbnN1cmUgdGhhdCBpdCBpcyByZXF1aXJlZCBieSBsaW5rZWQgbW9kdWxlcwoKICAgIF9sb2Rhc2guZGVmYXVsdC5lYWNoKGxpbmtzLCBmdW5jdGlvbiAoYXBwKSB7CiAgICAgIGlmICghfmFwcC5yZXF1aXJlcy5pbmRleE9mKG1vZHVsZU5hbWUpKSBhcHAucmVxdWlyZXMucHVzaChtb2R1bGVOYW1lKTsKICAgIH0pOwogIH0KCiAgaWYgKHJlcXVpcmVzKSB7CiAgICAvLyB1cGRhdGUgcmVxdWlyZXMgbGlzdCB3aXRoIHBvc3NpYmx5IG5ldyByZXF1aXJlbWVudHMKICAgIG1vZHVsZS5yZXF1aXJlcyA9IF9sb2Rhc2guZGVmYXVsdC51bmlvbihtb2R1bGUucmVxdWlyZXMsIHJlcXVpcmVzKTsKICB9CgogIHJldHVybiBtb2R1bGU7Cn0KCmZ1bmN0aW9uIGNsb3NlKG1vZHVsZU5hbWUpIHsKICB2YXIgbW9kdWxlID0gZXhpc3RpbmdNb2R1bGVzW21vZHVsZU5hbWVdOyAvLyBhbHJlYWR5IGNsb3NlZAoKICBpZiAoIW1vZHVsZSkgcmV0dXJuOyAvLyBpZiB0aGUgbW9kdWxlIGlzIGN1cnJlbnRseSBsaW5rZWQsIHVubGluayBpdAoKICB2YXIgaSA9IGxpbmtzLmluZGV4T2YobW9kdWxlKTsKICBpZiAoaSA+IC0xKSBsaW5rcy5zcGxpY2UoaSwgMSk7IC8vIHJlbW92ZSBmcm9tIGxpbmtlZCBtb2R1bGVzIGxpc3Qgb2YgcmVxdWlyZWQgbW9kdWxlcwoKICBfbG9kYXNoLmRlZmF1bHQuZWFjaChsaW5rcywgZnVuY3Rpb24gKGFwcCkgewogICAgX2xvZGFzaC5kZWZhdWx0LnB1bGwoYXBwLnJlcXVpcmVzLCBtb2R1bGVOYW1lKTsKICB9KTsgLy8gcmVtb3ZlIG1vZHVsZSBmcm9tIGV4aXN0aW5nTW9kdWxlcwoKCiAgZGVsZXRlIGV4aXN0aW5nTW9kdWxlc1ttb2R1bGVOYW1lXTsKfQoKdmFyIHVpTW9kdWxlcyA9IHsKICBsaW5rOiBsaW5rLAogIGdldDogZ2V0LAogIGNsb3NlOiBjbG9zZQp9OwpleHBvcnRzLnVpTW9kdWxlcyA9IHVpTW9kdWxlczs="},null]}