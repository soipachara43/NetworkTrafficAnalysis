{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/sections/home/template_list/template_table/template_table.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/sections/home/template_list/template_table/template_table.js","mtime":1589249554144},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRlbXBsYXRlVGFibGUgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2NvbXBvbmVudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21wb25lbnRzIik7Cgp2YXIgX2FwcF9jb250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vYXBwX2NvbnRleHQiKTsKCnZhciBfcm91dGluZyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NlcnZpY2VzL3JvdXRpbmciKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIFRlbXBsYXRlVGFibGUgPSBmdW5jdGlvbiBUZW1wbGF0ZVRhYmxlKF9yZWYpIHsKICB2YXIgdGVtcGxhdGVzID0gX3JlZi50ZW1wbGF0ZXMsCiAgICAgIHJlbG9hZCA9IF9yZWYucmVsb2FkLAogICAgICBlZGl0VGVtcGxhdGUgPSBfcmVmLmVkaXRUZW1wbGF0ZSwKICAgICAgY2xvbmVUZW1wbGF0ZSA9IF9yZWYuY2xvbmVUZW1wbGF0ZTsKCiAgdmFyIF91c2VTZXJ2aWNlcyA9ICgwLCBfYXBwX2NvbnRleHQudXNlU2VydmljZXMpKCksCiAgICAgIHVpTWV0cmljU2VydmljZSA9IF91c2VTZXJ2aWNlcy51aU1ldHJpY1NlcnZpY2U7CgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShbXSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBzZWxlY3Rpb24gPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRTZWxlY3Rpb24gPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKFtdKSwKICAgICAgX3VzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLAogICAgICB0ZW1wbGF0ZXNUb0RlbGV0ZSA9IF91c2VTdGF0ZTRbMF0sCiAgICAgIHNldFRlbXBsYXRlc1RvRGVsZXRlID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIGNvbHVtbnMgPSBbewogICAgZmllbGQ6ICduYW1lJywKICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5uYW1lQ29sdW1uVGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTmFtZScKICAgIH0pLAogICAgdHJ1bmNhdGVUZXh0OiB0cnVlLAogICAgc29ydGFibGU6IHRydWUsCiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihuYW1lKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBlbGFzdGljL2V1aS9ocmVmLW9yLW9uLWNsaWNrICovCiAgICAgICAgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIGhyZWY6ICgwLCBfcm91dGluZy5nZXRUZW1wbGF0ZURldGFpbHNMaW5rKShuYW1lLCB0cnVlKSwKICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ0ZW1wbGF0ZURldGFpbHNMaW5rIiwKICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgIHJldHVybiB1aU1ldHJpY1NlcnZpY2UudHJhY2tNZXRyaWMoJ2NsaWNrJywgX2NvbnN0YW50cy5VSU1fVEVNUExBVEVfU0hPV19ERVRBSUxTX0NMSUNLKTsKICAgICAgICAgIH0KICAgICAgICB9LCBuYW1lKQogICAgICApOwogICAgfQogIH0sIHsKICAgIGZpZWxkOiAnaW5kZXhQYXR0ZXJucycsCiAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC50ZW1wbGF0ZUxpc3QudGFibGUuaW5kZXhQYXR0ZXJuc0NvbHVtblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0luZGV4IHBhdHRlcm5zJwogICAgfSksCiAgICB0cnVuY2F0ZVRleHQ6IHRydWUsCiAgICBzb3J0YWJsZTogdHJ1ZSwKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGluZGV4UGF0dGVybnMpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInN0cm9uZyIsIG51bGwsIGluZGV4UGF0dGVybnMuam9pbignLCAnKSk7CiAgICB9CiAgfSwgewogICAgZmllbGQ6ICdpbG1Qb2xpY3knLAogICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLmlsbVBvbGljeUNvbHVtblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0lMTSBwb2xpY3knCiAgICB9KSwKICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgIHNvcnRhYmxlOiB0cnVlLAogICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaWxtUG9saWN5KSB7CiAgICAgIHJldHVybiBpbG1Qb2xpY3kgJiYgaWxtUG9saWN5Lm5hbWUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC50ZW1wbGF0ZUxpc3QudGFibGUuaWxtUG9saWN5Q29sdW1uRGVzY3JpcHRpb24nLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIid7cG9saWN5TmFtZX0nIGluZGV4IGxpZmVjeWNsZSBwb2xpY3kiLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIHBvbGljeU5hbWU6IGlsbVBvbGljeS5uYW1lCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfSwgaWxtUG9saWN5Lm5hbWUpIDogbnVsbDsKICAgIH0KICB9LCB7CiAgICBmaWVsZDogJ29yZGVyJywKICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5vcmRlckNvbHVtblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ09yZGVyJwogICAgfSksCiAgICB0cnVuY2F0ZVRleHQ6IHRydWUsCiAgICBzb3J0YWJsZTogdHJ1ZQogIH0sIHsKICAgIGZpZWxkOiAnaGFzTWFwcGluZ3MnLAogICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLm1hcHBpbmdzQ29sdW1uVGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWFwcGluZ3MnCiAgICB9KSwKICAgIHRydW5jYXRlVGV4dDogdHJ1ZSwKICAgIHNvcnRhYmxlOiB0cnVlLAogICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaGFzTWFwcGluZ3MpIHsKICAgICAgcmV0dXJuIGhhc01hcHBpbmdzID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICB0eXBlOiAiY2hlY2siCiAgICAgIH0pIDogbnVsbDsKICAgIH0KICB9LCB7CiAgICBmaWVsZDogJ2hhc1NldHRpbmdzJywKICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5zZXR0aW5nc0NvbHVtblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1NldHRpbmdzJwogICAgfSksCiAgICB0cnVuY2F0ZVRleHQ6IHRydWUsCiAgICBzb3J0YWJsZTogdHJ1ZSwKICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGhhc1NldHRpbmdzKSB7CiAgICAgIHJldHVybiBoYXNTZXR0aW5ncyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJY29uLCB7CiAgICAgICAgdHlwZTogImNoZWNrIgogICAgICB9KSA6IG51bGw7CiAgICB9CiAgfSwgewogICAgZmllbGQ6ICdoYXNBbGlhc2VzJywKICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5hbGlhc2VzQ29sdW1uVGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQWxpYXNlcycKICAgIH0pLAogICAgdHJ1bmNhdGVUZXh0OiB0cnVlLAogICAgc29ydGFibGU6IHRydWUsCiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoYXNBbGlhc2VzKSB7CiAgICAgIHJldHVybiBoYXNBbGlhc2VzID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICB0eXBlOiAiY2hlY2siCiAgICAgIH0pIDogbnVsbDsKICAgIH0KICB9LCB7CiAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC50ZW1wbGF0ZUxpc3QudGFibGUuYWN0aW9uQ29sdW1uVGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQWN0aW9ucycKICAgIH0pLAogICAgYWN0aW9uczogW3sKICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLmFjdGlvbkVkaXRUZXh0JywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRWRpdCcKICAgICAgfSksCiAgICAgIGlzUHJpbWFyeTogdHJ1ZSwKICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5hY3Rpb25FZGl0RGVjcmlwdGlvbicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VkaXQgdGhpcyB0ZW1wbGF0ZScKICAgICAgfSksCiAgICAgIGljb246ICdwZW5jaWwnLAogICAgICB0eXBlOiAnaWNvbicsCiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soX3JlZjIpIHsKICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7CiAgICAgICAgZWRpdFRlbXBsYXRlKG5hbWUpOwogICAgICB9LAogICAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKF9yZWYzKSB7CiAgICAgICAgdmFyIGlzTWFuYWdlZCA9IF9yZWYzLmlzTWFuYWdlZDsKICAgICAgICByZXR1cm4gIWlzTWFuYWdlZDsKICAgICAgfQogICAgfSwgewogICAgICB0eXBlOiAnaWNvbicsCiAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5hY3Rpb25DbG9uZVRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ2xvbmUnCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLmFjdGlvbkNsb25lRGVzY3JpcHRpb24nLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDbG9uZSB0aGlzIHRlbXBsYXRlJwogICAgICB9KSwKICAgICAgaWNvbjogJ2NvcHknLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKF9yZWY0KSB7CiAgICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lOwogICAgICAgIGNsb25lVGVtcGxhdGUobmFtZSk7CiAgICAgIH0KICAgIH0sIHsKICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLmFjdGlvbkRlbGV0ZVRleHQnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUnCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLmFjdGlvbkRlbGV0ZURlY3JpcHRpb24nLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUgdGhpcyB0ZW1wbGF0ZScKICAgICAgfSksCiAgICAgIGljb246ICd0cmFzaCcsCiAgICAgIGNvbG9yOiAnZGFuZ2VyJywKICAgICAgdHlwZTogJ2ljb24nLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKF9yZWY1KSB7CiAgICAgICAgdmFyIG5hbWUgPSBfcmVmNS5uYW1lOwogICAgICAgIHNldFRlbXBsYXRlc1RvRGVsZXRlKFtuYW1lXSk7CiAgICAgIH0sCiAgICAgIGlzUHJpbWFyeTogdHJ1ZSwKICAgICAgZW5hYmxlZDogZnVuY3Rpb24gZW5hYmxlZChfcmVmNikgewogICAgICAgIHZhciBpc01hbmFnZWQgPSBfcmVmNi5pc01hbmFnZWQ7CiAgICAgICAgcmV0dXJuICFpc01hbmFnZWQ7CiAgICAgIH0KICAgIH1dCiAgfV07CiAgdmFyIHBhZ2luYXRpb24gPSB7CiAgICBpbml0aWFsUGFnZVNpemU6IDIwLAogICAgcGFnZVNpemVPcHRpb25zOiBbMTAsIDIwLCA1MF0KICB9OwogIHZhciBzb3J0aW5nID0gewogICAgc29ydDogewogICAgICBmaWVsZDogJ25hbWUnLAogICAgICBkaXJlY3Rpb246ICdhc2MnCiAgICB9CiAgfTsKICB2YXIgc2VsZWN0aW9uQ29uZmlnID0gewogICAgb25TZWxlY3Rpb25DaGFuZ2U6IHNldFNlbGVjdGlvbiwKICAgIHNlbGVjdGFibGU6IGZ1bmN0aW9uIHNlbGVjdGFibGUoX3JlZjcpIHsKICAgICAgdmFyIGlzTWFuYWdlZCA9IF9yZWY3LmlzTWFuYWdlZDsKICAgICAgcmV0dXJuICFpc01hbmFnZWQ7CiAgICB9LAogICAgc2VsZWN0YWJsZU1lc3NhZ2U6IGZ1bmN0aW9uIHNlbGVjdGFibGVNZXNzYWdlKHNlbGVjdGFibGUpIHsKICAgICAgaWYgKCFzZWxlY3RhYmxlKSB7CiAgICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5kZWxldGVNYW5hZ2VkVGVtcGxhdGVUb29sdGlwJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdZb3UgY2Fubm90IGRlbGV0ZSBhIG1hbmFnZWQgdGVtcGxhdGUuJwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gJyc7CiAgICB9CiAgfTsKICB2YXIgc2VhcmNoQ29uZmlnID0gewogICAgYm94OiB7CiAgICAgIGluY3JlbWVudGFsOiB0cnVlCiAgICB9LAogICAgdG9vbHNMZWZ0OiBzZWxlY3Rpb24ubGVuZ3RoID4gMCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogImRlbGV0ZVRlbXBsYXRlc0J1dHRvbiIsCiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgcmV0dXJuIHNldFRlbXBsYXRlc1RvRGVsZXRlKHNlbGVjdGlvbi5tYXAoZnVuY3Rpb24gKHNlbGVjdGVkKSB7CiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQubmFtZTsKICAgICAgICB9KSk7CiAgICAgIH0sCiAgICAgIGNvbG9yOiAiZGFuZ2VyIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5kZWxldGVUZW1wbGF0ZXNCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGVsZXRlIHtjb3VudCwgcGx1cmFsLCBvbmUge3RlbXBsYXRlfSBvdGhlciB7dGVtcGxhdGVzfSB9IiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgY291bnQ6IHNlbGVjdGlvbi5sZW5ndGgKICAgICAgfQogICAgfSkpIDogdW5kZWZpbmVkLAogICAgdG9vbHNSaWdodDogW19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgY29sb3I6ICJzZWNvbmRhcnkiLAogICAgICBpY29uVHlwZTogInJlZnJlc2giLAogICAgICBvbkNsaWNrOiByZWxvYWQsCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJyZWxvYWRCdXR0b24iLAogICAgICBrZXk6ICJyZWxvYWRCdXR0b24iCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLnJlbG9hZFRlbXBsYXRlc0J1dHRvbkxhYmVsIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSZWxvYWQiCiAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgaHJlZjogIiMiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgImNyZWF0ZV90ZW1wbGF0ZSIpLAogICAgICBmaWxsOiB0cnVlLAogICAgICBpY29uVHlwZTogInBsdXNJbkNpcmNsZSIsCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJjcmVhdGVUZW1wbGF0ZUJ1dHRvbiIsCiAgICAgIGtleTogImNyZWF0ZVRlbXBsYXRlQnV0dG9uIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5pZHhNZ210LnRlbXBsYXRlTGlzdC50YWJsZS5jcmVhdGVUZW1wbGF0ZXNCdXR0b25MYWJlbCIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ3JlYXRlIGEgdGVtcGxhdGUiCiAgICB9KSldCiAgfTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIHRlbXBsYXRlc1RvRGVsZXRlICYmIHRlbXBsYXRlc1RvRGVsZXRlLmxlbmd0aCA+IDAgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLlRlbXBsYXRlRGVsZXRlTW9kYWwsIHsKICAgIGNhbGxiYWNrOiBmdW5jdGlvbiBjYWxsYmFjayhkYXRhKSB7CiAgICAgIGlmIChkYXRhICYmIGRhdGEuaGFzRGVsZXRlZFRlbXBsYXRlcykgewogICAgICAgIHJlbG9hZCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFRlbXBsYXRlc1RvRGVsZXRlKFtdKTsKICAgICAgfQogICAgfSwKICAgIHRlbXBsYXRlc1RvRGVsZXRlOiB0ZW1wbGF0ZXNUb0RlbGV0ZQogIH0pIDogbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUluTWVtb3J5VGFibGUsIHsKICAgIGl0ZW1zOiB0ZW1wbGF0ZXMgfHwgW10sCiAgICBpdGVtSWQ6ICJuYW1lIiwKICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICBzZWFyY2g6IHNlYXJjaENvbmZpZywKICAgIHNvcnRpbmc6IHNvcnRpbmcsCiAgICBpc1NlbGVjdGFibGU6IHRydWUsCiAgICBzZWxlY3Rpb246IHNlbGVjdGlvbkNvbmZpZywKICAgIHBhZ2luYXRpb246IHBhZ2luYXRpb24sCiAgICByb3dQcm9wczogZnVuY3Rpb24gcm93UHJvcHMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ3JvdycKICAgICAgfTsKICAgIH0sCiAgICBjZWxsUHJvcHM6IGZ1bmN0aW9uIGNlbGxQcm9wcygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAnY2VsbCcKICAgICAgfTsKICAgIH0sCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGVtcGxhdGVUYWJsZSIsCiAgICBtZXNzYWdlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLmlkeE1nbXQudGVtcGxhdGVMaXN0LnRhYmxlLm5vSW5kZXhUZW1wbGF0ZXNNZXNzYWdlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJObyBpbmRleCB0ZW1wbGF0ZXMgZm91bmQiCiAgICB9KQogIH0pKTsKfTsKCmV4cG9ydHMuVGVtcGxhdGVUYWJsZSA9IFRlbXBsYXRlVGFibGU7"},null]}