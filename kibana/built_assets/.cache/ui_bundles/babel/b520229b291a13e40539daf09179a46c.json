{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/vector_layer.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/vector_layer.js","mtime":1589249552436},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlZlY3RvckxheWVyID0gdm9pZCAwOwoKdmFyIF90dXJmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ0dXJmIikpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2xheWVyID0gcmVxdWlyZSgiLi9sYXllciIpOwoKdmFyIF92ZWN0b3Jfc3R5bGUgPSByZXF1aXJlKCIuL3N0eWxlcy92ZWN0b3IvdmVjdG9yX3N0eWxlIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX2pvaW5fdG9vbHRpcF9wcm9wZXJ0eSA9IHJlcXVpcmUoIi4vdG9vbHRpcHMvam9pbl90b29sdGlwX3Byb3BlcnR5Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2RhdGFfcmVxdWVzdCA9IHJlcXVpcmUoIi4vdXRpbC9kYXRhX3JlcXVlc3QiKTsKCnZhciBfY2FuX3NraXBfZmV0Y2ggPSByZXF1aXJlKCIuL3V0aWwvY2FuX3NraXBfZmV0Y2giKTsKCnZhciBfYXNzaWduX2ZlYXR1cmVfaWRzID0gcmVxdWlyZSgiLi91dGlsL2Fzc2lnbl9mZWF0dXJlX2lkcyIpOwoKdmFyIF9tYl9maWx0ZXJfZXhwcmVzc2lvbnMgPSByZXF1aXJlKCIuL3V0aWwvbWJfZmlsdGVyX2V4cHJlc3Npb25zIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICJ1bmRlZmluZWQiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfQoKZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBWZWN0b3JMYXllciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9BYnN0cmFjdExheWVyKSB7CiAgX2luaGVyaXRzKFZlY3RvckxheWVyLCBfQWJzdHJhY3RMYXllcik7CgogIF9jcmVhdGVDbGFzcyhWZWN0b3JMYXllciwgbnVsbCwgW3sKICAgIGtleTogImNyZWF0ZURlc2NyaXB0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3Iob3B0aW9ucywgbWFwQ29sb3JzKSB7CiAgICAgIHZhciBsYXllckRlc2NyaXB0b3IgPSBfZ2V0KF9nZXRQcm90b3R5cGVPZihWZWN0b3JMYXllciksICJjcmVhdGVEZXNjcmlwdG9yIiwgdGhpcykuY2FsbCh0aGlzLCBvcHRpb25zKTsKCiAgICAgIGxheWVyRGVzY3JpcHRvci50eXBlID0gVmVjdG9yTGF5ZXIudHlwZTsKCiAgICAgIGlmICghb3B0aW9ucy5zdHlsZSkgewogICAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBfdmVjdG9yX3N0eWxlLlZlY3RvclN0eWxlLmNyZWF0ZURlZmF1bHRTdHlsZVByb3BlcnRpZXMobWFwQ29sb3JzKTsKCiAgICAgICAgbGF5ZXJEZXNjcmlwdG9yLnN0eWxlID0gX3ZlY3Rvcl9zdHlsZS5WZWN0b3JTdHlsZS5jcmVhdGVEZXNjcmlwdG9yKHN0eWxlUHJvcGVydGllcyk7CiAgICAgIH0KCiAgICAgIGlmICghb3B0aW9ucy5qb2lucykgewogICAgICAgIGxheWVyRGVzY3JpcHRvci5qb2lucyA9IFtdOwogICAgICB9CgogICAgICByZXR1cm4gbGF5ZXJEZXNjcmlwdG9yOwogICAgfQogIH1dKTsKCiAgZnVuY3Rpb24gVmVjdG9yTGF5ZXIoX3JlZikgewogICAgdmFyIF90aGlzOwoKICAgIHZhciBsYXllckRlc2NyaXB0b3IgPSBfcmVmLmxheWVyRGVzY3JpcHRvciwKICAgICAgICBzb3VyY2UgPSBfcmVmLnNvdXJjZSwKICAgICAgICBfcmVmJGpvaW5zID0gX3JlZi5qb2lucywKICAgICAgICBqb2lucyA9IF9yZWYkam9pbnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRqb2luczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmVjdG9yTGF5ZXIpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFZlY3RvckxheWVyKS5jYWxsKHRoaXMsIHsKICAgICAgbGF5ZXJEZXNjcmlwdG9yOiBsYXllckRlc2NyaXB0b3IsCiAgICAgIHNvdXJjZTogc291cmNlCiAgICB9KSk7CiAgICBfdGhpcy5fam9pbnMgPSBqb2luczsKICAgIF90aGlzLl9zdHlsZSA9IG5ldyBfdmVjdG9yX3N0eWxlLlZlY3RvclN0eWxlKF90aGlzLl9kZXNjcmlwdG9yLnN0eWxlLCBzb3VyY2UsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhWZWN0b3JMYXllciwgW3sKICAgIGtleTogImdldFN0eWxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIGlmICh0aGlzLmdldFNvdXJjZSgpKSB7CiAgICAgICAgdGhpcy5nZXRTb3VyY2UoKS5kZXN0cm95KCk7CiAgICAgIH0KCiAgICAgIHRoaXMuZ2V0Sm9pbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChqb2luU291cmNlKSB7CiAgICAgICAgam9pblNvdXJjZS5kZXN0cm95KCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEpvaW5zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRKb2lucygpIHsKICAgICAgcmV0dXJuIHRoaXMuX2pvaW5zLnNsaWNlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VmFsaWRKb2lucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsaWRKb2lucygpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0Sm9pbnMoKS5maWx0ZXIoZnVuY3Rpb24gKGpvaW4pIHsKICAgICAgICByZXR1cm4gam9pbi5oYXNDb21wbGV0ZUNvbmZpZygpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfaGFzSm9pbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9oYXNKb2lucygpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRKb2lucygpLmxlbmd0aCA+IDA7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNEYXRhTG9hZGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0RhdGFMb2FkZWQoKSB7CiAgICAgIHZhciBzb3VyY2VEYXRhUmVxdWVzdCA9IHRoaXMuZ2V0U291cmNlRGF0YVJlcXVlc3QoKTsKCiAgICAgIGlmICghc291cmNlRGF0YVJlcXVlc3QgfHwgIXNvdXJjZURhdGFSZXF1ZXN0Lmhhc0RhdGEoKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdmFyIGpvaW5zID0gdGhpcy5nZXRWYWxpZEpvaW5zKCk7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGpvaW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGpvaW5EYXRhUmVxdWVzdCA9IHRoaXMuZ2V0RGF0YVJlcXVlc3Qoam9pbnNbaV0uZ2V0U291cmNlRGF0YVJlcXVlc3RJZCgpKTsKCiAgICAgICAgaWYgKCFqb2luRGF0YVJlcXVlc3QgfHwgIWpvaW5EYXRhUmVxdWVzdC5oYXNEYXRhKCkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEN1c3RvbUljb25BbmRUb29sdGlwQ29udGVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VzdG9tSWNvbkFuZFRvb2x0aXBDb250ZW50KCkgewogICAgICB2YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSB0aGlzLl9nZXRTb3VyY2VGZWF0dXJlQ29sbGVjdGlvbigpOwoKICAgICAgdmFyIG5vUmVzdWx0c0ljb24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgICAgIHNpemU6ICJtIiwKICAgICAgICBjb2xvcjogInN1YmR1ZWQiLAogICAgICAgIHR5cGU6ICJtaW51c0luQ2lyY2xlIgogICAgICB9KTsKCiAgICAgIGlmICghZmVhdHVyZUNvbGxlY3Rpb24gfHwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGljb246IG5vUmVzdWx0c0ljb24sCiAgICAgICAgICB0b29sdGlwQ29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMudmVjdG9yTGF5ZXIubm9SZXN1bHRzRm91bmRUb29sdGlwJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk5vIHJlc3VsdHMgZm91bmQuIgogICAgICAgICAgfSkKICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAodGhpcy5nZXRKb2lucygpLmxlbmd0aCAmJiAhZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMuc29tZShmdW5jdGlvbiAoZmVhdHVyZSkgewogICAgICAgIHJldHVybiBmZWF0dXJlLnByb3BlcnRpZXNbX2NvbnN0YW50cy5GRUFUVVJFX1ZJU0lCTEVfUFJPUEVSVFlfTkFNRV07CiAgICAgIH0pKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGljb246IG5vUmVzdWx0c0ljb24sCiAgICAgICAgICB0b29sdGlwQ29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMudmVjdG9yTGF5ZXIubm9SZXN1bHRzRm91bmRJbkpvaW5Ub29sdGlwJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk5vIG1hdGNoaW5nIHJlc3VsdHMgZm91bmQgaW4gdGVybSBqb2lucyIKICAgICAgICAgIH0pCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdmFyIHNvdXJjZURhdGFSZXF1ZXN0ID0gdGhpcy5nZXRTb3VyY2VEYXRhUmVxdWVzdCgpOwoKICAgICAgdmFyIF90aGlzJGdldFNvdXJjZSRnZXRTbyA9IHRoaXMuZ2V0U291cmNlKCkuZ2V0U291cmNlVG9vbHRpcENvbnRlbnQoc291cmNlRGF0YVJlcXVlc3QpLAogICAgICAgICAgdG9vbHRpcENvbnRlbnQgPSBfdGhpcyRnZXRTb3VyY2UkZ2V0U28udG9vbHRpcENvbnRlbnQsCiAgICAgICAgICBhcmVSZXN1bHRzVHJpbW1lZCA9IF90aGlzJGdldFNvdXJjZSRnZXRTby5hcmVSZXN1bHRzVHJpbW1lZDsKCiAgICAgIHJldHVybiB7CiAgICAgICAgaWNvbjogdGhpcy5nZXRDdXJyZW50U3R5bGUoKS5nZXRJY29uKCksCiAgICAgICAgdG9vbHRpcENvbnRlbnQ6IHRvb2x0aXBDb250ZW50LAogICAgICAgIGFyZVJlc3VsdHNUcmltbWVkOiBhcmVSZXN1bHRzVHJpbW1lZAogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImdldExheWVyVHlwZUljb25OYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXllclR5cGVJY29uTmFtZSgpIHsKICAgICAgcmV0dXJuICd2ZWN0b3InOwogICAgfQogIH0sIHsKICAgIGtleTogImhhc0xlZ2VuZERldGFpbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9oYXNMZWdlbmREZXRhaWxzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmdldEN1cnJlbnRTdHlsZSgpLmhhc0xlZ2VuZERldGFpbHMoKSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBoYXNMZWdlbmREZXRhaWxzKCkgewogICAgICAgIHJldHVybiBfaGFzTGVnZW5kRGV0YWlscy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaGFzTGVnZW5kRGV0YWlsczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInJlbmRlckxlZ2VuZERldGFpbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxlZ2VuZERldGFpbHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRTdHlsZSgpLnJlbmRlckxlZ2VuZERldGFpbHMoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0Qm91bmRzQmFzZWRPbkRhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRCb3VuZHNCYXNlZE9uRGF0YSgpIHsKICAgICAgdmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gdGhpcy5fZ2V0U291cmNlRmVhdHVyZUNvbGxlY3Rpb24oKTsKCiAgICAgIGlmICghZmVhdHVyZUNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIHZpc2libGVGZWF0dXJlcyA9IGZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVzLmZpbHRlcihmdW5jdGlvbiAoZmVhdHVyZSkgewogICAgICAgIHJldHVybiBmZWF0dXJlLnByb3BlcnRpZXNbX2NvbnN0YW50cy5GRUFUVVJFX1ZJU0lCTEVfUFJPUEVSVFlfTkFNRV07CiAgICAgIH0pOwoKICAgICAgdmFyIGJib3ggPSBfdHVyZi5kZWZhdWx0LmJib3goewogICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsCiAgICAgICAgZmVhdHVyZXM6IHZpc2libGVGZWF0dXJlcwogICAgICB9KTsKCiAgICAgIHJldHVybiB7CiAgICAgICAgbWluX2xvbjogYmJveFswXSwKICAgICAgICBtaW5fbGF0OiBiYm94WzFdLAogICAgICAgIG1heF9sb246IGJib3hbMl0sCiAgICAgICAgbWF4X2xhdDogYmJveFszXQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImdldEJvdW5kcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEJvdW5kcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGRhdGFGaWx0ZXJzKSB7CiAgICAgICAgdmFyIGlzU3RhdGljTGF5ZXIsIHNlYXJjaEZpbHRlcnM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlzU3RhdGljTGF5ZXIgPSAhdGhpcy5nZXRTb3VyY2UoKS5pc0JvdW5kc0F3YXJlKCkgfHwgIXRoaXMuZ2V0U291cmNlKCkuaXNGaWx0ZXJCeU1hcEJvdW5kcygpOwoKICAgICAgICAgICAgICAgIGlmICghaXNTdGF0aWNMYXllcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9nZXRCb3VuZHNCYXNlZE9uRGF0YSgpKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgc2VhcmNoRmlsdGVycyA9IHRoaXMuX2dldFNlYXJjaEZpbHRlcnMoZGF0YUZpbHRlcnMsIHRoaXMuZ2V0U291cmNlKCksIHRoaXMuZ2V0Q3VycmVudFN0eWxlKCkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U291cmNlKCkuZ2V0Qm91bmRzRm9yRmlsdGVycyhzZWFyY2hGaWx0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0Qm91bmRzKF94KSB7CiAgICAgICAgcmV0dXJuIF9nZXRCb3VuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldEJvdW5kczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldExlZnRKb2luRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0TGVmdEpvaW5GaWVsZHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U291cmNlKCkuZ2V0TGVmdEpvaW5GaWVsZHMoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0My5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0TGVmdEpvaW5GaWVsZHMoKSB7CiAgICAgICAgcmV0dXJuIF9nZXRMZWZ0Sm9pbkZpZWxkcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0TGVmdEpvaW5GaWVsZHM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfZ2V0Sm9pbkZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEpvaW5GaWVsZHMoKSB7CiAgICAgIHZhciBqb2luRmllbGRzID0gW107CiAgICAgIHRoaXMuZ2V0VmFsaWRKb2lucygpLmZvckVhY2goZnVuY3Rpb24gKGpvaW4pIHsKICAgICAgICB2YXIgZmllbGRzID0gam9pbi5nZXRKb2luRmllbGRzKCk7CiAgICAgICAgam9pbkZpZWxkcy5wdXNoLmFwcGx5KGpvaW5GaWVsZHMsIF90b0NvbnN1bWFibGVBcnJheShmaWVsZHMpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBqb2luRmllbGRzOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEZpZWxkcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBzb3VyY2VGaWVsZHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZSgpLmdldEZpZWxkcygpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBzb3VyY2VGaWVsZHMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNvdXJjZUZpZWxkcyksIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9nZXRKb2luRmllbGRzKCkpKSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldEZpZWxkcygpIHsKICAgICAgICByZXR1cm4gX2dldEZpZWxkcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZ2V0RmllbGRzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZ2V0U3R5bGVFZGl0b3JGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRTdHlsZUVkaXRvckZpZWxkcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICAgIHZhciBzb3VyY2VGaWVsZHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZUZvckVkaXRpbmcoKS5nZXRGaWVsZHMoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgc291cmNlRmllbGRzID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzb3VyY2VGaWVsZHMpLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fZ2V0Sm9pbkZpZWxkcygpKSkpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRTdHlsZUVkaXRvckZpZWxkcygpIHsKICAgICAgICByZXR1cm4gX2dldFN0eWxlRWRpdG9yRmllbGRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRTdHlsZUVkaXRvckZpZWxkczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImdldEluZGV4UGF0dGVybklkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5kZXhQYXR0ZXJuSWRzKCkgewogICAgICB2YXIgaW5kZXhQYXR0ZXJuSWRzID0gdGhpcy5nZXRTb3VyY2UoKS5nZXRJbmRleFBhdHRlcm5JZHMoKTsKICAgICAgdGhpcy5nZXRWYWxpZEpvaW5zKCkuZm9yRWFjaChmdW5jdGlvbiAoam9pbikgewogICAgICAgIGluZGV4UGF0dGVybklkcy5wdXNoLmFwcGx5KGluZGV4UGF0dGVybklkcywgX3RvQ29uc3VtYWJsZUFycmF5KGpvaW4uZ2V0SW5kZXhQYXR0ZXJuSWRzKCkpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBpbmRleFBhdHRlcm5JZHM7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UXVlcnlhYmxlSW5kZXhQYXR0ZXJuSWRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRRdWVyeWFibGVJbmRleFBhdHRlcm5JZHMoKSB7CiAgICAgIHZhciBpbmRleFBhdHRlcm5JZHMgPSB0aGlzLmdldFNvdXJjZSgpLmdldFF1ZXJ5YWJsZUluZGV4UGF0dGVybklkcygpOwogICAgICB0aGlzLmdldFZhbGlkSm9pbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChqb2luKSB7CiAgICAgICAgaW5kZXhQYXR0ZXJuSWRzLnB1c2guYXBwbHkoaW5kZXhQYXR0ZXJuSWRzLCBfdG9Db25zdW1hYmxlQXJyYXkoam9pbi5nZXRRdWVyeWFibGVJbmRleFBhdHRlcm5JZHMoKSkpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGluZGV4UGF0dGVybklkczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc3luY0pvaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jSm9pbjIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihfcmVmMikgewogICAgICAgIHZhciBqb2luLCBzdGFydExvYWRpbmcsIHN0b3BMb2FkaW5nLCBvbkxvYWRFcnJvciwgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjaywgZGF0YUZpbHRlcnMsIGpvaW5Tb3VyY2UsIHNvdXJjZURhdGFJZCwgcmVxdWVzdFRva2VuLCBzZWFyY2hGaWx0ZXJzLCBwcmV2RGF0YVJlcXVlc3QsIGNhblNraXBGZXRjaCwgbGVmdFNvdXJjZU5hbWUsIF9yZWYzLCBwcm9wZXJ0aWVzTWFwOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgam9pbiA9IF9yZWYyLmpvaW4sIHN0YXJ0TG9hZGluZyA9IF9yZWYyLnN0YXJ0TG9hZGluZywgc3RvcExvYWRpbmcgPSBfcmVmMi5zdG9wTG9hZGluZywgb25Mb2FkRXJyb3IgPSBfcmVmMi5vbkxvYWRFcnJvciwgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjayA9IF9yZWYyLnJlZ2lzdGVyQ2FuY2VsQ2FsbGJhY2ssIGRhdGFGaWx0ZXJzID0gX3JlZjIuZGF0YUZpbHRlcnM7CiAgICAgICAgICAgICAgICBqb2luU291cmNlID0gam9pbi5nZXRSaWdodEpvaW5Tb3VyY2UoKTsKICAgICAgICAgICAgICAgIHNvdXJjZURhdGFJZCA9IGpvaW4uZ2V0U291cmNlRGF0YVJlcXVlc3RJZCgpOwogICAgICAgICAgICAgICAgcmVxdWVzdFRva2VuID0gU3ltYm9sKCJsYXllci1qb2luLXJlZnJlc2g6Ii5jb25jYXQodGhpcy5nZXRJZCgpLCAiIC0gIikuY29uY2F0KHNvdXJjZURhdGFJZCkpOwogICAgICAgICAgICAgICAgc2VhcmNoRmlsdGVycyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGFGaWx0ZXJzLCB7CiAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZXM6IGpvaW5Tb3VyY2UuZ2V0RmllbGROYW1lcygpLAogICAgICAgICAgICAgICAgICBzb3VyY2VRdWVyeTogam9pblNvdXJjZS5nZXRXaGVyZVF1ZXJ5KCksCiAgICAgICAgICAgICAgICAgIGFwcGx5R2xvYmFsUXVlcnk6IGpvaW5Tb3VyY2UuZ2V0QXBwbHlHbG9iYWxRdWVyeSgpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHByZXZEYXRhUmVxdWVzdCA9IHRoaXMuZ2V0RGF0YVJlcXVlc3Qoc291cmNlRGF0YUlkKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2Nhbl9za2lwX2ZldGNoLmNhblNraXBTb3VyY2VVcGRhdGUpKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBqb2luU291cmNlLAogICAgICAgICAgICAgICAgICBwcmV2RGF0YVJlcXVlc3Q6IHByZXZEYXRhUmVxdWVzdCwKICAgICAgICAgICAgICAgICAgbmV4dE1ldGE6IHNlYXJjaEZpbHRlcnMKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBjYW5Ta2lwRmV0Y2ggPSBfY29udGV4dDYuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIWNhblNraXBGZXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBkYXRhSGFzQ2hhbmdlZDogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGpvaW46IGpvaW4sCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXNNYXA6IHByZXZEYXRhUmVxdWVzdC5nZXREYXRhKCkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGluZyhzb3VyY2VEYXRhSWQsIHJlcXVlc3RUb2tlbiwgc2VhcmNoRmlsdGVycyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5nZXREaXNwbGF5TmFtZSgpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgbGVmdFNvdXJjZU5hbWUgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICByZXR1cm4gam9pblNvdXJjZS5nZXRQcm9wZXJ0aWVzTWFwKHNlYXJjaEZpbHRlcnMsIGxlZnRTb3VyY2VOYW1lLCBqb2luLmdldExlZnRGaWVsZCgpLmdldE5hbWUoKSwgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjay5iaW5kKG51bGwsIHJlcXVlc3RUb2tlbikpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX3JlZjMgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIHByb3BlcnRpZXNNYXAgPSBfcmVmMy5wcm9wZXJ0aWVzTWFwOwogICAgICAgICAgICAgICAgc3RvcExvYWRpbmcoc291cmNlRGF0YUlkLCByZXF1ZXN0VG9rZW4sIHByb3BlcnRpZXNNYXApOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgZGF0YUhhc0NoYW5nZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgIGpvaW46IGpvaW4sCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXNNYXA6IHByb3BlcnRpZXNNYXAKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAyNDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50MCA9IF9jb250ZXh0NlsiY2F0Y2giXSgxMSk7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ2LnQwIGluc3RhbmNlb2YgX2RhdGFfcmVxdWVzdC5EYXRhUmVxdWVzdEFib3J0RXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgIG9uTG9hZEVycm9yKHNvdXJjZURhdGFJZCwgcmVxdWVzdFRva2VuLCAiSm9pbiBlcnJvcjogIi5jb25jYXQoX2NvbnRleHQ2LnQwLm1lc3NhZ2UpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBkYXRhSGFzQ2hhbmdlZDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgam9pbjogam9pbiwKICAgICAgICAgICAgICAgICAgcHJvcGVydGllc01hcDogbnVsbAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMsIFtbMTEsIDI0XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfc3luY0pvaW4oX3gyKSB7CiAgICAgICAgcmV0dXJuIF9zeW5jSm9pbjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9zeW5jSm9pbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9zeW5jSm9pbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jSm9pbnMyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoc3luY0NvbnRleHQsIHN0eWxlKSB7CiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAgIHZhciBqb2luU3luY3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGpvaW5TeW5jcyA9IHRoaXMuZ2V0VmFsaWRKb2lucygpLm1hcCgKICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoam9pbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zeW5jSm9pblN0eWxlTWV0YShzeW5jQ29udGV4dCwgam9pbiwgc3R5bGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zeW5jSm9pbkZvcm1hdHRlcnMoc3luY0NvbnRleHQsIGpvaW4sIHN0eWxlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIF90aGlzMi5fc3luY0pvaW4oX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW46IGpvaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHN5bmNDb250ZXh0KSkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94NSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSgpKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChqb2luU3luY3MpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ4LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTgsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfc3luY0pvaW5zKF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9zeW5jSm9pbnMyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfc3luY0pvaW5zOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX2dldFNlYXJjaEZpbHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTZWFyY2hGaWx0ZXJzKGRhdGFGaWx0ZXJzLCBzb3VyY2UsIHN0eWxlKSB7CiAgICAgIHZhciBmaWVsZE5hbWVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzb3VyY2UuZ2V0RmllbGROYW1lcygpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlLmdldFNvdXJjZUZpZWxkTmFtZXMoKSksIF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmdldFZhbGlkSm9pbnMoKS5tYXAoZnVuY3Rpb24gKGpvaW4pIHsKICAgICAgICByZXR1cm4gam9pbi5nZXRMZWZ0RmllbGQoKS5nZXROYW1lKCk7CiAgICAgIH0pKSk7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBkYXRhRmlsdGVycywgewogICAgICAgIGZpZWxkTmFtZXM6IF9sb2Rhc2guZGVmYXVsdC51bmlxKGZpZWxkTmFtZXMpLnNvcnQoKSwKICAgICAgICBnZW9ncmlkUHJlY2lzaW9uOiBzb3VyY2UuZ2V0R2VvR3JpZFByZWNpc2lvbihkYXRhRmlsdGVycy56b29tKSwKICAgICAgICBzb3VyY2VRdWVyeTogdGhpcy5nZXRRdWVyeSgpLAogICAgICAgIGFwcGx5R2xvYmFsUXVlcnk6IHNvdXJjZS5nZXRBcHBseUdsb2JhbFF1ZXJ5KCksCiAgICAgICAgc291cmNlTWV0YTogc291cmNlLmdldFN5bmNNZXRhKCkKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3BlcmZvcm1Jbm5lckpvaW5zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcGVyZm9ybUlubmVySm9pbnMyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoc291cmNlUmVzdWx0LCBqb2luU3RhdGVzLCB1cGRhdGVTb3VyY2VEYXRhKSB7CiAgICAgICAgdmFyIHNob3VsZFVwZGF0ZVN0b3JlLCBpLCBmZWF0dXJlLCBvbGRWaXNiaWxpdHksIGlzRmVhdHVyZVZpc2libGUsIGosIGpvaW5TdGF0ZSwgaW5uZXJKb2luLCBjYW5Kb2luT25DdXJyZW50OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAvL3Nob3VsZCB1cGRhdGUgdGhlIHN0b3JlIGlmCiAgICAgICAgICAgICAgICAvLy0tIHNvdXJjZSByZXN1bHQgd2FzIHJlZnJlc2hlZAogICAgICAgICAgICAgICAgLy8tLSBhbnkgb2YgdGhlIGpvaW4gY29uZmlndXJhdGlvbnMgY2hhbmdlZCAoam9pblN0YXRlIGNoYW5nZWQpCiAgICAgICAgICAgICAgICAvLy0tIHZpc2liaWxpdHkgb2YgYW55IG9mIHRoZSBmZWF0dXJlcyBoYXMgY2hhbmdlZAogICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlU3RvcmUgPSBzb3VyY2VSZXN1bHQucmVmcmVzaGVkIHx8IGpvaW5TdGF0ZXMuc29tZShmdW5jdGlvbiAoam9pblN0YXRlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBqb2luU3RhdGUuZGF0YUhhc0NoYW5nZWQ7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlU3RvcmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VSZXN1bHQuZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IHNvdXJjZVJlc3VsdC5mZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlc1tpXTsKICAgICAgICAgICAgICAgICAgb2xkVmlzYmlsaXR5ID0gZmVhdHVyZS5wcm9wZXJ0aWVzW19jb25zdGFudHMuRkVBVFVSRV9WSVNJQkxFX1BST1BFUlRZX05BTUVdOwogICAgICAgICAgICAgICAgICBpc0ZlYXR1cmVWaXNpYmxlID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqb2luU3RhdGVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgam9pblN0YXRlID0gam9pblN0YXRlc1tqXTsKICAgICAgICAgICAgICAgICAgICBpbm5lckpvaW4gPSBqb2luU3RhdGUuam9pbjsKICAgICAgICAgICAgICAgICAgICBjYW5Kb2luT25DdXJyZW50ID0gaW5uZXJKb2luLmpvaW5Qcm9wZXJ0aWVzVG9GZWF0dXJlKGZlYXR1cmUsIGpvaW5TdGF0ZS5wcm9wZXJ0aWVzTWFwKTsKICAgICAgICAgICAgICAgICAgICBpc0ZlYXR1cmVWaXNpYmxlID0gaXNGZWF0dXJlVmlzaWJsZSAmJiBjYW5Kb2luT25DdXJyZW50OwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAob2xkVmlzYmlsaXR5ICE9PSBpc0ZlYXR1cmVWaXNpYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlU3RvcmUgPSB0cnVlOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNbX2NvbnN0YW50cy5GRUFUVVJFX1ZJU0lCTEVfUFJPUEVSVFlfTkFNRV0gPSBpc0ZlYXR1cmVWaXNpYmxlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVTdG9yZSkgewogICAgICAgICAgICAgICAgICB1cGRhdGVTb3VyY2VEYXRhKF9vYmplY3RTcHJlYWQoe30sIHNvdXJjZVJlc3VsdC5mZWF0dXJlQ29sbGVjdGlvbikpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfcGVyZm9ybUlubmVySm9pbnMoX3g2LCBfeDcsIF94OCkgewogICAgICAgIHJldHVybiBfcGVyZm9ybUlubmVySm9pbnMyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcGVyZm9ybUlubmVySm9pbnM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfc3luY1NvdXJjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N5bmNTb3VyY2UyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKHN5bmNDb250ZXh0LCBzb3VyY2UsIHN0eWxlKSB7CiAgICAgICAgdmFyIHN0YXJ0TG9hZGluZywgc3RvcExvYWRpbmcsIG9uTG9hZEVycm9yLCByZWdpc3RlckNhbmNlbENhbGxiYWNrLCBkYXRhRmlsdGVycywgaXNSZXF1ZXN0U3RpbGxBY3RpdmUsIGRhdGFSZXF1ZXN0SWQsIHJlcXVlc3RUb2tlbiwgc2VhcmNoRmlsdGVycywgcHJldkRhdGFSZXF1ZXN0LCBjYW5Ta2lwRmV0Y2gsIGxheWVyTmFtZSwgX3JlZjUsIHNvdXJjZUZlYXR1cmVDb2xsZWN0aW9uLCBtZXRhLCBsYXllckZlYXR1cmVDb2xsZWN0aW9uOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGluZyA9IHN5bmNDb250ZXh0LnN0YXJ0TG9hZGluZywgc3RvcExvYWRpbmcgPSBzeW5jQ29udGV4dC5zdG9wTG9hZGluZywgb25Mb2FkRXJyb3IgPSBzeW5jQ29udGV4dC5vbkxvYWRFcnJvciwgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjayA9IHN5bmNDb250ZXh0LnJlZ2lzdGVyQ2FuY2VsQ2FsbGJhY2ssIGRhdGFGaWx0ZXJzID0gc3luY0NvbnRleHQuZGF0YUZpbHRlcnMsIGlzUmVxdWVzdFN0aWxsQWN0aXZlID0gc3luY0NvbnRleHQuaXNSZXF1ZXN0U3RpbGxBY3RpdmU7CiAgICAgICAgICAgICAgICBkYXRhUmVxdWVzdElkID0gX2NvbnN0YW50cy5TT1VSQ0VfREFUQV9JRF9PUklHSU47CiAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW4gPSBTeW1ib2woImxheWVyLSIuY29uY2F0KHRoaXMuZ2V0SWQoKSwgIi0iKS5jb25jYXQoZGF0YVJlcXVlc3RJZCkpOwogICAgICAgICAgICAgICAgc2VhcmNoRmlsdGVycyA9IHRoaXMuX2dldFNlYXJjaEZpbHRlcnMoZGF0YUZpbHRlcnMsIHNvdXJjZSwgc3R5bGUpOwogICAgICAgICAgICAgICAgcHJldkRhdGFSZXF1ZXN0ID0gdGhpcy5nZXRTb3VyY2VEYXRhUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2Nhbl9za2lwX2ZldGNoLmNhblNraXBTb3VyY2VVcGRhdGUpKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsCiAgICAgICAgICAgICAgICAgIHByZXZEYXRhUmVxdWVzdDogcHJldkRhdGFSZXF1ZXN0LAogICAgICAgICAgICAgICAgICBuZXh0TWV0YTogc2VhcmNoRmlsdGVycwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGNhblNraXBGZXRjaCA9IF9jb250ZXh0MTAuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIWNhblNraXBGZXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHJlZnJlc2hlZDogZmFsc2UsCiAgICAgICAgICAgICAgICAgIGZlYXR1cmVDb2xsZWN0aW9uOiBwcmV2RGF0YVJlcXVlc3QuZ2V0RGF0YSgpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAucHJldiA9IDEwOwogICAgICAgICAgICAgICAgc3RhcnRMb2FkaW5nKGRhdGFSZXF1ZXN0SWQsIHJlcXVlc3RUb2tlbiwgc2VhcmNoRmlsdGVycyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpc3BsYXlOYW1lKHNvdXJjZSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBsYXllck5hbWUgPSBfY29udGV4dDEwLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UuZ2V0R2VvSnNvbldpdGhNZXRhKGxheWVyTmFtZSwgc2VhcmNoRmlsdGVycywgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjay5iaW5kKG51bGwsIHJlcXVlc3RUb2tlbiksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzUmVxdWVzdFN0aWxsQWN0aXZlKGRhdGFSZXF1ZXN0SWQsIHJlcXVlc3RUb2tlbik7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9yZWY1ID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgICAgc291cmNlRmVhdHVyZUNvbGxlY3Rpb24gPSBfcmVmNS5kYXRhOwogICAgICAgICAgICAgICAgbWV0YSA9IF9yZWY1Lm1ldGE7CiAgICAgICAgICAgICAgICBsYXllckZlYXR1cmVDb2xsZWN0aW9uID0gKDAsIF9hc3NpZ25fZmVhdHVyZV9pZHMuYXNzaWduRmVhdHVyZUlkcykoc291cmNlRmVhdHVyZUNvbGxlY3Rpb24pOwogICAgICAgICAgICAgICAgc3RvcExvYWRpbmcoZGF0YVJlcXVlc3RJZCwgcmVxdWVzdFRva2VuLCBsYXllckZlYXR1cmVDb2xsZWN0aW9uLCBtZXRhKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICByZWZyZXNoZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgIGZlYXR1cmVDb2xsZWN0aW9uOiBsYXllckZlYXR1cmVDb2xsZWN0aW9uCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAucHJldiA9IDI1OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC50MCA9IF9jb250ZXh0MTBbImNhdGNoIl0oMTApOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0MTAudDAgaW5zdGFuY2VvZiBfZGF0YV9yZXF1ZXN0LkRhdGFSZXF1ZXN0QWJvcnRFcnJvcikpIHsKICAgICAgICAgICAgICAgICAgb25Mb2FkRXJyb3IoZGF0YVJlcXVlc3RJZCwgcmVxdWVzdFRva2VuLCBfY29udGV4dDEwLnQwLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICByZWZyZXNoZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwLCB0aGlzLCBbWzEwLCAyNV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3N5bmNTb3VyY2UoX3g5LCBfeDEwLCBfeDExKSB7CiAgICAgICAgcmV0dXJuIF9zeW5jU291cmNlMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3N5bmNTb3VyY2U7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfc3luY1NvdXJjZVN0eWxlTWV0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N5bmNTb3VyY2VTdHlsZU1ldGEyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTExKHN5bmNDb250ZXh0LCBzb3VyY2UsIHN0eWxlKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmdldEN1cnJlbnRTdHlsZSgpLmNvbnN0cnVjdG9yLnR5cGUgIT09IF9jb25zdGFudHMuTEFZRVJfU1RZTEVfVFlQRS5WRUNUT1IpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLmFicnVwdCgicmV0dXJuIiwgdGhpcy5fc3luY1N0eWxlTWV0YShfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsCiAgICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZSwKICAgICAgICAgICAgICAgICAgc291cmNlUXVlcnk6IHRoaXMuZ2V0UXVlcnkoKSwKICAgICAgICAgICAgICAgICAgZGF0YVJlcXVlc3RJZDogX2NvbnN0YW50cy5TT1VSQ0VfTUVUQV9JRF9PUklHSU4sCiAgICAgICAgICAgICAgICAgIGR5bmFtaWNTdHlsZVByb3BzOiBzdHlsZS5nZXREeW5hbWljUHJvcGVydGllc0FycmF5KCkuZmlsdGVyKGZ1bmN0aW9uIChkeW5hbWljU3R5bGVQcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNTdHlsZVByb3AuZ2V0RmllbGRPcmlnaW4oKSA9PT0gX2NvbnN0YW50cy5GSUVMRF9PUklHSU4uU09VUkNFICYmIGR5bmFtaWNTdHlsZVByb3AuaXNGaWVsZE1ldGFFbmFibGVkKCk7CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBzeW5jQ29udGV4dCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTEsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfc3luY1NvdXJjZVN0eWxlTWV0YShfeDEyLCBfeDEzLCBfeDE0KSB7CiAgICAgICAgcmV0dXJuIF9zeW5jU291cmNlU3R5bGVNZXRhMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3N5bmNTb3VyY2VTdHlsZU1ldGE7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfc3luY0pvaW5TdHlsZU1ldGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jSm9pblN0eWxlTWV0YTIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIoc3luY0NvbnRleHQsIGpvaW4sIHN0eWxlKSB7CiAgICAgICAgdmFyIGpvaW5Tb3VyY2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMiQoX2NvbnRleHQxMikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEyLnByZXYgPSBfY29udGV4dDEyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBqb2luU291cmNlID0gam9pbi5nZXRSaWdodEpvaW5Tb3VyY2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLmFicnVwdCgicmV0dXJuIiwgdGhpcy5fc3luY1N0eWxlTWV0YShfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBqb2luU291cmNlLAogICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGUsCiAgICAgICAgICAgICAgICAgIHNvdXJjZVF1ZXJ5OiBqb2luU291cmNlLmdldFdoZXJlUXVlcnkoKSwKICAgICAgICAgICAgICAgICAgZGF0YVJlcXVlc3RJZDogam9pbi5nZXRTb3VyY2VNZXRhRGF0YVJlcXVlc3RJZCgpLAogICAgICAgICAgICAgICAgICBkeW5hbWljU3R5bGVQcm9wczogdGhpcy5nZXRDdXJyZW50U3R5bGUoKS5nZXREeW5hbWljUHJvcGVydGllc0FycmF5KCkuZmlsdGVyKGZ1bmN0aW9uIChkeW5hbWljU3R5bGVQcm9wKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoaW5nRmllbGQgPSBqb2luU291cmNlLmdldE1ldHJpY0ZpZWxkRm9yTmFtZShkeW5hbWljU3R5bGVQcm9wLmdldEZpZWxkKCkuZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHluYW1pY1N0eWxlUHJvcC5nZXRGaWVsZE9yaWdpbigpID09PSBfY29uc3RhbnRzLkZJRUxEX09SSUdJTi5KT0lOICYmICEhbWF0Y2hpbmdGaWVsZCAmJiBkeW5hbWljU3R5bGVQcm9wLmlzRmllbGRNZXRhRW5hYmxlZCgpOwogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgc3luY0NvbnRleHQpKSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3N5bmNKb2luU3R5bGVNZXRhKF94MTUsIF94MTYsIF94MTcpIHsKICAgICAgICByZXR1cm4gX3N5bmNKb2luU3R5bGVNZXRhMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3N5bmNKb2luU3R5bGVNZXRhOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX3N5bmNTdHlsZU1ldGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jU3R5bGVNZXRhMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMyhfcmVmNikgewogICAgICAgIHZhciBzb3VyY2UsIHN0eWxlLCBzb3VyY2VRdWVyeSwgZGF0YVJlcXVlc3RJZCwgZHluYW1pY1N0eWxlUHJvcHMsIGRhdGFGaWx0ZXJzLCBzdGFydExvYWRpbmcsIHN0b3BMb2FkaW5nLCBvbkxvYWRFcnJvciwgcmVnaXN0ZXJDYW5jZWxDYWxsYmFjaywgZHluYW1pY1N0eWxlRmllbGRzLCBuZXh0TWV0YSwgcHJldkRhdGFSZXF1ZXN0LCBjYW5Ta2lwRmV0Y2gsIHJlcXVlc3RUb2tlbiwgbGF5ZXJOYW1lLCBzdHlsZU1ldGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEzLnByZXYgPSBfY29udGV4dDEzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzb3VyY2UgPSBfcmVmNi5zb3VyY2UsIHN0eWxlID0gX3JlZjYuc3R5bGUsIHNvdXJjZVF1ZXJ5ID0gX3JlZjYuc291cmNlUXVlcnksIGRhdGFSZXF1ZXN0SWQgPSBfcmVmNi5kYXRhUmVxdWVzdElkLCBkeW5hbWljU3R5bGVQcm9wcyA9IF9yZWY2LmR5bmFtaWNTdHlsZVByb3BzLCBkYXRhRmlsdGVycyA9IF9yZWY2LmRhdGFGaWx0ZXJzLCBzdGFydExvYWRpbmcgPSBfcmVmNi5zdGFydExvYWRpbmcsIHN0b3BMb2FkaW5nID0gX3JlZjYuc3RvcExvYWRpbmcsIG9uTG9hZEVycm9yID0gX3JlZjYub25Mb2FkRXJyb3IsIHJlZ2lzdGVyQ2FuY2VsQ2FsbGJhY2sgPSBfcmVmNi5yZWdpc3RlckNhbmNlbENhbGxiYWNrOwoKICAgICAgICAgICAgICAgIGlmICghKCFzb3VyY2UuaXNFU1NvdXJjZSgpIHx8IGR5bmFtaWNTdHlsZVByb3BzLmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgZHluYW1pY1N0eWxlRmllbGRzID0gZHluYW1pY1N0eWxlUHJvcHMubWFwKGZ1bmN0aW9uIChkeW5hbWljU3R5bGVQcm9wKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljU3R5bGVQcm9wLmdldEZpZWxkKCkuZ2V0TmFtZSgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQwID0gX2xvZGFzaC5kZWZhdWx0LnVuaXEoZHluYW1pY1N0eWxlRmllbGRzKS5zb3J0KCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQxID0gc291cmNlUXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQyID0gdGhpcy5nZXRDdXJyZW50U3R5bGUoKS5pc1RpbWVBd2FyZSgpOwoKICAgICAgICAgICAgICAgIGlmICghX2NvbnRleHQxMy50MikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlLmlzVGltZUF3YXJlKCk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQyID0gX2NvbnRleHQxMy5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy50MyA9IF9jb250ZXh0MTMudDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQ0ID0gZGF0YUZpbHRlcnMudGltZUZpbHRlcnM7CiAgICAgICAgICAgICAgICBuZXh0TWV0YSA9IHsKICAgICAgICAgICAgICAgICAgZHluYW1pY1N0eWxlRmllbGRzOiBfY29udGV4dDEzLnQwLAogICAgICAgICAgICAgICAgICBzb3VyY2VRdWVyeTogX2NvbnRleHQxMy50MSwKICAgICAgICAgICAgICAgICAgaXNUaW1lQXdhcmU6IF9jb250ZXh0MTMudDMsCiAgICAgICAgICAgICAgICAgIHRpbWVGaWx0ZXJzOiBfY29udGV4dDEzLnQ0CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcHJldkRhdGFSZXF1ZXN0ID0gdGhpcy5nZXREYXRhUmVxdWVzdChkYXRhUmVxdWVzdElkKTsKICAgICAgICAgICAgICAgIGNhblNraXBGZXRjaCA9ICgwLCBfY2FuX3NraXBfZmV0Y2guY2FuU2tpcFN0eWxlTWV0YVVwZGF0ZSkoewogICAgICAgICAgICAgICAgICBwcmV2RGF0YVJlcXVlc3Q6IHByZXZEYXRhUmVxdWVzdCwKICAgICAgICAgICAgICAgICAgbmV4dE1ldGE6IG5leHRNZXRhCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoIWNhblNraXBGZXRjaCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAxODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbiA9IFN5bWJvbCgibGF5ZXItIi5jb25jYXQodGhpcy5nZXRJZCgpLCAiLSIpLmNvbmNhdChkYXRhUmVxdWVzdElkKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnByZXYgPSAxOTsKICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGluZyhkYXRhUmVxdWVzdElkLCByZXF1ZXN0VG9rZW4sIG5leHRNZXRhKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzcGxheU5hbWUoc291cmNlKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgIGxheWVyTmFtZSA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDI2OwogICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5sb2FkU3R5bGVQcm9wc01ldGEobGF5ZXJOYW1lLCBzdHlsZSwgZHluYW1pY1N0eWxlUHJvcHMsIHJlZ2lzdGVyQ2FuY2VsQ2FsbGJhY2ssIG5leHRNZXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIHN0eWxlTWV0YSA9IF9jb250ZXh0MTMuc2VudDsKICAgICAgICAgICAgICAgIHN0b3BMb2FkaW5nKGRhdGFSZXF1ZXN0SWQsIHJlcXVlc3RUb2tlbiwgc3R5bGVNZXRhLCBuZXh0TWV0YSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAzMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5wcmV2ID0gMzA7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQ1ID0gX2NvbnRleHQxM1siY2F0Y2giXSgxOSk7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQxMy50NSBpbnN0YW5jZW9mIF9kYXRhX3JlcXVlc3QuRGF0YVJlcXVlc3RBYm9ydEVycm9yKSkgewogICAgICAgICAgICAgICAgICBvbkxvYWRFcnJvcihkYXRhUmVxdWVzdElkLCByZXF1ZXN0VG9rZW4sIF9jb250ZXh0MTMudDUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMzM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMywgdGhpcywgW1sxOSwgMzBdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9zeW5jU3R5bGVNZXRhKF94MTgpIHsKICAgICAgICByZXR1cm4gX3N5bmNTdHlsZU1ldGEyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfc3luY1N0eWxlTWV0YTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9zeW5jU291cmNlRm9ybWF0dGVycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N5bmNTb3VyY2VGb3JtYXR0ZXJzMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNChzeW5jQ29udGV4dCwgc291cmNlLCBzdHlsZSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTQkKF9jb250ZXh0MTQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEoc3R5bGUuY29uc3RydWN0b3IudHlwZSAhPT0gX2NvbnN0YW50cy5MQVlFUl9TVFlMRV9UWVBFLlZFQ1RPUikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9zeW5jRm9ybWF0dGVycyhfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBzb3VyY2UsCiAgICAgICAgICAgICAgICAgIGRhdGFSZXF1ZXN0SWQ6IF9jb25zdGFudHMuU09VUkNFX0ZPUk1BVFRFUlNfSURfT1JJR0lOLAogICAgICAgICAgICAgICAgICBmaWVsZHM6IHN0eWxlLmdldER5bmFtaWNQcm9wZXJ0aWVzQXJyYXkoKS5maWx0ZXIoZnVuY3Rpb24gKGR5bmFtaWNTdHlsZVByb3ApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHluYW1pY1N0eWxlUHJvcC5nZXRGaWVsZE9yaWdpbigpID09PSBfY29uc3RhbnRzLkZJRUxEX09SSUdJTi5TT1VSQ0U7CiAgICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoZHluYW1pY1N0eWxlUHJvcCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljU3R5bGVQcm9wLmdldEZpZWxkKCk7CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBzeW5jQ29udGV4dCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfc3luY1NvdXJjZUZvcm1hdHRlcnMoX3gxOSwgX3gyMCwgX3gyMSkgewogICAgICAgIHJldHVybiBfc3luY1NvdXJjZUZvcm1hdHRlcnMyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfc3luY1NvdXJjZUZvcm1hdHRlcnM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfc3luY0pvaW5Gb3JtYXR0ZXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc3luY0pvaW5Gb3JtYXR0ZXJzMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNShzeW5jQ29udGV4dCwgam9pbiwgc3R5bGUpIHsKICAgICAgICB2YXIgam9pblNvdXJjZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGpvaW5Tb3VyY2UgPSBqb2luLmdldFJpZ2h0Sm9pblNvdXJjZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTUuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9zeW5jRm9ybWF0dGVycyhfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgc291cmNlOiBqb2luU291cmNlLAogICAgICAgICAgICAgICAgICBkYXRhUmVxdWVzdElkOiBqb2luLmdldFNvdXJjZUZvcm1hdHRlcnNEYXRhUmVxdWVzdElkKCksCiAgICAgICAgICAgICAgICAgIGZpZWxkczogc3R5bGUuZ2V0RHluYW1pY1Byb3BlcnRpZXNBcnJheSgpLmZpbHRlcihmdW5jdGlvbiAoZHluYW1pY1N0eWxlUHJvcCkgewogICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ0ZpZWxkID0gam9pblNvdXJjZS5nZXRNZXRyaWNGaWVsZEZvck5hbWUoZHluYW1pY1N0eWxlUHJvcC5nZXRGaWVsZCgpLmdldE5hbWUoKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNTdHlsZVByb3AuZ2V0RmllbGRPcmlnaW4oKSA9PT0gX2NvbnN0YW50cy5GSUVMRF9PUklHSU4uSk9JTiAmJiAhIW1hdGNoaW5nRmllbGQ7CiAgICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoZHluYW1pY1N0eWxlUHJvcCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljU3R5bGVQcm9wLmdldEZpZWxkKCk7CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBzeW5jQ29udGV4dCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfc3luY0pvaW5Gb3JtYXR0ZXJzKF94MjIsIF94MjMsIF94MjQpIHsKICAgICAgICByZXR1cm4gX3N5bmNKb2luRm9ybWF0dGVyczIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9zeW5jSm9pbkZvcm1hdHRlcnM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfc3luY0Zvcm1hdHRlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jRm9ybWF0dGVyczIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTcoX3JlZjcpIHsKICAgICAgICB2YXIgc291cmNlLCBkYXRhUmVxdWVzdElkLCBmaWVsZHMsIHN0YXJ0TG9hZGluZywgc3RvcExvYWRpbmcsIG9uTG9hZEVycm9yLCBmaWVsZE5hbWVzLCBuZXh0TWV0YSwgcHJldkRhdGFSZXF1ZXN0LCBjYW5Ta2lwVXBkYXRlLCByZXF1ZXN0VG9rZW4sIGZvcm1hdHRlcnMsIHByb21pc2VzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTckKF9jb250ZXh0MTcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNy5wcmV2ID0gX2NvbnRleHQxNy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc291cmNlID0gX3JlZjcuc291cmNlLCBkYXRhUmVxdWVzdElkID0gX3JlZjcuZGF0YVJlcXVlc3RJZCwgZmllbGRzID0gX3JlZjcuZmllbGRzLCBzdGFydExvYWRpbmcgPSBfcmVmNy5zdGFydExvYWRpbmcsIHN0b3BMb2FkaW5nID0gX3JlZjcuc3RvcExvYWRpbmcsIG9uTG9hZEVycm9yID0gX3JlZjcub25Mb2FkRXJyb3I7CgogICAgICAgICAgICAgICAgaWYgKCEoZmllbGRzLmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgZmllbGROYW1lcyA9IGZpZWxkcy5tYXAoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZC5nZXROYW1lKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG5leHRNZXRhID0gewogICAgICAgICAgICAgICAgICBmaWVsZE5hbWVzOiBfbG9kYXNoLmRlZmF1bHQudW5pcShmaWVsZE5hbWVzKS5zb3J0KCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBwcmV2RGF0YVJlcXVlc3QgPSB0aGlzLmdldERhdGFSZXF1ZXN0KGRhdGFSZXF1ZXN0SWQpOwogICAgICAgICAgICAgICAgY2FuU2tpcFVwZGF0ZSA9ICgwLCBfY2FuX3NraXBfZmV0Y2guY2FuU2tpcEZvcm1hdHRlcnNVcGRhdGUpKHsKICAgICAgICAgICAgICAgICAgcHJldkRhdGFSZXF1ZXN0OiBwcmV2RGF0YVJlcXVlc3QsCiAgICAgICAgICAgICAgICAgIG5leHRNZXRhOiBuZXh0TWV0YQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKCFjYW5Ta2lwVXBkYXRlKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbiA9IFN5bWJvbCgibGF5ZXItIi5jb25jYXQodGhpcy5nZXRJZCgpLCAiLSIpLmNvbmNhdChkYXRhUmVxdWVzdElkKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIHN0YXJ0TG9hZGluZyhkYXRhUmVxdWVzdElkLCByZXF1ZXN0VG9rZW4sIG5leHRNZXRhKTsKICAgICAgICAgICAgICAgIGZvcm1hdHRlcnMgPSB7fTsKICAgICAgICAgICAgICAgIHByb21pc2VzID0gZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmNhblZhbHVlQmVGb3JtYXR0ZWQoKTsKICAgICAgICAgICAgICAgIH0pLm1hcCgKICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWY4ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE2KGZpZWxkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNikgewogICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE2LnByZXYgPSBfY29udGV4dDE2Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5jcmVhdGVGaWVsZEZvcm1hdHRlcihmaWVsZCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcnNbZmllbGQuZ2V0TmFtZSgpXSA9IF9jb250ZXh0MTYuc2VudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNi5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMTYpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MjYpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjguYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBzdG9wTG9hZGluZyhkYXRhUmVxdWVzdElkLCByZXF1ZXN0VG9rZW4sIGZvcm1hdHRlcnMsIG5leHRNZXRhKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBfY29udGV4dDE3LnByZXYgPSAxOTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcudDAgPSBfY29udGV4dDE3WyJjYXRjaCJdKDEwKTsKICAgICAgICAgICAgICAgIG9uTG9hZEVycm9yKGRhdGFSZXF1ZXN0SWQsIHJlcXVlc3RUb2tlbiwgX2NvbnRleHQxNy50MC5tZXNzYWdlKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE3LCB0aGlzLCBbWzEwLCAxOV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX3N5bmNGb3JtYXR0ZXJzKF94MjUpIHsKICAgICAgICByZXR1cm4gX3N5bmNGb3JtYXR0ZXJzMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX3N5bmNGb3JtYXR0ZXJzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAic3luY0RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zeW5jRGF0YTIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTgoc3luY0NvbnRleHQpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE4JChfY29udGV4dDE4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTgucHJldiA9IF9jb250ZXh0MTgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuX3N5bmNEYXRhKHN5bmNDb250ZXh0LCB0aGlzLmdldFNvdXJjZSgpLCB0aGlzLmdldEN1cnJlbnRTdHlsZSgpKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTgsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzeW5jRGF0YShfeDI3KSB7CiAgICAgICAgcmV0dXJuIF9zeW5jRGF0YTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHN5bmNEYXRhOwogICAgfSgpIC8vIFRMRFI6IERvIG5vdCBjYWxsIGdldFNvdXJjZSBvciBnZXRDdXJyZW50U3R5bGUgaW4gc3luY0RhdGEgZmxvdy4gVXNlICdzb3VyY2UnIGFuZCAnc3R5bGUnIGFyZ3VtZW50cyBpbnN0ZWFkLgogICAgLy8KICAgIC8vIDEpIFN0YXRlIGlzIGNvbnRhaW5lZCBpbiB0aGUgcmVkdXggc3RvcmUuIExheWVyIGluc3RhbmNlIHN0YXRlIGlzIHJlYWRvbmx5LgogICAgLy8gMikgRXZlbiB0aG91Z2ggZGF0YSByZXF1ZXN0IGRlc2NyaXB0b3IgdXBkYXRlcyB0cmlnZ2VyIG5ldyBpbnN0YW5jZXMgZm9yIHJlbmRlcmluZywKICAgIC8vIHN5bmNpbmcgZGF0YSBleGVjdXRlcyBvbiBhIHNpbmdsZSBvYmplY3QgaW5zdGFuY2UuIFN5bmNpbmcgZGF0YSBjYW4gbm90IHVzZSB1cGRhdGVkIHJlZHV4IHN0b3JlIHN0YXRlLgogICAgLy8KICAgIC8vIEJsZW5kZWQgbGF5ZXIgZGF0YSBzeW5jaW5nIGJyYW5jaGVzIG9uIHRoZSBzb3VyY2Uvc3R5bGUgZGVwZW5kaW5nIG9uIHdoZXRoZXIgY2x1c3RlcmluZyBpcyB1c2VkIG9yIG5vdC4KICAgIC8vIEdpdmVuIDEgYWJvdmUsIHdoaWNoIHNvdXJjZS9zdHlsZSB0byB1c2UgY2FuIG5vdCBiZSBzdG9yZWQgaW4gTGF5ZXIgaW5zdGFuY2Ugc3RhdGUuCiAgICAvLyBHaXZlbiAyIGFib3ZlLCB3aGljaCBzb3VyY2Uvc3R5bGUgdG8gdXNlIGNhbiBub3QgYmUgcHVsbGVkIGZyb20gZGF0YSByZXF1ZXN0IHN0YXRlLgogICAgLy8gVGhlcmVmb3JlLCBzb3VyY2UgYW5kIHN0eWxlIGFyZSBwcm92aWRlZCBhcyBhcnVnbWVudHMgYW5kIG11c3QgYmUgdXNlZCBpbnN0ZWFkIG9mIGNhbGxpbmcgZ2V0U291cmNlIG9yIGdldEN1cnJlbnRTdHlsZS4KCiAgfSwgewogICAga2V5OiAiX3N5bmNEYXRhIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc3luY0RhdGEzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE5KHN5bmNDb250ZXh0LCBzb3VyY2UsIHN0eWxlKSB7CiAgICAgICAgdmFyIHNvdXJjZVJlc3VsdCwgam9pblN0YXRlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE5JChfY29udGV4dDE5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTkucHJldiA9IF9jb250ZXh0MTkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKCF0aGlzLmlzVmlzaWJsZSgpIHx8ICF0aGlzLnNob3dBdFpvb21MZXZlbChzeW5jQ29udGV4dC5kYXRhRmlsdGVycy56b29tKSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zeW5jU291cmNlU3R5bGVNZXRhKHN5bmNDb250ZXh0LCBzb3VyY2UsIHN0eWxlKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zeW5jU291cmNlRm9ybWF0dGVycyhzeW5jQ29udGV4dCwgc291cmNlLCBzdHlsZSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3luY1NvdXJjZShzeW5jQ29udGV4dCwgc291cmNlLCBzdHlsZSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHNvdXJjZVJlc3VsdCA9IF9jb250ZXh0MTkuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoISghc291cmNlUmVzdWx0LmZlYXR1cmVDb2xsZWN0aW9uIHx8ICFzb3VyY2VSZXN1bHQuZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoIHx8ICF0aGlzLl9oYXNKb2lucygpKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N5bmNKb2lucyhzeW5jQ29udGV4dCwgc3R5bGUpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgam9pblN0YXRlcyA9IF9jb250ZXh0MTkuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BlcmZvcm1Jbm5lckpvaW5zKHNvdXJjZVJlc3VsdCwgam9pblN0YXRlcywgc3luY0NvbnRleHQudXBkYXRlU291cmNlRGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxOSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9zeW5jRGF0YShfeDI4LCBfeDI5LCBfeDMwKSB7CiAgICAgICAgcmV0dXJuIF9zeW5jRGF0YTMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9zeW5jRGF0YTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9nZXRTb3VyY2VGZWF0dXJlQ29sbGVjdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFNvdXJjZUZlYXR1cmVDb2xsZWN0aW9uKCkgewogICAgICB2YXIgc291cmNlRGF0YVJlcXVlc3QgPSB0aGlzLmdldFNvdXJjZURhdGFSZXF1ZXN0KCk7CiAgICAgIHJldHVybiBzb3VyY2VEYXRhUmVxdWVzdCA/IHNvdXJjZURhdGFSZXF1ZXN0LmdldERhdGEoKSA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3N5bmNGZWF0dXJlQ29sbGVjdGlvbldpdGhNYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3N5bmNGZWF0dXJlQ29sbGVjdGlvbldpdGhNYihtYk1hcCkgewogICAgICB2YXIgbWJHZW9KU09OU291cmNlID0gbWJNYXAuZ2V0U291cmNlKHRoaXMuZ2V0SWQoKSk7CgogICAgICB2YXIgZmVhdHVyZUNvbGxlY3Rpb24gPSB0aGlzLl9nZXRTb3VyY2VGZWF0dXJlQ29sbGVjdGlvbigpOwoKICAgICAgdmFyIGZlYXR1cmVDb2xsZWN0aW9uT25NYXAgPSBfbGF5ZXIuQWJzdHJhY3RMYXllci5nZXRCb3VuZERhdGFGb3JTb3VyY2UobWJNYXAsIHRoaXMuZ2V0SWQoKSk7CgogICAgICBpZiAoIWZlYXR1cmVDb2xsZWN0aW9uKSB7CiAgICAgICAgaWYgKGZlYXR1cmVDb2xsZWN0aW9uT25NYXApIHsKICAgICAgICAgIHRoaXMuZ2V0Q3VycmVudFN0eWxlKCkuY2xlYXJGZWF0dXJlU3RhdGUoZmVhdHVyZUNvbGxlY3Rpb25Pbk1hcCwgbWJNYXAsIHRoaXMuZ2V0SWQoKSk7CiAgICAgICAgfQoKICAgICAgICBtYkdlb0pTT05Tb3VyY2Uuc2V0RGF0YShfY29uc3RhbnRzLkVNUFRZX0ZFQVRVUkVfQ09MTEVDVElPTik7CiAgICAgICAgcmV0dXJuOwogICAgICB9IC8vICJmZWF0dXJlLXN0YXRlIiBkYXRhIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggbGF5b3V0IHByb3BlcnRpZXMuCiAgICAgIC8vIFRvIHdvcmsgYXJvdW5kIHRoaXMgbGltaXRhdGlvbiwKICAgICAgLy8gc2NhbGVkIGxheW91dCBwcm9wZXJ0aWVzIChsaWtlIGljb24tc2l6ZSkgbXVzdCBmYWxsIGJhY2sgdG8gZ2VvanNvbiBwcm9wZXJ0eSB2YWx1ZXMgOigKCgogICAgICB2YXIgaGFzR2VvSnNvblByb3BlcnRpZXMgPSB0aGlzLmdldEN1cnJlbnRTdHlsZSgpLnNldEZlYXR1cmVTdGF0ZUFuZFN0eWxlUHJvcHMoZmVhdHVyZUNvbGxlY3Rpb24sIG1iTWFwLCB0aGlzLmdldElkKCkpOwoKICAgICAgaWYgKGZlYXR1cmVDb2xsZWN0aW9uICE9PSBmZWF0dXJlQ29sbGVjdGlvbk9uTWFwIHx8IGhhc0dlb0pzb25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgbWJHZW9KU09OU291cmNlLnNldERhdGEoZmVhdHVyZUNvbGxlY3Rpb24pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX3NldE1iUG9pbnRzUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldE1iUG9pbnRzUHJvcGVydGllcyhtYk1hcCkgewogICAgICB2YXIgcG9pbnRMYXllcklkID0gdGhpcy5fZ2V0TWJQb2ludExheWVySWQoKTsKCiAgICAgIHZhciBzeW1ib2xMYXllcklkID0gdGhpcy5fZ2V0TWJTeW1ib2xMYXllcklkKCk7CgogICAgICB2YXIgcG9pbnRMYXllciA9IG1iTWFwLmdldExheWVyKHBvaW50TGF5ZXJJZCk7CiAgICAgIHZhciBzeW1ib2xMYXllciA9IG1iTWFwLmdldExheWVyKHN5bWJvbExheWVySWQpOyAvLyBQb2ludCBsYXllcnMgc3ltYm9saXplZCBhcyBjaXJjbGVzIHJlcXVpcmUgMiBtYXBib3ggbGF5ZXJzIGJlY2F1c2UKICAgICAgLy8gImNpcmNsZSIgbGF5ZXJzIGRvIG5vdCBzdXBwb3J0ICJ0ZXh0IiBzdHlsZSBwcm9wZXJ0aWVzCiAgICAgIC8vIFBvaW50IGxheWVycyBzeW1ib2xpemVkIGFzIGljb25zIG9ubHkgY29udGFpbiBhIHNpbmdsZSBtYXBib3ggbGF5ZXIuCgogICAgICB2YXIgbWFya2VyTGF5ZXJJZDsKICAgICAgdmFyIHRleHRMYXllcklkOwoKICAgICAgaWYgKHRoaXMuZ2V0Q3VycmVudFN0eWxlKCkuYXJlUG9pbnRzU3ltYm9saXplZEFzQ2lyY2xlcygpKSB7CiAgICAgICAgbWFya2VyTGF5ZXJJZCA9IHBvaW50TGF5ZXJJZDsKICAgICAgICB0ZXh0TGF5ZXJJZCA9IHRoaXMuX2dldE1iVGV4dExheWVySWQoKTsKCiAgICAgICAgaWYgKHN5bWJvbExheWVyKSB7CiAgICAgICAgICBtYk1hcC5zZXRMYXlvdXRQcm9wZXJ0eShzeW1ib2xMYXllcklkLCAndmlzaWJpbGl0eScsICdub25lJyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9zZXRNYkNpcmNsZVByb3BlcnRpZXMobWJNYXApOwogICAgICB9IGVsc2UgewogICAgICAgIG1hcmtlckxheWVySWQgPSBzeW1ib2xMYXllcklkOwogICAgICAgIHRleHRMYXllcklkID0gc3ltYm9sTGF5ZXJJZDsKCiAgICAgICAgaWYgKHBvaW50TGF5ZXIpIHsKICAgICAgICAgIG1iTWFwLnNldExheW91dFByb3BlcnR5KHBvaW50TGF5ZXJJZCwgJ3Zpc2liaWxpdHknLCAnbm9uZScpOwogICAgICAgICAgbWJNYXAuc2V0TGF5b3V0UHJvcGVydHkodGhpcy5fZ2V0TWJUZXh0TGF5ZXJJZCgpLCAndmlzaWJpbGl0eScsICdub25lJyk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9zZXRNYlN5bWJvbFByb3BlcnRpZXMobWJNYXApOwogICAgICB9CgogICAgICB0aGlzLnN5bmNWaXNpYmlsaXR5V2l0aE1iKG1iTWFwLCBtYXJrZXJMYXllcklkKTsKICAgICAgbWJNYXAuc2V0TGF5ZXJab29tUmFuZ2UobWFya2VyTGF5ZXJJZCwgdGhpcy5fZGVzY3JpcHRvci5taW5ab29tLCB0aGlzLl9kZXNjcmlwdG9yLm1heFpvb20pOwoKICAgICAgaWYgKG1hcmtlckxheWVySWQgIT09IHRleHRMYXllcklkKSB7CiAgICAgICAgdGhpcy5zeW5jVmlzaWJpbGl0eVdpdGhNYihtYk1hcCwgdGV4dExheWVySWQpOwogICAgICAgIG1iTWFwLnNldExheWVyWm9vbVJhbmdlKHRleHRMYXllcklkLCB0aGlzLl9kZXNjcmlwdG9yLm1pblpvb20sIHRoaXMuX2Rlc2NyaXB0b3IubWF4Wm9vbSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc2V0TWJDaXJjbGVQcm9wZXJ0aWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0TWJDaXJjbGVQcm9wZXJ0aWVzKG1iTWFwKSB7CiAgICAgIHZhciBzb3VyY2VJZCA9IHRoaXMuZ2V0SWQoKTsKCiAgICAgIHZhciBwb2ludExheWVySWQgPSB0aGlzLl9nZXRNYlBvaW50TGF5ZXJJZCgpOwoKICAgICAgdmFyIHBvaW50TGF5ZXIgPSBtYk1hcC5nZXRMYXllcihwb2ludExheWVySWQpOwoKICAgICAgaWYgKCFwb2ludExheWVyKSB7CiAgICAgICAgbWJNYXAuYWRkTGF5ZXIoewogICAgICAgICAgaWQ6IHBvaW50TGF5ZXJJZCwKICAgICAgICAgIHR5cGU6ICdjaXJjbGUnLAogICAgICAgICAgc291cmNlOiBzb3VyY2VJZCwKICAgICAgICAgIHBhaW50OiB7fQogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgdGV4dExheWVySWQgPSB0aGlzLl9nZXRNYlRleHRMYXllcklkKCk7CgogICAgICB2YXIgdGV4dExheWVyID0gbWJNYXAuZ2V0TGF5ZXIodGV4dExheWVySWQpOwoKICAgICAgaWYgKCF0ZXh0TGF5ZXIpIHsKICAgICAgICBtYk1hcC5hZGRMYXllcih7CiAgICAgICAgICBpZDogdGV4dExheWVySWQsCiAgICAgICAgICB0eXBlOiAnc3ltYm9sJywKICAgICAgICAgIHNvdXJjZTogc291cmNlSWQKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyIGZpbHRlckV4cHIgPSAoMCwgX21iX2ZpbHRlcl9leHByZXNzaW9ucy5nZXRQb2ludEZpbHRlckV4cHJlc3Npb24pKHRoaXMuX2hhc0pvaW5zKCkpOwoKICAgICAgaWYgKGZpbHRlckV4cHIgIT09IG1iTWFwLmdldEZpbHRlcihwb2ludExheWVySWQpKSB7CiAgICAgICAgbWJNYXAuc2V0RmlsdGVyKHBvaW50TGF5ZXJJZCwgZmlsdGVyRXhwcik7CiAgICAgICAgbWJNYXAuc2V0RmlsdGVyKHRleHRMYXllcklkLCBmaWx0ZXJFeHByKTsKICAgICAgfQoKICAgICAgdGhpcy5nZXRDdXJyZW50U3R5bGUoKS5zZXRNQlBhaW50UHJvcGVydGllc0ZvclBvaW50cyh7CiAgICAgICAgYWxwaGE6IHRoaXMuZ2V0QWxwaGEoKSwKICAgICAgICBtYk1hcDogbWJNYXAsCiAgICAgICAgcG9pbnRMYXllcklkOiBwb2ludExheWVySWQKICAgICAgfSk7CiAgICAgIHRoaXMuZ2V0Q3VycmVudFN0eWxlKCkuc2V0TUJQcm9wZXJ0aWVzRm9yTGFiZWxUZXh0KHsKICAgICAgICBhbHBoYTogdGhpcy5nZXRBbHBoYSgpLAogICAgICAgIG1iTWFwOiBtYk1hcCwKICAgICAgICB0ZXh0TGF5ZXJJZDogdGV4dExheWVySWQKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3NldE1iU3ltYm9sUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldE1iU3ltYm9sUHJvcGVydGllcyhtYk1hcCkgewogICAgICB2YXIgc291cmNlSWQgPSB0aGlzLmdldElkKCk7CgogICAgICB2YXIgc3ltYm9sTGF5ZXJJZCA9IHRoaXMuX2dldE1iU3ltYm9sTGF5ZXJJZCgpOwoKICAgICAgdmFyIHN5bWJvbExheWVyID0gbWJNYXAuZ2V0TGF5ZXIoc3ltYm9sTGF5ZXJJZCk7CgogICAgICBpZiAoIXN5bWJvbExheWVyKSB7CiAgICAgICAgbWJNYXAuYWRkTGF5ZXIoewogICAgICAgICAgaWQ6IHN5bWJvbExheWVySWQsCiAgICAgICAgICB0eXBlOiAnc3ltYm9sJywKICAgICAgICAgIHNvdXJjZTogc291cmNlSWQKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdmFyIGZpbHRlckV4cHIgPSAoMCwgX21iX2ZpbHRlcl9leHByZXNzaW9ucy5nZXRQb2ludEZpbHRlckV4cHJlc3Npb24pKHRoaXMuX2hhc0pvaW5zKCkpOwoKICAgICAgaWYgKGZpbHRlckV4cHIgIT09IG1iTWFwLmdldEZpbHRlcihzeW1ib2xMYXllcklkKSkgewogICAgICAgIG1iTWFwLnNldEZpbHRlcihzeW1ib2xMYXllcklkLCBmaWx0ZXJFeHByKTsKICAgICAgfQoKICAgICAgdGhpcy5nZXRDdXJyZW50U3R5bGUoKS5zZXRNQlN5bWJvbFByb3BlcnRpZXNGb3JQb2ludHMoewogICAgICAgIGFscGhhOiB0aGlzLmdldEFscGhhKCksCiAgICAgICAgbWJNYXA6IG1iTWFwLAogICAgICAgIHN5bWJvbExheWVySWQ6IHN5bWJvbExheWVySWQKICAgICAgfSk7CiAgICAgIHRoaXMuZ2V0Q3VycmVudFN0eWxlKCkuc2V0TUJQcm9wZXJ0aWVzRm9yTGFiZWxUZXh0KHsKICAgICAgICBhbHBoYTogdGhpcy5nZXRBbHBoYSgpLAogICAgICAgIG1iTWFwOiBtYk1hcCwKICAgICAgICB0ZXh0TGF5ZXJJZDogc3ltYm9sTGF5ZXJJZAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc2V0TWJMaW5lUG9seWdvblByb3BlcnRpZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNYkxpbmVQb2x5Z29uUHJvcGVydGllcyhtYk1hcCkgewogICAgICB2YXIgc291cmNlSWQgPSB0aGlzLmdldElkKCk7CgogICAgICB2YXIgZmlsbExheWVySWQgPSB0aGlzLl9nZXRNYlBvbHlnb25MYXllcklkKCk7CgogICAgICB2YXIgbGluZUxheWVySWQgPSB0aGlzLl9nZXRNYkxpbmVMYXllcklkKCk7CgogICAgICB2YXIgaGFzSm9pbnMgPSB0aGlzLl9oYXNKb2lucygpOwoKICAgICAgaWYgKCFtYk1hcC5nZXRMYXllcihmaWxsTGF5ZXJJZCkpIHsKICAgICAgICBtYk1hcC5hZGRMYXllcih7CiAgICAgICAgICBpZDogZmlsbExheWVySWQsCiAgICAgICAgICB0eXBlOiAnZmlsbCcsCiAgICAgICAgICBzb3VyY2U6IHNvdXJjZUlkLAogICAgICAgICAgcGFpbnQ6IHt9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICghbWJNYXAuZ2V0TGF5ZXIobGluZUxheWVySWQpKSB7CiAgICAgICAgbWJNYXAuYWRkTGF5ZXIoewogICAgICAgICAgaWQ6IGxpbmVMYXllcklkLAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgc291cmNlOiBzb3VyY2VJZCwKICAgICAgICAgIHBhaW50OiB7fQogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLmdldEN1cnJlbnRTdHlsZSgpLnNldE1CUGFpbnRQcm9wZXJ0aWVzKHsKICAgICAgICBhbHBoYTogdGhpcy5nZXRBbHBoYSgpLAogICAgICAgIG1iTWFwOiBtYk1hcCwKICAgICAgICBmaWxsTGF5ZXJJZDogZmlsbExheWVySWQsCiAgICAgICAgbGluZUxheWVySWQ6IGxpbmVMYXllcklkCiAgICAgIH0pOwogICAgICB0aGlzLnN5bmNWaXNpYmlsaXR5V2l0aE1iKG1iTWFwLCBmaWxsTGF5ZXJJZCk7CiAgICAgIG1iTWFwLnNldExheWVyWm9vbVJhbmdlKGZpbGxMYXllcklkLCB0aGlzLl9kZXNjcmlwdG9yLm1pblpvb20sIHRoaXMuX2Rlc2NyaXB0b3IubWF4Wm9vbSk7CiAgICAgIHZhciBmaWxsRmlsdGVyRXhwciA9ICgwLCBfbWJfZmlsdGVyX2V4cHJlc3Npb25zLmdldEZpbGxGaWx0ZXJFeHByZXNzaW9uKShoYXNKb2lucyk7CgogICAgICBpZiAoZmlsbEZpbHRlckV4cHIgIT09IG1iTWFwLmdldEZpbHRlcihmaWxsTGF5ZXJJZCkpIHsKICAgICAgICBtYk1hcC5zZXRGaWx0ZXIoZmlsbExheWVySWQsIGZpbGxGaWx0ZXJFeHByKTsKICAgICAgfQoKICAgICAgdGhpcy5zeW5jVmlzaWJpbGl0eVdpdGhNYihtYk1hcCwgbGluZUxheWVySWQpOwogICAgICBtYk1hcC5zZXRMYXllclpvb21SYW5nZShsaW5lTGF5ZXJJZCwgdGhpcy5fZGVzY3JpcHRvci5taW5ab29tLCB0aGlzLl9kZXNjcmlwdG9yLm1heFpvb20pOwogICAgICB2YXIgbGluZUZpbHRlckV4cHIgPSAoMCwgX21iX2ZpbHRlcl9leHByZXNzaW9ucy5nZXRMaW5lRmlsdGVyRXhwcmVzc2lvbikoaGFzSm9pbnMpOwoKICAgICAgaWYgKGxpbmVGaWx0ZXJFeHByICE9PSBtYk1hcC5nZXRGaWx0ZXIobGluZUxheWVySWQpKSB7CiAgICAgICAgbWJNYXAuc2V0RmlsdGVyKGxpbmVMYXllcklkLCBsaW5lRmlsdGVyRXhwcik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc3luY1N0eWxlUHJvcGVydGllc1dpdGhNYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3N5bmNTdHlsZVByb3BlcnRpZXNXaXRoTWIobWJNYXApIHsKICAgICAgdGhpcy5fc2V0TWJQb2ludHNQcm9wZXJ0aWVzKG1iTWFwKTsKCiAgICAgIHRoaXMuX3NldE1iTGluZVBvbHlnb25Qcm9wZXJ0aWVzKG1iTWFwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc3luY1NvdXJjZUJpbmRpbmdXaXRoTWIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zeW5jU291cmNlQmluZGluZ1dpdGhNYihtYk1hcCkgewogICAgICB2YXIgbWJTb3VyY2UgPSBtYk1hcC5nZXRTb3VyY2UodGhpcy5nZXRJZCgpKTsKCiAgICAgIGlmICghbWJTb3VyY2UpIHsKICAgICAgICBtYk1hcC5hZGRTb3VyY2UodGhpcy5nZXRJZCgpLCB7CiAgICAgICAgICB0eXBlOiAnZ2VvanNvbicsCiAgICAgICAgICBkYXRhOiBfY29uc3RhbnRzLkVNUFRZX0ZFQVRVUkVfQ09MTEVDVElPTgogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic3luY0xheWVyV2l0aE1CIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzeW5jTGF5ZXJXaXRoTUIobWJNYXApIHsKICAgICAgdGhpcy5fc3luY1NvdXJjZUJpbmRpbmdXaXRoTWIobWJNYXApOwoKICAgICAgdGhpcy5fc3luY0ZlYXR1cmVDb2xsZWN0aW9uV2l0aE1iKG1iTWFwKTsKCiAgICAgIHRoaXMuX3N5bmNTdHlsZVByb3BlcnRpZXNXaXRoTWIobWJNYXApOwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXRNYlBvaW50TGF5ZXJJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE1iUG9pbnRMYXllcklkKCkgewogICAgICByZXR1cm4gdGhpcy5tYWtlTWJMYXllcklkKCdjaXJjbGUnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0TWJUZXh0TGF5ZXJJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE1iVGV4dExheWVySWQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1ha2VNYkxheWVySWQoJ3RleHQnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0TWJTeW1ib2xMYXllcklkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TWJTeW1ib2xMYXllcklkKCkgewogICAgICByZXR1cm4gdGhpcy5tYWtlTWJMYXllcklkKCdzeW1ib2wnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0TWJMaW5lTGF5ZXJJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE1iTGluZUxheWVySWQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1ha2VNYkxheWVySWQoJ2xpbmUnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0TWJQb2x5Z29uTGF5ZXJJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE1iUG9seWdvbkxheWVySWQoKSB7CiAgICAgIHJldHVybiB0aGlzLm1ha2VNYkxheWVySWQoJ2ZpbGwnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNYkxheWVySWRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYkxheWVySWRzKCkgewogICAgICByZXR1cm4gW3RoaXMuX2dldE1iUG9pbnRMYXllcklkKCksIHRoaXMuX2dldE1iVGV4dExheWVySWQoKSwgdGhpcy5fZ2V0TWJTeW1ib2xMYXllcklkKCksIHRoaXMuX2dldE1iTGluZUxheWVySWQoKSwgdGhpcy5fZ2V0TWJQb2x5Z29uTGF5ZXJJZCgpXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvd25zTWJMYXllcklkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvd25zTWJMYXllcklkKG1iTGF5ZXJJZCkgewogICAgICByZXR1cm4gdGhpcy5nZXRNYkxheWVySWRzKCkuaW5jbHVkZXMobWJMYXllcklkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvd25zTWJTb3VyY2VJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3duc01iU291cmNlSWQobWJTb3VyY2VJZCkgewogICAgICByZXR1cm4gdGhpcy5nZXRJZCgpID09PSBtYlNvdXJjZUlkOwogICAgfQogIH0sIHsKICAgIGtleTogIl9hZGRKb2luc1RvU291cmNlVG9vbHRpcHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRKb2luc1RvU291cmNlVG9vbHRpcHModG9vbHRpcHNGcm9tU291cmNlKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbHRpcHNGcm9tU291cmNlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHRvb2x0aXBQcm9wZXJ0eSA9IHRvb2x0aXBzRnJvbVNvdXJjZVtpXTsKICAgICAgICB2YXIgbWF0Y2hpbmdKb2lucyA9IFtdOwoKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuZ2V0Sm9pbnMoKS5sZW5ndGg7IGorKykgewogICAgICAgICAgaWYgKHRoaXMuZ2V0Sm9pbnMoKVtqXS5nZXRMZWZ0RmllbGQoKS5nZXROYW1lKCkgPT09IHRvb2x0aXBQcm9wZXJ0eS5nZXRQcm9wZXJ0eUtleSgpKSB7CiAgICAgICAgICAgIG1hdGNoaW5nSm9pbnMucHVzaCh0aGlzLmdldEpvaW5zKClbal0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG1hdGNoaW5nSm9pbnMubGVuZ3RoKSB7CiAgICAgICAgICB0b29sdGlwc0Zyb21Tb3VyY2VbaV0gPSBuZXcgX2pvaW5fdG9vbHRpcF9wcm9wZXJ0eS5Kb2luVG9vbHRpcFByb3BlcnR5KHRvb2x0aXBQcm9wZXJ0eSwgbWF0Y2hpbmdKb2lucyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UHJvcGVydGllc0ZvclRvb2x0aXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRQcm9wZXJ0aWVzRm9yVG9vbHRpcCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMChwcm9wZXJ0aWVzKSB7CiAgICAgICAgdmFyIGFsbFRvb2x0aXBzLCBpLCBwcm9wc0Zyb21Kb2luOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjAkKF9jb250ZXh0MjApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMC5wcmV2ID0gX2NvbnRleHQyMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZSgpLmZpbHRlckFuZEZvcm1hdFByb3BlcnRpZXNUb0h0bWwocHJvcGVydGllcyk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGFsbFRvb2x0aXBzID0gX2NvbnRleHQyMC5zZW50OwoKICAgICAgICAgICAgICAgIHRoaXMuX2FkZEpvaW5zVG9Tb3VyY2VUb29sdGlwcyhhbGxUb29sdGlwcyk7CgogICAgICAgICAgICAgICAgaSA9IDA7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGlmICghKGkgPCB0aGlzLmdldEpvaW5zKCkubGVuZ3RoKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEpvaW5zKClbaV0uZmlsdGVyQW5kRm9ybWF0UHJvcGVydGllc0ZvclRvb2x0aXAocHJvcGVydGllcyk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIHByb3BzRnJvbUpvaW4gPSBfY29udGV4dDIwLnNlbnQ7CiAgICAgICAgICAgICAgICBhbGxUb29sdGlwcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWxsVG9vbHRpcHMpLCBfdG9Db25zdW1hYmxlQXJyYXkocHJvcHNGcm9tSm9pbikpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjAuYWJydXB0KCJyZXR1cm4iLCBhbGxUb29sdGlwcyk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyMCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGdldFByb3BlcnRpZXNGb3JUb29sdGlwKF94MzEpIHsKICAgICAgICByZXR1cm4gX2dldFByb3BlcnRpZXNGb3JUb29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRQcm9wZXJ0aWVzRm9yVG9vbHRpcDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNhblNob3dUb29sdGlwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5TaG93VG9vbHRpcCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWaXNpYmxlKCkgJiYgKHRoaXMuZ2V0U291cmNlKCkuY2FuRm9ybWF0RmVhdHVyZVByb3BlcnRpZXMoKSB8fCB0aGlzLmdldEpvaW5zKCkubGVuZ3RoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGZWF0dXJlQnlJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmVhdHVyZUJ5SWQoaWQpIHsKICAgICAgdmFyIGZlYXR1cmVDb2xsZWN0aW9uID0gdGhpcy5fZ2V0U291cmNlRmVhdHVyZUNvbGxlY3Rpb24oKTsKCiAgICAgIGlmICghZmVhdHVyZUNvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbi5mZWF0dXJlcy5maW5kKGZ1bmN0aW9uIChmZWF0dXJlKSB7CiAgICAgICAgcmV0dXJuIGZlYXR1cmUucHJvcGVydGllc1tfY29uc3RhbnRzLkZFQVRVUkVfSURfUFJPUEVSVFlfTkFNRV0gPT09IGlkOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBWZWN0b3JMYXllcjsKfShfbGF5ZXIuQWJzdHJhY3RMYXllcik7CgpleHBvcnRzLlZlY3RvckxheWVyID0gVmVjdG9yTGF5ZXI7CgpfZGVmaW5lUHJvcGVydHkoVmVjdG9yTGF5ZXIsICJ0eXBlIiwgX2NvbnN0YW50cy5MQVlFUl9UWVBFLlZFQ1RPUik7"},null]}