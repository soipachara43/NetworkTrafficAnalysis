{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/index_patterns/index_patterns/index_pattern.js","dependencies":[{"path":"src/plugins/data/public/index_patterns/index_patterns/index_pattern.js","mtime":1589249550603},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluZGV4UGF0dGVybiA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0ID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9raWJhbmFfdXRpbHMvcHVibGljIik7Cgp2YXIgX3B1YmxpYzIgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9raWJhbmFfcmVhY3QvcHVibGljIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbW1vbiIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoIi4uL3V0aWxzIik7Cgp2YXIgX2xpYiA9IHJlcXVpcmUoIi4uL2xpYiIpOwoKdmFyIF9maWVsZHMgPSByZXF1aXJlKCIuLi9maWVsZHMiKTsKCnZhciBfZmllbGRzX2ZldGNoZXIgPSByZXF1aXJlKCIuL19maWVsZHNfZmV0Y2hlciIpOwoKdmFyIF9mb3JtYXRfaGl0ID0gcmVxdWlyZSgiLi9mb3JtYXRfaGl0Iik7Cgp2YXIgX2ZsYXR0ZW5faGl0ID0gcmVxdWlyZSgiLi9mbGF0dGVuX2hpdCIpOwoKdmFyIF9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uLy4uL3NlcnZpY2VzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgTUFYX0FUVEVNUFRTX1RPX1JFU09MVkVfQ09ORkxJQ1RTID0gMzsKdmFyIHR5cGUgPSAnaW5kZXgtcGF0dGVybic7Cgp2YXIgSW5kZXhQYXR0ZXJuID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSW5kZXhQYXR0ZXJuKGlkLCBnZXRDb25maWcsIHNhdmVkT2JqZWN0c0NsaWVudCwgYXBpQ2xpZW50LCBwYXR0ZXJuQ2FjaGUpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZGV4UGF0dGVybik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpZCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ0aXRsZSIsICcnKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInR5cGUiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZmllbGRGb3JtYXRNYXAiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidHlwZU1ldGEiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZmllbGRzIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInRpbWVGaWVsZE5hbWUiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaW50ZXJ2YWxOYW1lIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImZvcm1hdEhpdCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJmb3JtYXRGaWVsZCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJmbGF0dGVuSGl0Iiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgIm1ldGFGaWVsZHMiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidmVyc2lvbiIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzYXZlZE9iamVjdHNDbGllbnQiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicGF0dGVybkNhY2hlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImdldENvbmZpZyIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzb3VyY2VGaWx0ZXJzIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgIm9yaWdpbmFsQm9keSIsIHt9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImZpZWxkc0ZldGNoZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2hvcnREb3RzRW5hYmxlIiwgZmFsc2UpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAibWFwcGluZyIsICgwLCBfcHVibGljLmV4cGFuZFNob3J0aGFuZCkoewogICAgICB0aXRsZTogX2NvbW1vbi5FU19GSUVMRF9UWVBFUy5URVhULAogICAgICB0aW1lRmllbGROYW1lOiBfY29tbW9uLkVTX0ZJRUxEX1RZUEVTLktFWVdPUkQsCiAgICAgIGludGVydmFsTmFtZTogX2NvbW1vbi5FU19GSUVMRF9UWVBFUy5LRVlXT1JELAogICAgICBmaWVsZHM6ICdqc29uJywKICAgICAgc291cmNlRmlsdGVyczogJ2pzb24nLAogICAgICBmaWVsZEZvcm1hdE1hcDogewogICAgICAgIHR5cGU6IF9jb21tb24uRVNfRklFTERfVFlQRVMuVEVYVCwKICAgICAgICBfc2VyaWFsaXplOiBmdW5jdGlvbiBfc2VyaWFsaXplKCkgewogICAgICAgICAgdmFyIG1hcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBfbG9kYXNoLmRlZmF1bHQudHJhbnNmb3JtKG1hcCwgX3RoaXMuc2VyaWFsaXplRmllbGRGb3JtYXRNYXApOwoKICAgICAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuaXNFbXB0eShzZXJpYWxpemVkKSA/IHVuZGVmaW5lZCA6IEpTT04uc3RyaW5naWZ5KHNlcmlhbGl6ZWQpOwogICAgICAgIH0sCiAgICAgICAgX2Rlc2VyaWFsaXplOiBmdW5jdGlvbiBfZGVzZXJpYWxpemUoKSB7CiAgICAgICAgICB2YXIgbWFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAne30nOwogICAgICAgICAgcmV0dXJuIF9sb2Rhc2guZGVmYXVsdC5tYXBWYWx1ZXMoSlNPTi5wYXJzZShtYXApLCBmdW5jdGlvbiAobWFwcGluZykgewogICAgICAgICAgICByZXR1cm4gX3RoaXMuZGVzZXJpYWxpemVGaWVsZEZvcm1hdE1hcChtYXBwaW5nKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSwKICAgICAgdHlwZTogX2NvbW1vbi5FU19GSUVMRF9UWVBFUy5LRVlXT1JELAogICAgICB0eXBlTWV0YTogJ2pzb24nCiAgICB9KSk7CgogICAgdGhpcy5pZCA9IGlkOwogICAgdGhpcy5zYXZlZE9iamVjdHNDbGllbnQgPSBzYXZlZE9iamVjdHNDbGllbnQ7CiAgICB0aGlzLnBhdHRlcm5DYWNoZSA9IHBhdHRlcm5DYWNoZTsgLy8gaW5zdGVhZCBvZiBzdG9yaW5nIGNvbmZpZyB3ZSByYXRoZXIgc3RvcmUgdGhlIGdldHRlciBvbmx5IGFzIG5wIHVpU2V0dGluZ3NDbGllbnQgaGFzIGNpcmN1bGFyIHJlZmVyZW5jZXMKICAgIC8vIHdoaWNoIGNhdXNlIHByb2JsZW1zIHdoZW4gYmVpbmcgY29uc3VtZWQgZnJvbSBhbmd1bGFyCgogICAgdGhpcy5nZXRDb25maWcgPSBnZXRDb25maWc7CiAgICB0aGlzLnNob3J0RG90c0VuYWJsZSA9IHRoaXMuZ2V0Q29uZmlnKCdzaG9ydERvdHM6ZW5hYmxlJyk7CiAgICB0aGlzLm1ldGFGaWVsZHMgPSB0aGlzLmdldENvbmZpZygnbWV0YUZpZWxkcycpOwogICAgdGhpcy5maWVsZHMgPSBuZXcgX2ZpZWxkcy5GaWVsZExpc3QodGhpcywgW10sIHRoaXMuc2hvcnREb3RzRW5hYmxlKTsKICAgIHRoaXMuZmllbGRzRmV0Y2hlciA9ICgwLCBfZmllbGRzX2ZldGNoZXIuY3JlYXRlRmllbGRzRmV0Y2hlcikodGhpcywgYXBpQ2xpZW50LCB0aGlzLmdldENvbmZpZygnbWV0YUZpZWxkcycpKTsKICAgIHRoaXMuZmxhdHRlbkhpdCA9ICgwLCBfZmxhdHRlbl9oaXQuZmxhdHRlbkhpdFdyYXBwZXIpKHRoaXMsIHRoaXMuZ2V0Q29uZmlnKCdtZXRhRmllbGRzJykpOwogICAgdGhpcy5mb3JtYXRIaXQgPSAoMCwgX2Zvcm1hdF9oaXQuZm9ybWF0SGl0UHJvdmlkZXIpKHRoaXMsICgwLCBfc2VydmljZXMuZ2V0RmllbGRGb3JtYXRzKSgpLmdldERlZmF1bHRJbnN0YW5jZShfY29tbW9uLktCTl9GSUVMRF9UWVBFUy5TVFJJTkcpKTsKICAgIHRoaXMuZm9ybWF0RmllbGQgPSB0aGlzLmZvcm1hdEhpdC5mb3JtYXRGaWVsZDsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmRleFBhdHRlcm4sIFt7CiAgICBrZXk6ICJzZXJpYWxpemVGaWVsZEZvcm1hdE1hcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VyaWFsaXplRmllbGRGb3JtYXRNYXAoZmxhdCwgZm9ybWF0LCBmaWVsZCkgewogICAgICBpZiAoZm9ybWF0ICYmIGZpZWxkKSB7CiAgICAgICAgZmxhdFtmaWVsZF0gPSBmb3JtYXQ7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZXNlcmlhbGl6ZUZpZWxkRm9ybWF0TWFwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZXNlcmlhbGl6ZUZpZWxkRm9ybWF0TWFwKG1hcHBpbmcpIHsKICAgICAgdmFyIEZpZWxkRm9ybWF0ID0gKDAsIF9zZXJ2aWNlcy5nZXRGaWVsZEZvcm1hdHMpKCkuZ2V0VHlwZShtYXBwaW5nLmlkKTsKICAgICAgcmV0dXJuIEZpZWxkRm9ybWF0ICYmIG5ldyBGaWVsZEZvcm1hdChtYXBwaW5nLnBhcmFtcywgdGhpcy5nZXRDb25maWcpOwogICAgfQogIH0sIHsKICAgIGtleTogImluaXRGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRGaWVsZHMoaW5wdXQpIHsKICAgICAgdmFyIG5ld1ZhbHVlID0gaW5wdXQgfHwgdGhpcy5maWVsZHM7CiAgICAgIHRoaXMuZmllbGRzID0gbmV3IF9maWVsZHMuRmllbGRMaXN0KHRoaXMsIG5ld1ZhbHVlLCB0aGlzLnNob3J0RG90c0VuYWJsZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNGaWVsZFJlZnJlc2hSZXF1aXJlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGaWVsZFJlZnJlc2hSZXF1aXJlZCgpIHsKICAgICAgaWYgKCF0aGlzLmZpZWxkcykgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5maWVsZHMuZXZlcnkoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFzdGljL2tpYmFuYS9wdWxsLzg0MjEKICAgICAgICB2YXIgaGFzRmllbGRDYXBzID0gJ2FnZ3JlZ2F0YWJsZScgaW4gZmllbGQgJiYgJ3NlYXJjaGFibGUnIGluIGZpZWxkOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMva2liYW5hL3B1bGwvMTE5NjkKCiAgICAgICAgdmFyIGhhc0RvY1ZhbHVlc0ZsYWcgPSAncmVhZEZyb21Eb2NWYWx1ZXMnIGluIGZpZWxkOwogICAgICAgIHJldHVybiAhaGFzRmllbGRDYXBzIHx8ICFoYXNEb2NWYWx1ZXNGbGFnOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbmRleEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2luZGV4RmllbGRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgZm9yY2VGaWVsZFJlZnJlc2gsCiAgICAgICAgICAgIF9hcmdzID0gYXJndW1lbnRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGZvcmNlRmllbGRSZWZyZXNoID0gX2FyZ3MubGVuZ3RoID4gMCAmJiBfYXJnc1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMF0gOiBmYWxzZTsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5pZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICghKGZvcmNlRmllbGRSZWZyZXNoIHx8IHRoaXMuaXNGaWVsZFJlZnJlc2hSZXF1aXJlZCgpKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoRmllbGRzKCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHRoaXMuaW5pdEZpZWxkcygpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gaW5kZXhGaWVsZHMoKSB7CiAgICAgICAgcmV0dXJuIF9pbmRleEZpZWxkcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaW5kZXhGaWVsZHM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVGcm9tRWxhc3RpY1NlYXJjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3VwZGF0ZUZyb21FbGFzdGljU2VhcmNoID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzcG9uc2UpIHsKICAgICAgICB2YXIgZm9yY2VGaWVsZFJlZnJlc2gsCiAgICAgICAgICAgIHdhcm5pbmdUaXRsZSwKICAgICAgICAgICAgd2FybmluZ1RleHQsCiAgICAgICAgICAgIGVkaXRVcmxUZW1wbGF0ZSwKICAgICAgICAgICAgZWRpdFVybCwKICAgICAgICAgICAgX2dldE5vdGlmaWNhdGlvbnMsCiAgICAgICAgICAgIHRvYXN0cywKICAgICAgICAgICAgX2FyZ3MyID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZm9yY2VGaWVsZFJlZnJlc2ggPSBfYXJnczIubGVuZ3RoID4gMSAmJiBfYXJnczJbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlsxXSA6IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5mb3VuZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBfcHVibGljLlNhdmVkT2JqZWN0Tm90Rm91bmQodHlwZSwgdGhpcy5pZCwgJyMvbWFuYWdlbWVudC9raWJhbmEvaW5kZXhfcGF0dGVybicpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfbG9kYXNoLmRlZmF1bHQuZm9yT3duKHRoaXMubWFwcGluZywgZnVuY3Rpb24gKGZpZWxkTWFwcGluZywgbmFtZSkgewogICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkTWFwcGluZy5fZGVzZXJpYWxpemUgfHwgIW5hbWUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLl9zb3VyY2VbbmFtZV0gPSBmaWVsZE1hcHBpbmcuX2Rlc2VyaWFsaXplKHJlc3BvbnNlLl9zb3VyY2VbbmFtZV0pOwogICAgICAgICAgICAgICAgfSk7IC8vIGdpdmUgaW5kZXggcGF0dGVybiBhbGwgb2YgdGhlIHZhbHVlcyBpbiBfc291cmNlCgoKICAgICAgICAgICAgICAgIF9sb2Rhc2guZGVmYXVsdC5hc3NpZ24odGhpcywgcmVzcG9uc2UuX3NvdXJjZSk7CgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRpdGxlICYmIHRoaXMuaWQpIHsKICAgICAgICAgICAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMuaWQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNVbnN1cHBvcnRlZFRpbWVQYXR0ZXJuKCkpIHsKICAgICAgICAgICAgICAgICAgd2FybmluZ1RpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2RhdGEuaW5kZXhQYXR0ZXJucy53YXJuaW5nVGl0bGUnLCB7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTdXBwb3J0IGZvciB0aW1lIGludGVydmFsIGluZGV4IHBhdHRlcm5zIHJlbW92ZWQnCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB3YXJuaW5nVGV4dCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmluZGV4UGF0dGVybnMud2FybmluZ1RleHQnLCB7CiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDdXJyZW50bHkgcXVlcnlpbmcgYWxsIGluZGljZXMgbWF0Y2hpbmcge2luZGV4fS4ge3RpdGxlfSBzaG91bGQgYmUgbWlncmF0ZWQgdG8gYSB3aWxkY2FyZC1iYXNlZCBpbmRleCBwYXR0ZXJuLicsCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy50aXRsZSwKICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmdldEluZGV4KCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOyAvLyBrYm5Vcmwgd2FzIGFkZGVkIHRvIHRoaXMgc2VydmljZSBpbiAjMzUyNjIgYmVmb3JlIGl0IHdhcyBkZS1hbmd1bGFyaXplZCwgYW5kIG1lcmdlZCBpbiBhIFBSCiAgICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5IGFnYWluc3QgdGhlIDcueCBicmFuY2guIEluZGV4IHBhdHRlcm5zIHdlcmUgZGUtYW5ndWxhcml6ZWQgaW4gIzM5MjQ3LCBhbmQgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgLy8gdG8gcHJlc2VydmUgdGhlIGZ1bmN0aW9uYWxpdHkgZnJvbSAjMzUyNjIgd2UgbmVlZCB0byBnZXQgdGhlIGluamVjdG9yIGhlcmUganVzdCBmb3Iga2JuVXJsLgogICAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcyBhbGwgYmVlbiByZW1vdmVkIGFzIG9mIDguMC4KICAgICAgICAgICAgICAgICAgLy8gMjAxOS0xMi0wMSBUaGUgdXNhZ2Ugb2Yga2JuVXJsIGhhZCB0byBiZSByZW1vdmVkIGR1ZSB0byB0aGUgdHJhbnNpdGlvbiB0byBOUC4KICAgICAgICAgICAgICAgICAgLy8gSXQncyBub3cgdGVtcG9yYXJpbHkgcmVwbGFjZWQgYnkgYSBzaW1wbGUgcmVwbGFjZSBvZiB0aGUgc2luZ2xlIGFyZ3VtZW50IHVzZWQgYnkgYWxsIFVSTHMuCiAgICAgICAgICAgICAgICAgIC8vIE9uY2Uga2JuVXJsIGlzIG1pZ3JhdGVkIHRvIE5QLCB0aGlzIGNhbiBiZSB1cGRhdGVkLgoKICAgICAgICAgICAgICAgICAgZWRpdFVybFRlbXBsYXRlID0gKDAsIF91dGlscy5nZXRSb3V0ZXMpKCkuZWRpdDsKICAgICAgICAgICAgICAgICAgZWRpdFVybCA9ICcvYXBwL2tpYmFuYSMnICsgZWRpdFVybFRlbXBsYXRlLnJlcGxhY2UoJ3t7aWR9fScsIHRoaXMuaWQpOwogICAgICAgICAgICAgICAgICBfZ2V0Tm90aWZpY2F0aW9ucyA9ICgwLCBfc2VydmljZXMuZ2V0Tm90aWZpY2F0aW9ucykoKSwgdG9hc3RzID0gX2dldE5vdGlmaWNhdGlvbnMudG9hc3RzOwogICAgICAgICAgICAgICAgICB0b2FzdHMuYWRkV2FybmluZyh7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHdhcm5pbmdUaXRsZSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAoMCwgX3B1YmxpYzIudG9Nb3VudFBvaW50KShfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCB3YXJuaW5nVGV4dCksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogImZsZXhFbmQiLAogICAgICAgICAgICAgICAgICAgICAgZ3V0dGVyU2l6ZTogInMiCiAgICAgICAgICAgICAgICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgICAgICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICAgICAgICAgICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgICAgICAgICAgICAgICAgICAgc2l6ZTogInMiLAogICAgICAgICAgICAgICAgICAgICAgaHJlZjogKDAsIF9zZXJ2aWNlcy5nZXRIdHRwKSgpLmJhc2VQYXRoLnByZXBlbmQoZWRpdFVybCkKICAgICAgICAgICAgICAgICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJkYXRhLmluZGV4UGF0dGVybnMuZWRpdEluZGV4UGF0dGVybiIsCiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVkaXQgaW5kZXggcGF0dGVybiIKICAgICAgICAgICAgICAgICAgICB9KSkpKSkpCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmluZGV4RmllbGRzKGZvcmNlRmllbGRSZWZyZXNoKSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUZyb21FbGFzdGljU2VhcmNoKF94KSB7CiAgICAgICAgcmV0dXJuIF91cGRhdGVGcm9tRWxhc3RpY1NlYXJjaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdXBkYXRlRnJvbUVsYXN0aWNTZWFyY2g7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRDb21wdXRlZEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tcHV0ZWRGaWVsZHMoKSB7CiAgICAgIHZhciBzY3JpcHRGaWVsZHMgPSB7fTsKCiAgICAgIGlmICghdGhpcy5maWVsZHMpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc3RvcmVkRmllbGRzOiBbJyonXSwKICAgICAgICAgIHNjcmlwdEZpZWxkczogc2NyaXB0RmllbGRzLAogICAgICAgICAgZG9jdmFsdWVGaWVsZHM6IFtdCiAgICAgICAgfTsKICAgICAgfSAvLyBEYXRlIHZhbHVlIHJldHVybmVkIGluICJfc291cmNlIiBjb3VsZCBiZSBpbiBhbnkgbnVtYmVyIG9mIGZvcm1hdHMKICAgICAgLy8gVXNlIGEgZG9jdmFsdWUgZm9yIGVhY2ggZGF0ZSBmaWVsZCB0byBlbnN1cmUgc3RhbmRhcmRpemVkIGZvcm1hdHMgd2hlbiB3b3JraW5nIHdpdGggZGF0ZSBmaWVsZHMKICAgICAgLy8gaW5kZXhQYXR0ZXJuLmZsYXR0ZW5IaXQgd2lsbCBvdmVycmlkZSAiX3NvdXJjZSIgdmFsdWVzIHdoZW4gdGhlIHNhbWUgZmllbGQgaXMgYWxzbyBkZWZpbmVkIGluICJmaWVsZHMiCgoKICAgICAgdmFyIGRvY3ZhbHVlRmllbGRzID0gKDAsIF9sb2Rhc2gucmVqZWN0KSh0aGlzLmZpZWxkcy5nZXRCeVR5cGUoJ2RhdGUnKSwgJ3NjcmlwdGVkJykubWFwKGZ1bmN0aW9uIChkYXRlRmllbGQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgZmllbGQ6IGRhdGVGaWVsZC5uYW1lLAogICAgICAgICAgZm9ybWF0OiBkYXRlRmllbGQuZXNUeXBlcyAmJiBkYXRlRmllbGQuZXNUeXBlcy5pbmRleE9mKCdkYXRlX25hbm9zJykgIT09IC0xID8gJ3N0cmljdF9kYXRlX3RpbWUnIDogJ2RhdGVfdGltZScKICAgICAgICB9OwogICAgICB9KTsKICAgICAgKDAsIF9sb2Rhc2guZWFjaCkodGhpcy5nZXRTY3JpcHRlZEZpZWxkcygpLCBmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICBzY3JpcHRGaWVsZHNbZmllbGQubmFtZV0gPSB7CiAgICAgICAgICBzY3JpcHQ6IHsKICAgICAgICAgICAgc291cmNlOiBmaWVsZC5zY3JpcHQsCiAgICAgICAgICAgIGxhbmc6IGZpZWxkLmxhbmcKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9KTsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdG9yZWRGaWVsZHM6IFsnKiddLAogICAgICAgIHNjcmlwdEZpZWxkczogc2NyaXB0RmllbGRzLAogICAgICAgIGRvY3ZhbHVlRmllbGRzOiBkb2N2YWx1ZUZpZWxkcwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9pbml0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIGZvcmNlRmllbGRSZWZyZXNoLAogICAgICAgICAgICBzYXZlZE9iamVjdCwKICAgICAgICAgICAgcmVzcG9uc2UsCiAgICAgICAgICAgIF9hcmdzMyA9IGFyZ3VtZW50czsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZm9yY2VGaWVsZFJlZnJlc2ggPSBfYXJnczMubGVuZ3RoID4gMCAmJiBfYXJnczNbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmdzM1swXSA6IGZhbHNlOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRoaXMpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYXZlZE9iamVjdHNDbGllbnQuZ2V0KHR5cGUsIHRoaXMuaWQpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBzYXZlZE9iamVjdCA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uID0gc2F2ZWRPYmplY3QuX3ZlcnNpb247CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHsKICAgICAgICAgICAgICAgICAgX2lkOiBzYXZlZE9iamVjdC5pZCwKICAgICAgICAgICAgICAgICAgX3R5cGU6IHNhdmVkT2JqZWN0LnR5cGUsCiAgICAgICAgICAgICAgICAgIF9zb3VyY2U6IF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAoc2F2ZWRPYmplY3QuYXR0cmlidXRlcyksCiAgICAgICAgICAgICAgICAgIGZvdW5kOiBzYXZlZE9iamVjdC5fdmVyc2lvbiA/IHRydWUgOiBmYWxzZQogICAgICAgICAgICAgICAgfTsgLy8gRG8gdGhpcyBiZWZvcmUgd2UgYXR0ZW1wdCB0byB1cGRhdGUgZnJvbSBFUyBzaW5jZSB0aGF0IGNhbGwgY2FuIHBvdGVudGlhbGx5IHBlcmZvcm0gYSBzYXZlCgogICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEJvZHkgPSB0aGlzLnByZXBCb2R5KCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRnJvbUVsYXN0aWNTZWFyY2gocmVzcG9uc2UsIGZvcmNlRmllbGRSZWZyZXNoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIC8vIERvIGl0IGFmdGVyIHRvIGVuc3VyZSB3ZSBoYXZlIHRoZSBtb3N0IHVwIHRvIGRhdGUgaW5mb3JtYXRpb24KICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxCb2R5ID0gdGhpcy5wcmVwQm9keSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRoaXMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICByZXR1cm4gX2luaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGluaXQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJtaWdyYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtaWdyYXRlKG5ld1RpdGxlKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMuc2F2ZWRPYmplY3RzQ2xpZW50LnVwZGF0ZSh0eXBlLCB0aGlzLmlkLCB7CiAgICAgICAgdGl0bGU6IG5ld1RpdGxlLAogICAgICAgIGludGVydmFsTmFtZTogbnVsbAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIF9yZWYkYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcywKICAgICAgICAgICAgdGl0bGUgPSBfcmVmJGF0dHJpYnV0ZXMudGl0bGUsCiAgICAgICAgICAgIGludGVydmFsTmFtZSA9IF9yZWYkYXR0cmlidXRlcy5pbnRlcnZhbE5hbWU7CiAgICAgICAgX3RoaXMyLnRpdGxlID0gdGl0bGU7CiAgICAgICAgX3RoaXMyLmludGVydmFsTmFtZSA9IGludGVydmFsTmFtZTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMjsKICAgICAgfSk7CiAgICB9IC8vIEdldCB0aGUgc291cmNlIGZpbHRlcmluZyBjb25maWd1cmF0aW9uIGZvciB0aGF0IGluZGV4LgoKICB9LCB7CiAgICBrZXk6ICJnZXRTb3VyY2VGaWx0ZXJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNvdXJjZUZpbHRlcmluZygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBleGNsdWRlczogdGhpcy5zb3VyY2VGaWx0ZXJzICYmIHRoaXMuc291cmNlRmlsdGVycy5tYXAoZnVuY3Rpb24gKGZpbHRlcikgewogICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZTsKICAgICAgICB9KSB8fCBbXQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImFkZFNjcmlwdGVkRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9hZGRTY3JpcHRlZEZpZWxkID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQobmFtZSwgc2NyaXB0KSB7CiAgICAgICAgdmFyIGZpZWxkVHlwZSwKICAgICAgICAgICAgbGFuZywKICAgICAgICAgICAgc2NyaXB0ZWRGaWVsZHMsCiAgICAgICAgICAgIG5hbWVzLAogICAgICAgICAgICBfYXJnczQgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGZpZWxkVHlwZSA9IF9hcmdzNC5sZW5ndGggPiAyICYmIF9hcmdzNFsyXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3M0WzJdIDogJ3N0cmluZyc7CiAgICAgICAgICAgICAgICBsYW5nID0gX2FyZ3M0Lmxlbmd0aCA+IDMgPyBfYXJnczRbM10gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBzY3JpcHRlZEZpZWxkcyA9IHRoaXMuZ2V0U2NyaXB0ZWRGaWVsZHMoKTsKICAgICAgICAgICAgICAgIG5hbWVzID0gX2xvZGFzaC5kZWZhdWx0LnBsdWNrKHNjcmlwdGVkRmllbGRzLCAnbmFtZScpOwoKICAgICAgICAgICAgICAgIGlmICghX2xvZGFzaC5kZWZhdWx0LmNvbnRhaW5zKG5hbWVzLCBuYW1lKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBfcHVibGljLkR1cGxpY2F0ZUZpZWxkKG5hbWUpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkcy5hZGQobmV3IF9maWVsZHMuRmllbGQodGhpcywgewogICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdCwKICAgICAgICAgICAgICAgICAgZmllbGRUeXBlOiBmaWVsZFR5cGUsCiAgICAgICAgICAgICAgICAgIHNjcmlwdGVkOiB0cnVlLAogICAgICAgICAgICAgICAgICBsYW5nOiBsYW5nLAogICAgICAgICAgICAgICAgICBhZ2dyZWdhdGFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgIGZpbHRlcmFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgIHNlYXJjaGFibGU6IHRydWUKICAgICAgICAgICAgICAgIH0sIGZhbHNlKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYXZlKCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZFNjcmlwdGVkRmllbGQoX3gyLCBfeDMpIHsKICAgICAgICByZXR1cm4gX2FkZFNjcmlwdGVkRmllbGQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGFkZFNjcmlwdGVkRmllbGQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJyZW1vdmVTY3JpcHRlZEZpZWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTY3JpcHRlZEZpZWxkKGZpZWxkKSB7CiAgICAgIHRoaXMuZmllbGRzLnJlbW92ZShmaWVsZCk7CiAgICAgIHJldHVybiB0aGlzLnNhdmUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwb3B1bGFyaXplRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9wb3B1bGFyaXplRmllbGQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShmaWVsZE5hbWUpIHsKICAgICAgICB2YXIgdW5pdCwKICAgICAgICAgICAgZmllbGQsCiAgICAgICAgICAgIGNvdW50LAogICAgICAgICAgICBfYXJnczUgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHVuaXQgPSBfYXJnczUubGVuZ3RoID4gMSAmJiBfYXJnczVbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzNVsxXSA6IDE7CiAgICAgICAgICAgICAgICBmaWVsZCA9IHRoaXMuZmllbGRzLmdldEJ5TmFtZShmaWVsZE5hbWUpOwoKICAgICAgICAgICAgICAgIGlmIChmaWVsZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY291bnQgPSBNYXRoLm1heCgoZmllbGQuY291bnQgfHwgMCkgKyB1bml0LCAwKTsKCiAgICAgICAgICAgICAgICBpZiAoIShmaWVsZC5jb3VudCA9PT0gY291bnQpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBmaWVsZC5jb3VudCA9IGNvdW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhdmUoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHBvcHVsYXJpemVGaWVsZChfeDQpIHsKICAgICAgICByZXR1cm4gX3BvcHVsYXJpemVGaWVsZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcG9wdWxhcml6ZUZpZWxkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZ2V0Tm9uU2NyaXB0ZWRGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5vblNjcmlwdGVkRmllbGRzKCkgewogICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LndoZXJlKHRoaXMuZmllbGRzLCB7CiAgICAgICAgc2NyaXB0ZWQ6IGZhbHNlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFNjcmlwdGVkRmllbGRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY3JpcHRlZEZpZWxkcygpIHsKICAgICAgcmV0dXJuIF9sb2Rhc2guZGVmYXVsdC53aGVyZSh0aGlzLmZpZWxkcywgewogICAgICAgIHNjcmlwdGVkOiB0cnVlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEluZGV4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbmRleCgpIHsKICAgICAgaWYgKCF0aGlzLmlzVW5zdXBwb3J0ZWRUaW1lUGF0dGVybigpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudGl0bGU7CiAgICAgIH0gLy8gVGFrZSBhIHRpbWUtYmFzZWQgaW50ZXJ2YWwgaW5kZXggcGF0dGVybiB0aXRsZSAobGlrZSBbZm9vLV1ZWVlZLk1NLkREWy1iYXJdKSBhbmQgdHVybiBpdAogICAgICAvLyBpbnRvIHRoZSBhY3R1YWwgaW5kZXggKGxpa2UgZm9vLSotYmFyKSBieSByZXBsYWNpbmcgYW55dGhpbmcgbm90IGluc2lkZSBzcXVhcmUgYnJhY2tldHMKICAgICAgLy8gd2l0aCBhICouCgoKICAgICAgdmFyIHJlZ2V4ID0gL1xbW15cXV0qXS9nOyAvLyBNYXRjaGVzIHRleHQgaW5zaWRlIGJyYWNrZXRzCgogICAgICB2YXIgc3BsaXRzID0gdGhpcy50aXRsZS5zcGxpdChyZWdleCk7IC8vIGUuZy4gWycnLCAnWVlZWS5NTS5ERCcsICcnXSBmcm9tIHRoZSBhYm92ZSBleGFtcGxlCgogICAgICB2YXIgbWF0Y2hlcyA9IHRoaXMudGl0bGUubWF0Y2gocmVnZXgpIHx8IFtdOyAvLyBlLmcuIFsnW2Zvby1dJywgJ1stYmFyXSddIGZyb20gdGhlIGFib3ZlIGV4YW1wbGUKCiAgICAgIHJldHVybiBzcGxpdHMubWFwKGZ1bmN0aW9uIChzcGxpdCwgaSkgewogICAgICAgIHZhciBtYXRjaCA9IGkgPj0gbWF0Y2hlcy5sZW5ndGggPyAnJyA6IG1hdGNoZXNbaV0ucmVwbGFjZSgvW1xbXF1dL2csICcnKTsKICAgICAgICByZXR1cm4gIiIuY29uY2F0KHNwbGl0Lmxlbmd0aCA/ICcqJyA6ICcnKS5jb25jYXQobWF0Y2gpOwogICAgICB9KS5qb2luKCcnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1Vuc3VwcG9ydGVkVGltZVBhdHRlcm4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVW5zdXBwb3J0ZWRUaW1lUGF0dGVybigpIHsKICAgICAgcmV0dXJuICEhdGhpcy5pbnRlcnZhbE5hbWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUaW1lQmFzZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVGltZUJhc2VkKCkgewogICAgICByZXR1cm4gISF0aGlzLnRpbWVGaWVsZE5hbWUgJiYgKCF0aGlzLmZpZWxkcyB8fCAhIXRoaXMuZ2V0VGltZUZpZWxkKCkpOwogICAgfQogIH0sIHsKICAgIGtleTogImlzVGltZU5hbm9zQmFzZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVGltZU5hbm9zQmFzZWQoKSB7CiAgICAgIHZhciB0aW1lRmllbGQgPSB0aGlzLmdldFRpbWVGaWVsZCgpOwogICAgICByZXR1cm4gdGltZUZpZWxkICYmIHRpbWVGaWVsZC5lc1R5cGVzICYmIHRpbWVGaWVsZC5lc1R5cGVzLmluZGV4T2YoJ2RhdGVfbmFub3MnKSAhPT0gLTE7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUaW1lQmFzZWRXaWxkY2FyZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNUaW1lQmFzZWRXaWxkY2FyZCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNUaW1lQmFzZWQoKSAmJiB0aGlzLmlzV2lsZGNhcmQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRUaW1lRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRpbWVGaWVsZCgpIHsKICAgICAgaWYgKCF0aGlzLnRpbWVGaWVsZE5hbWUgfHwgIXRoaXMuZmllbGRzIHx8ICF0aGlzLmZpZWxkcy5nZXRCeU5hbWUpIHJldHVybjsKICAgICAgcmV0dXJuIHRoaXMuZmllbGRzLmdldEJ5TmFtZSh0aGlzLnRpbWVGaWVsZE5hbWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEZpZWxkQnlOYW1lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWVsZEJ5TmFtZShuYW1lKSB7CiAgICAgIGlmICghdGhpcy5maWVsZHMgfHwgIXRoaXMuZmllbGRzLmdldEJ5TmFtZSkgcmV0dXJuOwogICAgICByZXR1cm4gdGhpcy5maWVsZHMuZ2V0QnlOYW1lKG5hbWUpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEFnZ3JlZ2F0aW9uUmVzdHJpY3Rpb25zIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBZ2dyZWdhdGlvblJlc3RyaWN0aW9ucygpIHsKICAgICAgdmFyIF90aGlzJHR5cGVNZXRhOwoKICAgICAgcmV0dXJuIChfdGhpcyR0eXBlTWV0YSA9IHRoaXMudHlwZU1ldGEpID09PSBudWxsIHx8IF90aGlzJHR5cGVNZXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyR0eXBlTWV0YS5hZ2dzOwogICAgfQogIH0sIHsKICAgIGtleTogImlzV2lsZGNhcmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzV2lsZGNhcmQoKSB7CiAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuaW5jbHVkZXModGhpcy50aXRsZSwgJyonKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcmVwQm9keSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcEJvZHkoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGJvZHkgPSB7fTsgLy8gc2VyaWFsaXplIGpzb24gZmllbGRzCgogICAgICBfbG9kYXNoLmRlZmF1bHQuZm9yT3duKHRoaXMubWFwcGluZywgZnVuY3Rpb24gKGZpZWxkTWFwcGluZywgZmllbGROYW1lKSB7CiAgICAgICAgaWYgKCFmaWVsZE5hbWUgfHwgX3RoaXMzW2ZpZWxkTmFtZV0gPT0gbnVsbCkgcmV0dXJuOwogICAgICAgIGJvZHlbZmllbGROYW1lXSA9IGZpZWxkTWFwcGluZy5fc2VyaWFsaXplID8gZmllbGRNYXBwaW5nLl9zZXJpYWxpemUoX3RoaXMzW2ZpZWxkTmFtZV0pIDogX3RoaXMzW2ZpZWxkTmFtZV07CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIGJvZHk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgICB2YXIgYWxsb3dPdmVycmlkZSwKICAgICAgICAgICAgX2NyZWF0ZSwKICAgICAgICAgICAgcG90ZW50aWFsRHVwbGljYXRlQnlUaXRsZSwKICAgICAgICAgICAgX2FyZ3M3ID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgYWxsb3dPdmVycmlkZSA9IF9hcmdzNy5sZW5ndGggPiAwICYmIF9hcmdzN1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3M3WzBdIDogZmFsc2U7CgogICAgICAgICAgICAgICAgX2NyZWF0ZSA9CiAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGR1cGxpY2F0ZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cGxpY2F0ZVBhdHRlcm4sIGJvZHksIHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWR1cGxpY2F0ZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVwbGljYXRlUGF0dGVybiA9IG5ldyBJbmRleFBhdHRlcm4oZHVwbGljYXRlSWQsIF90aGlzNC5nZXRDb25maWcsIF90aGlzNC5zYXZlZE9iamVjdHNDbGllbnQsIF90aGlzNC5wYXR0ZXJuQ2FjaGUsIF90aGlzNC5maWVsZHNGZXRjaGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdXBsaWNhdGVQYXR0ZXJuLmRlc3Ryb3koKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IF90aGlzNC5wcmVwQm9keSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zYXZlZE9iamVjdHNDbGllbnQuY3JlYXRlKHR5cGUsIGJvZHksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IF90aGlzNC5pZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuaWQgPSByZXNwb25zZS5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5pZCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZShfeDUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlscy5maW5kQnlUaXRsZSkodGhpcy5zYXZlZE9iamVjdHNDbGllbnQsIHRoaXMudGl0bGUpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBwb3RlbnRpYWxEdXBsaWNhdGVCeVRpdGxlID0gX2NvbnRleHQ3LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKHBvdGVudGlhbER1cGxpY2F0ZUJ5VGl0bGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NyZWF0ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ3LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoYWxsb3dPdmVycmlkZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlKHBvdGVudGlhbER1cGxpY2F0ZUJ5VGl0bGUuaWQpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Ny5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNywgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHsKICAgICAgICByZXR1cm4gX2NyZWF0ZTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZTsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInNhdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zYXZlID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgoKSB7CiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICAgIHZhciBzYXZlQXR0ZW1wdHMsCiAgICAgICAgICAgIGJvZHksCiAgICAgICAgICAgIG9yaWdpbmFsQ2hhbmdlZEtleXMsCiAgICAgICAgICAgIF9hcmdzOCA9IGFyZ3VtZW50czsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc2F2ZUF0dGVtcHRzID0gX2FyZ3M4Lmxlbmd0aCA+IDAgJiYgX2FyZ3M4WzBdICE9PSB1bmRlZmluZWQgPyBfYXJnczhbMF0gOiAwOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5wcmVwQm9keSgpOyAvLyBXaGF0IGtleXMgY2hhbmdlZCBzaW5jZSB0aGV5IGxhc3QgcHVsbGVkIHRoZSBpbmRleCBwYXR0ZXJuCgogICAgICAgICAgICAgICAgb3JpZ2luYWxDaGFuZ2VkS2V5cyA9IE9iamVjdC5rZXlzKGJvZHkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBib2R5W2tleV0gIT09IF90aGlzNS5vcmlnaW5hbEJvZHlba2V5XTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIHRoaXMuc2F2ZWRPYmplY3RzQ2xpZW50LnVwZGF0ZSh0eXBlLCB0aGlzLmlkLCBib2R5LCB7CiAgICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbgogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgICAgICAgICAgICBfdGhpczUuaWQgPSByZXNwLmlkOwogICAgICAgICAgICAgICAgICBfdGhpczUudmVyc2lvbiA9IHJlc3AuX3ZlcnNpb247CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGlmIChfbG9kYXNoLmRlZmF1bHQuZ2V0KGVyciwgJ3Jlcy5zdGF0dXMnKSA9PT0gNDA5ICYmIHNhdmVBdHRlbXB0cysrIDwgTUFYX0FUVEVNUFRTX1RPX1JFU09MVkVfQ09ORkxJQ1RTKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNhbWVQYXR0ZXJuID0gbmV3IEluZGV4UGF0dGVybihfdGhpczUuaWQsIF90aGlzNS5nZXRDb25maWcsIF90aGlzNS5zYXZlZE9iamVjdHNDbGllbnQsIF90aGlzNS5wYXR0ZXJuQ2FjaGUsIF90aGlzNS5maWVsZHNGZXRjaGVyKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2FtZVBhdHRlcm4uaW5pdCgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgLy8gV2hhdCBrZXlzIGNoYW5nZWQgZnJvbSBub3cgYW5kIHdoYXQgdGhlIHNlcnZlciByZXR1cm5lZAogICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRCb2R5ID0gc2FtZVBhdHRlcm4ucHJlcEJvZHkoKTsgLy8gQnVpbGQgYSBsaXN0IG9mIGNoYW5nZWQga2V5cyBmcm9tIHRoZSBzZXJ2ZXIgcmVzcG9uc2UKICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBlbnN1cmUgd2UgaWdub3JlIHRoZSBrZXkgaWYgdGhlIHNlcnZlciByZXNwb25zZQogICAgICAgICAgICAgICAgICAgICAgLy8gaXMgdGhlIHNhbWUgYXMgdGhlIG9yaWdpbmFsIHJlc3BvbnNlIChzaW5jZSB0aGF0IGlzIGV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBtYWRlIGEgY2hhbmdlIGluIHRoYXQga2V5KQoKICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJDaGFuZ2VkS2V5cyA9IE9iamVjdC5rZXlzKHVwZGF0ZWRCb2R5KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZEJvZHlba2V5XSAhPT0gYm9keVtrZXldICYmIF90aGlzNS5vcmlnaW5hbEJvZHlba2V5XSAhPT0gdXBkYXRlZEJvZHlba2V5XTsKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgdmFyIHVucmVzb2x2ZWRDb2xsaXNpb24gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IG9yaWdpbmFsQ2hhbmdlZEtleXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsS2V5ID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBzZXJ2ZXJDaGFuZ2VkS2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VydmVyS2V5ID0gX3N0ZXAyLnZhbHVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsS2V5ID09PSBzZXJ2ZXJLZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnJlc29sdmVkQ29sbGlzaW9uID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjsKICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7CiAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBpZiAodW5yZXNvbHZlZENvbGxpc2lvbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmluZGV4UGF0dGVybnMudW5hYmxlV3JpdGVMYWJlbCcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuYWJsZSB0byB3cml0ZSBpbmRleCBwYXR0ZXJuISBSZWZyZXNoIHRoZSBwYWdlIHRvIGdldCB0aGUgbW9zdCB1cCB0byBkYXRlIGNoYW5nZXMgZm9yIHRoaXMgaW5kZXggcGF0dGVybi4nCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9nZXROb3RpZmljYXRpb25zMiA9ICgwLCBfc2VydmljZXMuZ2V0Tm90aWZpY2F0aW9ucykoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0cyA9IF9nZXROb3RpZmljYXRpb25zMi50b2FzdHM7CgogICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHMuYWRkRGFuZ2VyKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICAgICAgICAgICAgICB9IC8vIFNldCB0aGUgdXBkYXRlZCByZXNwb25zZSBvbiB0aGlzIG9iamVjdAoKCiAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDaGFuZ2VkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1W2tleV0gPSBzYW1lUGF0dGVybltrZXldOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczUudmVyc2lvbiA9IHNhbWVQYXR0ZXJuLnZlcnNpb247IC8vIENsZWFyIGNhY2hlCgogICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnBhdHRlcm5DYWNoZS5jbGVhcihfdGhpczUuaWQpOyAvLyBUcnkgdGhlIHNhdmUgYWdhaW4KCgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5zYXZlKHNhdmVBdHRlbXB0cyk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gc2F2ZSgpIHsKICAgICAgICByZXR1cm4gX3NhdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHNhdmU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJfZmV0Y2hGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaEZpZWxkczIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICB2YXIgZmllbGRzLCBzY3JpcHRlZCwgYWxsOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNGZXRjaGVyLmZldGNoKHRoaXMpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBmaWVsZHMgPSBfY29udGV4dDkuc2VudDsKICAgICAgICAgICAgICAgIHNjcmlwdGVkID0gdGhpcy5nZXRTY3JpcHRlZEZpZWxkcygpOwogICAgICAgICAgICAgICAgYWxsID0gZmllbGRzLmNvbmNhdChzY3JpcHRlZCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbml0RmllbGRzKGFsbCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9mZXRjaEZpZWxkcygpIHsKICAgICAgICByZXR1cm4gX2ZldGNoRmllbGRzMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX2ZldGNoRmllbGRzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVmcmVzaEZpZWxkcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaEZpZWxkcygpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5fZmV0Y2hGaWVsZHMoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXM2LnNhdmUoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFzdGljL2tpYmFuYS9pc3N1ZXMvOTIyNAogICAgICAgIC8vIFRoaXMgY2FsbCB3aWxsIGF0dGVtcHQgdG8gcmVtYXAgZmllbGRzIGZyb20gdGhlIG1hdGNoaW5nCiAgICAgICAgLy8gRVMgaW5kZXggd2hpY2ggbWF5IG5vdCBhY3R1YWxseSBleGlzdC4gSW4gdGhhdCBzY2VuYXJpbywKICAgICAgICAvLyB3ZSBzdGlsbCB3YW50IHRvIG5vdGlmeSB0aGUgdXNlciB0aGF0IHRoZXJlIGlzIGEgcHJvYmxlbQogICAgICAgIC8vIGJ1dCB3ZSBkbyBub3Qgd2FudCB0byBwb3RlbnRpYWxseSBtYWtlIGFueSBwYWdlcyB1bnVzYWJsZQogICAgICAgIC8vIHNvIGRvIG5vdCByZXRocm93IHRoZSBlcnJvciBoZXJlCiAgICAgICAgdmFyIF9nZXROb3RpZmljYXRpb25zMyA9ICgwLCBfc2VydmljZXMuZ2V0Tm90aWZpY2F0aW9ucykoKSwKICAgICAgICAgICAgdG9hc3RzID0gX2dldE5vdGlmaWNhdGlvbnMzLnRvYXN0czsKCiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIF9saWIuSW5kZXhQYXR0ZXJuTWlzc2luZ0luZGljZXMpIHsKICAgICAgICAgIHRvYXN0cy5hZGREYW5nZXIoZXJyLm1lc3NhZ2UpOwogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0KCiAgICAgICAgdG9hc3RzLmFkZEVycm9yKGVyciwgewogICAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmluZGV4UGF0dGVybnMuZmV0Y2hGaWVsZEVycm9yVGl0bGUnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXJyb3IgZmV0Y2hpbmcgZmllbGRzIGZvciBpbmRleCBwYXR0ZXJuIHt0aXRsZX0gKElEOiB7aWR9KScsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIGlkOiBfdGhpczYuaWQsCiAgICAgICAgICAgICAgdGl0bGU6IF90aGlzNi50aXRsZQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0b0pTT04iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHsKICAgICAgcmV0dXJuIHRoaXMuaWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9TdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICByZXR1cm4gJycgKyB0aGlzLnRvSlNPTigpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHRoaXMucGF0dGVybkNhY2hlLmNsZWFyKHRoaXMuaWQpOwoKICAgICAgaWYgKHRoaXMuaWQpIHsKICAgICAgICByZXR1cm4gdGhpcy5zYXZlZE9iamVjdHNDbGllbnQuZGVsZXRlKHR5cGUsIHRoaXMuaWQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicm91dGVzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gKDAsIF91dGlscy5nZXRSb3V0ZXMpKCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gSW5kZXhQYXR0ZXJuOwp9KCk7CgpleHBvcnRzLkluZGV4UGF0dGVybiA9IEluZGV4UGF0dGVybjs="},null]}