{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/components/shared/TransactionDurationAlertTrigger/index.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/components/shared/TransactionDurationAlertTrigger/index.js","mtime":1589249551655},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRyYW5zYWN0aW9uRHVyYXRpb25BbGVydFRyaWdnZXIgPSBUcmFuc2FjdGlvbkR1cmF0aW9uQWxlcnRUcmlnZ2VyOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wbHVnaW5zL3RyaWdnZXJzX2FjdGlvbnNfdWkvcHVibGljIik7Cgp2YXIgX2FsZXJ0X3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9hcG0vY29tbW9uL2FsZXJ0X3R5cGVzIik7Cgp2YXIgX1NlcnZpY2VBbGVydFRyaWdnZXIgPSByZXF1aXJlKCIuLi9TZXJ2aWNlQWxlcnRUcmlnZ2VyIik7Cgp2YXIgX3VzZVVybFBhcmFtczIgPSByZXF1aXJlKCIuLi8uLi8uLi9ob29rcy91c2VVcmxQYXJhbXMiKTsKCnZhciBfdXNlU2VydmljZVRyYW5zYWN0aW9uVHlwZXMgPSByZXF1aXJlKCIuLi8uLi8uLi9ob29rcy91c2VTZXJ2aWNlVHJhbnNhY3Rpb25UeXBlcyIpOwoKdmFyIF9Qb3BvdmVyRXhwcmVzc2lvbiA9IHJlcXVpcmUoIi4uL1NlcnZpY2VBbGVydFRyaWdnZXIvUG9wb3ZlckV4cHJlc3Npb24iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBUcmFuc2FjdGlvbkR1cmF0aW9uQWxlcnRUcmlnZ2VyKHByb3BzKSB7CiAgdmFyIF9wYXJhbXMkdGhyZXNob2xkOwoKICB2YXIgc2V0QWxlcnRQYXJhbXMgPSBwcm9wcy5zZXRBbGVydFBhcmFtcywKICAgICAgYWxlcnRQYXJhbXMgPSBwcm9wcy5hbGVydFBhcmFtcywKICAgICAgc2V0QWxlcnRQcm9wZXJ0eSA9IHByb3BzLnNldEFsZXJ0UHJvcGVydHk7CgogIHZhciBfdXNlVXJsUGFyYW1zID0gKDAsIF91c2VVcmxQYXJhbXMyLnVzZVVybFBhcmFtcykoKSwKICAgICAgdXJsUGFyYW1zID0gX3VzZVVybFBhcmFtcy51cmxQYXJhbXM7CgogIHZhciB0cmFuc2FjdGlvblR5cGVzID0gKDAsIF91c2VTZXJ2aWNlVHJhbnNhY3Rpb25UeXBlcy51c2VTZXJ2aWNlVHJhbnNhY3Rpb25UeXBlcykodXJsUGFyYW1zKTsKCiAgaWYgKCF0cmFuc2FjdGlvblR5cGVzLmxlbmd0aCkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICB2YXIgZGVmYXVsdHMgPSB7CiAgICB0aHJlc2hvbGQ6IDE1MDAsCiAgICBhZ2dyZWdhdGlvblR5cGU6ICdhdmcnLAogICAgd2luZG93U2l6ZTogNSwKICAgIHdpbmRvd1VuaXQ6ICdtJywKICAgIHRyYW5zYWN0aW9uVHlwZTogdHJhbnNhY3Rpb25UeXBlc1swXQogIH07CgogIHZhciBwYXJhbXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0cywge30sIGFsZXJ0UGFyYW1zKTsKCiAgdmFyIGZpZWxkcyA9IFtfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qb3BvdmVyRXhwcmVzc2lvbi5Qb3BvdmVyRXhwcmVzc2lvbiwgewogICAgdmFsdWU6IHBhcmFtcy50cmFuc2FjdGlvblR5cGUsCiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmFwbS50cmFuc2FjdGlvbkR1cmF0aW9uQWxlcnRUcmlnZ2VyLnR5cGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVHlwZScKICAgIH0pCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNlbGVjdCwgewogICAgdmFsdWU6IHBhcmFtcy50cmFuc2FjdGlvblR5cGUsCiAgICBvcHRpb25zOiB0cmFuc2FjdGlvblR5cGVzLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdGV4dDoga2V5LAogICAgICAgIHZhbHVlOiBrZXkKICAgICAgfTsKICAgIH0pLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgcmV0dXJuIHNldEFsZXJ0UGFyYW1zKCd0cmFuc2FjdGlvblR5cGUnLCBlLnRhcmdldC52YWx1ZSk7CiAgICB9LAogICAgY29tcHJlc3NlZDogdHJ1ZQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUG9wb3ZlckV4cHJlc3Npb24uUG9wb3ZlckV4cHJlc3Npb24sIHsKICAgIHZhbHVlOiBwYXJhbXMuYWdncmVnYXRpb25UeXBlLAogICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0udHJhbnNhY3Rpb25EdXJhdGlvbkFsZXJ0VHJpZ2dlci53aGVuJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1doZW4nCiAgICB9KQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTZWxlY3QsIHsKICAgIHZhbHVlOiBwYXJhbXMuYWdncmVnYXRpb25UeXBlLAogICAgb3B0aW9uczogKDAsIF9sb2Rhc2gubWFwKShfYWxlcnRfdHlwZXMuVFJBTlNBQ1RJT05fQUxFUlRfQUdHUkVHQVRJT05fVFlQRVMsIGZ1bmN0aW9uIChsYWJlbCwga2V5KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdGV4dDogbGFiZWwsCiAgICAgICAgdmFsdWU6IGtleQogICAgICB9OwogICAgfSksCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICByZXR1cm4gc2V0QWxlcnRQYXJhbXMoJ2FnZ3JlZ2F0aW9uVHlwZScsIGUudGFyZ2V0LnZhbHVlKTsKICAgIH0sCiAgICBjb21wcmVzc2VkOiB0cnVlCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Qb3BvdmVyRXhwcmVzc2lvbi5Qb3BvdmVyRXhwcmVzc2lvbiwgewogICAgdmFsdWU6IHBhcmFtcy50aHJlc2hvbGQgPyAiIi5jb25jYXQocGFyYW1zLnRocmVzaG9sZCwgIm1zIikgOiAnJywKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnRyYW5zYWN0aW9uRHVyYXRpb25BbGVydFRyaWdnZXIuaXNBYm92ZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdpcyBhYm92ZScKICAgIH0pCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkTnVtYmVyLCB7CiAgICB2YWx1ZTogKF9wYXJhbXMkdGhyZXNob2xkID0gcGFyYW1zLnRocmVzaG9sZCkgIT09IG51bGwgJiYgX3BhcmFtcyR0aHJlc2hvbGQgIT09IHZvaWQgMCA/IF9wYXJhbXMkdGhyZXNob2xkIDogJycsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICByZXR1cm4gc2V0QWxlcnRQYXJhbXMoJ3RocmVzaG9sZCcsIGUudGFyZ2V0LnZhbHVlKTsKICAgIH0sCiAgICBhcHBlbmQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0udHJhbnNhY3Rpb25EdXJhdGlvbkFsZXJ0VHJpZ2dlci5tcycsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdtcycKICAgIH0pLAogICAgY29tcHJlc3NlZDogdHJ1ZQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcHVibGljLkZvckxhc3RFeHByZXNzaW9uLCB7CiAgICBvbkNoYW5nZVdpbmRvd1NpemU6IGZ1bmN0aW9uIG9uQ2hhbmdlV2luZG93U2l6ZSh0aW1lV2luZG93U2l6ZSkgewogICAgICByZXR1cm4gc2V0QWxlcnRQYXJhbXMoJ3dpbmRvd1NpemUnLCB0aW1lV2luZG93U2l6ZSB8fCAnJyk7CiAgICB9LAogICAgb25DaGFuZ2VXaW5kb3dVbml0OiBmdW5jdGlvbiBvbkNoYW5nZVdpbmRvd1VuaXQodGltZVdpbmRvd1VuaXQpIHsKICAgICAgcmV0dXJuIHNldEFsZXJ0UGFyYW1zKCd3aW5kb3dVbml0JywgdGltZVdpbmRvd1VuaXQpOwogICAgfSwKICAgIHRpbWVXaW5kb3dTaXplOiBwYXJhbXMud2luZG93U2l6ZSwKICAgIHRpbWVXaW5kb3dVbml0OiBwYXJhbXMud2luZG93VW5pdCwKICAgIGVycm9yczogewogICAgICB0aW1lV2luZG93U2l6ZTogW10sCiAgICAgIHRpbWVXaW5kb3dVbml0OiBbXQogICAgfQogIH0pXTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2VydmljZUFsZXJ0VHJpZ2dlci5TZXJ2aWNlQWxlcnRUcmlnZ2VyLCB7CiAgICBhbGVydFR5cGVOYW1lOiBfYWxlcnRfdHlwZXMuQUxFUlRfVFlQRVNfQ09ORklHWydhcG0udHJhbnNhY3Rpb25fZHVyYXRpb24nXS5uYW1lLAogICAgZmllbGRzOiBmaWVsZHMsCiAgICBkZWZhdWx0czogZGVmYXVsdHMsCiAgICBzZXRBbGVydFBhcmFtczogc2V0QWxlcnRQYXJhbXMsCiAgICBzZXRBbGVydFByb3BlcnR5OiBzZXRBbGVydFByb3BlcnR5CiAgfSk7Cn0="},null]}