{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/renderers/setup_mode.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/renderers/setup_mode.js","mtime":1589249552580},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNldHVwTW9kZVJlbmRlcmVyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9zZXR1cF9tb2RlID0gcmVxdWlyZSgiLi4vLi4vbGliL3NldHVwX21vZGUiKTsKCnZhciBfZmx5b3V0ID0gcmVxdWlyZSgiLi4vbWV0cmljYmVhdF9taWdyYXRpb24vZmx5b3V0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9maW5kX25ld191dWlkID0gcmVxdWlyZSgiLi9saWIvZmluZF9uZXdfdXVpZCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgU2V0dXBNb2RlUmVuZGVyZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFNldHVwTW9kZVJlbmRlcmVyLCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gU2V0dXBNb2RlUmVuZGVyZXIoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNldHVwTW9kZVJlbmRlcmVyKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNldHVwTW9kZVJlbmRlcmVyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIHJlbmRlclN0YXRlOiBmYWxzZSwKICAgICAgaXNGbHlvdXRPcGVuOiBmYWxzZSwKICAgICAgaW5zdGFuY2U6IG51bGwsCiAgICAgIG5ld1Byb2R1Y3Q6IG51bGwsCiAgICAgIGlzU2V0dGluZ1VwTmV3OiBmYWxzZQogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNldHVwTW9kZVJlbmRlcmVyLCBbewogICAga2V5OiAiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgc2NvcGUgPSBfdGhpcyRwcm9wcy5zY29wZSwKICAgICAgICAgIGluamVjdG9yID0gX3RoaXMkcHJvcHMuaW5qZWN0b3I7CiAgICAgICgwLCBfc2V0dXBfbW9kZS5pbml0U2V0dXBNb2RlU3RhdGUpKHNjb3BlLCBpbmplY3RvciwgZnVuY3Rpb24gKF9vbGREYXRhKSB7CiAgICAgICAgdmFyIG5ld1N0YXRlID0gewogICAgICAgICAgcmVuZGVyU3RhdGU6IHRydWUKICAgICAgICB9OwogICAgICAgIHZhciBwcm9kdWN0TmFtZSA9IF90aGlzMi5wcm9wcy5wcm9kdWN0TmFtZTsKCiAgICAgICAgaWYgKCFwcm9kdWN0TmFtZSkgewogICAgICAgICAgX3RoaXMyLnNldFN0YXRlKG5ld1N0YXRlKTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgc2V0dXBNb2RlU3RhdGUgPSAoMCwgX3NldHVwX21vZGUuZ2V0U2V0dXBNb2RlU3RhdGUpKCk7CgogICAgICAgIGlmICghc2V0dXBNb2RlU3RhdGUuZW5hYmxlZCB8fCAhc2V0dXBNb2RlU3RhdGUuZGF0YSkgewogICAgICAgICAgX3RoaXMyLnNldFN0YXRlKG5ld1N0YXRlKTsKCiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgZGF0YSA9IHNldHVwTW9kZVN0YXRlLmRhdGFbcHJvZHVjdE5hbWVdOwogICAgICAgIHZhciBvbGREYXRhID0gX29sZERhdGEgPyBfb2xkRGF0YVtwcm9kdWN0TmFtZV0gOiBudWxsOwoKICAgICAgICBpZiAoZGF0YSAmJiBvbGREYXRhKSB7CiAgICAgICAgICB2YXIgbmV3VXVpZCA9ICgwLCBfZmluZF9uZXdfdXVpZC5maW5kTmV3VXVpZCkoT2JqZWN0LmtleXMob2xkRGF0YS5ieVV1aWQpLCBPYmplY3Qua2V5cyhkYXRhLmJ5VXVpZCkpOwoKICAgICAgICAgIGlmIChuZXdVdWlkKSB7CiAgICAgICAgICAgIG5ld1N0YXRlLm5ld1Byb2R1Y3QgPSBkYXRhLmJ5VXVpZFtuZXdVdWlkXTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIF90aGlzMi5zZXRTdGF0ZShuZXdTdGF0ZSk7CiAgICAgIH0pOwogICAgICAoMCwgX3NldHVwX21vZGUuc2V0U2V0dXBNb2RlTWVudUl0ZW0pKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVzZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICByZW5kZXJTdGF0ZTogZmFsc2UsCiAgICAgICAgaXNGbHlvdXRPcGVuOiBmYWxzZSwKICAgICAgICBpbnN0YW5jZTogbnVsbCwKICAgICAgICBuZXdQcm9kdWN0OiBudWxsLAogICAgICAgIGlzU2V0dGluZ1VwTmV3OiBmYWxzZQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGbHlvdXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZseW91dChkYXRhLCBtZXRhKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHByb2R1Y3ROYW1lID0gdGhpcy5wcm9wcy5wcm9kdWN0TmFtZTsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGlzRmx5b3V0T3BlbiA9IF90aGlzJHN0YXRlLmlzRmx5b3V0T3BlbiwKICAgICAgICAgIGluc3RhbmNlID0gX3RoaXMkc3RhdGUuaW5zdGFuY2UsCiAgICAgICAgICBpc1NldHRpbmdVcE5ldyA9IF90aGlzJHN0YXRlLmlzU2V0dGluZ1VwTmV3LAogICAgICAgICAgbmV3UHJvZHVjdCA9IF90aGlzJHN0YXRlLm5ld1Byb2R1Y3Q7CgogICAgICBpZiAoIWRhdGEgfHwgIWlzRmx5b3V0T3BlbikgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgcHJvZHVjdCA9IG51bGw7CgogICAgICBpZiAobmV3UHJvZHVjdCkgewogICAgICAgIHByb2R1Y3QgPSBuZXdQcm9kdWN0OwogICAgICB9IC8vIEZvciBuZXcgaW5zdGFuY2UgZGlzY292ZXJ5IGZsb3csIHdlIHBhc3MgaW4gZW1wdHkgaW5zdGFuY2Ugb2JqZWN0CiAgICAgIGVsc2UgaWYgKGluc3RhbmNlICYmIE9iamVjdC5rZXlzKGluc3RhbmNlKS5sZW5ndGgpIHsKICAgICAgICAgIHByb2R1Y3QgPSBkYXRhLmJ5VXVpZFtpbnN0YW5jZS51dWlkXTsKICAgICAgICB9CgogICAgICBpZiAoIXByb2R1Y3QpIHsKICAgICAgICB2YXIgdXVpZHMgPSBPYmplY3QudmFsdWVzKGRhdGEuYnlVdWlkKTsKCiAgICAgICAgaWYgKHV1aWRzLmxlbmd0aCAmJiAhaXNTZXR0aW5nVXBOZXcpIHsKICAgICAgICAgIHByb2R1Y3QgPSB1dWlkc1swXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcHJvZHVjdCA9IHsKICAgICAgICAgICAgaXNOZXROZXdVc2VyOiB0cnVlCiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZseW91dC5GbHlvdXQsIHsKICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMy5yZXNldCgpOwogICAgICAgIH0sCiAgICAgICAgcHJvZHVjdE5hbWU6IHByb2R1Y3ROYW1lLAogICAgICAgIHByb2R1Y3Q6IHByb2R1Y3QsCiAgICAgICAgbWV0YTogbWV0YSwKICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsCiAgICAgICAgdXBkYXRlUHJvZHVjdDogX3NldHVwX21vZGUudXBkYXRlU2V0dXBNb2RlRGF0YSwKICAgICAgICBpc1NldHRpbmdVcE5ldzogaXNTZXR0aW5nVXBOZXcKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Qm90dG9tQmFyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb3R0b21CYXIoc2V0dXBNb2RlU3RhdGUpIHsKICAgICAgaWYgKCFzZXR1cE1vZGVTdGF0ZS5lbmFibGVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJ4eGwiCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQm90dG9tQmFyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBndXR0ZXJTaXplOiAicyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHRDb2xvciwgewogICAgICAgIGNvbG9yOiAiZ2hvc3QiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS5kZXNjcmlwdGlvbiIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgYXJlIGluIHNldHVwIG1vZGUuIFRoZSAoe2ZsYWdJY29ufSkgaWNvbiBpbmRpY2F0ZXMgY29uZmlndXJhdGlvbiBvcHRpb25zLiIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBmbGFnSWNvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICAgICAgdHlwZTogImZsYWciCiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgZ3V0dGVyU2l6ZTogInMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgICAgZmlsbDogdHJ1ZSwKICAgICAgICBpY29uVHlwZTogImZsYWciLAogICAgICAgIGljb25TaWRlOiAicmlnaHQiLAogICAgICAgIHNpemU6ICJzIiwKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuICgwLCBfc2V0dXBfbW9kZS50b2dnbGVTZXR1cE1vZGUpKGZhbHNlKTsKICAgICAgICB9CiAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS5leGl0JywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXhpdCBzZXR1cCBtb2RlIgogICAgICB9KSkpKSkpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3Nob3J0Y3V0VG9GaW5pc2hNaWdyYXRpb24gPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfc2V0dXBfbW9kZS5kaXNhYmxlRWxhc3RpY3NlYXJjaEludGVybmFsQ29sbGVjdGlvbikoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9zZXR1cF9tb2RlLnVwZGF0ZVNldHVwTW9kZURhdGEpKCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzaG9ydGN1dFRvRmluaXNoTWlncmF0aW9uKCkgewogICAgICAgIHJldHVybiBfc2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLAogICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMyLnJlbmRlciwKICAgICAgICAgIHByb2R1Y3ROYW1lID0gX3RoaXMkcHJvcHMyLnByb2R1Y3ROYW1lOwogICAgICB2YXIgc2V0dXBNb2RlU3RhdGUgPSAoMCwgX3NldHVwX21vZGUuZ2V0U2V0dXBNb2RlU3RhdGUpKCk7CiAgICAgIHZhciBkYXRhID0gbnVsbDsKCiAgICAgIGlmIChzZXR1cE1vZGVTdGF0ZS5kYXRhKSB7CiAgICAgICAgaWYgKHByb2R1Y3ROYW1lKSB7CiAgICAgICAgICBkYXRhID0gc2V0dXBNb2RlU3RhdGUuZGF0YVtwcm9kdWN0TmFtZV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRhdGEgPSBzZXR1cE1vZGVTdGF0ZS5kYXRhOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIG1ldGEgPSBzZXR1cE1vZGVTdGF0ZS5kYXRhID8gc2V0dXBNb2RlU3RhdGUuZGF0YS5fbWV0YSA6IG51bGw7CiAgICAgIHJldHVybiByZW5kZXIoewogICAgICAgIHNldHVwTW9kZTogewogICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgIG1ldGE6IG1ldGEsCiAgICAgICAgICBlbmFibGVkOiBzZXR1cE1vZGVTdGF0ZS5lbmFibGVkLAogICAgICAgICAgcHJvZHVjdE5hbWU6IHByb2R1Y3ROYW1lLAogICAgICAgICAgdXBkYXRlU2V0dXBNb2RlRGF0YTogX3NldHVwX21vZGUudXBkYXRlU2V0dXBNb2RlRGF0YSwKICAgICAgICAgIHNob3J0Y3V0VG9GaW5pc2hNaWdyYXRpb246IGZ1bmN0aW9uIHNob3J0Y3V0VG9GaW5pc2hNaWdyYXRpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczQuc2hvcnRjdXRUb0ZpbmlzaE1pZ3JhdGlvbigpOwogICAgICAgICAgfSwKICAgICAgICAgIG9wZW5GbHlvdXQ6IGZ1bmN0aW9uIG9wZW5GbHlvdXQoaW5zdGFuY2UsIGlzU2V0dGluZ1VwTmV3KSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczQuc2V0U3RhdGUoewogICAgICAgICAgICAgIGlzRmx5b3V0T3BlbjogdHJ1ZSwKICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsCiAgICAgICAgICAgICAgaXNTZXR0aW5nVXBOZXc6IGlzU2V0dGluZ1VwTmV3CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIGNsb3NlRmx5b3V0OiBmdW5jdGlvbiBjbG9zZUZseW91dCgpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgaXNGbHlvdXRPcGVuOiBmYWxzZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZseW91dENvbXBvbmVudDogdGhpcy5nZXRGbHlvdXQoZGF0YSwgbWV0YSksCiAgICAgICAgYm90dG9tQmFyQ29tcG9uZW50OiB0aGlzLmdldEJvdHRvbUJhcihzZXR1cE1vZGVTdGF0ZSkKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2V0dXBNb2RlUmVuZGVyZXI7Cn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuU2V0dXBNb2RlUmVuZGVyZXIgPSBTZXR1cE1vZGVSZW5kZXJlcjs="},null]}