{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/lib/extract_mappings_definition.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/lib/extract_mappings_definition.js","mtime":1589249554120},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmV4dHJhY3RNYXBwaW5nc0RlZmluaXRpb24gPSBleHBvcnRzLmRvTWFwcGluZ3NIYXZlVHlwZSA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX21hcHBpbmdzX3ZhbGlkYXRvciA9IHJlcXVpcmUoIi4vbWFwcGluZ3NfdmFsaWRhdG9yIik7CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwoKICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7CgogIHZhciBrZXksIGk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgewogICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOwogICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOwogICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwogIHZhciB0YXJnZXQgPSB7fTsKICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7CiAgdmFyIGtleSwgaTsKCiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsKICAgIGtleSA9IHNvdXJjZUtleXNbaV07CiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCnZhciBpc01hcHBpbmdEZWZpbml0aW9uID0gZnVuY3Rpb24gaXNNYXBwaW5nRGVmaW5pdGlvbihvYmopIHsKICB2YXIgYXJlQWxsS2V5c1ZhbGlkID0gT2JqZWN0LmtleXMob2JqKS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7CiAgICByZXR1cm4gX21hcHBpbmdzX3ZhbGlkYXRvci5WQUxJRF9NQVBQSU5HU19QQVJBTUVURVJTLmluY2x1ZGVzKGtleSk7CiAgfSk7CgogIGlmICghYXJlQWxsS2V5c1ZhbGlkKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICB2YXIgcHJvcGVydGllcyA9IG9iai5wcm9wZXJ0aWVzLAogICAgICBkeW5hbWljVGVtcGxhdGVzID0gb2JqLmR5bmFtaWNfdGVtcGxhdGVzLAogICAgICBtYXBwaW5nc0NvbmZpZ3VyYXRpb24gPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBbInByb3BlcnRpZXMiLCAiZHluYW1pY190ZW1wbGF0ZXMiXSk7CgogIHZhciBfdmFsaWRhdGVNYXBwaW5nc0NvbmYgPSAoMCwgX21hcHBpbmdzX3ZhbGlkYXRvci52YWxpZGF0ZU1hcHBpbmdzQ29uZmlndXJhdGlvbikobWFwcGluZ3NDb25maWd1cmF0aW9uKSwKICAgICAgZXJyb3JzID0gX3ZhbGlkYXRlTWFwcGluZ3NDb25mLmVycm9yczsKCiAgdmFyIGlzQ29uZmlndXJhdGlvblZhbGlkID0gZXJyb3JzLmxlbmd0aCA9PT0gMDsKICB2YXIgaXNQcm9wZXJ0aWVzVmFsaWQgPSBwcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgfHwgKDAsIF9sb2Rhc2guaXNQbGFpbk9iamVjdCkocHJvcGVydGllcyk7CiAgdmFyIGlzRHluYW1pY1RlbXBsYXRlc1ZhbGlkID0gZHluYW1pY1RlbXBsYXRlcyA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoZHluYW1pY1RlbXBsYXRlcyk7IC8vIElmIHRoZSBjb25maWd1cmF0aW9uLCB0aGUgcHJvcGVydGllcyBhbmQgdGhlIGR5bmFtaWMgdGVtcGxhdGVzIGFyZSB2YWxpZAogIC8vIHdlIGNhbiBhc3N1bWUgdGhhdCB0aGUgbWFwcGluZyBpcyBkZWNsYXJlZCBhdCByb290IGxldmVsIChubyB0eXBlcykKCiAgcmV0dXJuIGlzQ29uZmlndXJhdGlvblZhbGlkICYmIGlzUHJvcGVydGllc1ZhbGlkICYmIGlzRHluYW1pY1RlbXBsYXRlc1ZhbGlkOwp9OwoKdmFyIGdldE1hcHBpbmdzRGVmaW5pdGlvbldpdGhUeXBlID0gZnVuY3Rpb24gZ2V0TWFwcGluZ3NEZWZpbml0aW9uV2l0aFR5cGUobWFwcGluZ3MpIHsKICBpZiAoaXNNYXBwaW5nRGVmaW5pdGlvbihtYXBwaW5ncykpIHsKICAgIC8vIE5vIG5lZWQgdG8gZ28gYW55IGZ1cnRoZXIKICAgIHJldHVybiBbewogICAgICBtYXBwaW5nczogbWFwcGluZ3MKICAgIH1dOwogIH0gLy8gQXQgdGhpcyBwb2ludCB0aGVyZSBtdXN0IGJlIG9uZSBvciBtb3JlIHR5cGUgbWFwcGluZ3MKCgogIHZhciB0eXBlZE1hcHBpbmdzID0gT2JqZWN0LmVudHJpZXMobWFwcGluZ3MpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBfcmVmKSB7CiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICB0eXBlID0gX3JlZjJbMF0sCiAgICAgICAgdmFsdWUgPSBfcmVmMlsxXTsKCiAgICBpZiAoaXNNYXBwaW5nRGVmaW5pdGlvbih2YWx1ZSkpIHsKICAgICAgYWNjLnB1c2goewogICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgbWFwcGluZ3M6IHZhbHVlCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBhY2M7CiAgfSwgW10pOwogIHJldHVybiB0eXBlZE1hcHBpbmdzOwp9OwoKdmFyIGRvTWFwcGluZ3NIYXZlVHlwZSA9IGZ1bmN0aW9uIGRvTWFwcGluZ3NIYXZlVHlwZSgpIHsKICB2YXIgbWFwcGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogIHJldHVybiBnZXRNYXBwaW5nc0RlZmluaXRpb25XaXRoVHlwZShtYXBwaW5ncykuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMykgewogICAgdmFyIHR5cGUgPSBfcmVmMy50eXBlOwogICAgcmV0dXJuIHR5cGUgIT09IHVuZGVmaW5lZDsKICB9KS5sZW5ndGggPiAwOwp9OwovKioKICogNS54IGluZGV4IHRlbXBsYXRlcyBjYW4gYmUgY3JlYXRlZCB3aXRoIG11bHRpcGxlIHR5cGVzLgogKiBlLmcuCiBgYGAKICBjb25zdCBtYXBwaW5ncyA9IHsKICAgICAgdHlwZTE6IHsKICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICBuYW1lMTogewogICAgICAgICAgICB0eXBlOiAna2V5d29yZCcsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgIH0sCiAgICAgIHR5cGUyOiB7CiAgICAgICAgcHJvcGVydGllczogewogICAgICAgICAgbmFtZTI6IHsKICAgICAgICAgICAgdHlwZTogJ2tleXdvcmQnLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICB9LAogICAgfTsKIGBgYAogKiBBIG1hcHBpbmdzIGNhbiBhbHNvIGJlIGRlY2xhcmVkIHVuZGVyIGFuIGV4cGxpY2l0ICJfZG9jIiBwcm9wZXJ0eS4KIGBgYAogY29uc3QgbWFwcGluZ3MgPSB7CiAgICBfZG9jOiB7CiAgICAgIF9zb3VyY2U6IHsKICAgICAgICAiZW5hYmxlZCI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICBuYW1lMTogewogICAgICAgICAgdHlwZTogJ2tleXdvcmQnLAogICAgICAgIH0sCiAgICAgIH0sCiAgICB9LAogIH07CiBgYGAKICogVGhpcyBoZWxwZXJzIHBhcnNlIHRoZSBtYXBwaW5ncyBwcm92aWRlZCBhbiByZW1vdmVzIGFueSBwb3NzaWJsZSBtYXBwaW5nICJ0eXBlIiBkZWNsYXJlZAogKgogKiBAcGFyYW0gbWFwcGluZ3MgVGhlIG1hcHBpbmdzIG9iamVjdCB0byB2YWxpZGF0ZQogKi8KCgpleHBvcnRzLmRvTWFwcGluZ3NIYXZlVHlwZSA9IGRvTWFwcGluZ3NIYXZlVHlwZTsKCnZhciBleHRyYWN0TWFwcGluZ3NEZWZpbml0aW9uID0gZnVuY3Rpb24gZXh0cmFjdE1hcHBpbmdzRGVmaW5pdGlvbigpIHsKICB2YXIgbWFwcGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogIHZhciB0eXBlZE1hcHBpbmdzID0gZ2V0TWFwcGluZ3NEZWZpbml0aW9uV2l0aFR5cGUobWFwcGluZ3MpOyAvLyBJZiB0aGVyZSBhcmUgbm8gdHlwZWQgbWFwcGluZ3MgZm91bmQgdGhpcyBtZWFucyB0aGF0IG9uZSBvZiB0aGUgdHlwZSBtdXN0IGRpZCBub3QgcGFzcwogIC8vIHRoZSAiaXNNYXBwaW5nRGVmaW5pdGlvbigpIiB2YWxpZGF0aW9uLgogIC8vIEluIHRoZW9yeSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYnV0IGxldCdzIG1ha2Ugc3VyZSB0aGUgVUkgZG9lcyBub3QgdHJ5IHRvIGxvYWQgYW4gaW52YWxpZCBtYXBwaW5nCgogIGlmICh0eXBlZE1hcHBpbmdzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIG51bGw7CiAgfSAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIG1hcHBpbmcgdHlwZSB0aGVuIHdlIGNhbiBjb25zdW1lIGl0IGFzIGlmIHRoZSB0eXBlIGRvZXNuJ3QgZXhpc3QuCgoKICBpZiAodHlwZWRNYXBwaW5ncy5sZW5ndGggPT09IDEpIHsKICAgIHJldHVybiB0eXBlZE1hcHBpbmdzWzBdOwogIH0gLy8gSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lIG1hcHBpbmcgdHlwZSwgdGhlbiB0aGUgbWFwcGluZ3Mgb2JqZWN0IGlzbid0IHVzYWJsZS4KCgogIHJldHVybiBudWxsOwp9OwoKZXhwb3J0cy5leHRyYWN0TWFwcGluZ3NEZWZpbml0aW9uID0gZXh0cmFjdE1hcHBpbmdzRGVmaW5pdGlvbjs="},null]}