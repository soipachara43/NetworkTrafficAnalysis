{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/components/shared/charts/MetricsChart/index.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/components/shared/charts/MetricsChart/index.js","mtime":1589249551659},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1ldHJpY3NDaGFydCA9IE1ldHJpY3NDaGFydDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfQ3VzdG9tUGxvdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vQ3VzdG9tUGxvdCIpKTsKCnZhciBfZm9ybWF0dGVycyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMiKTsKCnZhciBfaXNWYWxpZENvb3JkaW5hdGVWYWx1ZSA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3V0aWxzL2lzVmFsaWRDb29yZGluYXRlVmFsdWUiKTsKCnZhciBfdXNlQ2hhcnRzU3luYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2hvb2tzL3VzZUNoYXJ0c1N5bmMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7CiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9OwoKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIE1ldHJpY3NDaGFydChfcmVmKSB7CiAgdmFyIGNoYXJ0ID0gX3JlZi5jaGFydDsKICB2YXIgZm9ybWF0WVZhbHVlID0gZ2V0WVRpY2tGb3JtYXR0ZXIoY2hhcnQpOwogIHZhciBmb3JtYXRUb29sdGlwID0gZ2V0VG9vbHRpcEZvcm1hdHRlcihjaGFydCk7CiAgdmFyIHRyYW5zZm9ybWVkU2VyaWVzID0gY2hhcnQuc2VyaWVzLm1hcChmdW5jdGlvbiAoc2VyaWVzKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2VyaWVzLCB7CiAgICAgIGxlZ2VuZFZhbHVlOiBmb3JtYXRZVmFsdWUoc2VyaWVzLm92ZXJhbGxWYWx1ZSkKICAgIH0pOwogIH0pOwogIHZhciBzeW5jZWRDaGFydFByb3BzID0gKDAsIF91c2VDaGFydHNTeW5jLnVzZUNoYXJ0c1N5bmMpKCk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgc2l6ZTogInhzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBjaGFydC50aXRsZSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DdXN0b21QbG90LmRlZmF1bHQsIF9leHRlbmRzKHt9LCBzeW5jZWRDaGFydFByb3BzLCB7CiAgICBzZXJpZXM6IHRyYW5zZm9ybWVkU2VyaWVzLAogICAgdGlja0Zvcm1hdFk6IGZvcm1hdFlWYWx1ZSwKICAgIGZvcm1hdFRvb2x0aXBWYWx1ZTogZm9ybWF0VG9vbHRpcCwKICAgIHlNYXg6IGNoYXJ0LnlVbml0ID09PSAncGVyY2VudCcgPyAxIDogJ21heCcKICB9KSkpOwp9CgpmdW5jdGlvbiBnZXRZVGlja0Zvcm1hdHRlcihjaGFydCkgewogIHN3aXRjaCAoY2hhcnQueVVuaXQpIHsKICAgIGNhc2UgJ2J5dGVzJzoKICAgICAgewogICAgICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkoY2hhcnQuc2VyaWVzLmZsYXRNYXAoZnVuY3Rpb24gKHNlcmllcykgewogICAgICAgICAgcmV0dXJuIHNlcmllcy5kYXRhLm1hcChmdW5jdGlvbiAoY29vcmQpIHsKICAgICAgICAgICAgcmV0dXJuIGNvb3JkLnkgfHwgMDsKICAgICAgICAgIH0pOwogICAgICAgIH0pKSk7CiAgICAgICAgcmV0dXJuICgwLCBfZm9ybWF0dGVycy5nZXRGaXhlZEJ5dGVGb3JtYXR0ZXIpKG1heCk7CiAgICAgIH0KCiAgICBjYXNlICdwZXJjZW50JzoKICAgICAgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoeSkgewogICAgICAgICAgcmV0dXJuICgwLCBfZm9ybWF0dGVycy5hc1BlcmNlbnQpKHkgfHwgMCwgMSk7CiAgICAgICAgfTsKICAgICAgfQoKICAgIGNhc2UgJ3RpbWUnOgogICAgICB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh5KSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9mb3JtYXR0ZXJzLmFzRHVyYXRpb24pKHkpOwogICAgICAgIH07CiAgICAgIH0KCiAgICBjYXNlICdpbnRlZ2VyJzoKICAgICAgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoeSkgewogICAgICAgICAgcmV0dXJuICgwLCBfaXNWYWxpZENvb3JkaW5hdGVWYWx1ZS5pc1ZhbGlkQ29vcmRpbmF0ZVZhbHVlKSh5KSA/ICgwLCBfZm9ybWF0dGVycy5hc0ludGVnZXIpKHkpIDogeTsKICAgICAgICB9OwogICAgICB9CgogICAgZGVmYXVsdDoKICAgICAgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoeSkgewogICAgICAgICAgcmV0dXJuICgwLCBfaXNWYWxpZENvb3JkaW5hdGVWYWx1ZS5pc1ZhbGlkQ29vcmRpbmF0ZVZhbHVlKSh5KSA/ICgwLCBfZm9ybWF0dGVycy5hc0RlY2ltYWwpKHkpIDogeTsKICAgICAgICB9OwogICAgICB9CiAgfQp9CgpmdW5jdGlvbiBnZXRUb29sdGlwRm9ybWF0dGVyKF9yZWYyKSB7CiAgdmFyIHlVbml0ID0gX3JlZjIueVVuaXQ7CgogIHN3aXRjaCAoeVVuaXQpIHsKICAgIGNhc2UgJ2J5dGVzJzoKICAgICAgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYykgewogICAgICAgICAgcmV0dXJuICgwLCBfZm9ybWF0dGVycy5hc0R5bmFtaWNCeXRlcykoYy55KTsKICAgICAgICB9OwogICAgICB9CgogICAgY2FzZSAncGVyY2VudCc6CiAgICAgIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHsKICAgICAgICAgIHJldHVybiAoMCwgX2Zvcm1hdHRlcnMuYXNQZXJjZW50KShjLnkgfHwgMCwgMSk7CiAgICAgICAgfTsKICAgICAgfQoKICAgIGNhc2UgJ3RpbWUnOgogICAgICB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9mb3JtYXR0ZXJzLmFzRHVyYXRpb24pKGMueSk7CiAgICAgICAgfTsKICAgICAgfQoKICAgIGNhc2UgJ2ludGVnZXInOgogICAgICB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9pc1ZhbGlkQ29vcmRpbmF0ZVZhbHVlLmlzVmFsaWRDb29yZGluYXRlVmFsdWUpKGMueSkgPyAoMCwgX2Zvcm1hdHRlcnMuYXNJbnRlZ2VyKShjLnkpIDogYy55OwogICAgICAgIH07CiAgICAgIH0KCiAgICBkZWZhdWx0OgogICAgICB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICByZXR1cm4gKDAsIF9pc1ZhbGlkQ29vcmRpbmF0ZVZhbHVlLmlzVmFsaWRDb29yZGluYXRlVmFsdWUpKGMueSkgPyAoMCwgX2Zvcm1hdHRlcnMuYXNEZWNpbWFsKShjLnkpIDogYy55OwogICAgICAgIH07CiAgICAgIH0KICB9Cn0="},null]}