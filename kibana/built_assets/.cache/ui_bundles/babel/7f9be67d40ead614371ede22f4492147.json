{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/timeline/properties/helpers.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/timeline/properties/helpers.js","mtime":1589249553196},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk5vdGVzQnV0dG9uID0gZXhwb3J0cy5OZXdUaW1lbGluZSA9IGV4cG9ydHMuTmV3Q2FzZSA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMuRGVzY3JpcHRpb24gPSBleHBvcnRzLlN0YXJJY29uID0gZXhwb3J0cy5uZXdUaW1lbGluZVRvb2xUaXAgPSBleHBvcnRzLnN0cmVhbUxpdmVUb29sVGlwID0gZXhwb3J0cy5oaXN0b3J5VG9vbFRpcCA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3V1aWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInV1aWQiKSk7Cgp2YXIgX3N0eWxlZENvbXBvbmVudHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInN0eWxlZC1jb21wb25lbnRzIikpOwoKdmFyIF9yZWFjdFJvdXRlckRvbSA9IHJlcXVpcmUoInJlYWN0LXJvdXRlci1kb20iKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX25vdGVzID0gcmVxdWlyZSgiLi4vLi4vbm90ZXMiKTsKCnZhciBfbm90ZXNfc2l6ZSA9IHJlcXVpcmUoIi4vbm90ZXNfc2l6ZSIpOwoKdmFyIF9zdHlsZXMgPSByZXF1aXJlKCIuL3N0eWxlcyIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCnZhciBfdHlwZXMgPSByZXF1aXJlKCIuLi8uLi8uLi9wYWdlcy9ob21lL3R5cGVzIik7Cgp2YXIgX3RpbWVsaW5lID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RvcmUvdGltZWxpbmUiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKdmFyIGhpc3RvcnlUb29sVGlwID0gJ1RoZSBjaHJvbm9sb2dpY2FsIGhpc3Rvcnkgb2YgYWN0aW9ucyByZWxhdGVkIHRvIHRoaXMgdGltZWxpbmUnOwpleHBvcnRzLmhpc3RvcnlUb29sVGlwID0gaGlzdG9yeVRvb2xUaXA7CnZhciBzdHJlYW1MaXZlVG9vbFRpcCA9ICdVcGRhdGUgdGhlIFRpbWVsaW5lIGFzIG5ldyBkYXRhIGFycml2ZXMnOwpleHBvcnRzLnN0cmVhbUxpdmVUb29sVGlwID0gc3RyZWFtTGl2ZVRvb2xUaXA7CnZhciBuZXdUaW1lbGluZVRvb2xUaXAgPSAnQ3JlYXRlIGEgbmV3IHRpbWVsaW5lJzsKZXhwb3J0cy5uZXdUaW1lbGluZVRvb2xUaXAgPSBuZXdUaW1lbGluZVRvb2xUaXA7CnZhciBOb3Rlc0NvdW50QmFkZ2UgPSAoMCwgX3N0eWxlZENvbXBvbmVudHMuZGVmYXVsdCkoX2V1aS5FdWlCYWRnZSkud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJOb3Rlc0NvdW50QmFkZ2UiLAogIGNvbXBvbmVudElkOiAiYW9nMjVoLTAiCn0pKFsibWFyZ2luLWxlZnQ6NXB4OyJdKTsKTm90ZXNDb3VudEJhZGdlLmRpc3BsYXlOYW1lID0gJ05vdGVzQ291bnRCYWRnZSc7Cgp2YXIgU3Rhckljb24gPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIGlzRmF2b3JpdGUgPSBfcmVmLmlzRmF2b3JpdGUsCiAgICAgIGlkID0gX3JlZi50aW1lbGluZUlkLAogICAgICB1cGRhdGVJc0Zhdm9yaXRlID0gX3JlZi51cGRhdGVJc0Zhdm9yaXRlOwogIHJldHVybiAoLy8gVE9ETzogMSBlcnJvciBpczogVmlzaWJsZSwgbm9uLWludGVyYWN0aXZlIGVsZW1lbnRzIHdpdGggY2xpY2sgaGFuZGxlcnMgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBrZXlib2FyZCBsaXN0ZW5lcgogICAgLy8gVE9ETzogMiBlcnJvciBpczogRWxlbWVudHMgd2l0aCB0aGUgJ2J1dHRvbicgaW50ZXJhY3RpdmUgcm9sZSBtdXN0IGJlIGZvY3VzYWJsZQogICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgdGhpcyBlcnJvcgogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgIHJvbGU6ICJidXR0b24iLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgIHJldHVybiB1cGRhdGVJc0Zhdm9yaXRlKHsKICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgIGlzRmF2b3JpdGU6ICFpc0Zhdm9yaXRlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sIGlzRmF2b3JpdGUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGltZWxpbmUtZmF2b3JpdGUtZmlsbGVkLXN0YXItdG9vbC10aXAiLAogICAgICBjb250ZW50OiBpMThuLkZBVk9SSVRFCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuU3R5bGVkU3RhciwgewogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGltZWxpbmUtZmF2b3JpdGUtZmlsbGVkLXN0YXIiLAogICAgICB0eXBlOiAic3RhckZpbGxlZCIsCiAgICAgIHNpemU6ICJsIgogICAgfSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgY29udGVudDogaTE4bi5OT1RfQV9GQVZPUklURQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3R5bGVzLlN0eWxlZFN0YXIsIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLWZhdm9yaXRlLWVtcHR5LXN0YXIiLAogICAgICB0eXBlOiAic3RhckVtcHR5IiwKICAgICAgc2l6ZTogImwiCiAgICB9KSkpCiAgKTsKfSk7CgpleHBvcnRzLlN0YXJJY29uID0gU3Rhckljb247ClN0YXJJY29uLmRpc3BsYXlOYW1lID0gJ1N0YXJJY29uJzsKCnZhciBEZXNjcmlwdGlvbiA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYyKSB7CiAgdmFyIGRlc2NyaXB0aW9uID0gX3JlZjIuZGVzY3JpcHRpb24sCiAgICAgIHRpbWVsaW5lSWQgPSBfcmVmMi50aW1lbGluZUlkLAogICAgICB1cGRhdGVEZXNjcmlwdGlvbiA9IF9yZWYyLnVwZGF0ZURlc2NyaXB0aW9uOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLWRlc2NyaXB0aW9uLXRvb2wtdGlwIiwKICAgIGNvbnRlbnQ6IGkxOG4uREVTQ1JJUFRJT05fVE9PTF9USVAKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuRGVzY3JpcHRpb25Db250YWluZXIsIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJkZXNjcmlwdGlvbi1jb250YWluZXIiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgImFyaWEtbGFiZWwiOiBpMThuLlRJTUVMSU5FX0RFU0NSSVBUSU9OLAogICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLWRlc2NyaXB0aW9uIiwKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIHJldHVybiB1cGRhdGVEZXNjcmlwdGlvbih7CiAgICAgICAgaWQ6IHRpbWVsaW5lSWQsCiAgICAgICAgZGVzY3JpcHRpb246IGUudGFyZ2V0LnZhbHVlCiAgICAgIH0pOwogICAgfSwKICAgIHBsYWNlaG9sZGVyOiBpMThuLkRFU0NSSVBUSU9OLAogICAgc3BlbGxDaGVjazogdHJ1ZSwKICAgIHZhbHVlOiBkZXNjcmlwdGlvbgogIH0pKSk7Cn0pOwoKZXhwb3J0cy5EZXNjcmlwdGlvbiA9IERlc2NyaXB0aW9uOwpEZXNjcmlwdGlvbi5kaXNwbGF5TmFtZSA9ICdEZXNjcmlwdGlvbic7Cgp2YXIgTmFtZSA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYzKSB7CiAgdmFyIHRpbWVsaW5lSWQgPSBfcmVmMy50aW1lbGluZUlkLAogICAgICB0aXRsZSA9IF9yZWYzLnRpdGxlLAogICAgICB1cGRhdGVUaXRsZSA9IF9yZWYzLnVwZGF0ZVRpdGxlOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLXRpdGxlLXRvb2wtdGlwIiwKICAgIGNvbnRlbnQ6IGkxOG4uVElUTEUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuTmFtZUZpZWxkLCB7CiAgICAiYXJpYS1sYWJlbCI6IGkxOG4uVElNRUxJTkVfVElUTEUsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGltZWxpbmUtdGl0bGUiLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgcmV0dXJuIHVwZGF0ZVRpdGxlKHsKICAgICAgICBpZDogdGltZWxpbmVJZCwKICAgICAgICB0aXRsZTogZS50YXJnZXQudmFsdWUKICAgICAgfSk7CiAgICB9LAogICAgcGxhY2Vob2xkZXI6IGkxOG4uVU5USVRMRURfVElNRUxJTkUsCiAgICBzcGVsbENoZWNrOiB0cnVlLAogICAgdmFsdWU6IHRpdGxlCiAgfSkpOwp9KTsKCmV4cG9ydHMuTmFtZSA9IE5hbWU7Ck5hbWUuZGlzcGxheU5hbWUgPSAnTmFtZSc7Cgp2YXIgTmV3Q2FzZSA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWY0KSB7CiAgdmFyIG9uQ2xvc2VQb3BvdmVyID0gX3JlZjQub25DbG9zZVBvcG92ZXIsCiAgICAgIHRpbWVsaW5lSWQgPSBfcmVmNC50aW1lbGluZUlkLAogICAgICB0aW1lbGluZVRpdGxlID0gX3JlZjQudGltZWxpbmVUaXRsZTsKICB2YXIgaGlzdG9yeSA9ICgwLCBfcmVhY3RSb3V0ZXJEb20udXNlSGlzdG9yeSkoKTsKCiAgdmFyIF91c2VTZWxlY3RvciA9ICgwLCBfcmVhY3RSZWR1eC51c2VTZWxlY3RvcikoZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gX3RpbWVsaW5lLnRpbWVsaW5lU2VsZWN0b3JzLnNlbGVjdFRpbWVsaW5lKHN0YXRlLCB0aW1lbGluZUlkKTsKICB9KSwKICAgICAgc2F2ZWRPYmplY3RJZCA9IF91c2VTZWxlY3Rvci5zYXZlZE9iamVjdElkOwoKICB2YXIgaGFuZGxlQ2xpY2sgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBvbkNsb3NlUG9wb3ZlcigpOwogICAgaGlzdG9yeS5wdXNoKHsKICAgICAgcGF0aG5hbWU6ICIvIi5jb25jYXQoX3R5cGVzLlNpZW1QYWdlTmFtZS5jYXNlLCAiL2NyZWF0ZSIpLAogICAgICBzdGF0ZTogewogICAgICAgIGluc2VydFRpbWVsaW5lOiB7CiAgICAgICAgICB0aW1lbGluZUlkOiB0aW1lbGluZUlkLAogICAgICAgICAgdGltZWxpbmVTYXZlZE9iamVjdElkOiBzYXZlZE9iamVjdElkLAogICAgICAgICAgdGltZWxpbmVUaXRsZTogdGltZWxpbmVUaXRsZS5sZW5ndGggPiAwID8gdGltZWxpbmVUaXRsZSA6IGkxOG4uVU5USVRMRURfVElNRUxJTkUKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0sIFtvbkNsb3NlUG9wb3ZlciwgaGlzdG9yeSwgdGltZWxpbmVJZCwgdGltZWxpbmVUaXRsZV0pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhdHRhY2gtdGltZWxpbmUtY2FzZSIsCiAgICBjb2xvcjogInRleHQiLAogICAgaWNvblNpZGU6ICJsZWZ0IiwKICAgIGljb25UeXBlOiAicGFwZXJDbGlwIiwKICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrCiAgfSwgaTE4bi5BVFRBQ0hfVElNRUxJTkVfVE9fTkVXX0NBU0UpOwp9KTsKCmV4cG9ydHMuTmV3Q2FzZSA9IE5ld0Nhc2U7Ck5ld0Nhc2UuZGlzcGxheU5hbWUgPSAnTmV3Q2FzZSc7Cgp2YXIgTmV3VGltZWxpbmUgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmNSkgewogIHZhciBjcmVhdGVUaW1lbGluZSA9IF9yZWY1LmNyZWF0ZVRpbWVsaW5lLAogICAgICBvbkNsb3NlUG9wb3ZlciA9IF9yZWY1Lm9uQ2xvc2VQb3BvdmVyLAogICAgICB0aW1lbGluZUlkID0gX3JlZjUudGltZWxpbmVJZDsKICB2YXIgaGFuZGxlQ2xpY2sgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBjcmVhdGVUaW1lbGluZSh7CiAgICAgIGlkOiB0aW1lbGluZUlkLAogICAgICBzaG93OiB0cnVlCiAgICB9KTsKICAgIG9uQ2xvc2VQb3BvdmVyKCk7CiAgfSwgW2NyZWF0ZVRpbWVsaW5lLCB0aW1lbGluZUlkLCBvbkNsb3NlUG9wb3Zlcl0pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ0aW1lbGluZS1uZXciLAogICAgY29sb3I6ICJ0ZXh0IiwKICAgIGljb25TaWRlOiAibGVmdCIsCiAgICBpY29uVHlwZTogInBsdXNJbkNpcmNsZSIsCiAgICBvbkNsaWNrOiBoYW5kbGVDbGljawogIH0sIGkxOG4uTkVXX1RJTUVMSU5FKTsKfSk7CgpleHBvcnRzLk5ld1RpbWVsaW5lID0gTmV3VGltZWxpbmU7Ck5ld1RpbWVsaW5lLmRpc3BsYXlOYW1lID0gJ05ld1RpbWVsaW5lJzsKCnZhciBnZXROZXdOb3RlSWQgPSBmdW5jdGlvbiBnZXROZXdOb3RlSWQoKSB7CiAgcmV0dXJuIF91dWlkLmRlZmF1bHQudjQoKTsKfTsKCnZhciBMYXJnZU5vdGVzQnV0dG9uID0gX3JlYWN0LmRlZmF1bHQubWVtbyhmdW5jdGlvbiAoX3JlZjYpIHsKICB2YXIgbm90ZUlkcyA9IF9yZWY2Lm5vdGVJZHMsCiAgICAgIHRleHQgPSBfcmVmNi50ZXh0LAogICAgICB0b2dnbGVTaG93Tm90ZXMgPSBfcmVmNi50b2dnbGVTaG93Tm90ZXM7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ0aW1lbGluZS1ub3Rlcy1idXR0b24tbGFyZ2UiLAogICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgcmV0dXJuIHRvZ2dsZVNob3dOb3RlcygpOwogICAgfSwKICAgIHNpemU6ICJtIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgZ3V0dGVyU2l6ZTogIm5vbmUiLAogICAganVzdGlmeUNvbnRlbnQ6ICJjZW50ZXIiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJY29uLCB7CiAgICBjb2xvcjogInN1YmR1ZWQiLAogICAgc2l6ZTogIm0iLAogICAgdHlwZTogImVkaXRvckNvbW1lbnQiCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgdGV4dCAmJiB0ZXh0Lmxlbmd0aCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlcy5MYWJlbFRleHQsIG51bGwsIHRleHQpIDogbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogZmFsc2UKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5vdGVzQ291bnRCYWRnZSwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLW5vdGVzLWNvdW50IiwKICAgIGNvbG9yOiAiaG9sbG93IgogIH0sIG5vdGVJZHMubGVuZ3RoKSkpKTsKfSk7CgpMYXJnZU5vdGVzQnV0dG9uLmRpc3BsYXlOYW1lID0gJ0xhcmdlTm90ZXNCdXR0b24nOwoKdmFyIFNtYWxsTm90ZXNCdXR0b24gPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmNykgewogIHZhciBub3RlSWRzID0gX3JlZjcubm90ZUlkcywKICAgICAgdG9nZ2xlU2hvd05vdGVzID0gX3JlZjcudG9nZ2xlU2hvd05vdGVzOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgImFyaWEtbGFiZWwiOiBpMThuLk5PVEVTLAogICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVsaW5lLW5vdGVzLWJ1dHRvbi1zbWFsbCIsCiAgICBpY29uVHlwZTogImVkaXRvckNvbW1lbnQiLAogICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgcmV0dXJuIHRvZ2dsZVNob3dOb3RlcygpOwogICAgfQogIH0pOwp9KTsKClNtYWxsTm90ZXNCdXR0b24uZGlzcGxheU5hbWUgPSAnU21hbGxOb3Rlc0J1dHRvbic7Ci8qKgogKiBUaGUgaW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgdGhlIGBOb3Rlc0J1dHRvbmAKICovCgp2YXIgTm90ZXNCdXR0b25Db21wb25lbnQgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmOCkgewogIHZhciBfcmVmOCRhbmltYXRlID0gX3JlZjguYW5pbWF0ZSwKICAgICAgYW5pbWF0ZSA9IF9yZWY4JGFuaW1hdGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmOCRhbmltYXRlLAogICAgICBhc3NvY2lhdGVOb3RlID0gX3JlZjguYXNzb2NpYXRlTm90ZSwKICAgICAgZ2V0Tm90ZXNCeUlkcyA9IF9yZWY4LmdldE5vdGVzQnlJZHMsCiAgICAgIG5vdGVJZHMgPSBfcmVmOC5ub3RlSWRzLAogICAgICBzaG93Tm90ZXMgPSBfcmVmOC5zaG93Tm90ZXMsCiAgICAgIHNpemUgPSBfcmVmOC5zaXplLAogICAgICB0b2dnbGVTaG93Tm90ZXMgPSBfcmVmOC50b2dnbGVTaG93Tm90ZXMsCiAgICAgIHRleHQgPSBfcmVmOC50ZXh0LAogICAgICB1cGRhdGVOb3RlID0gX3JlZjgudXBkYXRlTm90ZTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3R5bGVzLkJ1dHRvbkNvbnRhaW5lciwgewogICAgYW5pbWF0ZTogYW5pbWF0ZSwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ0aW1lbGluZS1ub3Rlcy1idXR0b24tY29udGFpbmVyIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIHNpemUgPT09ICdsJyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGFyZ2VOb3Rlc0J1dHRvbiwgewogICAgbm90ZUlkczogbm90ZUlkcywKICAgIHRleHQ6IHRleHQsCiAgICB0b2dnbGVTaG93Tm90ZXM6IHRvZ2dsZVNob3dOb3RlcwogIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTbWFsbE5vdGVzQnV0dG9uLCB7CiAgICBub3RlSWRzOiBub3RlSWRzLAogICAgdG9nZ2xlU2hvd05vdGVzOiB0b2dnbGVTaG93Tm90ZXMKICB9KSwgc2l6ZSA9PT0gJ2wnICYmIHNob3dOb3RlcyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlPdmVybGF5TWFzaywgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aU1vZGFsLCB7CiAgICBtYXhXaWR0aDogX25vdGVzX3NpemUuTk9URVNfUEFORUxfV0lEVEgsCiAgICBvbkNsb3NlOiB0b2dnbGVTaG93Tm90ZXMKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ub3Rlcy5Ob3RlcywgewogICAgYXNzb2NpYXRlTm90ZTogYXNzb2NpYXRlTm90ZSwKICAgIGdldE5vdGVzQnlJZHM6IGdldE5vdGVzQnlJZHMsCiAgICBub3RlSWRzOiBub3RlSWRzLAogICAgZ2V0TmV3Tm90ZUlkOiBnZXROZXdOb3RlSWQsCiAgICB1cGRhdGVOb3RlOiB1cGRhdGVOb3RlCiAgfSkpKSA6IG51bGwpKTsKfSk7CgpOb3Rlc0J1dHRvbkNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdOb3Rlc0J1dHRvbkNvbXBvbmVudCc7Cgp2YXIgTm90ZXNCdXR0b24gPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmOSkgewogIHZhciBfcmVmOSRhbmltYXRlID0gX3JlZjkuYW5pbWF0ZSwKICAgICAgYW5pbWF0ZSA9IF9yZWY5JGFuaW1hdGUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmOSRhbmltYXRlLAogICAgICBhc3NvY2lhdGVOb3RlID0gX3JlZjkuYXNzb2NpYXRlTm90ZSwKICAgICAgZ2V0Tm90ZXNCeUlkcyA9IF9yZWY5LmdldE5vdGVzQnlJZHMsCiAgICAgIG5vdGVJZHMgPSBfcmVmOS5ub3RlSWRzLAogICAgICBzaG93Tm90ZXMgPSBfcmVmOS5zaG93Tm90ZXMsCiAgICAgIHNpemUgPSBfcmVmOS5zaXplLAogICAgICB0b2dnbGVTaG93Tm90ZXMgPSBfcmVmOS50b2dnbGVTaG93Tm90ZXMsCiAgICAgIHRvb2xUaXAgPSBfcmVmOS50b29sVGlwLAogICAgICB0ZXh0ID0gX3JlZjkudGV4dCwKICAgICAgdXBkYXRlTm90ZSA9IF9yZWY5LnVwZGF0ZU5vdGU7CiAgcmV0dXJuIHNob3dOb3RlcyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTm90ZXNCdXR0b25Db21wb25lbnQsIHsKICAgIGFuaW1hdGU6IGFuaW1hdGUsCiAgICBhc3NvY2lhdGVOb3RlOiBhc3NvY2lhdGVOb3RlLAogICAgZ2V0Tm90ZXNCeUlkczogZ2V0Tm90ZXNCeUlkcywKICAgIG5vdGVJZHM6IG5vdGVJZHMsCiAgICBzaG93Tm90ZXM6IHNob3dOb3RlcywKICAgIHNpemU6IHNpemUsCiAgICB0b2dnbGVTaG93Tm90ZXM6IHRvZ2dsZVNob3dOb3RlcywKICAgIHRleHQ6IHRleHQsCiAgICB1cGRhdGVOb3RlOiB1cGRhdGVOb3RlCiAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgY29udGVudDogdG9vbFRpcCB8fCAnJywKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ0aW1lbGluZS1ub3Rlcy10b29sLXRpcCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE5vdGVzQnV0dG9uQ29tcG9uZW50LCB7CiAgICBhbmltYXRlOiBhbmltYXRlLAogICAgYXNzb2NpYXRlTm90ZTogYXNzb2NpYXRlTm90ZSwKICAgIGdldE5vdGVzQnlJZHM6IGdldE5vdGVzQnlJZHMsCiAgICBub3RlSWRzOiBub3RlSWRzLAogICAgc2hvd05vdGVzOiBzaG93Tm90ZXMsCiAgICBzaXplOiBzaXplLAogICAgdG9nZ2xlU2hvd05vdGVzOiB0b2dnbGVTaG93Tm90ZXMsCiAgICB0ZXh0OiB0ZXh0LAogICAgdXBkYXRlTm90ZTogdXBkYXRlTm90ZQogIH0pKTsKfSk7CgpleHBvcnRzLk5vdGVzQnV0dG9uID0gTm90ZXNCdXR0b247Ck5vdGVzQnV0dG9uLmRpc3BsYXlOYW1lID0gJ05vdGVzQnV0dG9uJzs="},null]}