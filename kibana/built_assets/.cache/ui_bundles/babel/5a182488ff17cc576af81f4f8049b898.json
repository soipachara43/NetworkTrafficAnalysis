{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/editor_frame_service/format_column.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/editor_frame_service/format_column.js","mtime":1589249552292},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmZvcm1hdENvbHVtbiA9IHZvaWQgMDsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgc3VwcG9ydGVkRm9ybWF0cyA9IHsKICBudW1iZXI6IHsKICAgIGRlY2ltYWxzVG9QYXR0ZXJuOiBmdW5jdGlvbiBkZWNpbWFsc1RvUGF0dGVybigpIHsKICAgICAgdmFyIGRlY2ltYWxzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAyOwoKICAgICAgaWYgKGRlY2ltYWxzID09PSAwKSB7CiAgICAgICAgcmV0dXJuICIwLDAiOwogICAgICB9CgogICAgICByZXR1cm4gIjAsMC4iLmNvbmNhdCgnMCcucmVwZWF0KGRlY2ltYWxzKSk7CiAgICB9CiAgfSwKICBwZXJjZW50OiB7CiAgICBkZWNpbWFsc1RvUGF0dGVybjogZnVuY3Rpb24gZGVjaW1hbHNUb1BhdHRlcm4oKSB7CiAgICAgIHZhciBkZWNpbWFscyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMjsKCiAgICAgIGlmIChkZWNpbWFscyA9PT0gMCkgewogICAgICAgIHJldHVybiAiMCwwJSI7CiAgICAgIH0KCiAgICAgIHJldHVybiAiMCwwLiIuY29uY2F0KCcwJy5yZXBlYXQoZGVjaW1hbHMpLCAiJSIpOwogICAgfQogIH0sCiAgYnl0ZXM6IHsKICAgIGRlY2ltYWxzVG9QYXR0ZXJuOiBmdW5jdGlvbiBkZWNpbWFsc1RvUGF0dGVybigpIHsKICAgICAgdmFyIGRlY2ltYWxzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAyOwoKICAgICAgaWYgKGRlY2ltYWxzID09PSAwKSB7CiAgICAgICAgcmV0dXJuICIwLDBiIjsKICAgICAgfQoKICAgICAgcmV0dXJuICIwLDAuIi5jb25jYXQoJzAnLnJlcGVhdChkZWNpbWFscyksICJiIik7CiAgICB9CiAgfQp9Owp2YXIgZm9ybWF0Q29sdW1uID0gewogIG5hbWU6ICdsZW5zX2Zvcm1hdF9jb2x1bW4nLAogIHR5cGU6ICdraWJhbmFfZGF0YXRhYmxlJywKICBoZWxwOiAnJywKICBhcmdzOiB7CiAgICBmb3JtYXQ6IHsKICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sCiAgICAgIGhlbHA6ICcnLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGNvbHVtbklkOiB7CiAgICAgIHR5cGVzOiBbJ3N0cmluZyddLAogICAgICBoZWxwOiAnJywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBkZWNpbWFsczogewogICAgICB0eXBlczogWydudW1iZXInXSwKICAgICAgaGVscDogJycKICAgIH0KICB9LAogIGlucHV0VHlwZXM6IFsna2liYW5hX2RhdGF0YWJsZSddLAogIGZuOiBmdW5jdGlvbiBmbihpbnB1dCwgX3JlZikgewogICAgdmFyIGZvcm1hdCA9IF9yZWYuZm9ybWF0LAogICAgICAgIGNvbHVtbklkID0gX3JlZi5jb2x1bW5JZCwKICAgICAgICBkZWNpbWFscyA9IF9yZWYuZGVjaW1hbHM7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgaW5wdXQsIHsKICAgICAgY29sdW1uczogaW5wdXQuY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbCkgewogICAgICAgIGlmIChjb2wuaWQgPT09IGNvbHVtbklkKSB7CiAgICAgICAgICBpZiAoc3VwcG9ydGVkRm9ybWF0c1tmb3JtYXRdKSB7CiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBjb2wsIHsKICAgICAgICAgICAgICBmb3JtYXRIaW50OiB7CiAgICAgICAgICAgICAgICBpZDogZm9ybWF0LAogICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgIHBhdHRlcm46IHN1cHBvcnRlZEZvcm1hdHNbZm9ybWF0XS5kZWNpbWFsc1RvUGF0dGVybihkZWNpbWFscykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGNvbCwgewogICAgICAgICAgICAgIGZvcm1hdEhpbnQ6IHsKICAgICAgICAgICAgICAgIGlkOiBmb3JtYXQsCiAgICAgICAgICAgICAgICBwYXJhbXM6IHt9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBjb2w7CiAgICAgIH0pCiAgICB9KTsKICB9Cn07CmV4cG9ydHMuZm9ybWF0Q29sdW1uID0gZm9ybWF0Q29sdW1uOw=="},null]}