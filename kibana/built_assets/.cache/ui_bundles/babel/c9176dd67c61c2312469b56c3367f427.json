{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/metric_visualization/metric_visualization.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/metric_visualization/metric_visualization.js","mtime":1589249552324},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLm1ldHJpY1Zpc3VhbGl6YXRpb24gPSB2b2lkIDA7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbWV0cmljX3N1Z2dlc3Rpb25zID0gcmVxdWlyZSgiLi9tZXRyaWNfc3VnZ2VzdGlvbnMiKTsKCnZhciBfY2hhcnRfbWV0cmljID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuLi9hc3NldHMvY2hhcnRfbWV0cmljLnN2ZyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgdG9FeHByZXNzaW9uID0gZnVuY3Rpb24gdG9FeHByZXNzaW9uKHN0YXRlLCBmcmFtZSkgewogIHZhciBtb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnZnVsbCc7CgogIGlmICghc3RhdGUuYWNjZXNzb3IpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgdmFyIF9PYmplY3QkdmFsdWVzID0gT2JqZWN0LnZhbHVlcyhmcmFtZS5kYXRhc291cmNlTGF5ZXJzKSwKICAgICAgX09iamVjdCR2YWx1ZXMyID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCR2YWx1ZXMsIDEpLAogICAgICBkYXRhc291cmNlID0gX09iamVjdCR2YWx1ZXMyWzBdOwoKICB2YXIgb3BlcmF0aW9uID0gZGF0YXNvdXJjZSAmJiBkYXRhc291cmNlLmdldE9wZXJhdGlvbkZvckNvbHVtbklkKHN0YXRlLmFjY2Vzc29yKTsKICByZXR1cm4gewogICAgdHlwZTogJ2V4cHJlc3Npb24nLAogICAgY2hhaW46IFt7CiAgICAgIHR5cGU6ICdmdW5jdGlvbicsCiAgICAgIGZ1bmN0aW9uOiAnbGVuc19tZXRyaWNfY2hhcnQnLAogICAgICBhcmd1bWVudHM6IHsKICAgICAgICB0aXRsZTogW29wZXJhdGlvbiAmJiBvcGVyYXRpb24ubGFiZWwgfHwgJyddLAogICAgICAgIGFjY2Vzc29yOiBbc3RhdGUuYWNjZXNzb3JdLAogICAgICAgIG1vZGU6IFttb2RlXQogICAgICB9CiAgICB9XQogIH07Cn07Cgp2YXIgbWV0cmljVmlzdWFsaXphdGlvbiA9IHsKICBpZDogJ2xuc01ldHJpYycsCiAgdmlzdWFsaXphdGlvblR5cGVzOiBbewogICAgaWQ6ICdsbnNNZXRyaWMnLAogICAgaWNvbjogJ3Zpc01ldHJpYycsCiAgICBsYXJnZUljb246IF9jaGFydF9tZXRyaWMuZGVmYXVsdCwKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5tZXRyaWMubGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWV0cmljJwogICAgfSkKICB9XSwKICBjbGVhckxheWVyOiBmdW5jdGlvbiBjbGVhckxheWVyKHN0YXRlKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgYWNjZXNzb3I6IHVuZGVmaW5lZAogICAgfSk7CiAgfSwKICBnZXRMYXllcklkczogZnVuY3Rpb24gZ2V0TGF5ZXJJZHMoc3RhdGUpIHsKICAgIHJldHVybiBbc3RhdGUubGF5ZXJJZF07CiAgfSwKICBnZXREZXNjcmlwdGlvbjogZnVuY3Rpb24gZ2V0RGVzY3JpcHRpb24oKSB7CiAgICByZXR1cm4gewogICAgICBpY29uOiBfY2hhcnRfbWV0cmljLmRlZmF1bHQsCiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5tZXRyaWMubGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNZXRyaWMnCiAgICAgIH0pCiAgICB9OwogIH0sCiAgZ2V0U3VnZ2VzdGlvbnM6IF9tZXRyaWNfc3VnZ2VzdGlvbnMuZ2V0U3VnZ2VzdGlvbnMsCiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShmcmFtZSwgc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZSB8fCB7CiAgICAgIGxheWVySWQ6IGZyYW1lLmFkZE5ld0xheWVyKCksCiAgICAgIGFjY2Vzc29yOiB1bmRlZmluZWQKICAgIH07CiAgfSwKICBnZXRQZXJzaXN0YWJsZVN0YXRlOiBmdW5jdGlvbiBnZXRQZXJzaXN0YWJsZVN0YXRlKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGU7CiAgfSwKICBnZXRDb25maWd1cmF0aW9uOiBmdW5jdGlvbiBnZXRDb25maWd1cmF0aW9uKHByb3BzKSB7CiAgICByZXR1cm4gewogICAgICBncm91cHM6IFt7CiAgICAgICAgZ3JvdXBJZDogJ21ldHJpYycsCiAgICAgICAgZ3JvdXBMYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMubWV0cmljLmxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNZXRyaWMnCiAgICAgICAgfSksCiAgICAgICAgbGF5ZXJJZDogcHJvcHMuc3RhdGUubGF5ZXJJZCwKICAgICAgICBhY2Nlc3NvcnM6IHByb3BzLnN0YXRlLmFjY2Vzc29yID8gW3Byb3BzLnN0YXRlLmFjY2Vzc29yXSA6IFtdLAogICAgICAgIHN1cHBvcnRzTW9yZUNvbHVtbnM6ICFwcm9wcy5zdGF0ZS5hY2Nlc3NvciwKICAgICAgICBmaWx0ZXJPcGVyYXRpb25zOiBmdW5jdGlvbiBmaWx0ZXJPcGVyYXRpb25zKG9wKSB7CiAgICAgICAgICByZXR1cm4gIW9wLmlzQnVja2V0ZWQgJiYgb3AuZGF0YVR5cGUgPT09ICdudW1iZXInOwogICAgICAgIH0KICAgICAgfV0KICAgIH07CiAgfSwKICB0b0V4cHJlc3Npb246IHRvRXhwcmVzc2lvbiwKICB0b1ByZXZpZXdFeHByZXNzaW9uOiBmdW5jdGlvbiB0b1ByZXZpZXdFeHByZXNzaW9uKHN0YXRlLCBmcmFtZSkgewogICAgcmV0dXJuIHRvRXhwcmVzc2lvbihzdGF0ZSwgZnJhbWUsICdyZWR1Y2VkJyk7CiAgfSwKICBzZXREaW1lbnNpb246IGZ1bmN0aW9uIHNldERpbWVuc2lvbihfcmVmKSB7CiAgICB2YXIgcHJldlN0YXRlID0gX3JlZi5wcmV2U3RhdGUsCiAgICAgICAgY29sdW1uSWQgPSBfcmVmLmNvbHVtbklkOwogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHByZXZTdGF0ZSwgewogICAgICBhY2Nlc3NvcjogY29sdW1uSWQKICAgIH0pOwogIH0sCiAgcmVtb3ZlRGltZW5zaW9uOiBmdW5jdGlvbiByZW1vdmVEaW1lbnNpb24oX3JlZjIpIHsKICAgIHZhciBwcmV2U3RhdGUgPSBfcmVmMi5wcmV2U3RhdGU7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcHJldlN0YXRlLCB7CiAgICAgIGFjY2Vzc29yOiB1bmRlZmluZWQKICAgIH0pOwogIH0KfTsKZXhwb3J0cy5tZXRyaWNWaXN1YWxpemF0aW9uID0gbWV0cmljVmlzdWFsaXphdGlvbjs="},null]}