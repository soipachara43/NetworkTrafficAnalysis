{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/setup_mode/tooltip.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/setup_mode/tooltip.js","mtime":1589249552584},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNldHVwTW9kZVRvb2x0aXAgPSBTZXR1cE1vZGVUb29sdGlwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9mb3JtYXR0aW5nID0gcmVxdWlyZSgiLi9mb3JtYXR0aW5nIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwpmdW5jdGlvbiBTZXR1cE1vZGVUb29sdGlwKF9yZWYpIHsKICB2YXIgc2V0dXBNb2RlRGF0YSA9IF9yZWYuc2V0dXBNb2RlRGF0YSwKICAgICAgYmFkZ2VDbGlja0FjdGlvbiA9IF9yZWYuYmFkZ2VDbGlja0FjdGlvbiwKICAgICAgcHJvZHVjdE5hbWUgPSBfcmVmLnByb2R1Y3ROYW1lOwoKICBpZiAoIXNldHVwTW9kZURhdGEpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgdmFyIHRvdGFsVW5pcXVlSW5zdGFuY2VDb3VudCA9IHNldHVwTW9kZURhdGEudG90YWxVbmlxdWVJbnN0YW5jZUNvdW50LAogICAgICB0b3RhbFVuaXF1ZUZ1bGx5TWlncmF0ZWRDb3VudCA9IHNldHVwTW9kZURhdGEudG90YWxVbmlxdWVGdWxseU1pZ3JhdGVkQ291bnQsCiAgICAgIHRvdGFsVW5pcXVlUGFydGlhbGx5TWlncmF0ZWRDb3VudCA9IHNldHVwTW9kZURhdGEudG90YWxVbmlxdWVQYXJ0aWFsbHlNaWdyYXRlZENvdW50OwogIHZhciBhbGxNb25pdG9yZWRCeU1ldHJpY2JlYXQgPSB0b3RhbFVuaXF1ZUluc3RhbmNlQ291bnQgPiAwICYmICh0b3RhbFVuaXF1ZUZ1bGx5TWlncmF0ZWRDb3VudCA9PT0gdG90YWxVbmlxdWVJbnN0YW5jZUNvdW50IHx8IHRvdGFsVW5pcXVlUGFydGlhbGx5TWlncmF0ZWRDb3VudCA9PT0gdG90YWxVbmlxdWVJbnN0YW5jZUNvdW50KTsKICB2YXIgaW50ZXJuYWxDb2xsZWN0aW9uT24gPSB0b3RhbFVuaXF1ZVBhcnRpYWxseU1pZ3JhdGVkQ291bnQgPiAwOwogIHZhciBtaWdodEV4aXN0ID0gKDAsIF9sb2Rhc2guZ2V0KShzZXR1cE1vZGVEYXRhLCAnZGV0ZWN0ZWQubWlnaHRFeGlzdCcpIHx8ICgwLCBfbG9kYXNoLmdldCkoc2V0dXBNb2RlRGF0YSwgJ2RldGVjdGVkLmRvZXNFeGlzdCcpOwogIHZhciB0b29sdGlwID0gbnVsbDsKCiAgaWYgKHRvdGFsVW5pcXVlSW5zdGFuY2VDb3VudCA9PT0gMCkgewogICAgaWYgKG1pZ2h0RXhpc3QpIHsKICAgICAgdmFyIGRldGVjdGVkVGV4dCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS50b29sdGlwLmRldGVjdGVkJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTm8gbW9uaXRvcmluZycKICAgICAgfSk7CgogICAgICB0b29sdGlwID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgICAgY29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3Jpbmcuc2V0dXBNb2RlLnRvb2x0aXAubWlnaHRFeGlzdCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiV2UgZGV0ZWN0ZWQgdXNhZ2Ugb2YgdGhpcyBwcm9kdWN0LiBDbGljayB0byBzdGFydCBtb25pdG9yaW5nLiIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQmFkZ2UsIHsKICAgICAgICBjb2xvcjogIndhcm5pbmciLAogICAgICAgIGljb25UeXBlOiAiZmxhZyIsCiAgICAgICAgb25DbGljazogYmFkZ2VDbGlja0FjdGlvbiwKICAgICAgICBvbkNsaWNrQXJpYUxhYmVsOiBkZXRlY3RlZFRleHQKICAgICAgfSwgZGV0ZWN0ZWRUZXh0KSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgbm9Nb25pdG9yaW5nVGV4dCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS50b29sdGlwLm5vVXNhZ2UnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdObyB1c2FnZScKICAgICAgfSk7CgogICAgICB0b29sdGlwID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgICAgY29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3Jpbmcuc2V0dXBNb2RlLnRvb2x0aXAubm9Vc2FnZURldGVjdGVkJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJXZSBkaWQgbm90IGRldGVjdCBhbnkgdXNhZ2UuIENsaWNrIHRvIHZpZXcge2lkZW50aWZpZXJ9LiIsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgaWRlbnRpZmllcjogKDAsIF9mb3JtYXR0aW5nLmdldElkZW50aWZpZXIpKHByb2R1Y3ROYW1lLCB0cnVlKQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYWRnZSwgewogICAgICAgIGNvbG9yOiAiaG9sbG93IiwKICAgICAgICBpY29uVHlwZTogImZsYWciLAogICAgICAgIG9uQ2xpY2s6IGJhZGdlQ2xpY2tBY3Rpb24sCiAgICAgICAgb25DbGlja0FyaWFMYWJlbDogbm9Nb25pdG9yaW5nVGV4dAogICAgICB9LCBub01vbml0b3JpbmdUZXh0KSk7CiAgICB9CiAgfSBlbHNlIGlmICghYWxsTW9uaXRvcmVkQnlNZXRyaWNiZWF0KSB7CiAgICB2YXIgaW50ZXJuYWxDb2xsZWN0aW9uID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcuZXVpVGFibGUuaXNJbnRlcm5hbENvbGxlY3RvckxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGYgbW9uaXRvcmluZycKICAgIH0pOwoKICAgIHRvb2x0aXAgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgIGNvbnRlbnQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS50b29sdGlwLm9uZUludGVybmFsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQXQgbGVhc3Qgb25lIHtpZGVudGlmaWVyfSBpc25cdTIwMTl0IG1vbml0b3JlZCB1c2luZyBNZXRyaWNiZWF0LiBDbGljayB0byB2aWV3IHN0YXR1cy4iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgaWRlbnRpZmllcjogKDAsIF9mb3JtYXR0aW5nLmdldElkZW50aWZpZXIpKHByb2R1Y3ROYW1lKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYWRnZSwgewogICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgIGljb25UeXBlOiAiZmxhZyIsCiAgICAgIG9uQ2xpY2s6IGJhZGdlQ2xpY2tBY3Rpb24sCiAgICAgIG9uQ2xpY2tBcmlhTGFiZWw6IGludGVybmFsQ29sbGVjdGlvbgogICAgfSwgaW50ZXJuYWxDb2xsZWN0aW9uKSk7CiAgfSBlbHNlIGlmIChpbnRlcm5hbENvbGxlY3Rpb25PbikgewogICAgdmFyIGludGVybmFsQW5kTUIgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5ldWlUYWJsZS5pc1BhcnRpYWxseU1pZ3JhdGVkTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VsZiBtb25pdG9yaW5nIGlzIG9uJwogICAgfSk7CgogICAgdG9vbHRpcCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAgIHBvc2l0aW9uOiAidG9wIiwKICAgICAgY29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3Jpbmcuc2V0dXBNb2RlLnRvb2x0aXAuZGlzYWJsZUludGVybmFsJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTWV0cmljYmVhdCBpcyBtb25pdG9yaW5nIGFsbCB7aWRlbnRpZmllclBsdXJhbH0uIENsaWNrIHRvIHZpZXcge2lkZW50aWZpZXJQbHVyYWx9IGFuZCBkaXNhYmxlIHNlbGYgbW9uaXRvcmluZy4iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgaWRlbnRpZmllclBsdXJhbDogKDAsIF9mb3JtYXR0aW5nLmdldElkZW50aWZpZXIpKHByb2R1Y3ROYW1lLCB0cnVlKQogICAgICAgIH0KICAgICAgfSkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYWRnZSwgewogICAgICBjb2xvcjogIndhcm5pbmciLAogICAgICBpY29uVHlwZTogImZsYWciLAogICAgICBvbkNsaWNrOiBiYWRnZUNsaWNrQWN0aW9uLAogICAgICBvbkNsaWNrQXJpYUxhYmVsOiBpbnRlcm5hbEFuZE1CCiAgICB9LCBpbnRlcm5hbEFuZE1CKSk7CiAgfSBlbHNlIHsKICAgIHZhciBtZXRyaWNiZWF0Q29sbGVjdGlvbiA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmV1aVRhYmxlLmlzRnVsbHlNaWdyYXRlZExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ01ldHJpY2JlYXQgbW9uaXRvcmluZycKICAgIH0pOwoKICAgIHRvb2x0aXAgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgIGNvbnRlbnQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLnNldHVwTW9kZS50b29sdGlwLmFsbFNldCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIk1ldHJpY2JlYXQgaXMgbW9uaXRvcmluZyBhbGwge2lkZW50aWZpZXJQbHVyYWx9LiIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBpZGVudGlmaWVyUGx1cmFsOiAoMCwgX2Zvcm1hdHRpbmcuZ2V0SWRlbnRpZmllcikocHJvZHVjdE5hbWUsIHRydWUpCiAgICAgICAgfQogICAgICB9KQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJhZGdlLCB7CiAgICAgIGNvbG9yOiAic2Vjb25kYXJ5IiwKICAgICAgaWNvblR5cGU6ICJmbGFnIiwKICAgICAgb25DbGljazogYmFkZ2VDbGlja0FjdGlvbiwKICAgICAgb25DbGlja0FyaWFMYWJlbDogbWV0cmljYmVhdENvbGxlY3Rpb24KICAgIH0sIG1ldHJpY2JlYXRDb2xsZWN0aW9uKSk7CiAgfQoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZQogIH0sIHRvb2x0aXApOwp9"},null]}