{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/components/app/ErrorGroupOverview/index.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/components/app/ErrorGroupOverview/index.js","mtime":1589249551583},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVycm9yR3JvdXBPdmVydmlldyA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfdXNlRmV0Y2hlcjMgPSByZXF1aXJlKCIuLi8uLi8uLi9ob29rcy91c2VGZXRjaGVyIik7Cgp2YXIgX0Rpc3RyaWJ1dGlvbiA9IHJlcXVpcmUoIi4uL0Vycm9yR3JvdXBEZXRhaWxzL0Rpc3RyaWJ1dGlvbiIpOwoKdmFyIF9MaXN0ID0gcmVxdWlyZSgiLi9MaXN0Iik7Cgp2YXIgX3VzZVVybFBhcmFtczIgPSByZXF1aXJlKCIuLi8uLi8uLi9ob29rcy91c2VVcmxQYXJhbXMiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9vYnNlcnZhYmlsaXR5L3B1YmxpYyIpOwoKdmFyIF90eXBpbmdzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9hcG0vY29tbW9uL3Byb2plY3Rpb25zL3R5cGluZ3MiKTsKCnZhciBfTG9jYWxVSUZpbHRlcnMgPSByZXF1aXJlKCIuLi8uLi9zaGFyZWQvTG9jYWxVSUZpbHRlcnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKdmFyIEVycm9yR3JvdXBPdmVydmlldyA9IGZ1bmN0aW9uIEVycm9yR3JvdXBPdmVydmlldygpIHsKICB2YXIgX3VzZVVybFBhcmFtcyA9ICgwLCBfdXNlVXJsUGFyYW1zMi51c2VVcmxQYXJhbXMpKCksCiAgICAgIHVybFBhcmFtcyA9IF91c2VVcmxQYXJhbXMudXJsUGFyYW1zLAogICAgICB1aUZpbHRlcnMgPSBfdXNlVXJsUGFyYW1zLnVpRmlsdGVyczsKCiAgdmFyIHNlcnZpY2VOYW1lID0gdXJsUGFyYW1zLnNlcnZpY2VOYW1lLAogICAgICBzdGFydCA9IHVybFBhcmFtcy5zdGFydCwKICAgICAgZW5kID0gdXJsUGFyYW1zLmVuZCwKICAgICAgc29ydEZpZWxkID0gdXJsUGFyYW1zLnNvcnRGaWVsZCwKICAgICAgc29ydERpcmVjdGlvbiA9IHVybFBhcmFtcy5zb3J0RGlyZWN0aW9uOwoKICB2YXIgX3VzZUZldGNoZXIgPSAoMCwgX3VzZUZldGNoZXIzLnVzZUZldGNoZXIpKGZ1bmN0aW9uIChjYWxsQXBtQXBpKSB7CiAgICBpZiAoc2VydmljZU5hbWUgJiYgc3RhcnQgJiYgZW5kKSB7CiAgICAgIHJldHVybiBjYWxsQXBtQXBpKHsKICAgICAgICBwYXRobmFtZTogJy9hcGkvYXBtL3NlcnZpY2VzL3tzZXJ2aWNlTmFtZX0vZXJyb3JzL2Rpc3RyaWJ1dGlvbicsCiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBwYXRoOiB7CiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZXJ2aWNlTmFtZQogICAgICAgICAgfSwKICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgICAgICAgZW5kOiBlbmQsCiAgICAgICAgICAgIHVpRmlsdGVyczogSlNPTi5zdHJpbmdpZnkodWlGaWx0ZXJzKQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgW3NlcnZpY2VOYW1lLCBzdGFydCwgZW5kLCB1aUZpbHRlcnNdKSwKICAgICAgZXJyb3JEaXN0cmlidXRpb25EYXRhID0gX3VzZUZldGNoZXIuZGF0YTsKCiAgdmFyIF91c2VGZXRjaGVyMiA9ICgwLCBfdXNlRmV0Y2hlcjMudXNlRmV0Y2hlcikoZnVuY3Rpb24gKGNhbGxBcG1BcGkpIHsKICAgIHZhciBub3JtYWxpemVkU29ydERpcmVjdGlvbiA9IHNvcnREaXJlY3Rpb24gPT09ICdhc2MnID8gJ2FzYycgOiAnZGVzYyc7CgogICAgaWYgKHNlcnZpY2VOYW1lICYmIHN0YXJ0ICYmIGVuZCkgewogICAgICByZXR1cm4gY2FsbEFwbUFwaSh7CiAgICAgICAgcGF0aG5hbWU6ICcvYXBpL2FwbS9zZXJ2aWNlcy97c2VydmljZU5hbWV9L2Vycm9ycycsCiAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICBwYXRoOiB7CiAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZXJ2aWNlTmFtZQogICAgICAgICAgfSwKICAgICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgICAgICAgZW5kOiBlbmQsCiAgICAgICAgICAgIHNvcnRGaWVsZDogc29ydEZpZWxkLAogICAgICAgICAgICBzb3J0RGlyZWN0aW9uOiBub3JtYWxpemVkU29ydERpcmVjdGlvbiwKICAgICAgICAgICAgdWlGaWx0ZXJzOiBKU09OLnN0cmluZ2lmeSh1aUZpbHRlcnMpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCBbc2VydmljZU5hbWUsIHN0YXJ0LCBlbmQsIHNvcnRGaWVsZCwgc29ydERpcmVjdGlvbiwgdWlGaWx0ZXJzXSksCiAgICAgIGVycm9yR3JvdXBMaXN0RGF0YSA9IF91c2VGZXRjaGVyMi5kYXRhOwoKICAoMCwgX3B1YmxpYy51c2VUcmFja1BhZ2V2aWV3KSh7CiAgICBhcHA6ICdhcG0nLAogICAgcGF0aDogJ2Vycm9yX2dyb3VwX292ZXJ2aWV3JwogIH0pOwogICgwLCBfcHVibGljLnVzZVRyYWNrUGFnZXZpZXcpKHsKICAgIGFwcDogJ2FwbScsCiAgICBwYXRoOiAnZXJyb3JfZ3JvdXBfb3ZlcnZpZXcnLAogICAgZGVsYXk6IDE1MDAwCiAgfSk7CiAgdmFyIGxvY2FsVUlGaWx0ZXJzQ29uZmlnID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29uZmlnID0gewogICAgICBmaWx0ZXJOYW1lczogWydob3N0JywgJ2NvbnRhaW5lcklkJywgJ3BvZE5hbWUnLCAnc2VydmljZVZlcnNpb24nXSwKICAgICAgcGFyYW1zOiB7CiAgICAgICAgc2VydmljZU5hbWU6IHNlcnZpY2VOYW1lCiAgICAgIH0sCiAgICAgIHByb2plY3Rpb246IF90eXBpbmdzLlBST0pFQ1RJT04uRVJST1JfR1JPVVBTCiAgICB9OwogICAgcmV0dXJuIGNvbmZpZzsKICB9LCBbc2VydmljZU5hbWVdKTsKCiAgaWYgKCFlcnJvckRpc3RyaWJ1dGlvbkRhdGEgfHwgIWVycm9yR3JvdXBMaXN0RGF0YSkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogMQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xvY2FsVUlGaWx0ZXJzLkxvY2FsVUlGaWx0ZXJzLCBsb2NhbFVJRmlsdGVyc0NvbmZpZykpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IDcKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRGlzdHJpYnV0aW9uLkVycm9yRGlzdHJpYnV0aW9uLCB7CiAgICBkaXN0cmlidXRpb246IGVycm9yRGlzdHJpYnV0aW9uRGF0YSwKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLnNlcnZpY2VEZXRhaWxzLm1ldHJpY3MuZXJyb3JPY2N1cnJlbmNlc0NoYXJ0VGl0bGUnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXJyb3Igb2NjdXJyZW5jZXMnCiAgICB9KQogIH0pKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAicyIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJ4cyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMyIsIG51bGwsICJFcnJvcnMiKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaXN0LkVycm9yR3JvdXBMaXN0LCB7CiAgICBpdGVtczogZXJyb3JHcm91cExpc3REYXRhCiAgfSkpKSkpOwp9OwoKZXhwb3J0cy5FcnJvckdyb3VwT3ZlcnZpZXcgPSBFcnJvckdyb3VwT3ZlcnZpZXc7"},null]}