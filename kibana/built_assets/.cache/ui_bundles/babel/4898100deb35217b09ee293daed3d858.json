{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/common/es_query/kuery/kuery_syntax_error.js","dependencies":[{"path":"src/plugins/data/common/es_query/kuery/kuery_syntax_error.js","mtime":1589249550563},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gImZ1bmN0aW9uIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gImZ1bmN0aW9uIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IGlmICh0eXBlb2YgX2NhY2hlICE9PSAidW5kZWZpbmVkIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9CgpmdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikgeyByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZigiW25hdGl2ZSBjb2RlXSIpICE9PSAtMTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5LUUxTeW50YXhFcnJvciA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgZW5kT2ZJbnB1dFRleHQgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnZGF0YS5jb21tb24ua3FsLmVycm9ycy5lbmRPZklucHV0VGV4dCcsIHsKICBkZWZhdWx0TWVzc2FnZTogJ2VuZCBvZiBpbnB1dCcKfSk7Cgp2YXIgZ3JhbW1hclJ1bGVUcmFuc2xhdGlvbnMgPSB7CiAgZmllbGROYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnZGF0YS5jb21tb24ua3FsLmVycm9ycy5maWVsZE5hbWVUZXh0JywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdmaWVsZCBuYW1lJwogIH0pLAogIHZhbHVlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnZGF0YS5jb21tb24ua3FsLmVycm9ycy52YWx1ZVRleHQnLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ3ZhbHVlJwogIH0pLAogIGxpdGVyYWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmNvbW1vbi5rcWwuZXJyb3JzLmxpdGVyYWxUZXh0JywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdsaXRlcmFsJwogIH0pLAogIHdoaXRlc3BhY2U6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmNvbW1vbi5rcWwuZXJyb3JzLndoaXRlc3BhY2VUZXh0JywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICd3aGl0ZXNwYWNlJwogIH0pCn07Cgp2YXIgS1FMU3ludGF4RXJyb3IgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfRXJyb3IpIHsKICBfaW5oZXJpdHMoS1FMU3ludGF4RXJyb3IsIF9FcnJvcik7CgogIGZ1bmN0aW9uIEtRTFN5bnRheEVycm9yKGVycm9yLCBleHByZXNzaW9uKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEtRTFN5bnRheEVycm9yKTsKCiAgICB2YXIgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7CgogICAgaWYgKGVycm9yLmV4cGVjdGVkKSB7CiAgICAgIHZhciB0cmFuc2xhdGVkRXhwZWN0YXRpb25zID0gZXJyb3IuZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChleHBlY3RlZCkgewogICAgICAgIHJldHVybiBncmFtbWFyUnVsZVRyYW5zbGF0aW9uc1tleHBlY3RlZC5kZXNjcmlwdGlvbl0gfHwgZXhwZWN0ZWQuZGVzY3JpcHRpb247CiAgICAgIH0pOwogICAgICB2YXIgdHJhbnNsYXRlZEV4cGVjdGF0aW9uVGV4dCA9IHRyYW5zbGF0ZWRFeHBlY3RhdGlvbnMuam9pbignLCAnKTsKICAgICAgbWVzc2FnZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLmNvbW1vbi5rcWwuZXJyb3JzLnN5bnRheEVycm9yJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXhwZWN0ZWQge2V4cGVjdGVkTGlzdH0gYnV0IHtmb3VuZElucHV0fSBmb3VuZC4nLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgZXhwZWN0ZWRMaXN0OiB0cmFuc2xhdGVkRXhwZWN0YXRpb25UZXh0LAogICAgICAgICAgZm91bmRJbnB1dDogZXJyb3IuZm91bmQgPyAiXCIiLmNvbmNhdChlcnJvci5mb3VuZCwgIlwiIikgOiBlbmRPZklucHV0VGV4dAogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgdmFyIGZ1bGxNZXNzYWdlID0gW21lc3NhZ2UsIGV4cHJlc3Npb24sICgwLCBfbG9kYXNoLnJlcGVhdCkoJy0nLCBlcnJvci5sb2NhdGlvbi5zdGFydC5vZmZzZXQpICsgJ14nXS5qb2luKCdcbicpOwogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoS1FMU3ludGF4RXJyb3IpLmNhbGwodGhpcywgZnVsbE1lc3NhZ2UpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzaG9ydE1lc3NhZ2UiLCB2b2lkIDApOwoKICAgIF90aGlzLm5hbWUgPSAnS1FMU3ludGF4RXJyb3InOwogICAgX3RoaXMuc2hvcnRNZXNzYWdlID0gbWVzc2FnZTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIHJldHVybiBLUUxTeW50YXhFcnJvcjsKfShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7CgpleHBvcnRzLktRTFN5bnRheEVycm9yID0gS1FMU3ludGF4RXJyb3I7"},null]}