{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/logs/reason.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/logs/reason.js","mtime":1589249552540},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlJlYXNvbiA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfZG9jdW1lbnRhdGlvbl9saW5rcyA9IHJlcXVpcmUoInVpL2RvY3VtZW50YXRpb25fbGlua3MiKTsKCnZhciBfbW9ub3NwYWNlID0gcmVxdWlyZSgiLi4vbWV0cmljYmVhdF9taWdyYXRpb24vaW5zdHJ1Y3Rpb25fc3RlcHMvY29tcG9uZW50cy9tb25vc3BhY2UvbW9ub3NwYWNlIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwp2YXIgUmVhc29uID0gZnVuY3Rpb24gUmVhc29uKF9yZWYpIHsKICB2YXIgcmVhc29uID0gX3JlZi5yZWFzb247CgogIHZhciB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLmRlZmF1bHRUaXRsZScsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnTm8gbG9nIGRhdGEgZm91bmQnCiAgfSk7CgogIHZhciBtZXNzYWdlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5kZWZhdWx0TWVzc2FnZSIsCiAgICBkZWZhdWx0TWVzc2FnZTogIldlIGRpZCBub3QgZmluZCBhbnkgbG9nIGRhdGEgYW5kIHdlIGFyZSB1bmFibGUgdG8gZGlhZ25vc2Ugd2h5LiB7bGlua30iLAogICAgdmFsdWVzOiB7CiAgICAgIGxpbms6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMaW5rLCB7CiAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICBocmVmOiAiIi5jb25jYXQoX2RvY3VtZW50YXRpb25fbGlua3MuRUxBU1RJQ19XRUJTSVRFX1VSTCwgImd1aWRlL2VuL2JlYXRzL2ZpbGViZWF0LyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL2ZpbGViZWF0LWluc3RhbGxhdGlvbi5odG1sIikKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24uZGVmYXVsdE1lc3NhZ2VMaW5rIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlBsZWFzZSB2ZXJpZnkgeW91ciBzZXR1cCBpcyBjb3JyZWN0LiIKICAgICAgfSkpCiAgICB9CiAgfSk7CgogIGlmIChmYWxzZSA9PT0gcmVhc29uLmluZGV4UGF0dGVybkV4aXN0cykgewogICAgdGl0bGUgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub0luZGV4UGF0dGVyblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGxvZyBkYXRhIGZvdW5kJwogICAgfSk7CiAgICBtZXNzYWdlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vSW5kZXhQYXR0ZXJuTWVzc2FnZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2V0IHVwIHtsaW5rfSwgdGhlbiBjb25maWd1cmUgeW91ciBFbGFzdGljc2VhcmNoIG91dHB1dCB0byB5b3VyIG1vbml0b3JpbmcgY2x1c3Rlci4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBsaW5rOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5FTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4vYmVhdHMvZmlsZWJlYXQvIikuY29uY2F0KF9kb2N1bWVudGF0aW9uX2xpbmtzLkRPQ19MSU5LX1ZFUlNJT04sICIvZmlsZWJlYXQtaW5zdGFsbGF0aW9uLmh0bWwiKQogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vSW5kZXhQYXR0ZXJuTGluaycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRmlsZWJlYXQnCiAgICAgICAgfSkpCiAgICAgIH0KICAgIH0pOwogIH0gZWxzZSBpZiAoZmFsc2UgPT09IHJlYXNvbi5pbmRleFBhdHRlcm5JblRpbWVSYW5nZUV4aXN0cyB8fCBmYWxzZSA9PT0gcmVhc29uLnR5cGVFeGlzdHMgJiYgcmVhc29uLnR5cGVFeGlzdHNBdEFueVRpbWUpIHsKICAgIHRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm9JbmRleFBhdHRlcm5JblRpbWVQZXJpb2RUaXRsZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdObyBsb2dzIGZvciB0aGUgc2VsZWN0ZWQgdGltZScKICAgIH0pOwogICAgbWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub0luZGV4UGF0dGVybkluVGltZVBlcmlvZE1lc3NhZ2UiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlVzZSB0aGUgdGltZSBmaWx0ZXIgdG8gYWRqdXN0IHlvdXIgdGltZWZyYW1lLiIKICAgIH0pOwogIH0gZWxzZSBpZiAoZmFsc2UgPT09IHJlYXNvbi50eXBlRXhpc3RzKSB7CiAgICB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vVHlwZVRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGxvZ3MgZm9yIEVsYXN0aWNzZWFyY2gnCiAgICB9KTsKICAgIG1lc3NhZ2UgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm9UeXBlTWVzc2FnZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRm9sbG93IHtsaW5rfSB0byBzZXQgdXAgRWxhc3RpY3NlYXJjaC4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBsaW5rOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5FTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4vYmVhdHMvZmlsZWJlYXQvIikuY29uY2F0KF9kb2N1bWVudGF0aW9uX2xpbmtzLkRPQ19MSU5LX1ZFUlNJT04sICIvZmlsZWJlYXQtbW9kdWxlLWVsYXN0aWNzZWFyY2guaHRtbCIpCiAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm9UeXBlTGluaycsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAndGhlc2UgZGlyZWN0aW9ucycKICAgICAgICB9KSkKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIGlmIChmYWxzZSA9PT0gcmVhc29uLnVzaW5nU3RydWN0dXJlZExvZ3MpIHsKICAgIHRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm90VXNpbmdTdHJ1Y3R1cmVkTG9nc1RpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIHN0cnVjdHVyZWQgbG9ncyBmb3VuZCcKICAgIH0pOwogICAgbWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub3RVc2luZ1N0cnVjdHVyZWRMb2dzTWVzc2FnZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ2hlY2sgaWYgdGhlIHt2YXJQYXRoc30gc2V0dGluZyB7bGlua30uIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgdmFyUGF0aHM6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX21vbm9zcGFjZS5Nb25vc3BhY2UsIG51bGwsICJ2YXIucGF0aHMiKSwKICAgICAgICBsaW5rOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5FTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4vYmVhdHMvZmlsZWJlYXQvIikuY29uY2F0KF9kb2N1bWVudGF0aW9uX2xpbmtzLkRPQ19MSU5LX1ZFUlNJT04sICIvZmlsZWJlYXQtbW9kdWxlLWVsYXN0aWNzZWFyY2guaHRtbCIpCiAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm90VXNpbmdTdHJ1Y3R1cmVkTG9nc0xpbmsnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3BvaW50cyB0byBKU09OIGxvZ3MnCiAgICAgICAgfSkpCiAgICAgIH0KICAgIH0pOwogIH0gZWxzZSBpZiAoZmFsc2UgPT09IHJlYXNvbi5jbHVzdGVyRXhpc3RzKSB7CiAgICB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vQ2x1c3RlclRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGxvZ3MgZm9yIHRoaXMgY2x1c3RlcicKICAgIH0pOwogICAgbWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub0NsdXN0ZXJNZXNzYWdlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDaGVjayB0aGF0IHlvdXIge2xpbmt9IGlzIGNvcnJlY3QuIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgbGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICBocmVmOiAiIi5jb25jYXQoX2RvY3VtZW50YXRpb25fbGlua3MuRUxBU1RJQ19XRUJTSVRFX1VSTCwgImd1aWRlL2VuL2JlYXRzL2ZpbGViZWF0LyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL2ZpbGViZWF0LW1vZHVsZS1lbGFzdGljc2VhcmNoLmh0bWwiKQogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vQ2x1c3RlckxpbmsnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3NldHVwJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KTsKICB9IGVsc2UgaWYgKGZhbHNlID09PSByZWFzb24ubm9kZUV4aXN0cykgewogICAgdGl0bGUgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub05vZGVUaXRsZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdObyBsb2dzIGZvciB0aGlzIEVsYXN0aWNzZWFyY2ggbm9kZScKICAgIH0pOwogICAgbWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5ub05vZGVNZXNzYWdlIiwKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDaGVjayB0aGF0IHlvdXIge2xpbmt9IGlzIGNvcnJlY3QuIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgbGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICBocmVmOiAiIi5jb25jYXQoX2RvY3VtZW50YXRpb25fbGlua3MuRUxBU1RJQ19XRUJTSVRFX1VSTCwgImd1aWRlL2VuL2JlYXRzL2ZpbGViZWF0LyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL2ZpbGViZWF0LW1vZHVsZS1lbGFzdGljc2VhcmNoLmh0bWwiKQogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vTm9kZUxpbmsnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3NldHVwJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KTsKICB9IGVsc2UgaWYgKGZhbHNlID09PSByZWFzb24uaW5kZXhFeGlzdHMpIHsKICAgIHRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm9JbmRleFRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIGxvZ3MgZm9yIHRoaXMgaW5kZXgnCiAgICB9KTsKICAgIG1lc3NhZ2UgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24ubm9JbmRleE1lc3NhZ2UiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIldlIGZvdW5kIGxvZ3MsIGJ1dCBub25lIGZvciB0aGlzIGluZGV4LiBJZiB0aGlzIHByb2JsZW0gY29udGludWVzLCBjaGVjayB0aGF0IHlvdXIge2xpbmt9IGlzIGNvcnJlY3QuIiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgbGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICBocmVmOiAiIi5jb25jYXQoX2RvY3VtZW50YXRpb25fbGlua3MuRUxBU1RJQ19XRUJTSVRFX1VSTCwgImd1aWRlL2VuL2JlYXRzL2ZpbGViZWF0LyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL2ZpbGViZWF0LW1vZHVsZS1lbGFzdGljc2VhcmNoLmh0bWwiKQogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLm5vSW5kZXhMaW5rJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdzZXR1cCcKICAgICAgICB9KSkKICAgICAgfQogICAgfSk7CiAgfSBlbHNlIGlmIChmYWxzZSA9PT0gcmVhc29uLmNvcnJlY3RJbmRleE5hbWUpIHsKICAgIHRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9ncy5yZWFzb24uY29ycmVjdEluZGV4TmFtZVRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0NvcnJ1cHRlZCBmaWxlYmVhdCBpbmRleCcKICAgIH0pOwogICAgbWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2subW9uaXRvcmluZy5sb2dzLnJlYXNvbi5jb3JyZWN0SW5kZXhOYW1lTWVzc2FnZSIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlcmUgaXMgYW4gaXNzdWUgcmVhZGluZyBmcm9tIHlvdXIgZmlsZWJlYXQgaW5kaWNlcy4gIHtsaW5rfS4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBsaW5rOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgIGhyZWY6ICIiLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5FTEFTVElDX1dFQlNJVEVfVVJMLCAiZ3VpZGUvZW4va2liYW5hLyIpLmNvbmNhdChfZG9jdW1lbnRhdGlvbl9saW5rcy5ET0NfTElOS19WRVJTSU9OLCAiL21vbml0b3ItdHJvdWJsZXNob290aW5nLmh0bWwiKQogICAgICAgIH0sIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3MucmVhc29uLmNvcnJlY3RJbmRleE5hbWVMaW5rJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDbGljayBoZXJlIGZvciBtb3JlIGluZm9ybWF0aW9uJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KTsKICB9CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgdGl0bGU6IHRpdGxlLAogICAgY29sb3I6ICJ3YXJuaW5nIiwKICAgIGljb25UeXBlOiAiaGVscCIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgbWVzc2FnZSkpOwp9OwoKZXhwb3J0cy5SZWFzb24gPSBSZWFzb247"},null]}