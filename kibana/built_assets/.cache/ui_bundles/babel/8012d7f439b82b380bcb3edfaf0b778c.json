{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/triggers_actions_ui/public/application/sections/alert_form/alert_add.js","dependencies":[{"path":"x-pack/plugins/triggers_actions_ui/public/application/sections/alert_form/alert_add.js","mtime":1589249555561},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFsZXJ0QWRkID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2FsZXJ0c19jb250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vY29udGV4dC9hbGVydHNfY29udGV4dCIpOwoKdmFyIF9hbGVydF9mb3JtID0gcmVxdWlyZSgiLi9hbGVydF9mb3JtIik7Cgp2YXIgX2FsZXJ0X3JlZHVjZXIgPSByZXF1aXJlKCIuL2FsZXJ0X3JlZHVjZXIiKTsKCnZhciBfYWxlcnRfYXBpID0gcmVxdWlyZSgiLi4vLi4vbGliL2FsZXJ0X2FwaSIpOwoKdmFyIF9oZWFsdGhfY2hlY2sgPSByZXF1aXJlKCIuLi8uLi9jb21wb25lbnRzL2hlYWx0aF9jaGVjayIpOwoKdmFyIF9wbHVnaW4gPSByZXF1aXJlKCIuLi8uLi9jb25zdGFudHMvcGx1Z2luIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgQWxlcnRBZGQgPSBmdW5jdGlvbiBBbGVydEFkZChfcmVmKSB7CiAgdmFyIGNvbnN1bWVyID0gX3JlZi5jb25zdW1lciwKICAgICAgYWRkRmx5b3V0VmlzaWJsZSA9IF9yZWYuYWRkRmx5b3V0VmlzaWJsZSwKICAgICAgc2V0QWRkRmx5b3V0VmlzaWJpbGl0eSA9IF9yZWYuc2V0QWRkRmx5b3V0VmlzaWJpbGl0eSwKICAgICAgY2FuQ2hhbmdlVHJpZ2dlciA9IF9yZWYuY2FuQ2hhbmdlVHJpZ2dlciwKICAgICAgYWxlcnRUeXBlSWQgPSBfcmVmLmFsZXJ0VHlwZUlkOwogIHZhciBpbml0aWFsQWxlcnQgPSB7CiAgICBwYXJhbXM6IHt9LAogICAgY29uc3VtZXI6IGNvbnN1bWVyLAogICAgYWxlcnRUeXBlSWQ6IGFsZXJ0VHlwZUlkLAogICAgc2NoZWR1bGU6IHsKICAgICAgaW50ZXJ2YWw6ICcxbScKICAgIH0sCiAgICBhY3Rpb25zOiBbXSwKICAgIHRhZ3M6IFtdCiAgfTsKCiAgdmFyIF91c2VSZWR1Y2VyID0gKDAsIF9yZWFjdC51c2VSZWR1Y2VyKShfYWxlcnRfcmVkdWNlci5hbGVydFJlZHVjZXIsIHsKICAgIGFsZXJ0OiBpbml0aWFsQWxlcnQKICB9KSwKICAgICAgX3VzZVJlZHVjZXIyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVJlZHVjZXIsIDIpLAogICAgICBhbGVydCA9IF91c2VSZWR1Y2VyMlswXS5hbGVydCwKICAgICAgZGlzcGF0Y2ggPSBfdXNlUmVkdWNlcjJbMV07CgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBpc1NhdmluZyA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldElzU2F2aW5nID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIHNldEFsZXJ0ID0gZnVuY3Rpb24gc2V0QWxlcnQodmFsdWUpIHsKICAgIGRpc3BhdGNoKHsKICAgICAgY29tbWFuZDogewogICAgICAgIHR5cGU6ICdzZXRBbGVydCcKICAgICAgfSwKICAgICAgcGF5bG9hZDogewogICAgICAgIGtleTogJ2FsZXJ0JywKICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgfQogICAgfSk7CiAgfTsKCiAgdmFyIF91c2VBbGVydHNDb250ZXh0ID0gKDAsIF9hbGVydHNfY29udGV4dC51c2VBbGVydHNDb250ZXh0KSgpLAogICAgICByZWxvYWRBbGVydHMgPSBfdXNlQWxlcnRzQ29udGV4dC5yZWxvYWRBbGVydHMsCiAgICAgIGh0dHAgPSBfdXNlQWxlcnRzQ29udGV4dC5odHRwLAogICAgICB0b2FzdE5vdGlmaWNhdGlvbnMgPSBfdXNlQWxlcnRzQ29udGV4dC50b2FzdE5vdGlmaWNhdGlvbnMsCiAgICAgIGFsZXJ0VHlwZVJlZ2lzdHJ5ID0gX3VzZUFsZXJ0c0NvbnRleHQuYWxlcnRUeXBlUmVnaXN0cnksCiAgICAgIGFjdGlvblR5cGVSZWdpc3RyeSA9IF91c2VBbGVydHNDb250ZXh0LmFjdGlvblR5cGVSZWdpc3RyeSwKICAgICAgZG9jTGlua3MgPSBfdXNlQWxlcnRzQ29udGV4dC5kb2NMaW5rczsKCiAgdmFyIGNsb3NlRmx5b3V0ID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKCkgewogICAgc2V0QWRkRmx5b3V0VmlzaWJpbGl0eShmYWxzZSk7CiAgICBzZXRBbGVydChpbml0aWFsQWxlcnQpOwogIH0sIFtpbml0aWFsQWxlcnQsIHNldEFkZEZseW91dFZpc2liaWxpdHldKTsKCiAgaWYgKCFhZGRGbHlvdXRWaXNpYmxlKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBhbGVydFR5cGUgPSBhbGVydC5hbGVydFR5cGVJZCA/IGFsZXJ0VHlwZVJlZ2lzdHJ5LmdldChhbGVydC5hbGVydFR5cGVJZCkgOiBudWxsOwoKICB2YXIgZXJyb3JzID0gX29iamVjdFNwcmVhZCh7fSwgYWxlcnRUeXBlID8gYWxlcnRUeXBlLnZhbGlkYXRlKGFsZXJ0LnBhcmFtcykuZXJyb3JzIDogW10sIHt9LCAoMCwgX2FsZXJ0X2Zvcm0udmFsaWRhdGVCYXNlUHJvcGVydGllcykoYWxlcnQpLmVycm9ycyk7CgogIHZhciBoYXNFcnJvcnMgPSBwYXJzZUVycm9ycyhlcnJvcnMpOwogIHZhciBhY3Rpb25zRXJyb3JzID0gYWxlcnQuYWN0aW9ucy5tYXAoZnVuY3Rpb24gKGFsZXJ0QWN0aW9uKSB7CiAgICB2YXIgX2FjdGlvblR5cGVSZWdpc3RyeSRnOwoKICAgIHJldHVybiAoX2FjdGlvblR5cGVSZWdpc3RyeSRnID0gYWN0aW9uVHlwZVJlZ2lzdHJ5LmdldChhbGVydEFjdGlvbi5hY3Rpb25UeXBlSWQpKSA9PT0gbnVsbCB8fCBfYWN0aW9uVHlwZVJlZ2lzdHJ5JGcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hY3Rpb25UeXBlUmVnaXN0cnkkZy52YWxpZGF0ZVBhcmFtcyhhbGVydEFjdGlvbi5wYXJhbXMpOwogIH0pOwogIHZhciBoYXNBY3Rpb25FcnJvcnMgPSBhY3Rpb25zRXJyb3JzLmZpbmQoZnVuY3Rpb24gKGVycm9yT2JqKSB7CiAgICByZXR1cm4gZXJyb3JPYmogJiYgISFPYmplY3Qua2V5cyhlcnJvck9iai5lcnJvcnMpLmZpbmQoZnVuY3Rpb24gKGVycm9yS2V5KSB7CiAgICAgIHJldHVybiBlcnJvck9iai5lcnJvcnNbZXJyb3JLZXldLmxlbmd0aCA+PSAxOwogICAgfSk7CiAgfSkgIT09IHVuZGVmaW5lZDsKCiAgZnVuY3Rpb24gb25TYXZlQWxlcnQoKSB7CiAgICByZXR1cm4gX29uU2F2ZUFsZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBmdW5jdGlvbiBfb25TYXZlQWxlcnQoKSB7CiAgICBfb25TYXZlQWxlcnQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgbmV3QWxlcnQsIF9yZWYzLCBfZXJyb3JSZXMkYm9keTsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gKDAsIF9hbGVydF9hcGkuY3JlYXRlQWxlcnQpKHsKICAgICAgICAgICAgICAgIGh0dHA6IGh0dHAsCiAgICAgICAgICAgICAgICBhbGVydDogYWxlcnQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBuZXdBbGVydCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIHRvYXN0Tm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hbGVydEFkZC5zYXZlU3VjY2Vzc05vdGlmaWNhdGlvblRleHQnLCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNhdmVkICd7YWxlcnROYW1lfSciLAogICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgIGFsZXJ0TmFtZTogbmV3QWxlcnQubmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3QWxlcnQpOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgdG9hc3ROb3RpZmljYXRpb25zLmFkZERhbmdlcigoX3JlZjMgPSAoX2Vycm9yUmVzJGJvZHkgPSBfY29udGV4dDIudDAuYm9keSkgPT09IG51bGwgfHwgX2Vycm9yUmVzJGJvZHkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lcnJvclJlcyRib2R5Lm1lc3NhZ2UpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hbGVydEFkZC5zYXZlRXJyb3JOb3RpZmljYXRpb25UZXh0JywgewogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDYW5ub3QgY3JlYXRlIGFsZXJ0LicKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgOF1dKTsKICAgIH0pKTsKICAgIHJldHVybiBfb25TYXZlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9ydGFsLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0LCB7CiAgICBvbkNsb3NlOiBjbG9zZUZseW91dCwKICAgICJhcmlhLWxhYmVsbGVkYnkiOiAiZmx5b3V0QWxlcnRBZGRUaXRsZSIsCiAgICBzaXplOiAibSIsCiAgICBtYXhXaWR0aDogNjIwLAogICAgb3duRm9jdXM6IHRydWUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0SGVhZGVyLCB7CiAgICBoYXNCb3JkZXI6IHRydWUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJzIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhZGRBbGVydEZseW91dFRpdGxlIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgewogICAgaWQ6ICJmbHlvdXRUaXRsZSIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgZGVmYXVsdE1lc3NhZ2U6ICJDcmVhdGUgYWxlcnQiLAogICAgaWQ6ICJ4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hbGVydEFkZC5mbHlvdXRUaXRsZSIKICB9KSwgIlx1MjAwMyIsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCZXRhQmFkZ2UsIHsKICAgIGxhYmVsOiAiQmV0YSIsCiAgICB0b29sdGlwQ29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLnNlY3Rpb25zLmFsZXJ0QWRkLmJldGFCYWRnZVRvb2x0aXBDb250ZW50JywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ3twbHVnaW5OYW1lfSBpcyBpbiBiZXRhIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZS4gVGhlIGRlc2lnbiBhbmQgY29kZSBpcyBsZXNzIG1hdHVyZSB0aGFuIG9mZmljaWFsIEdBIGZlYXR1cmVzIGFuZCBpcyBiZWluZyBwcm92aWRlZCBhcy1pcyB3aXRoIG5vIHdhcnJhbnRpZXMuIEJldGEgZmVhdHVyZXMgYXJlIG5vdCBzdWJqZWN0IHRvIHRoZSBzdXBwb3J0IFNMQSBvZiBvZmZpY2lhbCBHQSBmZWF0dXJlcy4nLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBwbHVnaW5OYW1lOiBfcGx1Z2luLlBMVUdJTi5nZXRJMThuTmFtZShfaTE4bi5pMThuKQogICAgICB9CiAgICB9KQogIH0pKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9oZWFsdGhfY2hlY2suSGVhbHRoQ2hlY2ssIHsKICAgIGRvY0xpbmtzOiBkb2NMaW5rcywKICAgIGh0dHA6IGh0dHAsCiAgICBpbkZseW91dDogdHJ1ZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRCb2R5LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hbGVydF9mb3JtLkFsZXJ0Rm9ybSwgewogICAgYWxlcnQ6IGFsZXJ0LAogICAgZGlzcGF0Y2g6IGRpc3BhdGNoLAogICAgZXJyb3JzOiBlcnJvcnMsCiAgICBjYW5DaGFuZ2VUcmlnZ2VyOiBjYW5DaGFuZ2VUcmlnZ2VyCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0Rm9vdGVyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQmV0d2VlbiIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkVtcHR5LCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY2FuY2VsU2F2ZUFsZXJ0QnV0dG9uIiwKICAgIG9uQ2xpY2s6IGNsb3NlRmx5b3V0CiAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLnNlY3Rpb25zLmFsZXJ0QWRkLmNhbmNlbEJ1dHRvbkxhYmVsJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdDYW5jZWwnCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgIGZpbGw6IHRydWUsCiAgICBjb2xvcjogInNlY29uZGFyeSIsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAic2F2ZUFsZXJ0QnV0dG9uIiwKICAgIHR5cGU6ICJzdWJtaXQiLAogICAgaWNvblR5cGU6ICJjaGVjayIsCiAgICBpc0Rpc2FibGVkOiBoYXNFcnJvcnMgfHwgaGFzQWN0aW9uRXJyb3JzLAogICAgaXNMb2FkaW5nOiBpc1NhdmluZywKICAgIG9uQ2xpY2s6CiAgICAvKiNfX1BVUkVfXyovCiAgICBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBzYXZlZEFsZXJ0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc2V0SXNTYXZpbmcodHJ1ZSk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIG9uU2F2ZUFsZXJ0KCk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgc2F2ZWRBbGVydCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpOwoKICAgICAgICAgICAgICBpZiAoc2F2ZWRBbGVydCkgewogICAgICAgICAgICAgICAgY2xvc2VGbHlvdXQoKTsKCiAgICAgICAgICAgICAgICBpZiAocmVsb2FkQWxlcnRzKSB7CiAgICAgICAgICAgICAgICAgIHJlbG9hZEFsZXJ0cygpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgaWQ6ICJ4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hbGVydEFkZC5zYXZlQnV0dG9uTGFiZWwiLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJTYXZlIgogIH0pKSkpKSkpKTsKfTsKCmV4cG9ydHMuQWxlcnRBZGQgPSBBbGVydEFkZDsKCnZhciBwYXJzZUVycm9ycyA9IGZ1bmN0aW9uIHBhcnNlRXJyb3JzKGVycm9ycykgewogIHJldHVybiAhIU9iamVjdC52YWx1ZXMoZXJyb3JzKS5maW5kKGZ1bmN0aW9uIChlcnJvckxpc3QpIHsKICAgIGlmICgoMCwgX2xvZGFzaC5pc09iamVjdCkoZXJyb3JMaXN0KSkgcmV0dXJuIHBhcnNlRXJyb3JzKGVycm9yTGlzdCk7CiAgICByZXR1cm4gZXJyb3JMaXN0Lmxlbmd0aCA+PSAxOwogIH0pOwp9Ow=="},null]}