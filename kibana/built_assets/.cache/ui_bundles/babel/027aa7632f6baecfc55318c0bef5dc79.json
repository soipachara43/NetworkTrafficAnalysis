{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_timeseries/public/components/aggs/aggs.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_timeseries/public/components/aggs/aggs.js","mtime":1589249550026},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFnZ3MgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2FnZyA9IHJlcXVpcmUoIi4vYWdnIik7Cgp2YXIgX25ld19tZXRyaWNfYWdnX2ZuID0gcmVxdWlyZSgiLi4vbGliL25ld19tZXRyaWNfYWdnX2ZuIik7Cgp2YXIgX3Nlcmllc19jaGFuZ2VfaGFuZGxlciA9IHJlcXVpcmUoIi4uL2xpYi9zZXJpZXNfY2hhbmdlX2hhbmRsZXIiKTsKCnZhciBfY29sbGVjdGlvbl9hY3Rpb25zID0gcmVxdWlyZSgiLi4vbGliL2NvbGxlY3Rpb25fYWN0aW9ucyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCnZhciBEUk9QUEFCTEVfSUQgPSAnYWdnc19kbmQnOwoKdmFyIEFnZ3MgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkgewogIF9pbmhlcml0cyhBZ2dzLCBfUHVyZUNvbXBvbmVudCk7CgogIGZ1bmN0aW9uIEFnZ3MoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWdncyk7CgogICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBZ2dzKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICB9CgogIF9jcmVhdGVDbGFzcyhBZ2dzLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgcGFuZWwgPSBfdGhpcyRwcm9wcy5wYW5lbCwKICAgICAgICAgIG1vZGVsID0gX3RoaXMkcHJvcHMubW9kZWwsCiAgICAgICAgICBmaWVsZHMgPSBfdGhpcyRwcm9wcy5maWVsZHMsCiAgICAgICAgICB1aVJlc3RyaWN0aW9ucyA9IF90aGlzJHByb3BzLnVpUmVzdHJpY3Rpb25zOwogICAgICB2YXIgbGlzdCA9IG1vZGVsLm1ldHJpY3M7CiAgICAgIHZhciBvbkNoYW5nZSA9ICgwLCBfc2VyaWVzX2NoYW5nZV9oYW5kbGVyLnNlcmllc0NoYW5nZUhhbmRsZXIpKHRoaXMucHJvcHMsIGxpc3QpOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURyb3BwYWJsZSwgewogICAgICAgIGRyb3BwYWJsZUlkOiAiIi5jb25jYXQoRFJPUFBBQkxFX0lELCAiOiIpLmNvbmNhdChtb2RlbC5pZCksCiAgICAgICAgdHlwZTogIk1JQ1JPIiwKICAgICAgICBzcGFjaW5nOiAicyIKICAgICAgfSwgbGlzdC5tYXAoZnVuY3Rpb24gKHJvdywgaWR4KSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEcmFnZ2FibGUsIHsKICAgICAgICAgIHNwYWNpbmc6ICJzIiwKICAgICAgICAgIGtleTogcm93LmlkLAogICAgICAgICAgaW5kZXg6IGlkeCwKICAgICAgICAgIGN1c3RvbURyYWdIYW5kbGU6IHRydWUsCiAgICAgICAgICBkcmFnZ2FibGVJZDogIiIuY29uY2F0KERST1BQQUJMRV9JRCwgIjoiKS5jb25jYXQobW9kZWwuaWQsICI6IikuY29uY2F0KHJvdy5pZCkKICAgICAgICB9LCBmdW5jdGlvbiAocHJvdmlkZWQpIHsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hZ2cuQWdnLCB7CiAgICAgICAgICAgIGtleTogcm93LmlkLAogICAgICAgICAgICBkaXNhYmxlRGVsZXRlOiBsaXN0Lmxlbmd0aCA8IDIsCiAgICAgICAgICAgIGZpZWxkczogZmllbGRzLAogICAgICAgICAgICBtb2RlbDogcm93LAogICAgICAgICAgICBvbkFkZDogZnVuY3Rpb24gb25BZGQoKSB7CiAgICAgICAgICAgICAgcmV0dXJuICgwLCBfY29sbGVjdGlvbl9hY3Rpb25zLmhhbmRsZUFkZCkoX3RoaXMucHJvcHMsIF9uZXdfbWV0cmljX2FnZ19mbi5uZXdNZXRyaWNBZ2dGbik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSwKICAgICAgICAgICAgb25EZWxldGU6IGZ1bmN0aW9uIG9uRGVsZXRlKCkgewogICAgICAgICAgICAgIHJldHVybiAoMCwgX2NvbGxlY3Rpb25fYWN0aW9ucy5oYW5kbGVEZWxldGUpKF90aGlzLnByb3BzLCByb3cpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwYW5lbDogcGFuZWwsCiAgICAgICAgICAgIHNlcmllczogbW9kZWwsCiAgICAgICAgICAgIHNpYmxpbmdzOiBsaXN0LAogICAgICAgICAgICB1aVJlc3RyaWN0aW9uczogdWlSZXN0cmljdGlvbnMsCiAgICAgICAgICAgIGRyYWdIYW5kbGVQcm9wczogcHJvdmlkZWQuZHJhZ0hhbmRsZVByb3BzCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFnZ3M7Cn0oX3JlYWN0LlB1cmVDb21wb25lbnQpOwoKZXhwb3J0cy5BZ2dzID0gQWdnczsKQWdncy5wcm9wVHlwZXMgPSB7CiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogIGZpZWxkczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLAogIG1vZGVsOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgcGFuZWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICBkcmFnSGFuZGxlUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QKfTs="},null]}