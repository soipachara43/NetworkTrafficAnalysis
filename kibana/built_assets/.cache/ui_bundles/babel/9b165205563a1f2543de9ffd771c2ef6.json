{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/containers/logs/log_analysis/log_analysis_module_status.js","dependencies":[{"path":"x-pack/plugins/infra/public/containers/logs/log_analysis/log_analysis_module_status.js","mtime":1589249554273},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZU1vZHVsZVN0YXR1cyA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJyZWFjdCIpOwoKdmFyIF9sb2dfYW5hbHlzaXMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vbG9nX2FuYWx5c2lzIik7CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgY3JlYXRlSW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlKF9yZWYpIHsKICB2YXIgam9iVHlwZXMgPSBfcmVmLmpvYlR5cGVzLAogICAgICBzb3VyY2VDb25maWd1cmF0aW9uID0gX3JlZi5zb3VyY2VDb25maWd1cmF0aW9uOwogIHJldHVybiB7CiAgICBqb2JEZWZpbml0aW9uczogW10sCiAgICBqb2JTdGF0dXM6IGpvYlR5cGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0ZWRKb2JTdGF0dXMsIGpvYlR5cGUpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGFjY3VtdWxhdGVkSm9iU3RhdHVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGpvYlR5cGUsICd1bmtub3duJykpOwogICAgfSwge30pLAogICAgam9iU3VtbWFyaWVzOiBbXSwKICAgIGxhc3RTZXR1cEVycm9yTWVzc2FnZXM6IFtdLAogICAgc2V0dXBTdGF0dXM6ICdpbml0aWFsaXppbmcnLAogICAgc291cmNlQ29uZmlndXJhdGlvbjogc291cmNlQ29uZmlndXJhdGlvbgogIH07Cn07Cgp2YXIgY3JlYXRlU3RhdHVzUmVkdWNlciA9IGZ1bmN0aW9uIGNyZWF0ZVN0YXR1c1JlZHVjZXIoam9iVHlwZXMpIHsKICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHsKICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHsKICAgICAgY2FzZSAnc3RhcnRlZFNldHVwJzoKICAgICAgICB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgICAgICAgam9iU3RhdHVzOiBqb2JUeXBlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdGVkSm9iU3RhdHVzLCBqb2JUeXBlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGFjY3VtdWxhdGVkSm9iU3RhdHVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGpvYlR5cGUsICdpbml0aWFsaXppbmcnKSk7CiAgICAgICAgICAgIH0sIHt9KSwKICAgICAgICAgICAgc2V0dXBTdGF0dXM6ICdwZW5kaW5nJwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnZmluaXNoZWRTZXR1cCc6CiAgICAgICAgewogICAgICAgICAgdmFyIGpvYnMgPSBhY3Rpb24uam9icywKICAgICAgICAgICAgICBkYXRhZmVlZHMgPSBhY3Rpb24uZGF0YWZlZWRzLAogICAgICAgICAgICAgIHNwYWNlSWQgPSBhY3Rpb24uc3BhY2VJZCwKICAgICAgICAgICAgICBzb3VyY2VJZCA9IGFjdGlvbi5zb3VyY2VJZDsKICAgICAgICAgIHZhciBuZXh0Sm9iU3RhdHVzID0gam9iVHlwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRlZEpvYlN0YXR1cywgam9iVHlwZSkgewogICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYWNjdW11bGF0ZWRKb2JTdGF0dXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgam9iVHlwZSwgaGFzU3VjY2Vzc2Z1bGx5Q3JlYXRlZEpvYigoMCwgX2xvZ19hbmFseXNpcy5nZXRKb2JJZCkoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGUpKShqb2JzKSAmJiBoYXNTdWNjZXNzZnVsbHlTdGFydGVkRGF0YWZlZWQoKDAsIF9sb2dfYW5hbHlzaXMuZ2V0RGF0YWZlZWRJZCkoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGUpKShkYXRhZmVlZHMpID8gJ3N0YXJ0ZWQnIDogJ2ZhaWxlZCcpKTsKICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgIHZhciBuZXh0U2V0dXBTdGF0dXMgPSBPYmplY3QudmFsdWVzKG5leHRKb2JTdGF0dXMpLmV2ZXJ5KGZ1bmN0aW9uIChqb2JTdGF0ZSkgewogICAgICAgICAgICByZXR1cm4gam9iU3RhdGUgPT09ICdzdGFydGVkJzsKICAgICAgICAgIH0pID8gJ3N1Y2NlZWRlZCcgOiAnZmFpbGVkJzsKICAgICAgICAgIHZhciBuZXh0RXJyb3JNZXNzYWdlcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LnZhbHVlcyhkYXRhZmVlZHMpLmZpbHRlcihoYXNFcnJvcikubWFwKGZ1bmN0aW9uIChkYXRhZmVlZCkgewogICAgICAgICAgICByZXR1cm4gZGF0YWZlZWQuZXJyb3IubXNnOwogICAgICAgICAgfSkpLCBfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LnZhbHVlcyhqb2JzKS5maWx0ZXIoaGFzRXJyb3IpLm1hcChmdW5jdGlvbiAoam9iKSB7CiAgICAgICAgICAgIHJldHVybiBqb2IuZXJyb3IubXNnOwogICAgICAgICAgfSkpKTsKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICBqb2JTdGF0dXM6IG5leHRKb2JTdGF0dXMsCiAgICAgICAgICAgIGxhc3RTZXR1cEVycm9yTWVzc2FnZXM6IG5leHRFcnJvck1lc3NhZ2VzLAogICAgICAgICAgICBzZXR1cFN0YXR1czogbmV4dFNldHVwU3RhdHVzCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICdmYWlsZWRTZXR1cCc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIGpvYlN0YXR1czogam9iVHlwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRlZEpvYlN0YXR1cywgam9iVHlwZSkgewogICAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBhY2N1bXVsYXRlZEpvYlN0YXR1cywgX2RlZmluZVByb3BlcnR5KHt9LCBqb2JUeXBlLCAnZmFpbGVkJykpOwogICAgICAgICAgICB9LCB7fSksCiAgICAgICAgICAgIHNldHVwU3RhdHVzOiAnZmFpbGVkJwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnZmV0Y2hpbmdNb2R1bGVEZWZpbml0aW9uJzoKICAgICAgY2FzZSAnZmV0Y2hpbmdKb2JTdGF0dXNlcyc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIHNldHVwU3RhdHVzOiBzdGF0ZS5zZXR1cFN0YXR1cyA9PT0gJ3Vua25vd24nID8gJ2luaXRpYWxpemluZycgOiBzdGF0ZS5zZXR1cFN0YXR1cwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnZmV0Y2hlZEpvYlN0YXR1c2VzJzoKICAgICAgICB7CiAgICAgICAgICB2YXIgam9iU3VtbWFyaWVzID0gYWN0aW9uLnBheWxvYWQsCiAgICAgICAgICAgICAgX3NwYWNlSWQgPSBhY3Rpb24uc3BhY2VJZCwKICAgICAgICAgICAgICBfc291cmNlSWQgPSBhY3Rpb24uc291cmNlSWQ7CiAgICAgICAgICB2YXIgam9iRGVmaW5pdGlvbnMgPSBzdGF0ZS5qb2JEZWZpbml0aW9ucywKICAgICAgICAgICAgICBzZXR1cFN0YXR1cyA9IHN0YXRlLnNldHVwU3RhdHVzLAogICAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3VyYXRpb24gPSBzdGF0ZS5zb3VyY2VDb25maWd1cmF0aW9uOwoKICAgICAgICAgIHZhciBfbmV4dEpvYlN0YXR1cyA9IGpvYlR5cGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0ZWRKb2JTdGF0dXMsIGpvYlR5cGUpIHsKICAgICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGFjY3VtdWxhdGVkSm9iU3RhdHVzLCBfZGVmaW5lUHJvcGVydHkoe30sIGpvYlR5cGUsIGdldEpvYlN0YXR1cygoMCwgX2xvZ19hbmFseXNpcy5nZXRKb2JJZCkoX3NwYWNlSWQsIF9zb3VyY2VJZCwgam9iVHlwZSkpKGpvYlN1bW1hcmllcykpKTsKICAgICAgICAgIH0sIHt9KTsKCiAgICAgICAgICB2YXIgX25leHRTZXR1cFN0YXR1cyA9IGdldFNldHVwU3RhdHVzKF9zcGFjZUlkLCBfc291cmNlSWQsIHNvdXJjZUNvbmZpZ3VyYXRpb24sIF9uZXh0Sm9iU3RhdHVzLCBqb2JEZWZpbml0aW9ucywgam9iU3VtbWFyaWVzKShzZXR1cFN0YXR1cyk7CgogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIGpvYlN1bW1hcmllczogam9iU3VtbWFyaWVzLAogICAgICAgICAgICBqb2JTdGF0dXM6IF9uZXh0Sm9iU3RhdHVzLAogICAgICAgICAgICBzZXR1cFN0YXR1czogX25leHRTZXR1cFN0YXR1cwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnZmFpbGVkRmV0Y2hpbmdKb2JTdGF0dXNlcyc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIHNldHVwU3RhdHVzOiAndW5rbm93bicsCiAgICAgICAgICAgIGpvYlN0YXR1czogam9iVHlwZXMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRlZEpvYlN0YXR1cywgam9iVHlwZSkgewogICAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBhY2N1bXVsYXRlZEpvYlN0YXR1cywgX2RlZmluZVByb3BlcnR5KHt9LCBqb2JUeXBlLCAndW5rbm93bicpKTsKICAgICAgICAgICAgfSwge30pCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICdmZXRjaGVkTW9kdWxlRGVmaW5pdGlvbic6CiAgICAgICAgewogICAgICAgICAgdmFyIF9zcGFjZUlkMiA9IGFjdGlvbi5zcGFjZUlkLAogICAgICAgICAgICAgIF9zb3VyY2VJZDIgPSBhY3Rpb24uc291cmNlSWQsCiAgICAgICAgICAgICAgbW9kdWxlRGVmaW5pdGlvbiA9IGFjdGlvbi5tb2R1bGVEZWZpbml0aW9uOwogICAgICAgICAgdmFyIGpvYlN0YXR1cyA9IHN0YXRlLmpvYlN0YXR1cywKICAgICAgICAgICAgICBfam9iU3VtbWFyaWVzID0gc3RhdGUuam9iU3VtbWFyaWVzLAogICAgICAgICAgICAgIF9zZXR1cFN0YXR1cyA9IHN0YXRlLnNldHVwU3RhdHVzLAogICAgICAgICAgICAgIF9zb3VyY2VDb25maWd1cmF0aW9uID0gc3RhdGUuc291cmNlQ29uZmlndXJhdGlvbjsKCiAgICAgICAgICB2YXIgX25leHRTZXR1cFN0YXR1czIgPSBnZXRTZXR1cFN0YXR1cyhfc3BhY2VJZDIsIF9zb3VyY2VJZDIsIF9zb3VyY2VDb25maWd1cmF0aW9uLCBqb2JTdGF0dXMsIG1vZHVsZURlZmluaXRpb24uam9icywgX2pvYlN1bW1hcmllcykoX3NldHVwU3RhdHVzKTsKCiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgICAgICAgam9iRGVmaW5pdGlvbnM6IG1vZHVsZURlZmluaXRpb24uam9icywKICAgICAgICAgICAgc2V0dXBTdGF0dXM6IF9uZXh0U2V0dXBTdGF0dXMyCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICd1cGRhdGVkU291cmNlQ29uZmlndXJhdGlvbic6CiAgICAgICAgewogICAgICAgICAgdmFyIF9zcGFjZUlkMyA9IGFjdGlvbi5zcGFjZUlkLAogICAgICAgICAgICAgIF9zb3VyY2VJZDMgPSBhY3Rpb24uc291cmNlSWQsCiAgICAgICAgICAgICAgX3NvdXJjZUNvbmZpZ3VyYXRpb24yID0gYWN0aW9uLnNvdXJjZUNvbmZpZ3VyYXRpb247CiAgICAgICAgICB2YXIgX2pvYkRlZmluaXRpb25zID0gc3RhdGUuam9iRGVmaW5pdGlvbnMsCiAgICAgICAgICAgICAgX2pvYlN0YXR1cyA9IHN0YXRlLmpvYlN0YXR1cywKICAgICAgICAgICAgICBfam9iU3VtbWFyaWVzMiA9IHN0YXRlLmpvYlN1bW1hcmllcywKICAgICAgICAgICAgICBfc2V0dXBTdGF0dXMyID0gc3RhdGUuc2V0dXBTdGF0dXM7CgogICAgICAgICAgdmFyIF9uZXh0U2V0dXBTdGF0dXMzID0gZ2V0U2V0dXBTdGF0dXMoX3NwYWNlSWQzLCBfc291cmNlSWQzLCBfc291cmNlQ29uZmlndXJhdGlvbjIsIF9qb2JTdGF0dXMsIF9qb2JEZWZpbml0aW9ucywgX2pvYlN1bW1hcmllczIpKF9zZXR1cFN0YXR1czIpOwoKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICBzZXR1cFN0YXR1czogX25leHRTZXR1cFN0YXR1czMsCiAgICAgICAgICAgIHNvdXJjZUNvbmZpZ3VyYXRpb246IF9zb3VyY2VDb25maWd1cmF0aW9uMgogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAncmVxdWVzdGVkSm9iQ29uZmlndXJhdGlvblVwZGF0ZSc6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgICAgIHNldHVwU3RhdHVzOiAncmVxdWlyZWRGb3JSZWNvbmZpZ3VyYXRpb24nCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICBjYXNlICdyZXF1ZXN0ZWRKb2JEZWZpbml0aW9uVXBkYXRlJzoKICAgICAgICB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgICAgICAgc2V0dXBTdGF0dXM6ICdyZXF1aXJlZEZvclVwZGF0ZScKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgIGNhc2UgJ3ZpZXdlZFJlc3VsdHMnOgogICAgICAgIHsKICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgICBzZXR1cFN0YXR1czogJ2hpZGRlbkFmdGVyU3VjY2VzcycKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgewogICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgIH0KICB9Owp9OwoKdmFyIGhhc1N1Y2Nlc3NmdWxseUNyZWF0ZWRKb2IgPSBmdW5jdGlvbiBoYXNTdWNjZXNzZnVsbHlDcmVhdGVkSm9iKGpvYklkKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChqb2JTZXR1cFJlc3BvbnNlcykgewogICAgcmV0dXJuIGpvYlNldHVwUmVzcG9uc2VzLmZpbHRlcihmdW5jdGlvbiAoam9iU2V0dXBSZXNwb25zZSkgewogICAgICByZXR1cm4gam9iU2V0dXBSZXNwb25zZS5pZCA9PT0gam9iSWQgJiYgam9iU2V0dXBSZXNwb25zZS5zdWNjZXNzICYmICFqb2JTZXR1cFJlc3BvbnNlLmVycm9yOwogICAgfSkubGVuZ3RoID4gMDsKICB9Owp9OwoKdmFyIGhhc1N1Y2Nlc3NmdWxseVN0YXJ0ZWREYXRhZmVlZCA9IGZ1bmN0aW9uIGhhc1N1Y2Nlc3NmdWxseVN0YXJ0ZWREYXRhZmVlZChkYXRhZmVlZElkKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhZmVlZFNldHVwUmVzcG9uc2VzKSB7CiAgICByZXR1cm4gZGF0YWZlZWRTZXR1cFJlc3BvbnNlcy5maWx0ZXIoZnVuY3Rpb24gKGRhdGFmZWVkU2V0dXBSZXNwb25zZSkgewogICAgICByZXR1cm4gZGF0YWZlZWRTZXR1cFJlc3BvbnNlLmlkID09PSBkYXRhZmVlZElkICYmIGRhdGFmZWVkU2V0dXBSZXNwb25zZS5zdWNjZXNzICYmIGRhdGFmZWVkU2V0dXBSZXNwb25zZS5zdGFydGVkICYmICFkYXRhZmVlZFNldHVwUmVzcG9uc2UuZXJyb3I7CiAgICB9KS5sZW5ndGggPiAwOwogIH07Cn07Cgp2YXIgZ2V0Sm9iU3RhdHVzID0gZnVuY3Rpb24gZ2V0Sm9iU3RhdHVzKGpvYklkKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChqb2JTdW1tYXJpZXMpIHsKICAgIHJldHVybiBqb2JTdW1tYXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChqb2JTdW1tYXJ5KSB7CiAgICAgIHJldHVybiBqb2JTdW1tYXJ5LmlkID09PSBqb2JJZDsKICAgIH0pLm1hcChmdW5jdGlvbiAoam9iU3VtbWFyeSkgewogICAgICBpZiAoam9iU3VtbWFyeS5qb2JTdGF0ZSA9PT0gJ2ZhaWxlZCcgfHwgam9iU3VtbWFyeS5kYXRhZmVlZFN0YXRlID09PSAnJykgewogICAgICAgIHJldHVybiAnZmFpbGVkJzsKICAgICAgfSBlbHNlIGlmIChqb2JTdW1tYXJ5LmpvYlN0YXRlID09PSAnY2xvc2VkJyAmJiBqb2JTdW1tYXJ5LmRhdGFmZWVkU3RhdGUgPT09ICdzdG9wcGVkJyAmJiBqb2JTdW1tYXJ5LmZ1bGxKb2IgJiYgam9iU3VtbWFyeS5mdWxsSm9iLmZpbmlzaGVkX3RpbWUgIT0gbnVsbCkgewogICAgICAgIHJldHVybiAnZmluaXNoZWQnOwogICAgICB9IGVsc2UgaWYgKGpvYlN1bW1hcnkuam9iU3RhdGUgPT09ICdjbG9zZWQnIHx8IGpvYlN1bW1hcnkuam9iU3RhdGUgPT09ICdjbG9zaW5nJyB8fCBqb2JTdW1tYXJ5LmRhdGFmZWVkU3RhdGUgPT09ICdzdG9wcGVkJykgewogICAgICAgIHJldHVybiAnc3RvcHBlZCc7CiAgICAgIH0gZWxzZSBpZiAoam9iU3VtbWFyeS5qb2JTdGF0ZSA9PT0gJ29wZW5pbmcnKSB7CiAgICAgICAgcmV0dXJuICdpbml0aWFsaXppbmcnOwogICAgICB9IGVsc2UgaWYgKGpvYlN1bW1hcnkuam9iU3RhdGUgPT09ICdvcGVuZWQnICYmIGpvYlN1bW1hcnkuZGF0YWZlZWRTdGF0ZSA9PT0gJ3N0YXJ0ZWQnKSB7CiAgICAgICAgcmV0dXJuICdzdGFydGVkJzsKICAgICAgfQoKICAgICAgcmV0dXJuICd1bmtub3duJzsKICAgIH0pWzBdIHx8ICdtaXNzaW5nJzsKICB9Owp9OwoKdmFyIGdldFNldHVwU3RhdHVzID0gZnVuY3Rpb24gZ2V0U2V0dXBTdGF0dXMoc3BhY2VJZCwgc291cmNlSWQsIHNvdXJjZUNvbmZpZ3VyYXRpb24sIGV2ZXJ5Sm9iU3RhdHVzLCBqb2JEZWZpbml0aW9ucywgam9iU3VtbWFyaWVzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChwcmV2aW91c1NldHVwU3RhdHVzKSB7CiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZXZlcnlKb2JTdGF0dXMpLnJlZHVjZShmdW5jdGlvbiAoc2V0dXBTdGF0dXMsIF9yZWYyKSB7CiAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSwKICAgICAgICAgIGpvYlR5cGUgPSBfcmVmM1swXSwKICAgICAgICAgIGpvYlN0YXR1cyA9IF9yZWYzWzFdOwoKICAgICAgdmFyIGpvYklkID0gKDAsIF9sb2dfYW5hbHlzaXMuZ2V0Sm9iSWQpKHNwYWNlSWQsIHNvdXJjZUlkLCBqb2JUeXBlKTsKICAgICAgdmFyIGpvYkRlZmluaXRpb24gPSBqb2JEZWZpbml0aW9ucy5maW5kKGZ1bmN0aW9uIChfcmVmNCkgewogICAgICAgIHZhciBpZCA9IF9yZWY0LmlkOwogICAgICAgIHJldHVybiBpZCA9PT0gam9iVHlwZTsKICAgICAgfSk7CgogICAgICBpZiAoam9iU3RhdHVzID09PSAnbWlzc2luZycpIHsKICAgICAgICByZXR1cm4gJ3JlcXVpcmVkJzsKICAgICAgfSBlbHNlIGlmIChzZXR1cFN0YXR1cyA9PT0gJ3JlcXVpcmVkJyB8fCBzZXR1cFN0YXR1cyA9PT0gJ3JlcXVpcmVkRm9yVXBkYXRlJyB8fCBzZXR1cFN0YXR1cyA9PT0gJ3JlcXVpcmVkRm9yUmVjb25maWd1cmF0aW9uJykgewogICAgICAgIHJldHVybiBzZXR1cFN0YXR1czsKICAgICAgfSBlbHNlIGlmIChqb2JEZWZpbml0aW9uICYmICFpc0pvYlJldmlzaW9uQ3VycmVudChqb2JJZCwgam9iRGVmaW5pdGlvbi5jb25maWcuY3VzdG9tX3NldHRpbmdzLmpvYl9yZXZpc2lvbiB8fCAwKShqb2JTdW1tYXJpZXMpKSB7CiAgICAgICAgcmV0dXJuICdza2lwcGVkQnV0VXBkYXRhYmxlJzsKICAgICAgfSBlbHNlIGlmICghaXNKb2JDb25maWd1cmF0aW9uQ29uc2lzdGVudChqb2JJZCwgc291cmNlQ29uZmlndXJhdGlvbikoam9iU3VtbWFyaWVzKSkgewogICAgICAgIHJldHVybiAnc2tpcHBlZEJ1dFJlY29uZmlndXJhYmxlJzsKICAgICAgfSBlbHNlIGlmIChzZXR1cFN0YXR1cyA9PT0gJ2hpZGRlbkFmdGVyU3VjY2VzcycpIHsKICAgICAgICByZXR1cm4gc2V0dXBTdGF0dXM7CiAgICAgIH0gZWxzZSBpZiAoc2V0dXBTdGF0dXMgPT09ICdza2lwcGVkJyB8fCAoMCwgX2xvZ19hbmFseXNpcy5pc0pvYlN0YXR1c1dpdGhSZXN1bHRzKShqb2JTdGF0dXMpKSB7CiAgICAgICAgcmV0dXJuICdza2lwcGVkJzsKICAgICAgfQoKICAgICAgcmV0dXJuIHNldHVwU3RhdHVzOwogICAgfSwgcHJldmlvdXNTZXR1cFN0YXR1cyk7CiAgfTsKfTsKCnZhciBpc0pvYlJldmlzaW9uQ3VycmVudCA9IGZ1bmN0aW9uIGlzSm9iUmV2aXNpb25DdXJyZW50KGpvYklkLCBjdXJyZW50UmV2aXNpb24pIHsKICByZXR1cm4gZnVuY3Rpb24gKGpvYlN1bW1hcmllcykgewogICAgcmV0dXJuIGpvYlN1bW1hcmllcy5maWx0ZXIoZnVuY3Rpb24gKGpvYlN1bW1hcnkpIHsKICAgICAgcmV0dXJuIGpvYlN1bW1hcnkuaWQgPT09IGpvYklkOwogICAgfSkuZXZlcnkoZnVuY3Rpb24gKGpvYlN1bW1hcnkpIHsKICAgICAgdmFyIF9yZWY1LCBfam9iU3VtbWFyeSRmdWxsSm9iLCBfam9iU3VtbWFyeSRmdWxsSm9iJGM7CgogICAgICByZXR1cm4gKChfcmVmNSA9IGpvYlN1bW1hcnkgPT09IG51bGwgfHwgam9iU3VtbWFyeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9qb2JTdW1tYXJ5JGZ1bGxKb2IgPSBqb2JTdW1tYXJ5LmZ1bGxKb2IpID09PSBudWxsIHx8IF9qb2JTdW1tYXJ5JGZ1bGxKb2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfam9iU3VtbWFyeSRmdWxsSm9iJGMgPSBfam9iU3VtbWFyeSRmdWxsSm9iLmN1c3RvbV9zZXR0aW5ncykgPT09IG51bGwgfHwgX2pvYlN1bW1hcnkkZnVsbEpvYiRjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfam9iU3VtbWFyeSRmdWxsSm9iJGMuam9iX3JldmlzaW9uKSAhPT0gbnVsbCAmJiBfcmVmNSAhPT0gdm9pZCAwID8gX3JlZjUgOiAwKSA+PSBjdXJyZW50UmV2aXNpb247CiAgICB9KTsKICB9Owp9OwoKdmFyIGlzSm9iQ29uZmlndXJhdGlvbkNvbnNpc3RlbnQgPSBmdW5jdGlvbiBpc0pvYkNvbmZpZ3VyYXRpb25Db25zaXN0ZW50KGpvYklkLCBzb3VyY2VDb25maWd1cmF0aW9uKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChqb2JTdW1tYXJpZXMpIHsKICAgIHJldHVybiBqb2JTdW1tYXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChqb2JTdW1tYXJ5KSB7CiAgICAgIHJldHVybiBqb2JTdW1tYXJ5LmlkID09PSBqb2JJZDsKICAgIH0pLmV2ZXJ5KGZ1bmN0aW9uIChqb2JTdW1tYXJ5KSB7CiAgICAgIGlmICgham9iU3VtbWFyeS5mdWxsSm9iIHx8ICFqb2JTdW1tYXJ5LmZ1bGxKb2IuY3VzdG9tX3NldHRpbmdzKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgam9iQ29uZmlndXJhdGlvbiA9IGpvYlN1bW1hcnkuZnVsbEpvYi5jdXN0b21fc2V0dGluZ3MubG9nc19zb3VyY2VfY29uZmlnOwogICAgICByZXR1cm4gam9iQ29uZmlndXJhdGlvbiAmJiBqb2JDb25maWd1cmF0aW9uLmJ1Y2tldFNwYW4gPT09IHNvdXJjZUNvbmZpZ3VyYXRpb24uYnVja2V0U3BhbiAmJiBqb2JDb25maWd1cmF0aW9uLmluZGV4UGF0dGVybiAmJiBpc0luZGV4UGF0dGVyblN1YnNldChqb2JDb25maWd1cmF0aW9uLmluZGV4UGF0dGVybiwgc291cmNlQ29uZmlndXJhdGlvbi5pbmRleFBhdHRlcm4pICYmIGpvYkNvbmZpZ3VyYXRpb24udGltZXN0YW1wRmllbGQgPT09IHNvdXJjZUNvbmZpZ3VyYXRpb24udGltZXN0YW1wRmllbGQ7CiAgICB9KTsKICB9Owp9OwoKdmFyIGlzSW5kZXhQYXR0ZXJuU3Vic2V0ID0gZnVuY3Rpb24gaXNJbmRleFBhdHRlcm5TdWJzZXQoaW5kZXhQYXR0ZXJuU3Vic2V0LCBpbmRleFBhdHRlcm5TdXBlcnNldCkgewogIHZhciBzdWJzZXRTdWJQYXR0ZXJucyA9IGluZGV4UGF0dGVyblN1YnNldC5zcGxpdCgnLCcpOwogIHZhciBzdXBlcnNldFN1YlBhdHRlcm5zID0gbmV3IFNldChpbmRleFBhdHRlcm5TdXBlcnNldC5zcGxpdCgnLCcpKTsKICByZXR1cm4gc3Vic2V0U3ViUGF0dGVybnMuZXZlcnkoZnVuY3Rpb24gKHN1YlBhdHRlcm4pIHsKICAgIHJldHVybiBzdXBlcnNldFN1YlBhdHRlcm5zLmhhcyhzdWJQYXR0ZXJuKTsKICB9KTsKfTsKCnZhciBoYXNFcnJvciA9IGZ1bmN0aW9uIGhhc0Vycm9yKHZhbHVlKSB7CiAgcmV0dXJuIHZhbHVlLmVycm9yICE9IG51bGw7Cn07Cgp2YXIgdXNlTW9kdWxlU3RhdHVzID0gZnVuY3Rpb24gdXNlTW9kdWxlU3RhdHVzKGpvYlR5cGVzLCBzb3VyY2VDb25maWd1cmF0aW9uKSB7CiAgcmV0dXJuICgwLCBfcmVhY3QudXNlUmVkdWNlcikoY3JlYXRlU3RhdHVzUmVkdWNlcihqb2JUeXBlcyksIHsKICAgIGpvYlR5cGVzOiBqb2JUeXBlcywKICAgIHNvdXJjZUNvbmZpZ3VyYXRpb246IHNvdXJjZUNvbmZpZ3VyYXRpb24KICB9LCBjcmVhdGVJbml0aWFsU3RhdGUpOwp9OwoKZXhwb3J0cy51c2VNb2R1bGVTdGF0dXMgPSB1c2VNb2R1bGVTdGF0dXM7"},null]}