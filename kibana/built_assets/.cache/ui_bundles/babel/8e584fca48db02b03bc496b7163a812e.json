{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/wrapper_page/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/wrapper_page/index.js","mtime":1589249553212},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLldyYXBwZXJQYWdlID0gdm9pZCAwOwoKdmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJjbGFzc25hbWVzIikpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3N0eWxlZENvbXBvbmVudHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJzdHlsZWQtY29tcG9uZW50cyIpKTsKCnZhciBfaGVscGVycyA9IHJlcXVpcmUoIi4uLy4uL2xpYi9oZWxwZXJzIik7Cgp2YXIgX2luZGV4ID0gcmVxdWlyZSgiLi4vcGFnZS9pbmRleCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFdyYXBwZXIgPSBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0LmRpdi53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIldyYXBwZXIiLAogIGNvbXBvbmVudElkOiAic2MtMXRhYWVhdi0wIgp9KShbIiIsICIiXSwgZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgdGhlbWUgPSBfcmVmLnRoZW1lOwogIHJldHVybiAoMCwgX3N0eWxlZENvbXBvbmVudHMuY3NzKShbInBhZGRpbmc6IiwgIiAiLCAiICIsICIgIiwgIjsmLnNpZW1XcmFwcGVyUGFnZS0tcmVzdHJpY3RXaWR0aERlZmF1bHQsJi5zaWVtV3JhcHBlclBhZ2UtLXJlc3RyaWN0V2lkdGhDdXN0b217Ym94LXNpemluZzpjb250ZW50LWJveDttYXJnaW46MCBhdXRvO30mLnNpZW1XcmFwcGVyUGFnZS0tcmVzdHJpY3RXaWR0aERlZmF1bHR7bWF4LXdpZHRoOjEwMDBweDt9Il0sIHRoZW1lLmV1aS5wYWRkaW5nU2l6ZXMubCwgX2hlbHBlcnMuZ3V0dGVyVGltZWxpbmUsIHRoZW1lLmV1aS5wYWRkaW5nU2l6ZXMubCwgdGhlbWUuZXVpLnBhZGRpbmdTaXplcy5sKTsKfSk7CgpXcmFwcGVyLmRpc3BsYXlOYW1lID0gJ1dyYXBwZXInOwoKdmFyIFdyYXBwZXJQYWdlQ29tcG9uZW50ID0gZnVuY3Rpb24gV3JhcHBlclBhZ2VDb21wb25lbnQoX3JlZjIpIHsKICB2YXIgY2hpbGRyZW4gPSBfcmVmMi5jaGlsZHJlbiwKICAgICAgY2xhc3NOYW1lID0gX3JlZjIuY2xhc3NOYW1lLAogICAgICByZXN0cmljdFdpZHRoID0gX3JlZjIucmVzdHJpY3RXaWR0aCwKICAgICAgc3R5bGUgPSBfcmVmMi5zdHlsZTsKICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIHsKICAgIHNpZW1XcmFwcGVyUGFnZTogdHJ1ZSwKICAgICdzaWVtV3JhcHBlclBhZ2UtLXJlc3RyaWN0V2lkdGhEZWZhdWx0JzogcmVzdHJpY3RXaWR0aCAmJiB0eXBlb2YgcmVzdHJpY3RXaWR0aCA9PT0gJ2Jvb2xlYW4nICYmIHJlc3RyaWN0V2lkdGggPT09IHRydWUsCiAgICAnc2llbVdyYXBwZXJQYWdlLS1yZXN0cmljdFdpZHRoQ3VzdG9tJzogcmVzdHJpY3RXaWR0aCAmJiB0eXBlb2YgcmVzdHJpY3RXaWR0aCAhPT0gJ2Jvb2xlYW4nCiAgfSk7CiAgdmFyIGN1c3RvbVN0eWxlOwoKICBpZiAocmVzdHJpY3RXaWR0aCAmJiB0eXBlb2YgcmVzdHJpY3RXaWR0aCAhPT0gJ2Jvb2xlYW4nKSB7CiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgcmVzdHJpY3RXaWR0aCA9PT0gJ251bWJlcicgPyAiIi5jb25jYXQocmVzdHJpY3RXaWR0aCwgInB4IikgOiByZXN0cmljdFdpZHRoOwogICAgY3VzdG9tU3R5bGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZSwgewogICAgICBtYXhXaWR0aDogdmFsdWUKICAgIH0pOwogIH0KCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlciwgewogICAgY2xhc3NOYW1lOiBjbGFzc2VzLAogICAgc3R5bGU6IGN1c3RvbVN0eWxlIHx8IHN0eWxlCiAgfSwgY2hpbGRyZW4sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2luZGV4LkFwcEdsb2JhbFN0eWxlLCBudWxsKSk7Cn07Cgp2YXIgV3JhcHBlclBhZ2UgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKFdyYXBwZXJQYWdlQ29tcG9uZW50KTsKCmV4cG9ydHMuV3JhcHBlclBhZ2UgPSBXcmFwcGVyUGFnZTs="},null]}