{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/triggers_actions_ui/public/application/lib/alert_api.js","dependencies":[{"path":"x-pack/plugins/triggers_actions_ui/public/application/lib/alert_api.js","mtime":1589249555549},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmxvYWRBbGVydFR5cGVzID0gbG9hZEFsZXJ0VHlwZXM7CmV4cG9ydHMubG9hZEFsZXJ0ID0gbG9hZEFsZXJ0OwpleHBvcnRzLmxvYWRBbGVydFN0YXRlID0gbG9hZEFsZXJ0U3RhdGU7CmV4cG9ydHMubG9hZEFsZXJ0cyA9IGxvYWRBbGVydHM7CmV4cG9ydHMuZGVsZXRlQWxlcnRzID0gZGVsZXRlQWxlcnRzOwpleHBvcnRzLmNyZWF0ZUFsZXJ0ID0gY3JlYXRlQWxlcnQ7CmV4cG9ydHMudXBkYXRlQWxlcnQgPSB1cGRhdGVBbGVydDsKZXhwb3J0cy5lbmFibGVBbGVydCA9IGVuYWJsZUFsZXJ0OwpleHBvcnRzLmVuYWJsZUFsZXJ0cyA9IGVuYWJsZUFsZXJ0czsKZXhwb3J0cy5kaXNhYmxlQWxlcnQgPSBkaXNhYmxlQWxlcnQ7CmV4cG9ydHMuZGlzYWJsZUFsZXJ0cyA9IGRpc2FibGVBbGVydHM7CmV4cG9ydHMubXV0ZUFsZXJ0SW5zdGFuY2UgPSBtdXRlQWxlcnRJbnN0YW5jZTsKZXhwb3J0cy51bm11dGVBbGVydEluc3RhbmNlID0gdW5tdXRlQWxlcnRJbnN0YW5jZTsKZXhwb3J0cy5tdXRlQWxlcnQgPSBtdXRlQWxlcnQ7CmV4cG9ydHMubXV0ZUFsZXJ0cyA9IG11dGVBbGVydHM7CmV4cG9ydHMudW5tdXRlQWxlcnQgPSB1bm11dGVBbGVydDsKZXhwb3J0cy51bm11dGVBbGVydHMgPSB1bm11dGVBbGVydHM7CmV4cG9ydHMuaGVhbHRoID0gaGVhbHRoOwoKdmFyIHQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJpby10cyIpKTsKCnZhciBfcGlwZWFibGUgPSByZXF1aXJlKCJmcC10cy9saWIvcGlwZWFibGUiKTsKCnZhciBfRWl0aGVyID0gcmVxdWlyZSgiZnAtdHMvbGliL0VpdGhlciIpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfY29tbW9uID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vYWxlcnRpbmcvY29tbW9uIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uL2NvbnN0YW50cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIGxvYWRBbGVydFR5cGVzKF94KSB7CiAgcmV0dXJuIF9sb2FkQWxlcnRUeXBlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfbG9hZEFsZXJ0VHlwZXMoKSB7CiAgX2xvYWRBbGVydFR5cGVzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgdmFyIGh0dHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGh0dHAgPSBfcmVmLmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gaHR0cC5nZXQoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi90eXBlcyIpKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9sb2FkQWxlcnRUeXBlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBsb2FkQWxlcnQoX3gyKSB7CiAgcmV0dXJuIF9sb2FkQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2xvYWRBbGVydCgpIHsKICBfbG9hZEFsZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKF9yZWYyKSB7CiAgICB2YXIgaHR0cCwgYWxlcnRJZDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGh0dHAgPSBfcmVmMi5odHRwLCBhbGVydElkID0gX3JlZjIuYWxlcnRJZDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gaHR0cC5nZXQoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi8iKS5jb25jYXQoYWxlcnRJZCkpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9sb2FkQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gbG9hZEFsZXJ0U3RhdGUoX3gzKSB7CiAgcmV0dXJuIF9sb2FkQWxlcnRTdGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfbG9hZEFsZXJ0U3RhdGUoKSB7CiAgX2xvYWRBbGVydFN0YXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKF9yZWYzKSB7CiAgICB2YXIgaHR0cCwgYWxlcnRJZDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGh0dHAgPSBfcmVmMy5odHRwLCBhbGVydElkID0gX3JlZjMuYWxlcnRJZDsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gaHR0cC5nZXQoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi8iKS5jb25jYXQoYWxlcnRJZCwgIi9zdGF0ZSIpKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkgewogICAgICAgICAgICAgIHJldHVybiBzdGF0ZSA/IHN0YXRlIDoge307CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgICAgICAgICAgcmV0dXJuICgwLCBfcGlwZWFibGUucGlwZSkoX2NvbW1vbi5hbGVydFN0YXRlU2NoZW1hLmRlY29kZShzdGF0ZSksICgwLCBfRWl0aGVyLmZvbGQpKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFsZXJ0IFwiIi5jb25jYXQoYWxlcnRJZCwgIlwiIGhhcyBpbnZhbGlkIHN0YXRlIikpOwogICAgICAgICAgICAgIH0sIHQuaWRlbnRpdHkpKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQzLnNlbnQpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKICByZXR1cm4gX2xvYWRBbGVydFN0YXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGxvYWRBbGVydHMoX3g0KSB7CiAgcmV0dXJuIF9sb2FkQWxlcnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkQWxlcnRzKCkgewogIF9sb2FkQWxlcnRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KF9yZWY0KSB7CiAgICB2YXIgaHR0cCwgcGFnZSwgc2VhcmNoVGV4dCwgdHlwZXNGaWx0ZXIsIGFjdGlvblR5cGVzRmlsdGVyLCBmaWx0ZXJzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaHR0cCA9IF9yZWY0Lmh0dHAsIHBhZ2UgPSBfcmVmNC5wYWdlLCBzZWFyY2hUZXh0ID0gX3JlZjQuc2VhcmNoVGV4dCwgdHlwZXNGaWx0ZXIgPSBfcmVmNC50eXBlc0ZpbHRlciwgYWN0aW9uVHlwZXNGaWx0ZXIgPSBfcmVmNC5hY3Rpb25UeXBlc0ZpbHRlcjsKICAgICAgICAgICAgZmlsdGVycyA9IFtdOwoKICAgICAgICAgICAgaWYgKHR5cGVzRmlsdGVyICYmIHR5cGVzRmlsdGVyLmxlbmd0aCkgewogICAgICAgICAgICAgIGZpbHRlcnMucHVzaCgiYWxlcnQuYXR0cmlidXRlcy5hbGVydFR5cGVJZDooIi5jb25jYXQodHlwZXNGaWx0ZXIuam9pbignIG9yICcpLCAiKSIpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGFjdGlvblR5cGVzRmlsdGVyICYmIGFjdGlvblR5cGVzRmlsdGVyLmxlbmd0aCkgewogICAgICAgICAgICAgIGZpbHRlcnMucHVzaChbJygnLCBhY3Rpb25UeXBlc0ZpbHRlci5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gImFsZXJ0LmF0dHJpYnV0ZXMuYWN0aW9uczp7IGFjdGlvblR5cGVJZDoiLmNvbmNhdChpZCwgIiB9Iik7CiAgICAgICAgICAgICAgfSkuam9pbignIE9SICcpLCAnKSddLmpvaW4oJycpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gaHR0cC5nZXQoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi9fZmluZCIpLCB7CiAgICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UuaW5kZXggKyAxLAogICAgICAgICAgICAgICAgcGVyX3BhZ2U6IHBhZ2Uuc2l6ZSwKICAgICAgICAgICAgICAgIHNlYXJjaF9maWVsZHM6IHNlYXJjaFRleHQgPyBKU09OLnN0cmluZ2lmeShbJ25hbWUnLCAndGFncyddKSA6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgIHNlYXJjaDogc2VhcmNoVGV4dCwKICAgICAgICAgICAgICAgIGZpbHRlcjogZmlsdGVycy5sZW5ndGggPyBmaWx0ZXJzLmpvaW4oJyBhbmQgJykgOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICBkZWZhdWx0X3NlYXJjaF9vcGVyYXRvcjogJ0FORCcsCiAgICAgICAgICAgICAgICBzb3J0X2ZpZWxkOiAnbmFtZS5rZXl3b3JkJywKICAgICAgICAgICAgICAgIHNvcnRfb3JkZXI6ICdhc2MnCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQuc2VudCk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNCk7CiAgfSkpOwogIHJldHVybiBfbG9hZEFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBkZWxldGVBbGVydHMoX3g1KSB7CiAgcmV0dXJuIF9kZWxldGVBbGVydHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2RlbGV0ZUFsZXJ0cygpIHsKICBfZGVsZXRlQWxlcnRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KF9yZWY1KSB7CiAgICB2YXIgaWRzLCBodHRwLCBzdWNjZXNzZXMsIGVycm9yczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlkcyA9IF9yZWY1LmlkcywgaHR0cCA9IF9yZWY1Lmh0dHA7CiAgICAgICAgICAgIHN1Y2Nlc3NlcyA9IFtdOwogICAgICAgICAgICBlcnJvcnMgPSBbXTsKICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaWRzLm1hcChmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICByZXR1cm4gaHR0cC5kZWxldGUoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi8iKS5jb25jYXQoaWQpKTsKICAgICAgICAgICAgfSkpLnRoZW4oZnVuY3Rpb24gKGZ1bGZpbGxlZCkgewogICAgICAgICAgICAgIHN1Y2Nlc3Nlcy5wdXNoLmFwcGx5KHN1Y2Nlc3NlcywgX3RvQ29uc3VtYWJsZUFycmF5KGZ1bGZpbGxlZCkpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVqZWN0ZWQpIHsKICAgICAgICAgICAgICBlcnJvcnMucHVzaC5hcHBseShlcnJvcnMsIF90b0NvbnN1bWFibGVBcnJheShyZWplY3RlZCkpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3VjY2Vzc2VzOiBzdWNjZXNzZXMsCiAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnMKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNSk7CiAgfSkpOwogIHJldHVybiBfZGVsZXRlQWxlcnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZUFsZXJ0KF94NikgewogIHJldHVybiBfY3JlYXRlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2NyZWF0ZUFsZXJ0KCkgewogIF9jcmVhdGVBbGVydCA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihfcmVmNikgewogICAgdmFyIGh0dHAsIGFsZXJ0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaHR0cCA9IF9yZWY2Lmh0dHAsIGFsZXJ0ID0gX3JlZjYuYWxlcnQ7CiAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGh0dHAucG9zdCgiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX0FMRVJUX0FQSV9QQVRIKSwgewogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGFsZXJ0KQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDYuc2VudCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNik7CiAgfSkpOwogIHJldHVybiBfY3JlYXRlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gdXBkYXRlQWxlcnQoX3g3KSB7CiAgcmV0dXJuIF91cGRhdGVBbGVydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfdXBkYXRlQWxlcnQoKSB7CiAgX3VwZGF0ZUFsZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KF9yZWY3KSB7CiAgICB2YXIgaHR0cCwgYWxlcnQsIGlkOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaHR0cCA9IF9yZWY3Lmh0dHAsIGFsZXJ0ID0gX3JlZjcuYWxlcnQsIGlkID0gX3JlZjcuaWQ7CiAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGh0dHAucHV0KCIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfQUxFUlRfQVBJX1BBVEgsICIvIikuY29uY2F0KGlkKSwgewogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KCgwLCBfbG9kYXNoLnBpY2spKGFsZXJ0LCBbJ3Rocm90dGxlJywgJ25hbWUnLCAndGFncycsICdzY2hlZHVsZScsICdwYXJhbXMnLCAnYWN0aW9ucyddKSkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ3LnNlbnQpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTcpOwogIH0pKTsKICByZXR1cm4gX3VwZGF0ZUFsZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGVuYWJsZUFsZXJ0KF94OCkgewogIHJldHVybiBfZW5hYmxlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2VuYWJsZUFsZXJ0KCkgewogIF9lbmFibGVBbGVydCA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOChfcmVmOCkgewogICAgdmFyIGlkLCBodHRwOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWQgPSBfcmVmOC5pZCwgaHR0cCA9IF9yZWY4Lmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGh0dHAucG9zdCgiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX0FMRVJUX0FQSV9QQVRILCAiLyIpLmNvbmNhdChpZCwgIi9fZW5hYmxlIikpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTgpOwogIH0pKTsKICByZXR1cm4gX2VuYWJsZUFsZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGVuYWJsZUFsZXJ0cyhfeDkpIHsKICByZXR1cm4gX2VuYWJsZUFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZW5hYmxlQWxlcnRzKCkgewogIF9lbmFibGVBbGVydHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoX3JlZjkpIHsKICAgIHZhciBpZHMsIGh0dHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZHMgPSBfcmVmOS5pZHMsIGh0dHAgPSBfcmVmOS5odHRwOwogICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpZHMubWFwKGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICAgIHJldHVybiBlbmFibGVBbGVydCh7CiAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICBodHRwOiBodHRwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU5KTsKICB9KSk7CiAgcmV0dXJuIF9lbmFibGVBbGVydHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gZGlzYWJsZUFsZXJ0KF94MTApIHsKICByZXR1cm4gX2Rpc2FibGVBbGVydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZGlzYWJsZUFsZXJ0KCkgewogIF9kaXNhYmxlQWxlcnQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKF9yZWYxMCkgewogICAgdmFyIGlkLCBodHRwOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMC5wcmV2ID0gX2NvbnRleHQxMC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlkID0gX3JlZjEwLmlkLCBodHRwID0gX3JlZjEwLmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBodHRwLnBvc3QoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi8iKS5jb25jYXQoaWQsICIvX2Rpc2FibGUiKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTEwKTsKICB9KSk7CiAgcmV0dXJuIF9kaXNhYmxlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gZGlzYWJsZUFsZXJ0cyhfeDExKSB7CiAgcmV0dXJuIF9kaXNhYmxlQWxlcnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9kaXNhYmxlQWxlcnRzKCkgewogIF9kaXNhYmxlQWxlcnRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMShfcmVmMTEpIHsKICAgIHZhciBpZHMsIGh0dHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTExJChfY29udGV4dDExKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWRzID0gX3JlZjExLmlkcywgaHR0cCA9IF9yZWYxMS5odHRwOwogICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaWRzLm1hcChmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICByZXR1cm4gZGlzYWJsZUFsZXJ0KHsKICAgICAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgICAgIGh0dHA6IGh0dHAKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxMSk7CiAgfSkpOwogIHJldHVybiBfZGlzYWJsZUFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBtdXRlQWxlcnRJbnN0YW5jZShfeDEyKSB7CiAgcmV0dXJuIF9tdXRlQWxlcnRJbnN0YW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfbXV0ZUFsZXJ0SW5zdGFuY2UoKSB7CiAgX211dGVBbGVydEluc3RhbmNlID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMihfcmVmMTIpIHsKICAgIHZhciBpZCwgaW5zdGFuY2VJZCwgaHR0cDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZCA9IF9yZWYxMi5pZCwgaW5zdGFuY2VJZCA9IF9yZWYxMi5pbnN0YW5jZUlkLCBodHRwID0gX3JlZjEyLmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBodHRwLnBvc3QoIiIuY29uY2F0KF9jb25zdGFudHMuQkFTRV9BTEVSVF9BUElfUEFUSCwgIi8iKS5jb25jYXQoaWQsICIvYWxlcnRfaW5zdGFuY2UvIikuY29uY2F0KGluc3RhbmNlSWQsICIvX211dGUiKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTEyKTsKICB9KSk7CiAgcmV0dXJuIF9tdXRlQWxlcnRJbnN0YW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiB1bm11dGVBbGVydEluc3RhbmNlKF94MTMpIHsKICByZXR1cm4gX3VubXV0ZUFsZXJ0SW5zdGFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX3VubXV0ZUFsZXJ0SW5zdGFuY2UoKSB7CiAgX3VubXV0ZUFsZXJ0SW5zdGFuY2UgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEzKF9yZWYxMykgewogICAgdmFyIGlkLCBpbnN0YW5jZUlkLCBodHRwOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMy5wcmV2ID0gX2NvbnRleHQxMy5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlkID0gX3JlZjEzLmlkLCBpbnN0YW5jZUlkID0gX3JlZjEzLmluc3RhbmNlSWQsIGh0dHAgPSBfcmVmMTMuaHR0cDsKICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGh0dHAucG9zdCgiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX0FMRVJUX0FQSV9QQVRILCAiLyIpLmNvbmNhdChpZCwgIi9hbGVydF9pbnN0YW5jZS8iKS5jb25jYXQoaW5zdGFuY2VJZCwgIi9fdW5tdXRlIikpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxMyk7CiAgfSkpOwogIHJldHVybiBfdW5tdXRlQWxlcnRJbnN0YW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBtdXRlQWxlcnQoX3gxNCkgewogIHJldHVybiBfbXV0ZUFsZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9tdXRlQWxlcnQoKSB7CiAgX211dGVBbGVydCA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTQoX3JlZjE0KSB7CiAgICB2YXIgaWQsIGh0dHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE0JChfY29udGV4dDE0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDE0LnByZXYgPSBfY29udGV4dDE0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWQgPSBfcmVmMTQuaWQsIGh0dHAgPSBfcmVmMTQuaHR0cDsKICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGh0dHAucG9zdCgiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX0FMRVJUX0FQSV9QQVRILCAiLyIpLmNvbmNhdChpZCwgIi9fbXV0ZV9hbGwiKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTE0KTsKICB9KSk7CiAgcmV0dXJuIF9tdXRlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gbXV0ZUFsZXJ0cyhfeDE1KSB7CiAgcmV0dXJuIF9tdXRlQWxlcnRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9tdXRlQWxlcnRzKCkgewogIF9tdXRlQWxlcnRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNShfcmVmMTUpIHsKICAgIHZhciBpZHMsIGh0dHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDE1LnByZXYgPSBfY29udGV4dDE1Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgaWRzID0gX3JlZjE1LmlkcywgaHR0cCA9IF9yZWYxNS5odHRwOwogICAgICAgICAgICBfY29udGV4dDE1Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaWRzLm1hcChmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICByZXR1cm4gbXV0ZUFsZXJ0KHsKICAgICAgICAgICAgICAgIGh0dHA6IGh0dHAsCiAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxNSk7CiAgfSkpOwogIHJldHVybiBfbXV0ZUFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiB1bm11dGVBbGVydChfeDE2KSB7CiAgcmV0dXJuIF91bm11dGVBbGVydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfdW5tdXRlQWxlcnQoKSB7CiAgX3VubXV0ZUFsZXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNihfcmVmMTYpIHsKICAgIHZhciBpZCwgaHR0cDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTYkKF9jb250ZXh0MTYpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTYucHJldiA9IF9jb250ZXh0MTYubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZCA9IF9yZWYxNi5pZCwgaHR0cCA9IF9yZWYxNi5odHRwOwogICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gaHR0cC5wb3N0KCIiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfQUxFUlRfQVBJX1BBVEgsICIvIikuY29uY2F0KGlkLCAiL191bm11dGVfYWxsIikpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxNik7CiAgfSkpOwogIHJldHVybiBfdW5tdXRlQWxlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gdW5tdXRlQWxlcnRzKF94MTcpIHsKICByZXR1cm4gX3VubXV0ZUFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfdW5tdXRlQWxlcnRzKCkgewogIF91bm11dGVBbGVydHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE3KF9yZWYxNykgewogICAgdmFyIGlkcywgaHR0cDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTckKF9jb250ZXh0MTcpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTcucHJldiA9IF9jb250ZXh0MTcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZHMgPSBfcmVmMTcuaWRzLCBodHRwID0gX3JlZjE3Lmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpZHMubWFwKGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICAgIHJldHVybiB1bm11dGVBbGVydCh7CiAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICBodHRwOiBodHRwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMTcpOwogIH0pKTsKICByZXR1cm4gX3VubXV0ZUFsZXJ0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBoZWFsdGgoX3gxOCkgewogIHJldHVybiBfaGVhbHRoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9oZWFsdGgoKSB7CiAgX2hlYWx0aCA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTgoX3JlZjE4KSB7CiAgICB2YXIgaHR0cDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTgkKF9jb250ZXh0MTgpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTgucHJldiA9IF9jb250ZXh0MTgubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBodHRwID0gX3JlZjE4Lmh0dHA7CiAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBodHRwLmdldCgiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX0FMRVJUX0FQSV9QQVRILCAiL19oZWFsdGgiKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0MTguc2VudCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTE4KTsKICB9KSk7CiAgcmV0dXJuIF9oZWFsdGguYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},null]}