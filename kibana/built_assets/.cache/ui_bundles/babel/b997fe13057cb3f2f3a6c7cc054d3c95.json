{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/page/overview/overview_host/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/page/overview/overview_host/index.js","mtime":1589249553112},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk92ZXJ2aWV3SG9zdCA9IHZvaWQgMDsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX251bWVyYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBlbGFzdGljL251bWVyYWwiKSk7Cgp2YXIgX3JlYWN0ID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX292ZXJ2aWV3X2hvc3QgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb250YWluZXJzL292ZXJ2aWV3L292ZXJ2aWV3X2hvc3QiKTsKCnZhciBfaGVhZGVyX3NlY3Rpb24gPSByZXF1aXJlKCIuLi8uLi8uLi9oZWFkZXJfc2VjdGlvbiIpOwoKdmFyIF9raWJhbmEgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9saWIva2liYW5hIik7Cgp2YXIgX2xpbmtfdG8gPSByZXF1aXJlKCIuLi8uLi8uLi9saW5rX3RvIik7Cgp2YXIgX292ZXJ2aWV3X2hvc3Rfc3RhdHMgPSByZXF1aXJlKCIuLi9vdmVydmlld19ob3N0X3N0YXRzIik7Cgp2YXIgX21hbmFnZV9xdWVyeSA9IHJlcXVpcmUoIi4uLy4uLy4uL3BhZ2UvbWFuYWdlX3F1ZXJ5Iik7Cgp2YXIgX2luc3BlY3QgPSByZXF1aXJlKCIuLi8uLi8uLi9pbnNwZWN0Iik7Cgp2YXIgX3VzZV9nZXRfdXJsX3NlYXJjaCA9IHJlcXVpcmUoIi4uLy4uLy4uL25hdmlnYXRpb24vdXNlX2dldF91cmxfc2VhcmNoIik7Cgp2YXIgX2hvbWVfbmF2aWdhdGlvbnMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9wYWdlcy9ob21lL2hvbWVfbmF2aWdhdGlvbnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIE92ZXJ2aWV3SG9zdFN0YXRzTWFuYWdlID0gKDAsIF9tYW5hZ2VfcXVlcnkubWFuYWdlUXVlcnkpKF9vdmVydmlld19ob3N0X3N0YXRzLk92ZXJ2aWV3SG9zdFN0YXRzKTsKCnZhciBPdmVydmlld0hvc3RDb21wb25lbnQgPSBmdW5jdGlvbiBPdmVydmlld0hvc3RDb21wb25lbnQoX3JlZikgewogIHZhciBlbmREYXRlID0gX3JlZi5lbmREYXRlLAogICAgICBmaWx0ZXJRdWVyeSA9IF9yZWYuZmlsdGVyUXVlcnksCiAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYuc3RhcnREYXRlLAogICAgICBzZXRRdWVyeSA9IF9yZWYuc2V0UXVlcnk7CgogIHZhciBfdXNlVWlTZXR0aW5nJCA9ICgwLCBfa2liYW5hLnVzZVVpU2V0dGluZyQpKF9jb25zdGFudHMuREVGQVVMVF9OVU1CRVJfRk9STUFUKSwKICAgICAgX3VzZVVpU2V0dGluZyQyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVVpU2V0dGluZyQsIDEpLAogICAgICBkZWZhdWx0TnVtYmVyRm9ybWF0ID0gX3VzZVVpU2V0dGluZyQyWzBdOwoKICB2YXIgdXJsU2VhcmNoID0gKDAsIF91c2VfZ2V0X3VybF9zZWFyY2gudXNlR2V0VXJsU2VhcmNoKShfaG9tZV9uYXZpZ2F0aW9ucy5uYXZUYWJzLmhvc3RzKTsKICB2YXIgaG9zdFBhZ2VCdXR0b24gPSAoMCwgX3JlYWN0Mi51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgaHJlZjogKDAsIF9saW5rX3RvLmdldEhvc3RzVXJsKSh1cmxTZWFyY2gpCiAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLnNpZW0ub3ZlcnZpZXcuaG9zdHNBY3Rpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlZpZXcgaG9zdHMiCiAgICB9KSk7CiAgfSwgW3VybFNlYXJjaF0pOwogIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5zcGVjdC5JbnNwZWN0QnV0dG9uQ29udGFpbmVyLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfb3ZlcnZpZXdfaG9zdC5PdmVydmlld0hvc3RRdWVyeSwgewogICAgImRhdGEtdGVzdC1zdWJqIjogIm92ZXJ2aWV3LWhvc3QtcXVlcnkiLAogICAgZW5kRGF0ZTogZW5kRGF0ZSwKICAgIGZpbHRlclF1ZXJ5OiBmaWx0ZXJRdWVyeSwKICAgIHNvdXJjZUlkOiAiZGVmYXVsdCIsCiAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZQogIH0sIGZ1bmN0aW9uIChfcmVmMikgewogICAgdmFyIG92ZXJ2aWV3SG9zdCA9IF9yZWYyLm92ZXJ2aWV3SG9zdCwKICAgICAgICBsb2FkaW5nID0gX3JlZjIubG9hZGluZywKICAgICAgICBpZCA9IF9yZWYyLmlkLAogICAgICAgIGluc3BlY3QgPSBfcmVmMi5pbnNwZWN0LAogICAgICAgIHJlZmV0Y2ggPSBfcmVmMi5yZWZldGNoOwogICAgdmFyIGhvc3RFdmVudHNDb3VudCA9ICgwLCBfb3ZlcnZpZXdfaG9zdF9zdGF0cy5nZXRPdmVydmlld0hvc3RTdGF0cykob3ZlcnZpZXdIb3N0KS5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCBzdGF0KSB7CiAgICAgIHJldHVybiB0b3RhbCArIHN0YXQuY291bnQ7CiAgICB9LCAwKTsKICAgIHZhciBmb3JtYXR0ZWRIb3N0RXZlbnRzQ291bnQgPSAoMCwgX251bWVyYWwuZGVmYXVsdCkoaG9zdEV2ZW50c0NvdW50KS5mb3JtYXQoZGVmYXVsdE51bWJlckZvcm1hdCk7CiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaGVhZGVyX3NlY3Rpb24uSGVhZGVyU2VjdGlvbiwgewogICAgICBpZDogX292ZXJ2aWV3X2hvc3QuSUQsCiAgICAgIHN1YnRpdGxlOiAhKDAsIF9mcC5pc0VtcHR5KShvdmVydmlld0hvc3QpID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNob3dpbmc6IHtmb3JtYXR0ZWRIb3N0RXZlbnRzQ291bnR9IHtob3N0RXZlbnRzQ291bnQsIHBsdXJhbCwgb25lIHtldmVudH0gb3RoZXIge2V2ZW50c319IiwKICAgICAgICBpZDogInhwYWNrLnNpZW0ub3ZlcnZpZXcub3ZlcnZpZXdIb3N0Lmhvc3RzU3VidGl0bGUiLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgZm9ybWF0dGVkSG9zdEV2ZW50c0NvdW50OiBmb3JtYXR0ZWRIb3N0RXZlbnRzQ291bnQsCiAgICAgICAgICBob3N0RXZlbnRzQ291bnQ6IGhvc3RFdmVudHNDb3VudAogICAgICAgIH0KICAgICAgfSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsICcnKSwKICAgICAgdGl0bGU6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5zaWVtLm92ZXJ2aWV3Lmhvc3RzVGl0bGUiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiSG9zdCBldmVudHMiCiAgICAgIH0pCiAgICB9LCBob3N0UGFnZUJ1dHRvbiksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE92ZXJ2aWV3SG9zdFN0YXRzTWFuYWdlLCB7CiAgICAgIGxvYWRpbmc6IGxvYWRpbmcsCiAgICAgIGRhdGE6IG92ZXJ2aWV3SG9zdCwKICAgICAgc2V0UXVlcnk6IHNldFF1ZXJ5LAogICAgICBpZDogaWQsCiAgICAgIGluc3BlY3Q6IGluc3BlY3QsCiAgICAgIHJlZmV0Y2g6IHJlZmV0Y2gKICAgIH0pKTsKICB9KSkpKTsKfTsKCnZhciBPdmVydmlld0hvc3QgPSBfcmVhY3QyLmRlZmF1bHQubWVtbyhPdmVydmlld0hvc3RDb21wb25lbnQpOwoKZXhwb3J0cy5PdmVydmlld0hvc3QgPSBPdmVydmlld0hvc3Q7"},null]}