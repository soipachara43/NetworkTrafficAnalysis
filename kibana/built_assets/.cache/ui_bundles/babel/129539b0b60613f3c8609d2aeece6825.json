{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/home/public/application/components/tutorial_directory.js","dependencies":[{"path":"src/plugins/home/public/application/components/tutorial_directory.js","mtime":1589249550847},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlR1dG9yaWFsRGlyZWN0b3J5ID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX3N5bm9wc2lzID0gcmVxdWlyZSgiLi9zeW5vcHNpcyIpOwoKdmFyIF9zYW1wbGVfZGF0YV9zZXRfY2FyZHMgPSByZXF1aXJlKCIuL3NhbXBsZV9kYXRhX3NldF9jYXJkcyIpOwoKdmFyIF9raWJhbmFfc2VydmljZXMgPSByZXF1aXJlKCIuLi9raWJhbmFfc2VydmljZXMiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2xvYWRfdHV0b3JpYWxzID0gcmVxdWlyZSgiLi4vbG9hZF90dXRvcmlhbHMiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBBTExfVEFCX0lEID0gJ2FsbCc7CnZhciBTQU1QTEVfREFUQV9UQUJfSUQgPSAnc2FtcGxlRGF0YSc7Cgp2YXIgaG9tZVRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2hvbWUuYnJlYWRjcnVtYnMuaG9tZVRpdGxlJywgewogIGRlZmF1bHRNZXNzYWdlOiAnSG9tZScKfSk7Cgp2YXIgYWRkRGF0YVRpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2hvbWUuYnJlYWRjcnVtYnMuYWRkRGF0YVRpdGxlJywgewogIGRlZmF1bHRNZXNzYWdlOiAnQWRkIGRhdGEnCn0pOwoKdmFyIFR1dG9yaWFsRGlyZWN0b3J5VWkgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFR1dG9yaWFsRGlyZWN0b3J5VWksIF9SZWFjdCRDb21wb25lbnQpOwoKICBmdW5jdGlvbiBUdXRvcmlhbERpcmVjdG9yeVVpKHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR1dG9yaWFsRGlyZWN0b3J5VWkpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFR1dG9yaWFsRGlyZWN0b3J5VWkpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvblNlbGVjdGVkVGFiQ2hhbmdlZCIsIGZ1bmN0aW9uIChpZCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2VsZWN0ZWRUYWJJZDogaWQKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZW5kZXJUYWJzIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RoaXMudGFicy5tYXAoZnVuY3Rpb24gKHRhYiwgaW5kZXgpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYiwgewogICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uU2VsZWN0ZWRUYWJDaGFuZ2VkKHRhYi5pZCk7CiAgICAgICAgICB9LAogICAgICAgICAgaXNTZWxlY3RlZDogdGFiLmlkID09PSBfdGhpcy5zdGF0ZS5zZWxlY3RlZFRhYklkLAogICAgICAgICAga2V5OiBpbmRleAogICAgICAgIH0sIHRhYi5uYW1lKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZW5kZXJUYWJDb250ZW50IiwgZnVuY3Rpb24gKCkgewogICAgICBpZiAoX3RoaXMuc3RhdGUuc2VsZWN0ZWRUYWJJZCA9PT0gU0FNUExFX0RBVEFfVEFCX0lEKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NhbXBsZV9kYXRhX3NldF9jYXJkcy5TYW1wbGVEYXRhU2V0Q2FyZHMsIHsKICAgICAgICAgIGFkZEJhc2VQYXRoOiBfdGhpcy5wcm9wcy5hZGRCYXNlUGF0aAogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcmlkLCB7CiAgICAgICAgY29sdW1uczogNAogICAgICB9LCBfdGhpcy5zdGF0ZS50dXRvcmlhbENhcmRzLmZpbHRlcihmdW5jdGlvbiAodHV0b3JpYWwpIHsKICAgICAgICByZXR1cm4gX3RoaXMuc3RhdGUuc2VsZWN0ZWRUYWJJZCA9PT0gQUxMX1RBQl9JRCB8fCBfdGhpcy5zdGF0ZS5zZWxlY3RlZFRhYklkID09PSB0dXRvcmlhbC5jYXRlZ29yeTsKICAgICAgfSkubWFwKGZ1bmN0aW9uICh0dXRvcmlhbCkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGtleTogdHV0b3JpYWwubmFtZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N5bm9wc2lzLlN5bm9wc2lzLCB7CiAgICAgICAgICBpY29uVHlwZTogdHV0b3JpYWwuaWNvbiwKICAgICAgICAgIGRlc2NyaXB0aW9uOiB0dXRvcmlhbC5kZXNjcmlwdGlvbiwKICAgICAgICAgIHRpdGxlOiB0dXRvcmlhbC5uYW1lLAogICAgICAgICAgd3JhcEluUGFuZWw6IHRydWUsCiAgICAgICAgICB1cmw6IHR1dG9yaWFsLnVybCwKICAgICAgICAgIG9uQ2xpY2s6IHR1dG9yaWFsLm9uQ2xpY2ssCiAgICAgICAgICBpc0JldGE6IHR1dG9yaWFsLmlzQmV0YQogICAgICAgIH0pKTsKICAgICAgfSkpOwogICAgfSk7CgogICAgX3RoaXMudGFicyA9IFt7CiAgICAgIGlkOiBBTExfVEFCX0lELAogICAgICBuYW1lOiBfdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgIGlkOiAnaG9tZS50dXRvcmlhbC50YWJzLmFsbFRpdGxlJywKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FsbCcKICAgICAgfSkKICAgIH0sIHsKICAgICAgaWQ6ICdsb2dnaW5nJywKICAgICAgbmFtZTogX3RoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICBpZDogJ2hvbWUudHV0b3JpYWwudGFicy5sb2dnaW5nVGl0bGUnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTG9ncycKICAgICAgfSkKICAgIH0sIHsKICAgICAgaWQ6ICdtZXRyaWNzJywKICAgICAgbmFtZTogX3RoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICBpZDogJ2hvbWUudHV0b3JpYWwudGFicy5tZXRyaWNzVGl0bGUnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWV0cmljcycKICAgICAgfSkKICAgIH0sIHsKICAgICAgaWQ6ICdzaWVtJywKICAgICAgbmFtZTogX3RoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICBpZDogJ2hvbWUudHV0b3JpYWwudGFicy5zaWVtVGl0bGUnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU0lFTScKICAgICAgfSkKICAgIH0sIHsKICAgICAgaWQ6IFNBTVBMRV9EQVRBX1RBQl9JRCwKICAgICAgbmFtZTogX3RoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICBpZDogJ2hvbWUudHV0b3JpYWwudGFicy5zYW1wbGVEYXRhVGl0bGUnLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2FtcGxlIGRhdGEnCiAgICAgIH0pCiAgICB9XTsKICAgIHZhciBvcGVuVGFiID0gQUxMX1RBQl9JRDsKCiAgICBpZiAocHJvcHMub3BlblRhYiAmJiBfdGhpcy50YWJzLnNvbWUoZnVuY3Rpb24gKHRhYikgewogICAgICByZXR1cm4gdGFiLmlkID09PSBwcm9wcy5vcGVuVGFiOwogICAgfSkpIHsKICAgICAgb3BlblRhYiA9IHByb3BzLm9wZW5UYWI7CiAgICB9CgogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIHNlbGVjdGVkVGFiSWQ6IG9wZW5UYWIsCiAgICAgIHR1dG9yaWFsQ2FyZHM6IFtdCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFR1dG9yaWFsRGlyZWN0b3J5VWksIFt7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsVW5tb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY29tcG9uZW50RGlkTW91bnQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICB2YXIgdHV0b3JpYWxDb25maWdzLCB0dXRvcmlhbENhcmRzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAoMCwgX2tpYmFuYV9zZXJ2aWNlcy5nZXRTZXJ2aWNlcykoKS5jaHJvbWUuc2V0QnJlYWRjcnVtYnMoW3sKICAgICAgICAgICAgICAgICAgdGV4dDogaG9tZVRpdGxlLAogICAgICAgICAgICAgICAgICBocmVmOiAnIy9ob21lJwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICB0ZXh0OiBhZGREYXRhVGl0bGUKICAgICAgICAgICAgICAgIH1dKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfbG9hZF90dXRvcmlhbHMuZ2V0VHV0b3JpYWxzKSgpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICB0dXRvcmlhbENvbmZpZ3MgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc01vdW50ZWQpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICB0dXRvcmlhbENhcmRzID0gdHV0b3JpYWxDb25maWdzLm1hcChmdW5jdGlvbiAodHV0b3JpYWxDb25maWcpIHsKICAgICAgICAgICAgICAgICAgLy8gYWRkIGJhc2UgcGF0aCB0byBTVkcgYmFzZWQgaWNvbnMKICAgICAgICAgICAgICAgICAgdmFyIGljb24gPSB0dXRvcmlhbENvbmZpZy5ldWlJY29uVHlwZTsKCiAgICAgICAgICAgICAgICAgIGlmIChpY29uICYmIGljb24uaW5jbHVkZXMoJy8nKSkgewogICAgICAgICAgICAgICAgICAgIGljb24gPSBfdGhpczIucHJvcHMuYWRkQmFzZVBhdGgoaWNvbik7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHR1dG9yaWFsQ29uZmlnLmNhdGVnb3J5LAogICAgICAgICAgICAgICAgICAgIGljb246IGljb24sCiAgICAgICAgICAgICAgICAgICAgbmFtZTogdHV0b3JpYWxDb25maWcubmFtZSwKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdHV0b3JpYWxDb25maWcuc2hvcnREZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgICB1cmw6IF90aGlzMi5wcm9wcy5hZGRCYXNlUGF0aCgiIy9ob21lL3R1dG9yaWFsLyIuY29uY2F0KHR1dG9yaWFsQ29uZmlnLmlkKSksCiAgICAgICAgICAgICAgICAgICAgZWxhc3RpY0Nsb3VkOiB0dXRvcmlhbENvbmZpZy5lbGFzdGljQ2xvdWQgLy8gQmV0YSBsYWJlbCBpcyBza2lwcGVkIG9uIHRoZSB0dXRvcmlhbCBvdmVydmlldyBwYWdlIGZvciBub3cuIFRvbyBtYW55IGJldGEgbGFiZWxzLgogICAgICAgICAgICAgICAgICAgIC8vaXNCZXRhOiB0dXRvcmlhbENvbmZpZy5pc0JldGEsCgogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7IC8vIEFkZCBjYXJkIGZvciBzYW1wbGUgZGF0YSB0aGF0IG9ubHkgZ2V0cyBzaG93IGluICJhbGwiIHRhYgoKICAgICAgICAgICAgICAgIHR1dG9yaWFsQ2FyZHMucHVzaCh7CiAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICBpZDogJ2hvbWUudHV0b3JpYWwuY2FyZC5zYW1wbGVEYXRhVGl0bGUnLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2FtcGxlIERhdGEnCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5wcm9wcy5pbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgIGlkOiAnaG9tZS50dXRvcmlhbC5jYXJkLnNhbXBsZURhdGFEZXNjcmlwdGlvbicsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdHZXQgc3RhcnRlZCBleHBsb3JpbmcgS2liYW5hIHdpdGggdGhlc2UgIm9uZSBjbGljayIgZGF0YSBzZXRzLicKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5wcm9wcy5hZGRCYXNlUGF0aCgnIy9ob21lL3R1dG9yaWFsX2RpcmVjdG9yeS9zYW1wbGVEYXRhJyksCiAgICAgICAgICAgICAgICAgIGVsYXN0aWNDbG91ZDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5vblNlbGVjdGVkVGFiQ2hhbmdlZC5iaW5kKG51bGwsIFNBTVBMRV9EQVRBX1RBQl9JRCkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmlzQ2xvdWRFbmFibGVkKSB7CiAgICAgICAgICAgICAgICAgIHR1dG9yaWFsQ2FyZHMgPSB0dXRvcmlhbENhcmRzLmZpbHRlcihmdW5jdGlvbiAodHV0b3JpYWwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0Lmhhcyh0dXRvcmlhbCwgJ2VsYXN0aWNDbG91ZCcpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0dXRvcmlhbENhcmRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubmFtZS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi5uYW1lLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlCiAgICAgICAgICAgICAgICAgIHR1dG9yaWFsQ2FyZHM6IHR1dG9yaWFsQ2FyZHMKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICAgIHJldHVybiBfY29tcG9uZW50RGlkTW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNvbXBvbmVudERpZE1vdW50OwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZSwgewogICAgICAgIHJlc3RyaWN0V2lkdGg6IDEyMDAKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VCb2R5LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAibCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDEiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiaG9tZS50dXRvcmlhbC5hZGREYXRhVG9LaWJhbmFUaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBZGQgZGF0YSIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYnMsIG51bGwsIHRoaXMucmVuZGVyVGFicygpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgbnVsbCksIHRoaXMucmVuZGVyVGFiQ29udGVudCgpKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVHV0b3JpYWxEaXJlY3RvcnlVaTsKfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpOwoKVHV0b3JpYWxEaXJlY3RvcnlVaS5wcm9wVHlwZXMgPSB7CiAgYWRkQmFzZVBhdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgb3BlblRhYjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBpc0Nsb3VkRW5hYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZAp9Owp2YXIgVHV0b3JpYWxEaXJlY3RvcnkgPSAoMCwgX3JlYWN0Mi5pbmplY3RJMThuKShUdXRvcmlhbERpcmVjdG9yeVVpKTsKZXhwb3J0cy5UdXRvcmlhbERpcmVjdG9yeSA9IFR1dG9yaWFsRGlyZWN0b3J5Ow=="},null]}