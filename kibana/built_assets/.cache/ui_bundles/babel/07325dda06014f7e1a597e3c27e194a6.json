{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/dashboard/public/embeddable/panel/create_panel_state.js","dependencies":[{"path":"src/plugins/dashboard/public/embeddable/panel/create_panel_state.js","mtime":1589249550543},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVBhbmVsU3RhdGUgPSBjcmVhdGVQYW5lbFN0YXRlOwoKdmFyIF9kYXNoYm9hcmRfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vZGFzaGJvYXJkX2NvbnN0YW50cyIpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0gLy8gTG9vayBmb3IgdGhlIHNtYWxsZXN0IHkgYW5kIHggdmFsdWUgd2hlcmUgdGhlIGRlZmF1bHQgcGFuZWwgd2lsbCBmaXQuCgoKZnVuY3Rpb24gZmluZFRvcExlZnRNb3N0T3BlblNwYWNlKHdpZHRoLCBoZWlnaHQsIGN1cnJlbnRQYW5lbHMpIHsKICB2YXIgbWF4WSA9IC0xOwogIGN1cnJlbnRQYW5lbHMuZm9yRWFjaChmdW5jdGlvbiAocGFuZWwpIHsKICAgIG1heFkgPSBNYXRoLm1heChwYW5lbC5ncmlkRGF0YS55ICsgcGFuZWwuZ3JpZERhdGEuaCwgbWF4WSk7CiAgfSk7IC8vIEhhbmRsZSBjYXNlIG9mIGVtcHR5IGdyaWQuCgogIGlmIChtYXhZIDwgMCkgewogICAgcmV0dXJuIHsKICAgICAgeDogMCwKICAgICAgeTogMAogICAgfTsKICB9CgogIHZhciBncmlkID0gbmV3IEFycmF5KG1heFkpOwoKICBmb3IgKHZhciB5ID0gMDsgeSA8IG1heFk7IHkrKykgewogICAgZ3JpZFt5XSA9IG5ldyBBcnJheShfZGFzaGJvYXJkX2NvbnN0YW50cy5EQVNIQk9BUkRfR1JJRF9DT0xVTU5fQ09VTlQpLmZpbGwoMCk7CiAgfQoKICBjdXJyZW50UGFuZWxzLmZvckVhY2goZnVuY3Rpb24gKHBhbmVsKSB7CiAgICBmb3IgKHZhciB4ID0gcGFuZWwuZ3JpZERhdGEueDsgeCA8IHBhbmVsLmdyaWREYXRhLnggKyBwYW5lbC5ncmlkRGF0YS53OyB4KyspIHsKICAgICAgZm9yICh2YXIgX3kgPSBwYW5lbC5ncmlkRGF0YS55OyBfeSA8IHBhbmVsLmdyaWREYXRhLnkgKyBwYW5lbC5ncmlkRGF0YS5oOyBfeSsrKSB7CiAgICAgICAgdmFyIHJvdyA9IGdyaWRbX3ldOwoKICAgICAgICBpZiAocm93ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQXR0ZW1wdGVkIHRvIGFjY2VzcyBhIHJvdyB0aGF0IGRvZXNuJ3QgZXhpc3QgYXQgIi5jb25jYXQoX3ksICIgZm9yIHBhbmVsICIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShwYW5lbCkpKTsKICAgICAgICB9CgogICAgICAgIGdyaWRbX3ldW3hdID0gMTsKICAgICAgfQogICAgfQogIH0pOwoKICBmb3IgKHZhciBfeTIgPSAwOyBfeTIgPCBtYXhZOyBfeTIrKykgewogICAgZm9yICh2YXIgeCA9IDA7IHggPCBfZGFzaGJvYXJkX2NvbnN0YW50cy5EQVNIQk9BUkRfR1JJRF9DT0xVTU5fQ09VTlQ7IHgrKykgewogICAgICBpZiAoZ3JpZFtfeTJdW3hdID09PSAxKSB7CiAgICAgICAgLy8gU3BhY2UgaXMgZmlsbGVkCiAgICAgICAgY29udGludWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yICh2YXIgaCA9IF95MjsgaCA8IE1hdGgubWluKF95MiArIGhlaWdodCwgbWF4WSk7IGgrKykgewogICAgICAgICAgZm9yICh2YXIgdyA9IHg7IHcgPCBNYXRoLm1pbih4ICsgd2lkdGgsIF9kYXNoYm9hcmRfY29uc3RhbnRzLkRBU0hCT0FSRF9HUklEX0NPTFVNTl9DT1VOVCk7IHcrKykgewogICAgICAgICAgICB2YXIgc3BhY2VJc0VtcHR5ID0gZ3JpZFtoXVt3XSA9PT0gMDsKICAgICAgICAgICAgdmFyIGZpdHNQYW5lbFdpZHRoID0gdyA9PT0geCArIHdpZHRoIC0gMTsgLy8gSWYgdGhlIHBhbmVsIGlzIHRhbGxlciB0aGFuIGFueSBvdGhlciBwYW5lbCBpbiB0aGUgY3VycmVudCBncmlkLCBpdCBjYW4gc3RpbGwgZml0IGluIHRoZSBzcGFjZSwgaGVuY2UKICAgICAgICAgICAgLy8gd2UgY2hlY2sgdGhlIG1pbmltdW0gb2YgbWF4WSBhbmQgdGhlIHBhbmVsIGhlaWdodC4KCiAgICAgICAgICAgIHZhciBmaXRzUGFuZWxIZWlnaHQgPSBoID09PSBNYXRoLm1pbihfeTIgKyBoZWlnaHQgLSAxLCBtYXhZIC0gMSk7CgogICAgICAgICAgICBpZiAoc3BhY2VJc0VtcHR5ICYmIGZpdHNQYW5lbFdpZHRoICYmIGZpdHNQYW5lbEhlaWdodCkgewogICAgICAgICAgICAgIC8vIEZvdW5kIHNwYWNlCiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHg6IHgsCiAgICAgICAgICAgICAgICB5OiBfeTIKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9IGVsc2UgaWYgKGdyaWRbaF1bd10gPT09IDEpIHsKICAgICAgICAgICAgICAvLyB4LCB5IHNwb3QgZG9lc24ndCB3b3JrLCBicmVhay4KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIHg6IDAsCiAgICB5OiBtYXhZCiAgfTsKfQovKioKICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBiYXNpYyBwYW5lbCBzdGF0ZS4KICovCgoKZnVuY3Rpb24gY3JlYXRlUGFuZWxTdGF0ZShwYW5lbFN0YXRlLCBjdXJyZW50UGFuZWxzKSB7CiAgdmFyIF9maW5kVG9wTGVmdE1vc3RPcGVuUyA9IGZpbmRUb3BMZWZ0TW9zdE9wZW5TcGFjZShfZGFzaGJvYXJkX2NvbnN0YW50cy5ERUZBVUxUX1BBTkVMX1dJRFRILCBfZGFzaGJvYXJkX2NvbnN0YW50cy5ERUZBVUxUX1BBTkVMX0hFSUdIVCwgY3VycmVudFBhbmVscyksCiAgICAgIHggPSBfZmluZFRvcExlZnRNb3N0T3BlblMueCwKICAgICAgeSA9IF9maW5kVG9wTGVmdE1vc3RPcGVuUy55OwoKICByZXR1cm4gX29iamVjdFNwcmVhZCh7CiAgICBncmlkRGF0YTogewogICAgICB3OiBfZGFzaGJvYXJkX2NvbnN0YW50cy5ERUZBVUxUX1BBTkVMX1dJRFRILAogICAgICBoOiBfZGFzaGJvYXJkX2NvbnN0YW50cy5ERUZBVUxUX1BBTkVMX0hFSUdIVCwKICAgICAgeDogeCwKICAgICAgeTogeSwKICAgICAgaTogcGFuZWxTdGF0ZS5leHBsaWNpdElucHV0LmlkCiAgICB9CiAgfSwgcGFuZWxTdGF0ZSk7Cn0="},null]}