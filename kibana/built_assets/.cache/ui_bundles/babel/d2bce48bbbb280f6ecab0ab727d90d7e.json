{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/apm/public/components/app/Settings/AgentConfigurations/AgentConfigurationCreateEdit/SettingsPage/saveConfig.js","dependencies":[{"path":"x-pack/legacy/plugins/apm/public/components/app/Settings/AgentConfigurations/AgentConfigurationCreateEdit/SettingsPage/saveConfig.js","mtime":1589249551599},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnNhdmVDb25maWcgPSBzYXZlQ29uZmlnOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2FsbF9vcHRpb24gPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wbHVnaW5zL2FwbS9jb21tb24vYWdlbnRfY29uZmlndXJhdGlvbi9hbGxfb3B0aW9uIik7Cgp2YXIgX2NyZWF0ZUNhbGxBcG1BcGkgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy9yZXN0L2NyZWF0ZUNhbGxBcG1BcGkiKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9CgpmdW5jdGlvbiBzYXZlQ29uZmlnKF94KSB7CiAgcmV0dXJuIF9zYXZlQ29uZmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zYXZlQ29uZmlnKCkgewogIF9zYXZlQ29uZmlnID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgdmFyIGNvbmZpZywgaXNFZGl0TW9kZSwgdG9hc3RzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb25maWcgPSBfcmVmLmNvbmZpZywgaXNFZGl0TW9kZSA9IF9yZWYuaXNFZGl0TW9kZSwgdG9hc3RzID0gX3JlZi50b2FzdHM7CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuICgwLCBfY3JlYXRlQ2FsbEFwbUFwaS5jYWxsQXBtQXBpKSh7CiAgICAgICAgICAgICAgcGF0aG5hbWU6ICcvYXBpL2FwbS9zZXR0aW5ncy9hZ2VudC1jb25maWd1cmF0aW9uJywKICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLAogICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlOiBpc0VkaXRNb2RlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYm9keTogX29iamVjdFNwcmVhZCh7fSwgY29uZmlnLCB7CiAgICAgICAgICAgICAgICAgIHNlcnZpY2U6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAoMCwgX2FsbF9vcHRpb24ub21pdEFsbE9wdGlvbikoY29uZmlnLnNlcnZpY2UubmFtZSksCiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6ICgwLCBfYWxsX29wdGlvbi5vbWl0QWxsT3B0aW9uKShjb25maWcuc2VydmljZS5lbnZpcm9ubWVudCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgdG9hc3RzLmFkZFN1Y2Nlc3MoewogICAgICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLmFnZW50Q29uZmlnLnNhdmVDb25maWcuc3VjY2VlZGVkLnRpdGxlJywgewogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDb25maWd1cmF0aW9uIHNhdmVkJwogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5hcG0uYWdlbnRDb25maWcuc2F2ZUNvbmZpZy5zdWNjZWVkZWQudGV4dCcsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhlIGNvbmZpZ3VyYXRpb24gZm9yICJ7c2VydmljZU5hbWV9IiB3YXMgc2F2ZWQuIEl0IHdpbGwgdGFrZSBzb21lIHRpbWUgdG8gcHJvcGFnYXRlIHRvIHRoZSBhZ2VudHMuJywKICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogKDAsIF9hbGxfb3B0aW9uLmdldE9wdGlvbkxhYmVsKShjb25maWcuc2VydmljZS5uYW1lKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgIHRvYXN0cy5hZGREYW5nZXIoewogICAgICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLmFnZW50Q29uZmlnLnNhdmVDb25maWcuZmFpbGVkLnRpdGxlJywgewogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDb25maWd1cmF0aW9uIGNvdWxkIG5vdCBiZSBzYXZlZCcKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYXBtLmFnZW50Q29uZmlnLnNhdmVDb25maWcuZmFpbGVkLnRleHQnLCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gc2F2aW5nIHRoZSBjb25maWd1cmF0aW9uIGZvciAie3NlcnZpY2VOYW1lfSIuIEVycm9yOiAie2Vycm9yTWVzc2FnZX0iJywKICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZTogKDAsIF9hbGxfb3B0aW9uLmdldE9wdGlvbkxhYmVsKShjb25maWcuc2VydmljZS5uYW1lKSwKICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBfY29udGV4dC50MC5tZXNzYWdlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDddXSk7CiAgfSkpOwogIHJldHVybiBfc2F2ZUNvbmZpZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},null]}