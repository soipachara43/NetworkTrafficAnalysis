{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/components/asset_manager/index.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/components/asset_manager/index.js","mtime":1589249551943},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFzc2V0TWFuYWdlciA9IHZvaWQgMDsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX3JlY29tcG9zZSA9IHJlcXVpcmUoInJlY29tcG9zZSIpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfY29tbW9uID0gcmVxdWlyZSgiQGtibi9pbnRlcnByZXRlci9jb21tb24iKTsKCnZhciBfbm90aWZ5ID0gcmVxdWlyZSgiLi4vLi4vbGliL25vdGlmeSIpOwoKdmFyIF9hc3NldHMgPSByZXF1aXJlKCIuLi8uLi9zdGF0ZS9zZWxlY3RvcnMvYXNzZXRzIik7Cgp2YXIgX2Fzc2V0czIgPSByZXF1aXJlKCIuLi8uLi9zdGF0ZS9hY3Rpb25zL2Fzc2V0cyIpOwoKdmFyIF9lbGVtZW50c19yZWdpc3RyeSA9IHJlcXVpcmUoIi4uLy4uL2xpYi9lbGVtZW50c19yZWdpc3RyeSIpOwoKdmFyIF9lbGVtZW50cyA9IHJlcXVpcmUoIi4uLy4uL3N0YXRlL2FjdGlvbnMvZWxlbWVudHMiKTsKCnZhciBfd29ya3BhZCA9IHJlcXVpcmUoIi4uLy4uL3N0YXRlL3NlbGVjdG9ycy93b3JrcGFkIik7Cgp2YXIgX2RhdGF1cmwgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vbGliL2RhdGF1cmwiKTsKCnZhciBfZ2V0X2lkID0gcmVxdWlyZSgiLi4vLi4vbGliL2dldF9pZCIpOwoKdmFyIF9maW5kX2V4aXN0aW5nX2Fzc2V0ID0gcmVxdWlyZSgiLi4vLi4vbGliL2ZpbmRfZXhpc3RpbmdfYXNzZXQiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uL2xpYi9jb25zdGFudHMiKTsKCnZhciBfYXNzZXRfbWFuYWdlciA9IHJlcXVpcmUoIi4vYXNzZXRfbWFuYWdlciIpOwoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIGFzc2V0czogKDAsIF9hc3NldHMuZ2V0QXNzZXRzKShzdGF0ZSksCiAgICBzZWxlY3RlZFBhZ2U6ICgwLCBfd29ya3BhZC5nZXRTZWxlY3RlZFBhZ2UpKHN0YXRlKQogIH07Cn07Cgp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7CiAgcmV0dXJuIHsKICAgIG9uQWRkSW1hZ2VFbGVtZW50OiBmdW5jdGlvbiBvbkFkZEltYWdlRWxlbWVudChwYWdlSWQpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhc3NldElkKSB7CiAgICAgICAgdmFyIGltYWdlRWxlbWVudCA9IF9lbGVtZW50c19yZWdpc3RyeS5lbGVtZW50c1JlZ2lzdHJ5LmdldCgnaW1hZ2UnKTsKCiAgICAgICAgdmFyIGVsZW1lbnRBU1QgPSAoMCwgX2NvbW1vbi5mcm9tRXhwcmVzc2lvbikoaW1hZ2VFbGVtZW50LmV4cHJlc3Npb24pOwogICAgICAgIHZhciBzZWxlY3RvciA9IFsnY2hhaW4nLCAnMCcsICdhcmd1bWVudHMnLCAnZGF0YXVybCddOwogICAgICAgIHZhciBzdWJFeHAgPSBbewogICAgICAgICAgdHlwZTogJ2V4cHJlc3Npb24nLAogICAgICAgICAgY2hhaW46IFt7CiAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsCiAgICAgICAgICAgIGZ1bmN0aW9uOiAnYXNzZXQnLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBfOiBbYXNzZXRJZF0KICAgICAgICAgICAgfQogICAgICAgICAgfV0KICAgICAgICB9XTsKICAgICAgICB2YXIgbmV3QVNUID0gKDAsIF9sb2Rhc2guc2V0KShlbGVtZW50QVNULCBzZWxlY3Rvciwgc3ViRXhwKTsKICAgICAgICBpbWFnZUVsZW1lbnQuZXhwcmVzc2lvbiA9ICgwLCBfY29tbW9uLnRvRXhwcmVzc2lvbikobmV3QVNUKTsKICAgICAgICBkaXNwYXRjaCgoMCwgX2VsZW1lbnRzLmFkZEVsZW1lbnQpKHBhZ2VJZCwgaW1hZ2VFbGVtZW50KSk7CiAgICAgIH07CiAgICB9LAogICAgb25Bc3NldEFkZDogZnVuY3Rpb24gb25Bc3NldEFkZCh0eXBlLCBjb250ZW50KSB7CiAgICAgIC8vIG1ha2UgdGhlIElEIGhlcmUgYW5kIHBhc3MgaXQgaW50byB0aGUgYWN0aW9uCiAgICAgIHZhciBhc3NldElkID0gKDAsIF9nZXRfaWQuZ2V0SWQpKCdhc3NldCcpOwogICAgICBkaXNwYXRjaCgoMCwgX2Fzc2V0czIuY3JlYXRlQXNzZXQpKHR5cGUsIGNvbnRlbnQsIGFzc2V0SWQpKTsgLy8gdGhlbiByZXR1cm4gdGhlIGlkLCBzbyB0aGUgY2FsbGVyIGtub3dzIHRoZSBpZCB0aGF0IHdpbGwgYmUgY3JlYXRlZAoKICAgICAgcmV0dXJuIGFzc2V0SWQ7CiAgICB9LAogICAgb25Bc3NldERlbGV0ZTogZnVuY3Rpb24gb25Bc3NldERlbGV0ZShhc3NldElkKSB7CiAgICAgIHJldHVybiBkaXNwYXRjaCgoMCwgX2Fzc2V0czIucmVtb3ZlQXNzZXQpKGFzc2V0SWQpKTsKICAgIH0KICB9Owp9OwoKdmFyIG1lcmdlUHJvcHMgPSBmdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7CiAgdmFyIGFzc2V0cyA9IHN0YXRlUHJvcHMuYXNzZXRzLAogICAgICBzZWxlY3RlZFBhZ2UgPSBzdGF0ZVByb3BzLnNlbGVjdGVkUGFnZTsKICB2YXIgX29uQXNzZXRBZGQgPSBkaXNwYXRjaFByb3BzLm9uQXNzZXRBZGQ7CiAgdmFyIGFzc2V0VmFsdWVzID0gT2JqZWN0LnZhbHVlcyhhc3NldHMpOyAvLyBwdWxsIHZhbHVlcyBvdXQgb2YgYXNzZXRzIG9iamVjdAoKICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgb3duUHJvcHMsIHt9LCBkaXNwYXRjaFByb3BzLCB7CiAgICBvbkFkZEltYWdlRWxlbWVudDogZGlzcGF0Y2hQcm9wcy5vbkFkZEltYWdlRWxlbWVudChzdGF0ZVByb3BzLnNlbGVjdGVkUGFnZSksCiAgICBzZWxlY3RlZFBhZ2U6IHNlbGVjdGVkUGFnZSwKICAgIGFzc2V0VmFsdWVzOiBhc3NldFZhbHVlcywKICAgIG9uQXNzZXRBZGQ6IGZ1bmN0aW9uIG9uQXNzZXRBZGQoZmlsZSkgewogICAgICB2YXIgX2dldCRzcGxpdCA9ICgwLCBfbG9kYXNoLmdldCkoZmlsZSwgJ3R5cGUnLCAnJykuc3BsaXQoJy8nKSwKICAgICAgICAgIF9nZXQkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX2dldCRzcGxpdCwgMiksCiAgICAgICAgICB0eXBlID0gX2dldCRzcGxpdDJbMF0sCiAgICAgICAgICBzdWJ0eXBlID0gX2dldCRzcGxpdDJbMV07CgogICAgICBpZiAodHlwZSA9PT0gJ2ltYWdlJyAmJiBfY29uc3RhbnRzLlZBTElEX0lNQUdFX1RZUEVTLmluZGV4T2Yoc3VidHlwZSkgPj0gMCkgewogICAgICAgIHJldHVybiAoMCwgX2RhdGF1cmwuZW5jb2RlKShmaWxlKS50aGVuKGZ1bmN0aW9uIChkYXRhdXJsKSB7CiAgICAgICAgICB2YXIgdHlwZSA9ICdkYXRhdXJsJzsKICAgICAgICAgIHZhciBleGlzdGluZ0lkID0gKDAsIF9maW5kX2V4aXN0aW5nX2Fzc2V0LmZpbmRFeGlzdGluZ0Fzc2V0KSh0eXBlLCBkYXRhdXJsLCBhc3NldFZhbHVlcyk7CgogICAgICAgICAgaWYgKGV4aXN0aW5nSWQpIHsKICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nSWQ7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIF9vbkFzc2V0QWRkKHR5cGUsIGRhdGF1cmwpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSk7Cn07Cgp2YXIgQXNzZXRNYW5hZ2VyID0gKDAsIF9yZWNvbXBvc2UuY29tcG9zZSkoKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKSwgKDAsIF9yZWNvbXBvc2Uud2l0aFByb3BzKSh7CiAgb25Bc3NldENvcHk6IGZ1bmN0aW9uIG9uQXNzZXRDb3B5KGFzc2V0KSB7CiAgICByZXR1cm4gX25vdGlmeS5ub3RpZnkuc3VjY2VzcygiQ29waWVkICciLmNvbmNhdChhc3NldC5pZCwgIicgdG8gY2xpcGJvYXJkIikpOwogIH0KfSkpKF9hc3NldF9tYW5hZ2VyLkFzc2V0TWFuYWdlcik7CmV4cG9ydHMuQXNzZXRNYW5hZ2VyID0gQXNzZXRNYW5hZ2VyOw=="},null]}