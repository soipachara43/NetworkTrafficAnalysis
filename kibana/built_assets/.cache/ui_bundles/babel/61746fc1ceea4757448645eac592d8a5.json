{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/views/elasticsearch/ccr/shard/index.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/views/elasticsearch/ccr/shard/index.js","mtime":1589249552624},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX3JvdXRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicGx1Z2lucy9tb25pdG9yaW5nL25wX2ltcG9ydHMvdWkvcm91dGVzIikpOwoKdmFyIF9nZXRfcGFnZV9kYXRhID0gcmVxdWlyZSgiLi9nZXRfcGFnZV9kYXRhIik7Cgp2YXIgX3JvdXRlX2luaXQgPSByZXF1aXJlKCJwbHVnaW5zL21vbml0b3JpbmcvbGliL3JvdXRlX2luaXQiKTsKCnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vaW5kZXguaHRtbCIpKTsKCnZhciBfYmFzZV9jb250cm9sbGVyID0gcmVxdWlyZSgiLi4vLi4vLi4vYmFzZV9jb250cm9sbGVyIik7Cgp2YXIgX2Njcl9zaGFyZCA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZWxhc3RpY3NlYXJjaC9jY3Jfc2hhcmQiKTsKCnZhciBfaTE4bjIgPSByZXF1aXJlKCJ1aS9pMThuIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICJ1bmRlZmluZWQiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfQoKZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKX3JvdXRlcy5kZWZhdWx0LndoZW4oJy9lbGFzdGljc2VhcmNoL2Njci86aW5kZXgvc2hhcmQvOnNoYXJkSWQnLCB7CiAgdGVtcGxhdGU6IF9pbmRleC5kZWZhdWx0LAogIHJlc29sdmU6IHsKICAgIGNsdXN0ZXJzOiBmdW5jdGlvbiBjbHVzdGVycyhQcml2YXRlKSB7CiAgICAgIHZhciByb3V0ZUluaXQgPSBQcml2YXRlKF9yb3V0ZV9pbml0LnJvdXRlSW5pdFByb3ZpZGVyKTsKICAgICAgcmV0dXJuIHJvdXRlSW5pdCh7CiAgICAgICAgY29kZVBhdGhzOiBbX2NvbnN0YW50cy5DT0RFX1BBVEhfRUxBU1RJQ1NFQVJDSF0KICAgICAgfSk7CiAgICB9LAogICAgcGFnZURhdGE6IF9nZXRfcGFnZV9kYXRhLmdldFBhZ2VEYXRhCiAgfSwKICBjb250cm9sbGVyQXM6ICdlbGFzdGljc2VhcmNoQ2NyJywKICBjb250cm9sbGVyOgogIC8qI19fUFVSRV9fKi8KICBmdW5jdGlvbiAoX01vbml0b3JpbmdWaWV3QmFzZUNvKSB7CiAgICBfaW5oZXJpdHMoRWxhc3RpY3NlYXJjaENjckNvbnRyb2xsZXIsIF9Nb25pdG9yaW5nVmlld0Jhc2VDbyk7CgogICAgZnVuY3Rpb24gRWxhc3RpY3NlYXJjaENjckNvbnRyb2xsZXIoJGluamVjdG9yLCAkc2NvcGUsIHBhZ2VEYXRhKSB7CiAgICAgIHZhciBfdGhpczsKCiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbGFzdGljc2VhcmNoQ2NyQ29udHJvbGxlcik7CgogICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFbGFzdGljc2VhcmNoQ2NyQ29udHJvbGxlcikuY2FsbCh0aGlzLCB7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmVsYXN0aWNzZWFyY2guY2NyLnNoYXJkLnJvdXRlVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VsYXN0aWNzZWFyY2ggLSBDY3IgLSBTaGFyZCcKICAgICAgICB9KSwKICAgICAgICByZWFjdE5vZGVJZDogJ2VsYXN0aWNzZWFyY2hDY3JTaGFyZFJlYWN0JywKICAgICAgICBnZXRQYWdlRGF0YTogX2dldF9wYWdlX2RhdGEuZ2V0UGFnZURhdGEsCiAgICAgICAgJHNjb3BlOiAkc2NvcGUsCiAgICAgICAgJGluamVjdG9yOiAkaW5qZWN0b3IKICAgICAgfSkpOwogICAgICAkc2NvcGUuaW5zdGFuY2UgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5lbGFzdGljc2VhcmNoLmNjci5zaGFyZC5pbnN0YW5jZVRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnSW5kZXg6IHtmb2xsb3dlckluZGV4fSBTaGFyZDoge3NoYXJkSWR9JywKICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgIGZvbGxvd2VySW5kZXg6ICgwLCBfbG9kYXNoLmdldCkocGFnZURhdGEsICdzdGF0LmZvbGxvd2VyX2luZGV4JyksCiAgICAgICAgICBzaGFyZElkOiAoMCwgX2xvZGFzaC5nZXQpKHBhZ2VEYXRhLCAnc3RhdC5zaGFyZF9pZCcpCiAgICAgICAgfQogICAgICB9KTsKICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmRhdGE7CiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgX3RoaXMucmVuZGVyUmVhY3QoZGF0YSk7CiAgICAgIH0pOwoKICAgICAgX3RoaXMucmVuZGVyUmVhY3QgPSBmdW5jdGlvbiAocHJvcHMpIHsKICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihFbGFzdGljc2VhcmNoQ2NyQ29udHJvbGxlci5wcm90b3R5cGUpLCAicmVuZGVyUmVhY3QiLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaTE4bjIuSTE4bkNvbnRleHQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Njcl9zaGFyZC5DY3JTaGFyZCwgcHJvcHMpKSk7CiAgICAgIH07CgogICAgICByZXR1cm4gX3RoaXM7CiAgICB9CgogICAgcmV0dXJuIEVsYXN0aWNzZWFyY2hDY3JDb250cm9sbGVyOwogIH0oX2Jhc2VfY29udHJvbGxlci5Nb25pdG9yaW5nVmlld0Jhc2VDb250cm9sbGVyKQp9KTs="},null]}