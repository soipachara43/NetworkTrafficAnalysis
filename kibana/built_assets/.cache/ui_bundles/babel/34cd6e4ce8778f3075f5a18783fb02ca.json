{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/saved_objects/public/saved_object/helpers/build_saved_object.js","dependencies":[{"path":"src/plugins/saved_objects/public/saved_object/helpers/build_saved_object.js","mtime":1589249551007},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmJ1aWxkU2F2ZWRPYmplY3QgPSBidWlsZFNhdmVkT2JqZWN0OwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vZGF0YS9wdWJsaWMiKTsKCnZhciBfaHlkcmF0ZV9pbmRleF9wYXR0ZXJuID0gcmVxdWlyZSgiLi9oeWRyYXRlX2luZGV4X3BhdHRlcm4iKTsKCnZhciBfaW5pdGlhbGl6ZV9zYXZlZF9vYmplY3QgPSByZXF1aXJlKCIuL2luaXRpYWxpemVfc2F2ZWRfb2JqZWN0Iik7Cgp2YXIgX3NlcmlhbGl6ZV9zYXZlZF9vYmplY3QgPSByZXF1aXJlKCIuL3NlcmlhbGl6ZV9zYXZlZF9vYmplY3QiKTsKCnZhciBfYXBwbHlfZXNfcmVzcCA9IHJlcXVpcmUoIi4vYXBwbHlfZXNfcmVzcCIpOwoKdmFyIF9zYXZlX3NhdmVkX29iamVjdCA9IHJlcXVpcmUoIi4vc2F2ZV9zYXZlZF9vYmplY3QiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBidWlsZFNhdmVkT2JqZWN0KHNhdmVkT2JqZWN0KSB7CiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CiAgdmFyIHNlcnZpY2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgdmFyIGluZGV4UGF0dGVybnMgPSBzZXJ2aWNlcy5pbmRleFBhdHRlcm5zLAogICAgICBzYXZlZE9iamVjdHNDbGllbnQgPSBzZXJ2aWNlcy5zYXZlZE9iamVjdHNDbGllbnQ7IC8vIHR5cGUgbmFtZSBmb3IgdGhpcyBvYmplY3QsIHVzZWQgYXMgdGhlIEVTLXR5cGUKCiAgdmFyIGVzVHlwZSA9IGNvbmZpZy50eXBlIHx8ICcnOwoKICBzYXZlZE9iamVjdC5nZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBlc1R5cGU7CiAgfTsgLy8gTk9URTogdGhpcy50eXBlIChub3Qgc2V0IGluIHRoaXMgZmlsZSwgYnV0IHNvbWV3aGVyZSBlbHNlKSBpcyB0aGUgc3ViIHR5cGUsIGUuZy4gJ2FyZWEnIG9yCiAgLy8gJ2RhdGEgdGFibGUnLCB3aGlsZSBlc1R5cGUgaXMgdGhlIG1vcmUgZ2VuZXJpYyB0eXBlIC0gZS5nLiAndmlzdWFsaXphdGlvbicgb3IgJ3NhdmVkIHNlYXJjaCcuCgoKICBzYXZlZE9iamVjdC5nZXRFc1R5cGUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZXNUeXBlOwogIH07CiAgLyoqCiAgICogRmxpcHMgdG8gdHJ1ZSBkdXJpbmcgYSBzYXZlIG9wZXJhdGlvbiwgYW5kIGJhY2sgdG8gZmFsc2Ugb25jZSB0aGUgc2F2ZSBvcGVyYXRpb24KICAgKiBjb21wbGV0ZXMuCiAgICogQHR5cGUge2Jvb2xlYW59CiAgICovCgoKICBzYXZlZE9iamVjdC5pc1NhdmluZyA9IGZhbHNlOwogIHNhdmVkT2JqZWN0LmRlZmF1bHRzID0gY29uZmlnLmRlZmF1bHRzIHx8IHt9OyAvLyBvcHRpb25hbCBzZWFyY2ggc291cmNlIHdoaWNoIHRoaXMgb2JqZWN0IGNvbmZpZ3VyZXMKCiAgc2F2ZWRPYmplY3Quc2VhcmNoU291cmNlID0gY29uZmlnLnNlYXJjaFNvdXJjZSA/IG5ldyBfcHVibGljLlNlYXJjaFNvdXJjZSgpIDogdW5kZWZpbmVkOyAvLyB0aGUgaWQgb2YgdGhlIGRvY3VtZW50CgogIHNhdmVkT2JqZWN0LmlkID0gY29uZmlnLmlkIHx8IHZvaWQgMDsgLy8gdGhlIG1pZ3JhdGlvbiB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCwgc2hvdWxkIG9ubHkgYmUgc2V0IG9uIGltcG9ydHMKCiAgc2F2ZWRPYmplY3QubWlncmF0aW9uVmVyc2lvbiA9IGNvbmZpZy5taWdyYXRpb25WZXJzaW9uOyAvLyBXaGV0aGVyIHRvIGNyZWF0ZSBhIGNvcHkgd2hlbiB0aGUgb2JqZWN0IGlzIHNhdmVkLiBUaGlzIHNob3VsZCBldmVudHVhbGx5IGdvIGF3YXkKICAvLyBpbiBmYXZvciBvZiBhIGJldHRlciByZW5hbWUvc2F2ZSBmbG93LgoKICBzYXZlZE9iamVjdC5jb3B5T25TYXZlID0gZmFsc2U7CiAgLyoqCiAgICogQWZ0ZXIgY3JlYXRpb24gb3IgZmV0Y2hpbmcgZnJvbSBFUywgZW5zdXJlIHRoYXQgdGhlIHNlYXJjaFNvdXJjZXMgaW5kZXggaW5kZXhQYXR0ZXJuCiAgICogaXMgYW4gYm9uYWZpZGUgSW5kZXhQYXR0ZXJuIG9iamVjdC4KICAgKgogICAqIEByZXR1cm4ge1Byb21pc2U8SW5kZXhQYXR0ZXJuIHwgbnVsbD59CiAgICovCgogIHNhdmVkT2JqZWN0Lmh5ZHJhdGVJbmRleFBhdHRlcm4gPSBmdW5jdGlvbiAoaWQpIHsKICAgIHJldHVybiAoMCwgX2h5ZHJhdGVfaW5kZXhfcGF0dGVybi5oeWRyYXRlSW5kZXhQYXR0ZXJuKShpZCB8fCAnJywgc2F2ZWRPYmplY3QsIGluZGV4UGF0dGVybnMsIGNvbmZpZyk7CiAgfTsKICAvKioKICAgKiBBc3luY2hyb25vdXNseSBpbml0aWFsaXplIHRoaXMgb2JqZWN0IC0gd2lsbCBvbmx5IHJ1bgogICAqIG9uY2UgZXZlbiBpZiBjYWxsZWQgbXVsdGlwbGUgdGltZXMuCiAgICoKICAgKiBAcmV0dXJuIHtQcm9taXNlfQogICAqIEByZXNvbHZlZCB7U2F2ZWRPYmplY3R9CiAgICovCgoKICBzYXZlZE9iamVjdC5pbml0ID0gX2xvZGFzaC5kZWZhdWx0Lm9uY2UoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICgwLCBfaW5pdGlhbGl6ZV9zYXZlZF9vYmplY3QuaW50aWFsaXplU2F2ZWRPYmplY3QpKHNhdmVkT2JqZWN0LCBzYXZlZE9iamVjdHNDbGllbnQsIGNvbmZpZyk7CiAgfSk7CgogIHNhdmVkT2JqZWN0LmFwcGx5RVNSZXNwID0gZnVuY3Rpb24gKHJlc3ApIHsKICAgIHJldHVybiAoMCwgX2FwcGx5X2VzX3Jlc3AuYXBwbHlFU1Jlc3ApKHJlc3AsIHNhdmVkT2JqZWN0LCBjb25maWcpOwogIH07CiAgLyoqCiAgICogU2VyaWFsaXplIHRoaXMgb2JqZWN0CiAgICogQHJldHVybiB7T2JqZWN0fQogICAqLwoKCiAgc2F2ZWRPYmplY3QuX3NlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAoMCwgX3NlcmlhbGl6ZV9zYXZlZF9vYmplY3Quc2VyaWFsaXplU2F2ZWRPYmplY3QpKHNhdmVkT2JqZWN0LCBjb25maWcpOwogIH07CiAgLyoqCiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QncyBvcmlnaW5hbCB0aXRsZSBoYXMgYmVlbiBjaGFuZ2VkLiBOZXcgb2JqZWN0cyByZXR1cm4gZmFsc2UuCiAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgKi8KCgogIHNhdmVkT2JqZWN0LmlzVGl0bGVDaGFuZ2VkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHNhdmVkT2JqZWN0Ll9zb3VyY2UgJiYgc2F2ZWRPYmplY3QuX3NvdXJjZS50aXRsZSAhPT0gc2F2ZWRPYmplY3QudGl0bGU7CiAgfTsKCiAgc2F2ZWRPYmplY3QuY3JlYXRpb25PcHRzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoewogICAgICBpZDogc2F2ZWRPYmplY3QuaWQsCiAgICAgIG1pZ3JhdGlvblZlcnNpb246IHNhdmVkT2JqZWN0Lm1pZ3JhdGlvblZlcnNpb24KICAgIH0sIG9wdHMpOwogIH07CgogIHNhdmVkT2JqZWN0LnNhdmUgPQogIC8qI19fUFVSRV9fKi8KICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShvcHRzKSB7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gKDAsIF9zYXZlX3NhdmVkX29iamVjdC5zYXZlU2F2ZWRPYmplY3QpKHNhdmVkT2JqZWN0LCBjb25maWcsIG9wdHMsIHNlcnZpY2VzKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0LnQwKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHNhdmVkT2JqZWN0LmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTsKICAvKioKICAgKiBEZWxldGUgdGhpcyBvYmplY3QgZnJvbSBFbGFzdGljc2VhcmNoCiAgICogQHJldHVybiB7cHJvbWlzZX0KICAgKi8KCgogIHNhdmVkT2JqZWN0LmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghc2F2ZWRPYmplY3QuaWQpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignRGVsZXRpbmcgYSBzYXZlZCBPYmplY3QgcmVxdWlyZXMgdHlwZSBhbmQgaWQnKSk7CiAgICB9CgogICAgcmV0dXJuIHNhdmVkT2JqZWN0c0NsaWVudC5kZWxldGUoZXNUeXBlLCBzYXZlZE9iamVjdC5pZCk7CiAgfTsKfQ=="},null]}