{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/lib/aeroelastic/layout_functions.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/lib/aeroelastic/layout_functions.js","mtime":1589249552055},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlc2l6ZUFubm90YXRpb25zRnVuY3Rpb24gPSByZXNpemVBbm5vdGF0aW9uc0Z1bmN0aW9uOwpleHBvcnRzLnVwZGF0ZXJGdW4gPSBleHBvcnRzLmdldE5leHRTY2VuZSA9IGV4cG9ydHMuZ2V0QW5ub3RhdGVkU2hhcGVzID0gZXhwb3J0cy5nZXREcmFnQm94QW5ub3RhdGlvbiA9IGV4cG9ydHMuZ2V0RHJhZ2JveEhpZ2hsaWdodGVkID0gZXhwb3J0cy5nZXREcmFnQm94ID0gZXhwb3J0cy5nZXRSb3RhdGlvbkFubm90YXRpb25zID0gZXhwb3J0cy5nZXRHcm91cGVkU2VsZWN0ZWRTaGFwZUlkcyA9IGV4cG9ydHMuZ2V0R3JvdXBlZFNlbGVjdGVkUHJpbWFyeVNoYXBlSWRzID0gZXhwb3J0cy5nZXRHcm91cGVkU2VsZWN0ZWRTaGFwZXMgPSBleHBvcnRzLmdldERpc3RyaWJ1dGVBY3Rpb24gPSBleHBvcnRzLmdldEFsaWduQWN0aW9uID0gZXhwb3J0cy5nZXRHcm91cEFjdGlvbiA9IGV4cG9ydHMuZ2V0Q29uc3RyYWluZWRTaGFwZXNXaXRoUHJlZXhpc3RpbmdBbm5vdGF0aW9ucyA9IGV4cG9ydHMuZ2V0U25hcHBlZFNoYXBlcyA9IGV4cG9ydHMuZ2V0U2hhcGVzVG9Ib3ZlciA9IGV4cG9ydHMuZ2V0SG92ZXJBbm5vdGF0aW9ucyA9IGV4cG9ydHMuZ2V0QWRIb2NDaGlsZHJlbkFubm90YXRpb25zID0gZXhwb3J0cy5nZXRBbGlnbm1lbnRHdWlkZUFubm90YXRpb25zID0gZXhwb3J0cy5nZXREcmFnZ2VkUHJpbWFyeVNoYXBlID0gZXhwb3J0cy5nZXRUcmFuc2Zvcm1JbnRlbnRzID0gZXhwb3J0cy5nZXRSZXNpemVNYW5pcHVsYXRvciA9IGV4cG9ydHMuZ2V0U2VsZWN0ZWRQcmltYXJ5U2hhcGVJZHMgPSBleHBvcnRzLmdldFNlbGVjdGlvblN0YXRlID0gZXhwb3J0cy5nZXRTZWxlY3RlZFNoYXBlcyA9IGV4cG9ydHMuZ2V0U2VsZWN0aW9uU3RhdGVGdWxsID0gZXhwb3J0cy5nZXRTZWxlY3RlZFNoYXBlc1ByZXYgPSBleHBvcnRzLmdldEN1cnNvciA9IGV4cG9ydHMuZ2V0R3JvdXBpbmcgPSBleHBvcnRzLmdldEdyb3VwaW5nVHVwbGUgPSBleHBvcnRzLmdldEhvdmVyZWRTaGFwZSA9IGV4cG9ydHMuZ2V0SG92ZXJlZFNoYXBlcyA9IGV4cG9ydHMuZ2V0U2hhcGVzID0gZXhwb3J0cy5nZXRDb25maWd1cmF0aW9uID0gZXhwb3J0cy5nZXRSb3RhdGlvblRvb2x0aXBBbm5vdGF0aW9uID0gZXhwb3J0cy5jYXNjYWRlUHJvcGVydGllcyA9IGV4cG9ydHMuYXBwbHlMb2NhbFRyYW5zZm9ybXMgPSBleHBvcnRzLmdldEFsaWduRGlzdHJpYnV0ZVRyYW5zZm9ybUludGVudHMgPSBleHBvcnRzLmdldFNlbGVjdGVkU2hhcGVPYmplY3RzID0gZXhwb3J0cy5nZXRMb2NhbFRyYW5zZm9ybU1hdHJpeCA9IGV4cG9ydHMuZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlID0gZXhwb3J0cy5nZXRNb3VzZVRyYW5zZm9ybVN0YXRlID0gZXhwb3J0cy5nZXRNb3VzZVRyYW5zZm9ybUdlc3R1cmVQcmV2ID0gZXhwb3J0cy5nZXRBbHRlclNuYXBHZXN0dXJlID0gZXhwb3J0cy5nZXRGb2N1c2VkU2hhcGUgPSBleHBvcnRzLmRyYWdnaW5nU2hhcGUgPSB2b2lkIDA7Cgp2YXIgX2dlb21ldHJ5ID0gcmVxdWlyZSgiLi9nZW9tZXRyeSIpOwoKdmFyIF9tYXRyaXggPSByZXF1aXJlKCIuL21hdHJpeCIpOwoKdmFyIF9tYXRyaXgyZCA9IHJlcXVpcmUoIi4vbWF0cml4MmQiKTsKCnZhciBfZnVuY3Rpb25hbCA9IHJlcXVpcmUoIi4vZnVuY3Rpb25hbCIpOwoKdmFyIF9nZXRfaWQgPSByZXF1aXJlKCIuLy4uLy4uL2xpYi9nZXRfaWQiKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKdmFyIGlkTWFwID0ge307Cgp2YXIgZ2V0SWQgPSBmdW5jdGlvbiBnZXRJZChuYW1lLCBleHRlbnNpb24pIHsKICAvLyBlbnN1cmVzIHRoYXQgYGF4aXNBbGlnbmVkQm91bmRpbmdCb3hTaGFwZWAgaXMgcHVyZS1pc2ggLSBhIG5ldyBjYWxsIHdpdGggdGhlIHNhbWUgaW5wdXQgd2lsbCBub3QgeWllbGQgYSBuZXcgaWQKICAvLyAod2hpbGUgaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgZ3JvdXAgdG8gaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIC0gdW5ncm91cCB0aGVuIG1ha2UgdGhlIHNhbWUgZ3JvdXAgYWdhaW4gLQogIC8vIGl0J3Mgb2theSBpZiB0aGUgbmV3bHkgYXJpc2luZyBncm91cCBnZXRzIHRoZSBzYW1lIGlkKQogIHZhciBrZXkgPSBuYW1lICsgJ3wnICsgZXh0ZW5zaW9uOwogIHJldHVybiBpZE1hcFtrZXldIHx8IChpZE1hcFtrZXldID0gKDAsIF9nZXRfaWQuZ2V0SWQpKG5hbWUpKTsKfTsKCnZhciByZXNpemVWZXJ0ZXhUdXBsZXMgPSBbWy0xLCAtMSwgMzE1XSwgWzEsIC0xLCA0NV0sIFsxLCAxLCAxMzVdLCBbLTEsIDEsIDIyNV0sIC8vIGNvcm5lcnMKWzAsIC0xLCAwXSwgWzEsIDAsIDkwXSwgWzAsIDEsIDE4MF0sIFstMSwgMCwgMjcwXV07CnZhciBjb25uZWN0b3JWZXJ0aWNlcyA9IFtbWy0xLCAtMV0sIFswLCAtMV1dLCBbWzAsIC0xXSwgWzEsIC0xXV0sIFtbMSwgLTFdLCBbMSwgMF1dLCBbWzEsIDBdLCBbMSwgMV1dLCBbWzEsIDFdLCBbMCwgMV1dLCBbWzAsIDFdLCBbLTEsIDFdXSwgW1stMSwgMV0sIFstMSwgMF1dLCBbWy0xLCAwXSwgWy0xLCAtMV1dXTsKdmFyIGNvcm5lclZlcnRpY2VzID0gW1stMSwgLTFdLCBbMSwgLTFdLCBbLTEsIDFdLCBbMSwgMV1dOwp2YXIgcmVzaXplTXVsdGlwbGllckhvcml6b250YWwgPSB7CiAgbGVmdDogLTEsCiAgY2VudGVyOiAwLAogIHJpZ2h0OiAxCn07CnZhciByZXNpemVNdWx0aXBsaWVyVmVydGljYWwgPSB7CiAgdG9wOiAtMSwKICBjZW50ZXI6IDAsCiAgYm90dG9tOiAxCn07CnZhciB4TmFtZXMgPSB7CiAgJy0xJzogJ2xlZnQnLAogICcwJzogJ2NlbnRlcicsCiAgJzEnOiAncmlnaHQnCn07CnZhciB5TmFtZXMgPSB7CiAgJy0xJzogJ3RvcCcsCiAgJzAnOiAnY2VudGVyJywKICAnMSc6ICdib3R0b20nCn07CnZhciBiaWRpcmVjdGlvbmFsQ3Vyc29ycyA9IHsKICAnMCc6ICducy1yZXNpemUnLAogICc0NSc6ICduZXN3LXJlc2l6ZScsCiAgJzkwJzogJ2V3LXJlc2l6ZScsCiAgJzEzNSc6ICdud3NlLXJlc2l6ZScsCiAgJzE4MCc6ICducy1yZXNpemUnLAogICcyMjUnOiAnbmVzdy1yZXNpemUnLAogICcyNzAnOiAnZXctcmVzaXplJywKICAnMzE1JzogJ253c2UtcmVzaXplJwp9OwoKdmFyIGlkZW50aXR5QUFCQiA9IGZ1bmN0aW9uIGlkZW50aXR5QUFCQigpIHsKICByZXR1cm4gW1tJbmZpbml0eSwgSW5maW5pdHldLCBbLUluZmluaXR5LCAtSW5maW5pdHldXTsKfTsKCnZhciBleHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoX3JlZiwgX3JlZjIsIF9yZWYzKSB7CiAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksCiAgICAgIF9yZWY0JCA9IF9zbGljZWRUb0FycmF5KF9yZWY0WzBdLCAyKSwKICAgICAgeE1pbiA9IF9yZWY0JFswXSwKICAgICAgeU1pbiA9IF9yZWY0JFsxXSwKICAgICAgX3JlZjQkMiA9IF9zbGljZWRUb0FycmF5KF9yZWY0WzFdLCAyKSwKICAgICAgeE1heCA9IF9yZWY0JDJbMF0sCiAgICAgIHlNYXggPSBfcmVmNCQyWzFdOwoKICB2YXIgX3JlZjUgPSBfc2xpY2VkVG9BcnJheShfcmVmMiwgMiksCiAgICAgIHgwID0gX3JlZjVbMF0sCiAgICAgIHkwID0gX3JlZjVbMV07CgogIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSwKICAgICAgeDEgPSBfcmVmNlswXSwKICAgICAgeTEgPSBfcmVmNlsxXTsKCiAgcmV0dXJuIFtbTWF0aC5taW4oeE1pbiwgeDAsIHgxKSwgTWF0aC5taW4oeU1pbiwgeTAsIHkxKV0sIFtNYXRoLm1heCh4TWF4LCB4MCwgeDEpLCBNYXRoLm1heCh5TWF4LCB5MCwgeTEpXV07Cn07Cgp2YXIgc2hhcGVBQUJCID0gZnVuY3Rpb24gc2hhcGVBQUJCKHNoYXBlLCBwcmV2T3V0ZXIpIHsKICByZXR1cm4gY29ybmVyVmVydGljZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2SW5uZXIsIHh5VmVydGV4KSB7CiAgICB2YXIgY29ybmVyUG9pbnQgPSAoMCwgX21hdHJpeC5ub3JtYWxpemUpKCgwLCBfbWF0cml4Lm12TXVsdGlwbHkpKHNoYXBlLnRyYW5zZm9ybU1hdHJpeCwgW3NoYXBlLmEgKiB4eVZlcnRleFswXSwgc2hhcGUuYiAqIHh5VmVydGV4WzFdLCAwLCAxXSkpOwogICAgcmV0dXJuIGV4dGVuZChwcmV2SW5uZXIsIGNvcm5lclBvaW50LCBjb3JuZXJQb2ludCk7CiAgfSwgcHJldk91dGVyKTsKfTsKCnZhciBzaGFwZXNBQUJCID0gZnVuY3Rpb24gc2hhcGVzQUFCQihzaGFwZXMpIHsKICByZXR1cm4gc2hhcGVzLnJlZHVjZShmdW5jdGlvbiAocHJldk91dGVyLCBzaGFwZSkgewogICAgcmV0dXJuIGV4dGVuZC5hcHBseSh2b2lkIDAsIFtwcmV2T3V0ZXJdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc2hhcGVBQUJCKHNoYXBlLCBwcmV2T3V0ZXIpKSkpOwogIH0sIGlkZW50aXR5QUFCQigpKTsKfTsKCnZhciBwcm9qZWN0QUFCQiA9IGZ1bmN0aW9uIHByb2plY3RBQUJCKF9yZWY3KSB7CiAgdmFyIF9yZWY4ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpLAogICAgICBfcmVmOCQgPSBfc2xpY2VkVG9BcnJheShfcmVmOFswXSwgMiksCiAgICAgIHhNaW4gPSBfcmVmOCRbMF0sCiAgICAgIHlNaW4gPSBfcmVmOCRbMV0sCiAgICAgIF9yZWY4JDIgPSBfc2xpY2VkVG9BcnJheShfcmVmOFsxXSwgMiksCiAgICAgIHhNYXggPSBfcmVmOCQyWzBdLAogICAgICB5TWF4ID0gX3JlZjgkMlsxXTsKCiAgdmFyIGEgPSAoeE1heCAtIHhNaW4pIC8gMjsKICB2YXIgYiA9ICh5TWF4IC0geU1pbikgLyAyOwogIHZhciB4VHJhbnNsYXRlID0geE1pbiArIGE7CiAgdmFyIHlUcmFuc2xhdGUgPSB5TWluICsgYjsKICB2YXIgelRyYW5zbGF0ZSA9IDA7CiAgdmFyIGxvY2FsVHJhbnNmb3JtTWF0cml4ID0gKDAsIF9tYXRyaXgudHJhbnNsYXRlKSh4VHJhbnNsYXRlLCB5VHJhbnNsYXRlLCB6VHJhbnNsYXRlKTsKICB2YXIgcmlnVHJhbnNmb3JtID0gKDAsIF9tYXRyaXgudHJhbnNsYXRlKSgteFRyYW5zbGF0ZSwgLXlUcmFuc2xhdGUsIC16VHJhbnNsYXRlKTsKICByZXR1cm4gewogICAgYTogYSwKICAgIGI6IGIsCiAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogbG9jYWxUcmFuc2Zvcm1NYXRyaXgsCiAgICByaWdUcmFuc2Zvcm06IHJpZ1RyYW5zZm9ybQogIH07Cn07IC8vIHJldHVybnMgdGhlIGN1cnJlbnRseSBkcmFnZ2VkIHNoYXBlLCBvciBhIGZhbHNleSB2YWx1ZSBvdGhlcndpc2UKCgp2YXIgZHJhZ2dpbmdTaGFwZSA9IGZ1bmN0aW9uIGRyYWdnaW5nU2hhcGUoX3JlZjksIGhvdmVyZWRTaGFwZSwgZG93biwgbW91c2VEb3duZWQpIHsKICB2YXIgZHJhZ2dlZFNoYXBlID0gX3JlZjkuZHJhZ2dlZFNoYXBlLAogICAgICBzaGFwZXMgPSBfcmVmOS5zaGFwZXM7CiAgdmFyIGRyYWdJblByb2dyZXNzID0gZG93biAmJiBzaGFwZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBuZXh0KSB7CiAgICByZXR1cm4gcHJldiB8fCBkcmFnZ2VkU2hhcGUgJiYgbmV4dC5pZCA9PT0gZHJhZ2dlZFNoYXBlLmlkOwogIH0sIGZhbHNlKTsKICB2YXIgcmVzdWx0ID0gZHJhZ0luUHJvZ3Jlc3MgJiYgZHJhZ2dlZFNoYXBlIHx8IGRvd24gJiYgbW91c2VEb3duZWQgJiYgaG92ZXJlZFNoYXBlOwogIHJldHVybiByZXN1bHQ7Cn07IC8vIHRoZSBjdXJyZW50bHkgZHJhZ2dlZCBzaGFwZSBpcyBjb25zaWRlcmVkIGluLWZvY3VzOyBpZiBubyBkcmFnZ2luZyBpcyBnb2luZyBvbiwgdGhlbiB0aGUgaG92ZXJlZCBzaGFwZQoKCmV4cG9ydHMuZHJhZ2dpbmdTaGFwZSA9IGRyYWdnaW5nU2hhcGU7Cgp2YXIgZ2V0Rm9jdXNlZFNoYXBlID0gZnVuY3Rpb24gZ2V0Rm9jdXNlZFNoYXBlKGRyYWdnZWRTaGFwZSwgaG92ZXJlZFNoYXBlKSB7CiAgcmV0dXJuIGRyYWdnZWRTaGFwZSB8fCBob3ZlcmVkU2hhcGU7Cn07IC8vIGZvY3VzZWRTaGFwZXMgaGFzIHVwZGF0ZWQgcG9zaXRpb24gZXRjLiBpbmZvcm1hdGlvbiB3aGlsZSBmb2N1c2VkU2hhcGUgbWF5IGhhdmUgc3RhbGUgcG9zaXRpb24KCgpleHBvcnRzLmdldEZvY3VzZWRTaGFwZSA9IGdldEZvY3VzZWRTaGFwZTsKCnZhciBnZXRBbHRlclNuYXBHZXN0dXJlID0gZnVuY3Rpb24gZ2V0QWx0ZXJTbmFwR2VzdHVyZShtZXRhSGVsZCkgewogIHJldHVybiBtZXRhSGVsZCA/IFsncmVsYXgnXSA6IFtdOwp9OwoKZXhwb3J0cy5nZXRBbHRlclNuYXBHZXN0dXJlID0gZ2V0QWx0ZXJTbmFwR2VzdHVyZTsKdmFyIGluaXRpYWxUcmFuc2Zvcm1UdXBsZSA9IHsKICBkZWx0YVg6IDAsCiAgZGVsdGFZOiAwLAogIHRyYW5zZm9ybTogbnVsbCwKICBjdW11bGF0aXZlVHJhbnNmb3JtOiBudWxsCn07Cgp2YXIgZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlUHJldiA9IGZ1bmN0aW9uIGdldE1vdXNlVHJhbnNmb3JtR2VzdHVyZVByZXYoX3JlZjEwKSB7CiAgdmFyIG1vdXNlVHJhbnNmb3JtU3RhdGUgPSBfcmVmMTAubW91c2VUcmFuc2Zvcm1TdGF0ZTsKICByZXR1cm4gbW91c2VUcmFuc2Zvcm1TdGF0ZSB8fCBpbml0aWFsVHJhbnNmb3JtVHVwbGU7Cn07CgpleHBvcnRzLmdldE1vdXNlVHJhbnNmb3JtR2VzdHVyZVByZXYgPSBnZXRNb3VzZVRyYW5zZm9ybUdlc3R1cmVQcmV2OwoKdmFyIGdldE1vdXNlVHJhbnNmb3JtU3RhdGUgPSBmdW5jdGlvbiBnZXRNb3VzZVRyYW5zZm9ybVN0YXRlKHByZXYsIGRyYWdnaW5nLCBfcmVmMTEpIHsKICB2YXIgeDAgPSBfcmVmMTEueDAsCiAgICAgIHkwID0gX3JlZjExLnkwLAogICAgICB4MSA9IF9yZWYxMS54MSwKICAgICAgeTEgPSBfcmVmMTEueTE7CgogIGlmIChkcmFnZ2luZyAmJiAhaXNOYU4oeDApICYmICFpc05hTih5MCkgJiYgIWlzTmFOKHgxKSAmJiAhaXNOYU4oeTEpKSB7CiAgICB2YXIgZGVsdGFYID0geDEgLSB4MDsKICAgIHZhciBkZWx0YVkgPSB5MSAtIHkwOwogICAgdmFyIHRyYW5zZm9ybSA9ICgwLCBfbWF0cml4LnRyYW5zbGF0ZSkoZGVsdGFYIC0gcHJldi5kZWx0YVgsIGRlbHRhWSAtIHByZXYuZGVsdGFZLCAwKTsKICAgIHZhciBjdW11bGF0aXZlVHJhbnNmb3JtID0gKDAsIF9tYXRyaXgudHJhbnNsYXRlKShkZWx0YVgsIGRlbHRhWSwgMCk7CiAgICByZXR1cm4gewogICAgICBkZWx0YVg6IGRlbHRhWCwKICAgICAgZGVsdGFZOiBkZWx0YVksCiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLAogICAgICBjdW11bGF0aXZlVHJhbnNmb3JtOiBjdW11bGF0aXZlVHJhbnNmb3JtCiAgICB9OwogIH0gZWxzZSB7CiAgICByZXR1cm4gaW5pdGlhbFRyYW5zZm9ybVR1cGxlOwogIH0KfTsKCmV4cG9ydHMuZ2V0TW91c2VUcmFuc2Zvcm1TdGF0ZSA9IGdldE1vdXNlVHJhbnNmb3JtU3RhdGU7Cgp2YXIgZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlID0gZnVuY3Rpb24gZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlKHR1cGxlKSB7CiAgcmV0dXJuIFt0dXBsZV0uZmlsdGVyKGZ1bmN0aW9uICh0cGwpIHsKICAgIHJldHVybiB0cGwudHJhbnNmb3JtOwogIH0pLm1hcChmdW5jdGlvbiAoX3JlZjEyKSB7CiAgICB2YXIgdHJhbnNmb3JtID0gX3JlZjEyLnRyYW5zZm9ybSwKICAgICAgICBjdW11bGF0aXZlVHJhbnNmb3JtID0gX3JlZjEyLmN1bXVsYXRpdmVUcmFuc2Zvcm07CiAgICByZXR1cm4gewogICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSwKICAgICAgY3VtdWxhdGl2ZVRyYW5zZm9ybTogY3VtdWxhdGl2ZVRyYW5zZm9ybQogICAgfTsKICB9KTsKfTsKCmV4cG9ydHMuZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlID0gZ2V0TW91c2VUcmFuc2Zvcm1HZXN0dXJlOwoKdmFyIGdldExvY2FsVHJhbnNmb3JtTWF0cml4ID0gZnVuY3Rpb24gZ2V0TG9jYWxUcmFuc2Zvcm1NYXRyaXgoc2hhcGVzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChzaGFwZSkgewogICAgaWYgKCFzaGFwZS5wYXJlbnQpIHsKICAgICAgcmV0dXJuIHNoYXBlLnRyYW5zZm9ybU1hdHJpeDsKICAgIH0KCiAgICByZXR1cm4gKDAsIF9tYXRyaXgubXVsdGlwbHkpKCgwLCBfbWF0cml4LmludmVydCkoc2hhcGVzLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgICAgcmV0dXJuIHMuaWQgPT09IHNoYXBlLnBhcmVudDsKICAgIH0pLnRyYW5zZm9ybU1hdHJpeCksIHNoYXBlLnRyYW5zZm9ybU1hdHJpeCk7CiAgfTsKfTsKCmV4cG9ydHMuZ2V0TG9jYWxUcmFuc2Zvcm1NYXRyaXggPSBnZXRMb2NhbFRyYW5zZm9ybU1hdHJpeDsKCnZhciBnZXRTZWxlY3RlZFNoYXBlT2JqZWN0cyA9IGZ1bmN0aW9uIGdldFNlbGVjdGVkU2hhcGVPYmplY3RzKHNjZW5lLCBzaGFwZXMpIHsKICByZXR1cm4gKHNjZW5lLnNlbGVjdGVkU2hhcGVzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzaGFwZXMuZmluZChmdW5jdGlvbiAoc3MpIHsKICAgICAgcmV0dXJuIHNzLmlkID09PSBzOwogICAgfSk7CiAgfSk7Cn07CgpleHBvcnRzLmdldFNlbGVjdGVkU2hhcGVPYmplY3RzID0gZ2V0U2VsZWN0ZWRTaGFwZU9iamVjdHM7Cgp2YXIgY29udGVudFNoYXBlID0gZnVuY3Rpb24gY29udGVudFNoYXBlKGFsbFNoYXBlcykgewogIHJldHVybiBmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS50eXBlID09PSAnYW5ub3RhdGlvbicgPyBjb250ZW50U2hhcGUoYWxsU2hhcGVzKShhbGxTaGFwZXMuZmluZChmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gcy5pZCA9PT0gc2hhcGUucGFyZW50OwogICAgfSkpIDogc2hhcGU7CiAgfTsKfTsKCnZhciBnZXRDb250ZW50U2hhcGVzID0gZnVuY3Rpb24gZ2V0Q29udGVudFNoYXBlcyhhbGxTaGFwZXMsIHNoYXBlcykgewogIC8vIGZpeG1lIG5vIG5lZWQgdG8gZXhwb3J0LCB3aHkgZG9lc24ndCBsaW50ZXIgb3IgaGlnaGxpZ2h0ZXIgY29tcGxhaW4/CiAgdmFyIGlkTWFwID0gKDAsIF9mdW5jdGlvbmFsLmFycmF5VG9NYXApKGFsbFNoYXBlcy5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUuaWQ7CiAgfSkpOwogIHJldHVybiBzaGFwZXMuZmlsdGVyKGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIGlkTWFwW3NoYXBlLmlkXTsKICB9KS5tYXAoY29udGVudFNoYXBlKGFsbFNoYXBlcykpOwp9OwoKdmFyIHByaW1hcnlTaGFwZSA9IGZ1bmN0aW9uIHByaW1hcnlTaGFwZShzaGFwZSkgewogIHJldHVybiBzaGFwZS50eXBlID09PSAnYW5ub3RhdGlvbicgPyBzaGFwZS5wYXJlbnQgOiBzaGFwZS5pZDsKfTsKCnZhciByb3RhdGlvbk1hbmlwdWxhdGlvbiA9IGZ1bmN0aW9uIHJvdGF0aW9uTWFuaXB1bGF0aW9uKGNvbmZpZykgewogIHJldHVybiBmdW5jdGlvbiAoX3JlZjEzKSB7CiAgICB2YXIgc2hhcGUgPSBfcmVmMTMuc2hhcGUsCiAgICAgICAgZGlyZWN0U2hhcGUgPSBfcmVmMTMuZGlyZWN0U2hhcGUsCiAgICAgICAgX3JlZjEzJGN1cnNvclBvc2l0aW9uID0gX3JlZjEzLmN1cnNvclBvc2l0aW9uLAogICAgICAgIHggPSBfcmVmMTMkY3Vyc29yUG9zaXRpb24ueCwKICAgICAgICB5ID0gX3JlZjEzJGN1cnNvclBvc2l0aW9uLnksCiAgICAgICAgYWx0ZXJTbmFwR2VzdHVyZSA9IF9yZWYxMy5hbHRlclNuYXBHZXN0dXJlOwoKICAgIC8vIHJvdGF0ZSBhcm91bmQgYSBaLXBhcmFsbGVsIGxpbmUgZ29pbmcgdGhyb3VnaCB0aGUgc2hhcGUgY2VudGVyIChpZS4gYXJvdW5kIHRoZSBjZW50ZXIpCiAgICBpZiAoIXNoYXBlIHx8ICFkaXJlY3RTaGFwZSkgewogICAgICByZXR1cm4gewogICAgICAgIHRyYW5zZm9ybXM6IFtdLAogICAgICAgIHNoYXBlczogW10KICAgICAgfTsKICAgIH0KCiAgICB2YXIgY2VudGVyID0gc2hhcGUudHJhbnNmb3JtTWF0cml4OwogICAgdmFyIGNlbnRlclBvc2l0aW9uID0gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkoY2VudGVyLCBfbWF0cml4Lk9SSUdJTik7CiAgICB2YXIgdmVjdG9yID0gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKGNlbnRlciwgZGlyZWN0U2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXgpLCBfbWF0cml4Lk9SSUdJTik7CiAgICB2YXIgb2xkQW5nbGUgPSBNYXRoLmF0YW4yKGNlbnRlclBvc2l0aW9uWzFdIC0gdmVjdG9yWzFdLCBjZW50ZXJQb3NpdGlvblswXSAtIHZlY3RvclswXSk7CiAgICB2YXIgbmV3QW5nbGUgPSBNYXRoLmF0YW4yKGNlbnRlclBvc2l0aW9uWzFdIC0geSwgY2VudGVyUG9zaXRpb25bMF0gLSB4KTsKICAgIHZhciBjbG9zZXN0NDVkZWcgPSBNYXRoLnJvdW5kKG5ld0FuZ2xlIC8gKE1hdGguUEkgLyAxMikpICogTWF0aC5QSSAvIDEyOwogICAgdmFyIHJhZGl1cyA9IE1hdGguc3FydChNYXRoLnBvdyhjZW50ZXJQb3NpdGlvblswXSAtIHgsIDIpICsgTWF0aC5wb3coY2VudGVyUG9zaXRpb25bMV0gLSB5LCAyKSk7CiAgICB2YXIgY2xvc2VzdDQ1ZGVnUG9zaXRpb24gPSBbTWF0aC5jb3MoY2xvc2VzdDQ1ZGVnKSAqIHJhZGl1cywgTWF0aC5zaW4oY2xvc2VzdDQ1ZGVnKSAqIHJhZGl1c107CiAgICB2YXIgcGl4ZWxEaWZmZXJlbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KGNsb3Nlc3Q0NWRlZ1Bvc2l0aW9uWzBdIC0gKGNlbnRlclBvc2l0aW9uWzBdIC0geCksIDIpICsgTWF0aC5wb3coY2xvc2VzdDQ1ZGVnUG9zaXRpb25bMV0gLSAoY2VudGVyUG9zaXRpb25bMV0gLSB5KSwgMikpOwogICAgdmFyIHJlbGF4ZWQgPSBhbHRlclNuYXBHZXN0dXJlLmluZGV4T2YoJ3JlbGF4JykgIT09IC0xOwogICAgdmFyIG5ld1NuYXBwZWRBbmdsZSA9IHBpeGVsRGlmZmVyZW5jZSA8IGNvbmZpZy5yb3RhdGVTbmFwSW5QaXhlbHMgJiYgIXJlbGF4ZWQgPyBjbG9zZXN0NDVkZWcgOiBuZXdBbmdsZTsKICAgIHZhciByZXN1bHQgPSAoMCwgX21hdHJpeC5yb3RhdGVaKShvbGRBbmdsZSAtIG5ld1NuYXBwZWRBbmdsZSk7CiAgICByZXR1cm4gewogICAgICB0cmFuc2Zvcm1zOiBbcmVzdWx0XSwKICAgICAgc2hhcGVzOiBbc2hhcGUuaWRdCiAgICB9OwogIH07Cn07Cgp2YXIgbWluaW11bVNpemUgPSBmdW5jdGlvbiBtaW5pbXVtU2l6ZShtaW4sIF9yZWYxNCwgdmVjdG9yKSB7CiAgdmFyIGEgPSBfcmVmMTQuYSwKICAgICAgYiA9IF9yZWYxNC5iLAogICAgICBiYXNlQUIgPSBfcmVmMTQuYmFzZUFCOwogIC8vIGRvbid0IGFsbG93IGFuIGVsZW1lbnQgc2l6ZSBvZiBsZXNzIHRoYW4gdGhlIG1pbmltdW1FbGVtZW50U2l6ZQogIC8vIHRvZG8gc3dpdGNoIHRvIG1hdHJpeCBhbGdlYnJhCiAgcmV0dXJuIFtNYXRoLm1heChiYXNlQUIgPyBtaW4gLSBiYXNlQUJbMF0gOiBtaW4gLSBhLCB2ZWN0b3JbMF0pLCBNYXRoLm1heChiYXNlQUIgPyBtaW4gLSBiYXNlQUJbMV0gOiBtaW4gLSBiLCB2ZWN0b3JbMV0pXTsKfTsKCnZhciBjZW50ZXJlZFJlc2l6ZU1hbmlwdWxhdGlvbiA9IGZ1bmN0aW9uIGNlbnRlcmVkUmVzaXplTWFuaXB1bGF0aW9uKGNvbmZpZykgewogIHJldHVybiBmdW5jdGlvbiAoX3JlZjE1KSB7CiAgICB2YXIgZ2VzdHVyZSA9IF9yZWYxNS5nZXN0dXJlLAogICAgICAgIHNoYXBlID0gX3JlZjE1LnNoYXBlLAogICAgICAgIGRpcmVjdFNoYXBlID0gX3JlZjE1LmRpcmVjdFNoYXBlOwogICAgdmFyIHRyYW5zZm9ybSA9IGdlc3R1cmUuY3VtdWxhdGl2ZVRyYW5zZm9ybTsgLy8gc2NhbGluZyBzdWNoIHRoYXQgdGhlIGNlbnRlciByZW1haW5zIGluIHBsYWNlIChpZS4gdGhlIG90aGVyIHNpZGUgb2YgdGhlIHNoYXBlIGNhbiBncm93L3NocmluaykKCiAgICBpZiAoIXNoYXBlIHx8ICFkaXJlY3RTaGFwZSkgewogICAgICByZXR1cm4gewogICAgICAgIHRyYW5zZm9ybXM6IFtdLAogICAgICAgIHNoYXBlczogW10KICAgICAgfTsKICAgIH0gLy8gdHJhbnNmb3JtIHRoZSBpbmNvbWluZyBgdHJhbnNmb3JtYCBzbyB0aGF0IHJlc2l6aW5nIGlzIGFsaWduZWQgd2l0aCBzaGFwZSBvcmllbnRhdGlvbgoKCiAgICB2YXIgdmVjdG9yID0gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKCgwLCBfbWF0cml4LmludmVydCkoKDAsIF9tYXRyaXguY29tcG9zaXRlQ29tcG9uZW50KShzaGFwZS5sb2NhbFRyYW5zZm9ybU1hdHJpeCkpLCAvLyByaWQgdGhlIHRyYW5zbGF0ZSBjb21wb25lbnQKICAgIHRyYW5zZm9ybSksIF9tYXRyaXguT1JJR0lOKTsKICAgIHZhciBvcmllbnRhdGlvbk1hc2sgPSBbcmVzaXplTXVsdGlwbGllckhvcml6b250YWxbZGlyZWN0U2hhcGUuaG9yaXpvbnRhbFBvc2l0aW9uXSwgcmVzaXplTXVsdGlwbGllclZlcnRpY2FsW2RpcmVjdFNoYXBlLnZlcnRpY2FsUG9zaXRpb25dLCAwXTsKICAgIHZhciBvcmllbnRlZFZlY3RvciA9ICgwLCBfbWF0cml4MmQuY29tcG9uZW50UHJvZHVjdCkodmVjdG9yLCBvcmllbnRhdGlvbk1hc2spOwogICAgdmFyIGNhcHBlZE9yaWVudGVkVmVjdG9yID0gbWluaW11bVNpemUoY29uZmlnLm1pbmltdW1FbGVtZW50U2l6ZSwgc2hhcGUsIG9yaWVudGVkVmVjdG9yKTsKICAgIHJldHVybiB7CiAgICAgIGN1bXVsYXRpdmVUcmFuc2Zvcm1zOiBbXSwKICAgICAgY3VtdWxhdGl2ZVNpemVzOiBbZ2VzdHVyZS5zaXplcyB8fCBfbWF0cml4MmQudHJhbnNsYXRlLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KGNhcHBlZE9yaWVudGVkVmVjdG9yKSldLAogICAgICBzaGFwZXM6IFtzaGFwZS5pZF0KICAgIH07CiAgfTsKfTsKCnZhciBhc3ltbWV0cmljUmVzaXplTWFuaXB1bGF0aW9uID0gZnVuY3Rpb24gYXN5bW1ldHJpY1Jlc2l6ZU1hbmlwdWxhdGlvbihjb25maWcpIHsKICByZXR1cm4gZnVuY3Rpb24gKF9yZWYxNikgewogICAgdmFyIGdlc3R1cmUgPSBfcmVmMTYuZ2VzdHVyZSwKICAgICAgICBzaGFwZSA9IF9yZWYxNi5zaGFwZSwKICAgICAgICBkaXJlY3RTaGFwZSA9IF9yZWYxNi5kaXJlY3RTaGFwZTsKICAgIHZhciB0cmFuc2Zvcm0gPSBnZXN0dXJlLmN1bXVsYXRpdmVUcmFuc2Zvcm07IC8vIHNjYWxpbmcgc3VjaCB0aGF0IHRoZSBjZW50ZXIgcmVtYWlucyBpbiBwbGFjZSAoaWUuIHRoZSBvdGhlciBzaWRlIG9mIHRoZSBzaGFwZSBjYW4gZ3Jvdy9zaHJpbmspCgogICAgaWYgKCFzaGFwZSB8fCAhZGlyZWN0U2hhcGUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0cmFuc2Zvcm1zOiBbXSwKICAgICAgICBzaGFwZXM6IFtdCiAgICAgIH07CiAgICB9IC8vIHRyYW5zZm9ybSB0aGUgaW5jb21pbmcgYHRyYW5zZm9ybWAgc28gdGhhdCByZXNpemluZyBpcyBhbGlnbmVkIHdpdGggc2hhcGUgb3JpZW50YXRpb24KCgogICAgdmFyIGNvbXBvc2l0ZSA9ICgwLCBfbWF0cml4LmNvbXBvc2l0ZUNvbXBvbmVudCkoc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXgpOwogICAgdmFyIGludiA9ICgwLCBfbWF0cml4LmludmVydCkoY29tcG9zaXRlKTsgLy8gcmlkIHRoZSB0cmFuc2xhdGUgY29tcG9uZW50CgogICAgdmFyIHZlY3RvciA9ICgwLCBfbWF0cml4Lm12TXVsdGlwbHkpKCgwLCBfbWF0cml4Lm11bHRpcGx5KShpbnYsIHRyYW5zZm9ybSksIF9tYXRyaXguT1JJR0lOKTsKICAgIHZhciBvcmllbnRhdGlvbk1hc2sgPSBbcmVzaXplTXVsdGlwbGllckhvcml6b250YWxbZGlyZWN0U2hhcGUuaG9yaXpvbnRhbFBvc2l0aW9uXSAvIDIsIHJlc2l6ZU11bHRpcGxpZXJWZXJ0aWNhbFtkaXJlY3RTaGFwZS52ZXJ0aWNhbFBvc2l0aW9uXSAvIDIsIDBdOwogICAgdmFyIG9yaWVudGVkVmVjdG9yID0gKDAsIF9tYXRyaXgyZC5jb21wb25lbnRQcm9kdWN0KSh2ZWN0b3IsIG9yaWVudGF0aW9uTWFzayk7CiAgICB2YXIgY2FwcGVkT3JpZW50ZWRWZWN0b3IgPSBtaW5pbXVtU2l6ZShjb25maWcubWluaW11bUVsZW1lbnRTaXplLCBzaGFwZSwgb3JpZW50ZWRWZWN0b3IpOwogICAgdmFyIGFudGlSb3RhdGVkVmVjdG9yID0gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKGNvbXBvc2l0ZSwgKDAsIF9tYXRyaXguc2NhbGUpKHJlc2l6ZU11bHRpcGxpZXJIb3Jpem9udGFsW2RpcmVjdFNoYXBlLmhvcml6b250YWxQb3NpdGlvbl0sIHJlc2l6ZU11bHRpcGxpZXJWZXJ0aWNhbFtkaXJlY3RTaGFwZS52ZXJ0aWNhbFBvc2l0aW9uXSwgMSksICgwLCBfbWF0cml4LnRyYW5zbGF0ZSkoY2FwcGVkT3JpZW50ZWRWZWN0b3JbMF0sIGNhcHBlZE9yaWVudGVkVmVjdG9yWzFdLCAwKSksIF9tYXRyaXguT1JJR0lOKTsKCiAgICB2YXIgc2l6ZU1hdHJpeCA9IGdlc3R1cmUuc2l6ZXMgfHwgX21hdHJpeDJkLnRyYW5zbGF0ZS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShjYXBwZWRPcmllbnRlZFZlY3RvcikpOwoKICAgIHJldHVybiB7CiAgICAgIGN1bXVsYXRpdmVUcmFuc2Zvcm1zOiBbKDAsIF9tYXRyaXgudHJhbnNsYXRlKShhbnRpUm90YXRlZFZlY3RvclswXSwgYW50aVJvdGF0ZWRWZWN0b3JbMV0sIDApXSwKICAgICAgY3VtdWxhdGl2ZVNpemVzOiBbc2l6ZU1hdHJpeF0sCiAgICAgIHNoYXBlczogW3NoYXBlLmlkXQogICAgfTsKICB9Owp9OwoKdmFyIGRpcmVjdFNoYXBlVHJhbnNsYXRlTWFuaXB1bGF0aW9uID0gZnVuY3Rpb24gZGlyZWN0U2hhcGVUcmFuc2xhdGVNYW5pcHVsYXRpb24oY3VtdWxhdGl2ZVRyYW5zZm9ybXMsIGRpcmVjdFNoYXBlcykgewogIHZhciBzaGFwZXMgPSBkaXJlY3RTaGFwZXMubWFwKGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIHNoYXBlLnR5cGUgIT09ICdhbm5vdGF0aW9uJyAmJiBzaGFwZS5pZDsKICB9KS5maWx0ZXIoX2Z1bmN0aW9uYWwuaWRlbnRpdHkpOwogIHJldHVybiBbewogICAgY3VtdWxhdGl2ZVRyYW5zZm9ybXM6IGN1bXVsYXRpdmVUcmFuc2Zvcm1zLAogICAgc2hhcGVzOiBzaGFwZXMKICB9XTsKfTsKCnZhciByb3RhdGlvbkFubm90YXRpb25NYW5pcHVsYXRpb24gPSBmdW5jdGlvbiByb3RhdGlvbkFubm90YXRpb25NYW5pcHVsYXRpb24oY29uZmlnLCBkaXJlY3RUcmFuc2Zvcm1zLCBkaXJlY3RTaGFwZXMsIGFsbFNoYXBlcywgY3Vyc29yUG9zaXRpb24sIGFsdGVyU25hcEdlc3R1cmUpIHsKICB2YXIgc2hhcGVJZHMgPSBkaXJlY3RTaGFwZXMubWFwKGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIHNoYXBlLnR5cGUgPT09ICdhbm5vdGF0aW9uJyAmJiBzaGFwZS5zdWJ0eXBlID09PSBjb25maWcucm90YXRpb25IYW5kbGVOYW1lICYmIHNoYXBlLnBhcmVudDsKICB9KTsKICB2YXIgc2hhcGVzID0gc2hhcGVJZHMubWFwKGZ1bmN0aW9uIChpZCkgewogICAgcmV0dXJuIGlkICYmIGFsbFNoYXBlcy5maW5kKGZ1bmN0aW9uIChzaGFwZSkgewogICAgICByZXR1cm4gc2hhcGUuaWQgPT09IGlkOwogICAgfSk7CiAgfSk7CiAgdmFyIHR1cGxlcyA9ICgwLCBfZnVuY3Rpb25hbC5mbGF0dGVuKShzaGFwZXMubWFwKGZ1bmN0aW9uIChzaGFwZSwgaSkgewogICAgcmV0dXJuIGRpcmVjdFRyYW5zZm9ybXMubWFwKGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSwKICAgICAgICBzaGFwZTogc2hhcGUsCiAgICAgICAgZGlyZWN0U2hhcGU6IGRpcmVjdFNoYXBlc1tpXSwKICAgICAgICBjdXJzb3JQb3NpdGlvbjogY3Vyc29yUG9zaXRpb24sCiAgICAgICAgYWx0ZXJTbmFwR2VzdHVyZTogYWx0ZXJTbmFwR2VzdHVyZQogICAgICB9OwogICAgfSk7CiAgfSkpOwogIHJldHVybiB0dXBsZXMubWFwKHJvdGF0aW9uTWFuaXB1bGF0aW9uKGNvbmZpZykpOwp9OwoKdmFyIHJlc2l6ZUFubm90YXRpb25NYW5pcHVsYXRpb24gPSBmdW5jdGlvbiByZXNpemVBbm5vdGF0aW9uTWFuaXB1bGF0aW9uKGNvbmZpZywgdHJhbnNmb3JtR2VzdHVyZXMsIGRpcmVjdFNoYXBlcywgYWxsU2hhcGVzLCBtYW5pcHVsYXRvcikgewogIHZhciBzaGFwZUlkcyA9IGRpcmVjdFNoYXBlcy5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUudHlwZSA9PT0gJ2Fubm90YXRpb24nICYmIHNoYXBlLnN1YnR5cGUgPT09IGNvbmZpZy5yZXNpemVIYW5kbGVOYW1lICYmIHNoYXBlLnBhcmVudDsKICB9KTsKICB2YXIgc2hhcGVzID0gc2hhcGVJZHMubWFwKGZ1bmN0aW9uIChpZCkgewogICAgcmV0dXJuIGlkICYmIGFsbFNoYXBlcy5maW5kKGZ1bmN0aW9uIChzaGFwZSkgewogICAgICByZXR1cm4gc2hhcGUuaWQgPT09IGlkOwogICAgfSk7CiAgfSk7CiAgdmFyIHR1cGxlcyA9ICgwLCBfZnVuY3Rpb25hbC5mbGF0dGVuKShzaGFwZXMubWFwKGZ1bmN0aW9uIChzaGFwZSwgaSkgewogICAgcmV0dXJuIHRyYW5zZm9ybUdlc3R1cmVzLm1hcChmdW5jdGlvbiAoZ2VzdHVyZSkgewogICAgICByZXR1cm4gewogICAgICAgIGdlc3R1cmU6IGdlc3R1cmUsCiAgICAgICAgc2hhcGU6IHNoYXBlLAogICAgICAgIGRpcmVjdFNoYXBlOiBkaXJlY3RTaGFwZXNbaV0KICAgICAgfTsKICAgIH0pOwogIH0pKTsKICByZXR1cm4gdHVwbGVzLm1hcChtYW5pcHVsYXRvcik7Cn07Cgp2YXIgZnJvbVNjcmVlbiA9IGZ1bmN0aW9uIGZyb21TY3JlZW4oY3VycmVudFRyYW5zZm9ybSkgewogIHJldHVybiBmdW5jdGlvbiAodHJhbnNmb3JtKSB7CiAgICB2YXIgaXNUcmFuc2xhdGUgPSB0cmFuc2Zvcm1bMTJdICE9PSAwIHx8IHRyYW5zZm9ybVsxM10gIT09IDA7CgogICAgaWYgKGlzVHJhbnNsYXRlKSB7CiAgICAgIHZhciBjb21wb3NpdGUgPSAoMCwgX21hdHJpeC5jb21wb3NpdGVDb21wb25lbnQpKGN1cnJlbnRUcmFuc2Zvcm0pOwogICAgICB2YXIgaW52ZXJzZSA9ICgwLCBfbWF0cml4LmludmVydCkoY29tcG9zaXRlKTsKICAgICAgdmFyIHJlc3VsdCA9ICgwLCBfbWF0cml4LnRyYW5zbGF0ZUNvbXBvbmVudCkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKGludmVyc2UsIHRyYW5zZm9ybSkpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRyYW5zZm9ybTsKICAgIH0KICB9Owp9OwoKdmFyIGhvcml6b250YWxUb0luZGV4ID0gZnVuY3Rpb24gaG9yaXpvbnRhbFRvSW5kZXgoaG9yaXpvbnRhbCkgewogIHJldHVybiBob3Jpem9udGFsID8gMCA6IDE7Cn07Cgp2YXIgYW5jaG9yQUFCQiA9IGZ1bmN0aW9uIGFuY2hvckFBQkIoYWFiYiwgYW5jaG9yRGlyZWN0aW9uLCBob3Jpem9udGFsKSB7CiAgdmFyIGRpbWVuc2lvbiA9IGhvcml6b250YWxUb0luZGV4KGhvcml6b250YWwpOwoKICBpZiAoYW5jaG9yRGlyZWN0aW9uID09PSAwKSB7CiAgICByZXR1cm4gKGFhYmJbMF1bZGltZW5zaW9uXSArIGFhYmJbMV1bZGltZW5zaW9uXSkgLyAyOyAvLyBtaWRwb2ludAogIH0gZWxzZSB7CiAgICB2YXIgaW5kZXggPSAoYW5jaG9yRGlyZWN0aW9uICsgMSkgLyAyOyAvLyB7LTEsIDF9IC0+IHswLCAxfSBmb3IgYXJyYXkgbG9va3VwCgogICAgcmV0dXJuIGFhYmJbaW5kZXhdW2RpbWVuc2lvbl07CiAgfQp9OwoKdmFyIGdldEFsaWduRGlzdHJpYnV0ZVRyYW5zZm9ybUludGVudHMgPSBmdW5jdGlvbiBnZXRBbGlnbkRpc3RyaWJ1dGVUcmFuc2Zvcm1JbnRlbnRzKGFsaWduQWN0aW9uLCBkaXN0cmlidXRlQWN0aW9uLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzKSB7CiAgLy8gYXQgbW9zdCwgb25seSBvbmUgb2YgdGhlbSBjYW4gaGFwcGVuCiAgaWYgKHNlbGVjdGVkU2hhcGVzLmxlbmd0aCAhPT0gMSB8fCBzZWxlY3RlZFNoYXBlc1swXS5zdWJ0eXBlICE9PSAnYWRIb2NHcm91cCcpIHsKICAgIHJldHVybiBbXTsKICB9CgogIHZhciBncm91cCA9IHNlbGVjdGVkU2hhcGVzWzBdOwogIHZhciBjaGlsZHJlbiA9IHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLnBhcmVudCA9PT0gZ3JvdXAuaWQgJiYgcy50eXBlICE9PSAnYW5ub3RhdGlvbic7CiAgfSk7CgogIGlmIChhbGlnbkFjdGlvbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7CiAgICB2YXIgY29udHJvbGxlZEFuY2hvciA9IGFsaWduQWN0aW9uLmNvbnRyb2xsZWRBbmNob3IsCiAgICAgICAgaG9yaXpvbnRhbCA9IGFsaWduQWN0aW9uLmhvcml6b250YWw7CiAgICB2YXIgZ3JvdXBCb3VuZGluZ0JveCA9IHNoYXBlQUFCQihncm91cCwgaWRlbnRpdHlBQUJCKCkpOwogICAgdmFyIGdyb3VwQW5jaG9yID0gYW5jaG9yQUFCQihncm91cEJvdW5kaW5nQm94LCBjb250cm9sbGVkQW5jaG9yLCBob3Jpem9udGFsKTsKICAgIHZhciByZXN1bHRzID0gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgIHZhciBjaGlsZEJvdW5kaW5nQm94ID0gc2hhcGVBQUJCKGMsIGlkZW50aXR5QUFCQigpKTsKICAgICAgdmFyIGNoaWxkQW5jaG9yID0gYW5jaG9yQUFCQihjaGlsZEJvdW5kaW5nQm94LCBjb250cm9sbGVkQW5jaG9yLCBob3Jpem9udGFsKTsKICAgICAgdmFyIGRlbHRhID0gZ3JvdXBBbmNob3IgLSBjaGlsZEFuY2hvcjsKICAgICAgcmV0dXJuIHsKICAgICAgICBjdW11bGF0aXZlVHJhbnNmb3JtczogWygwLCBfbWF0cml4LnRyYW5zbGF0ZSkoaG9yaXpvbnRhbCA/IGRlbHRhIDogMCwgaG9yaXpvbnRhbCA/IDAgOiBkZWx0YSwgMCldLAogICAgICAgIHNoYXBlczogW2MuaWRdCiAgICAgIH07CiAgICB9KTsKICAgIHJldHVybiByZXN1bHRzOwogIH0gZWxzZSBpZiAoZGlzdHJpYnV0ZUFjdGlvbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAyKSB7CiAgICB2YXIgX2hvcml6b250YWwgPSBkaXN0cmlidXRlQWN0aW9uLmhvcml6b250YWw7CiAgICB2YXIgQSA9IGdyb3VwLmEsCiAgICAgICAgQiA9IGdyb3VwLmI7CgogICAgdmFyIF9ncm91cEJvdW5kaW5nQm94ID0gc2hhcGVBQUJCKGdyb3VwLCBpZGVudGl0eUFBQkIoKSk7CgogICAgdmFyIF9ncm91cEFuY2hvciA9IGFuY2hvckFBQkIoX2dyb3VwQm91bmRpbmdCb3gsIC0xLCBfaG9yaXpvbnRhbCk7CgogICAgdmFyIGRpbWVuc2lvbiA9IGhvcml6b250YWxUb0luZGV4KF9ob3Jpem9udGFsKTsKICAgIHZhciBjaGlsZHJlbkJveGVzMkQgPSBjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIHNoYXBlQUFCQihjLCBpZGVudGl0eUFBQkIoKSk7CiAgICB9KTsKICAgIHZhciBjaGlsZHJlbkFuY2hvcnMgPSBjaGlsZHJlbkJveGVzMkQubWFwKGZ1bmN0aW9uIChjaGlsZEJvdW5kaW5nQm94KSB7CiAgICAgIHJldHVybiBhbmNob3JBQUJCKGNoaWxkQm91bmRpbmdCb3gsIC0xLCBfaG9yaXpvbnRhbCk7CiAgICB9KTsKICAgIHZhciBjaGlsZHJlbkJveGVzMUQgPSBjaGlsZHJlbkJveGVzMkQubWFwKGZ1bmN0aW9uIChib3gyRCkgewogICAgICByZXR1cm4gW2JveDJEWzBdW2RpbWVuc2lvbl0sIGJveDJEWzFdW2RpbWVuc2lvbl1dOwogICAgfSk7CiAgICB2YXIgY2hpbGRyZW5DZW50ZXJzID0gY2hpbGRyZW5Cb3hlczFELm1hcChmdW5jdGlvbiAoYm94MUQpIHsKICAgICAgcmV0dXJuIChib3gxRFsxXSArIGJveDFEWzBdKSAvIDI7CiAgICB9KTsKICAgIHZhciBjaGlsZHJlblNpemVzID0gY2hpbGRyZW5Cb3hlczFELm1hcChmdW5jdGlvbiAoYm94MUQpIHsKICAgICAgcmV0dXJuIGJveDFEWzFdIC0gYm94MURbMF07CiAgICB9KTsKICAgIHZhciB0b3RhbENoaWxkcmVuU2l6ZSA9IGNoaWxkcmVuU2l6ZXMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhICsgYjsKICAgIH0sIDApOwogICAgdmFyIGdyb3VwU2l6ZSA9IF9ob3Jpem9udGFsID8gMiAqIEEgOiAyICogQjsKICAgIHZhciB0b3RhbEZyZWVTcGFjZSA9IGdyb3VwU2l6ZSAtIHRvdGFsQ2hpbGRyZW5TaXplOwogICAgdmFyIGdhcENvdW50ID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsKICAgIHZhciBnYXAgPSB0b3RhbEZyZWVTcGFjZSAvIGdhcENvdW50OwoKICAgIHZhciBjaGlsZHJlbkluZGV4ID0gX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5KGNoaWxkcmVuLmxlbmd0aCkpLm1hcChmdW5jdGlvbiAoXywgaSkgewogICAgICByZXR1cm4gaTsKICAgIH0pOwoKICAgIHZhciBzb3J0ZWRDaGlsZHJlbkluZGV4ID0gY2hpbGRyZW5JbmRleC5zb3J0KGZ1bmN0aW9uIChpLCBqKSB7CiAgICAgIHJldHVybiBjaGlsZHJlbkNlbnRlcnNbaV0gLSBjaGlsZHJlbkNlbnRlcnNbal07CiAgICB9KTsKICAgIHZhciByZWR1Y3Rpb24gPSBzb3J0ZWRDaGlsZHJlbkluZGV4LnJlZHVjZShmdW5jdGlvbiAoX3JlZjE3LCBpKSB7CiAgICAgIHZhciBjdXJzb3IgPSBfcmVmMTcuY3Vyc29yLAogICAgICAgICAgZGVsdGFzID0gX3JlZjE3LmRlbHRhczsKICAgICAgdmFyIHNpemUgPSBjaGlsZHJlblNpemVzW2ldOwogICAgICB2YXIgb3JpZ2luYWxMZWZ0ID0gY2hpbGRyZW5BbmNob3JzW2ldOwogICAgICB2YXIgZGVzaXJlZExlZnQgPSBjdXJzb3I7CiAgICAgIHZhciBkZWx0YSA9IGRlc2lyZWRMZWZ0IC0gb3JpZ2luYWxMZWZ0OwogICAgICB2YXIgbmV4dExlZnQgPSBjdXJzb3IgKyBzaXplICsgZ2FwOwogICAgICByZXR1cm4gewogICAgICAgIGN1cnNvcjogbmV4dExlZnQsCiAgICAgICAgZGVsdGFzOiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGRlbHRhcyksIFtkZWx0YV0pCiAgICAgIH07CiAgICB9LCB7CiAgICAgIGN1cnNvcjogX2dyb3VwQW5jaG9yLAogICAgICBkZWx0YXM6IFtdCiAgICB9KTsKCiAgICB2YXIgX3Jlc3VsdHMgPSByZWR1Y3Rpb24uZGVsdGFzLm1hcChmdW5jdGlvbiAoZGVsdGEsIGlpKSB7CiAgICAgIHZhciBpID0gc29ydGVkQ2hpbGRyZW5JbmRleFtpaV07CiAgICAgIHJldHVybiB7CiAgICAgICAgY3VtdWxhdGl2ZVRyYW5zZm9ybXM6IFsoMCwgX21hdHJpeC50cmFuc2xhdGUpKF9ob3Jpem9udGFsID8gZGVsdGEgOiAwLCBfaG9yaXpvbnRhbCA/IDAgOiBkZWx0YSwgMCldLAogICAgICAgIHNoYXBlczogW2NoaWxkcmVuW2ldLmlkXQogICAgICB9OwogICAgfSk7CgogICAgcmV0dXJuIF9yZXN1bHRzOwogIH0KCiAgcmV0dXJuIFtdOwp9OwoKZXhwb3J0cy5nZXRBbGlnbkRpc3RyaWJ1dGVUcmFuc2Zvcm1JbnRlbnRzID0gZ2V0QWxpZ25EaXN0cmlidXRlVHJhbnNmb3JtSW50ZW50czsKCnZhciBzaGFwZUFwcGx5TG9jYWxUcmFuc2Zvcm1zID0gZnVuY3Rpb24gc2hhcGVBcHBseUxvY2FsVHJhbnNmb3JtcyhpbnRlbnRzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChzaGFwZSkgewogICAgdmFyIHRyYW5zZm9ybUludGVudHMgPSAoMCwgX2Z1bmN0aW9uYWwuZmxhdHRlbikoaW50ZW50cy5tYXAoZnVuY3Rpb24gKGludGVudCkgewogICAgICByZXR1cm4gaW50ZW50LnRyYW5zZm9ybXMgJiYgaW50ZW50LnRyYW5zZm9ybXMubGVuZ3RoICYmIGludGVudC5zaGFwZXMuZmluZChmdW5jdGlvbiAoaWQpIHsKICAgICAgICByZXR1cm4gaWQgPT09IHNoYXBlLmlkOwogICAgICB9KSAmJiBpbnRlbnQudHJhbnNmb3Jtcy5tYXAoZnJvbVNjcmVlbihzaGFwZS5sb2NhbFRyYW5zZm9ybU1hdHJpeCkpOwogICAgfSkuZmlsdGVyKF9mdW5jdGlvbmFsLmlkZW50aXR5KSk7CiAgICB2YXIgc2l6ZUludGVudHMgPSAoMCwgX2Z1bmN0aW9uYWwuZmxhdHRlbikoaW50ZW50cy5tYXAoZnVuY3Rpb24gKGludGVudCkgewogICAgICByZXR1cm4gaW50ZW50LnNpemVzICYmIGludGVudC5zaXplcy5sZW5ndGggJiYgaW50ZW50LnNoYXBlcy5maW5kKGZ1bmN0aW9uIChpZCkgewogICAgICAgIHJldHVybiBpZCA9PT0gc2hhcGUuaWQ7CiAgICAgIH0pICYmIGludGVudC5zaXplczsKICAgIH0pLmZpbHRlcihfZnVuY3Rpb25hbC5pZGVudGl0eSkpOwogICAgdmFyIGN1bXVsYXRpdmVUcmFuc2Zvcm1JbnRlbnRzID0gKDAsIF9mdW5jdGlvbmFsLmZsYXR0ZW4pKGludGVudHMubWFwKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgcmV0dXJuIGludGVudC5jdW11bGF0aXZlVHJhbnNmb3JtcyAmJiBpbnRlbnQuY3VtdWxhdGl2ZVRyYW5zZm9ybXMubGVuZ3RoICYmIGludGVudC5zaGFwZXMuZmluZChmdW5jdGlvbiAoaWQpIHsKICAgICAgICByZXR1cm4gaWQgPT09IHNoYXBlLmlkOwogICAgICB9KSAmJiBpbnRlbnQuY3VtdWxhdGl2ZVRyYW5zZm9ybXMubWFwKGZyb21TY3JlZW4oc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXgpKTsKICAgIH0pLmZpbHRlcihfZnVuY3Rpb25hbC5pZGVudGl0eSkpOwogICAgdmFyIGN1bXVsYXRpdmVTaXplSW50ZW50cyA9ICgwLCBfZnVuY3Rpb25hbC5mbGF0dGVuKShpbnRlbnRzLm1hcChmdW5jdGlvbiAoaW50ZW50KSB7CiAgICAgIHJldHVybiBpbnRlbnQuY3VtdWxhdGl2ZVNpemVzICYmIGludGVudC5jdW11bGF0aXZlU2l6ZXMubGVuZ3RoICYmIGludGVudC5zaGFwZXMuZmluZChmdW5jdGlvbiAoaWQpIHsKICAgICAgICByZXR1cm4gaWQgPT09IHNoYXBlLmlkOwogICAgICB9KSAmJiBpbnRlbnQuY3VtdWxhdGl2ZVNpemVzOwogICAgfSkuZmlsdGVyKF9mdW5jdGlvbmFsLmlkZW50aXR5KSk7CgogICAgdmFyIGJhc2VsaW5lTG9jYWxUcmFuc2Zvcm1NYXRyaXggPSBfbWF0cml4Lm11bHRpcGx5LmFwcGx5KHZvaWQgMCwgW3NoYXBlLmJhc2VsaW5lTG9jYWxUcmFuc2Zvcm1NYXRyaXggfHwgc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodHJhbnNmb3JtSW50ZW50cykpKTsKCiAgICB2YXIgY3VtdWxhdGl2ZVRyYW5zZm9ybUludGVudE1hdHJpeCA9IF9tYXRyaXgubXVsdGlwbHkuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoY3VtdWxhdGl2ZVRyYW5zZm9ybUludGVudHMpKTsKCiAgICB2YXIgYmFzZWxpbmVTaXplTWF0cml4ID0gX21hdHJpeDJkLm11bHRpcGx5LmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KHNpemVJbnRlbnRzKSkgfHwgX21hdHJpeDJkLlVOSVRNQVRSSVg7CgogICAgdmFyIGxvY2FsVHJhbnNmb3JtTWF0cml4ID0gY3VtdWxhdGl2ZVRyYW5zZm9ybUludGVudHMubGVuZ3RoID8gKDAsIF9tYXRyaXgubXVsdGlwbHkpKGJhc2VsaW5lTG9jYWxUcmFuc2Zvcm1NYXRyaXgsIGN1bXVsYXRpdmVUcmFuc2Zvcm1JbnRlbnRNYXRyaXgpIDogYmFzZWxpbmVMb2NhbFRyYW5zZm9ybU1hdHJpeDsKCiAgICB2YXIgY3VtdWxhdGl2ZVNpemVJbnRlbnRNYXRyaXggPSBfbWF0cml4MmQubXVsdGlwbHkuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoY3VtdWxhdGl2ZVNpemVJbnRlbnRzKSk7CgogICAgdmFyIHNpemVWZWN0b3IgPSAoMCwgX21hdHJpeDJkLm12TXVsdGlwbHkpKGN1bXVsYXRpdmVTaXplSW50ZW50cy5sZW5ndGggPyAoMCwgX21hdHJpeDJkLm11bHRpcGx5KShiYXNlbGluZVNpemVNYXRyaXgsIGN1bXVsYXRpdmVTaXplSW50ZW50TWF0cml4KSA6IGJhc2VsaW5lU2l6ZU1hdHJpeCwgc2hhcGUuYmFzZUFCID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzaGFwZS5iYXNlQUIpLCBbMV0pIDogW3NoYXBlLmEsIHNoYXBlLmIsIDFdKTsgLy8gQWJzb3JiIGNoYW5nZXMgaWYgdGhlIGdlc3R1cmUgaGFzIGVuZGVkCgogICAgdmFyIGFic29yYkNoYW5nZXMgPSAhdHJhbnNmb3JtSW50ZW50cy5sZW5ndGggJiYgIXNpemVJbnRlbnRzLmxlbmd0aCAmJiAhY3VtdWxhdGl2ZVRyYW5zZm9ybUludGVudHMubGVuZ3RoICYmICFjdW11bGF0aXZlU2l6ZUludGVudHMubGVuZ3RoOwogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHNoYXBlLCB7CiAgICAgIC8vIGFwcGx5IHRyYW5zZm9ybXM6CiAgICAgIGJhc2VsaW5lTG9jYWxUcmFuc2Zvcm1NYXRyaXg6IGFic29yYkNoYW5nZXMgPyBudWxsIDogYmFzZWxpbmVMb2NhbFRyYW5zZm9ybU1hdHJpeCwKICAgICAgYmFzZWxpbmVTaXplTWF0cml4OiBhYnNvcmJDaGFuZ2VzID8gbnVsbCA6IGJhc2VsaW5lU2l6ZU1hdHJpeCwKICAgICAgbG9jYWxUcmFuc2Zvcm1NYXRyaXg6IGFic29yYkNoYW5nZXMgPyBzaGFwZS5sb2NhbFRyYW5zZm9ybU1hdHJpeCA6IGxvY2FsVHJhbnNmb3JtTWF0cml4LAogICAgICBhOiBhYnNvcmJDaGFuZ2VzID8gc2hhcGUuYSA6IHNpemVWZWN0b3JbMF0sCiAgICAgIGI6IGFic29yYkNoYW5nZXMgPyBzaGFwZS5iIDogc2l6ZVZlY3RvclsxXSwKICAgICAgYmFzZUFCOiBhYnNvcmJDaGFuZ2VzID8gbnVsbCA6IHNoYXBlLmJhc2VBQiB8fCBbc2hhcGUuYSwgc2hhcGUuYl0KICAgIH0pOwogIH07Cn07Cgp2YXIgYXBwbHlMb2NhbFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBhcHBseUxvY2FsVHJhbnNmb3JtcyhzaGFwZXMsIHRyYW5zZm9ybUludGVudHMpIHsKICByZXR1cm4gc2hhcGVzLm1hcChzaGFwZUFwcGx5TG9jYWxUcmFuc2Zvcm1zKHRyYW5zZm9ybUludGVudHMpKTsKfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgoKZXhwb3J0cy5hcHBseUxvY2FsVHJhbnNmb3JtcyA9IGFwcGx5TG9jYWxUcmFuc2Zvcm1zOwoKdmFyIGdldFVwc3RyZWFtVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIGdldFVwc3RyZWFtVHJhbnNmb3JtcyhzaGFwZXMsIHNoYXBlKSB7CiAgcmV0dXJuIHNoYXBlLnBhcmVudCA/IGdldFVwc3RyZWFtVHJhbnNmb3JtcyhzaGFwZXMsIHNoYXBlcy5maW5kKGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy5pZCA9PT0gc2hhcGUucGFyZW50OwogIH0pKS5jb25jYXQoW3NoYXBlLmxvY2FsVHJhbnNmb3JtTWF0cml4XSkgOiBbc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXhdOwp9OwoKdmFyIGdldFVwc3RyZWFtcyA9IGZ1bmN0aW9uIGdldFVwc3RyZWFtcyhzaGFwZXMsIHNoYXBlKSB7CiAgcmV0dXJuIHNoYXBlLnBhcmVudCA/IGdldFVwc3RyZWFtcyhzaGFwZXMsIHNoYXBlcy5maW5kKGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy5pZCA9PT0gc2hhcGUucGFyZW50OwogIH0pKS5jb25jYXQoW3NoYXBlXSkgOiBbc2hhcGVdOwp9OwoKdmFyIHNuYXBwZWRBID0gZnVuY3Rpb24gc25hcHBlZEEoc2hhcGUpIHsKICByZXR1cm4gc2hhcGUuYSArIChzaGFwZS5zbmFwUmVzaXplVmVjdG9yID8gc2hhcGUuc25hcFJlc2l6ZVZlY3RvclswXSA6IDApOwp9OwoKdmFyIHNuYXBwZWRCID0gZnVuY3Rpb24gc25hcHBlZEIoc2hhcGUpIHsKICByZXR1cm4gc2hhcGUuYiArIChzaGFwZS5zbmFwUmVzaXplVmVjdG9yID8gc2hhcGUuc25hcFJlc2l6ZVZlY3RvclsxXSA6IDApOwp9OwoKdmFyIGNhc2NhZGVVbnNuYXBwZWRUcmFuc2Zvcm1zID0gZnVuY3Rpb24gY2FzY2FkZVVuc25hcHBlZFRyYW5zZm9ybXMoc2hhcGVzLCBzaGFwZSkgewogIGlmICghc2hhcGUucGFyZW50KSB7CiAgICByZXR1cm4gc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXg7CiAgfSAvLyBib29zdCBmb3IgY29tbW9uIGNhc2Ugb2YgdG9wbGV2ZWwgc2hhcGUKCgogIHZhciB1cHN0cmVhbXMgPSBnZXRVcHN0cmVhbXMoc2hhcGVzLCBzaGFwZSk7CiAgdmFyIHVwc3RyZWFtVHJhbnNmb3JtcyA9IHVwc3RyZWFtcy5tYXAoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLmxvY2FsVHJhbnNmb3JtTWF0cml4OwogIH0pOwogIHZhciBjYXNjYWRlZFRyYW5zZm9ybXMgPSAoMCwgX21hdHJpeC5yZWR1Y2VUcmFuc2Zvcm1zKSh1cHN0cmVhbVRyYW5zZm9ybXMpOwogIHJldHVybiBjYXNjYWRlZFRyYW5zZm9ybXM7Cn07Cgp2YXIgY2FzY2FkZVRyYW5zZm9ybXMgPSBmdW5jdGlvbiBjYXNjYWRlVHJhbnNmb3JtcyhzaGFwZXMsIHNoYXBlKSB7CiAgdmFyIGNhc2NhZGUgPSBmdW5jdGlvbiBjYXNjYWRlKHMpIHsKICAgIHJldHVybiBzLnNuYXBEZWx0YU1hdHJpeCA/ICgwLCBfbWF0cml4Lm11bHRpcGx5KShzLmxvY2FsVHJhbnNmb3JtTWF0cml4LCBzLnNuYXBEZWx0YU1hdHJpeCkgOiBzLmxvY2FsVHJhbnNmb3JtTWF0cml4OwogIH07CgogIGlmICghc2hhcGUucGFyZW50KSB7CiAgICByZXR1cm4gY2FzY2FkZShzaGFwZSk7CiAgfSAvLyBib29zdCBmb3IgY29tbW9uIGNhc2Ugb2YgdG9wbGV2ZWwgc2hhcGUKCgogIHZhciB1cHN0cmVhbXMgPSBnZXRVcHN0cmVhbXMoc2hhcGVzLCBzaGFwZSk7CiAgdmFyIHVwc3RyZWFtVHJhbnNmb3JtcyA9IHVwc3RyZWFtcy5tYXAoY2FzY2FkZSk7CiAgdmFyIGNhc2NhZGVkVHJhbnNmb3JtcyA9ICgwLCBfbWF0cml4LnJlZHVjZVRyYW5zZm9ybXMpKHVwc3RyZWFtVHJhbnNmb3Jtcyk7CiAgcmV0dXJuIGNhc2NhZGVkVHJhbnNmb3JtczsKfTsKCnZhciBzaGFwZUNhc2NhZGVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gc2hhcGVDYXNjYWRlUHJvcGVydGllcyhzaGFwZXMpIHsKICByZXR1cm4gZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUsIHsKICAgICAgdHJhbnNmb3JtTWF0cml4OiBjYXNjYWRlVHJhbnNmb3JtcyhzaGFwZXMsIHNoYXBlKSwKICAgICAgd2lkdGg6IDIgKiBzbmFwcGVkQShzaGFwZSksCiAgICAgIGhlaWdodDogMiAqIHNuYXBwZWRCKHNoYXBlKQogICAgfSk7CiAgfTsKfTsKCnZhciBjYXNjYWRlUHJvcGVydGllcyA9IGZ1bmN0aW9uIGNhc2NhZGVQcm9wZXJ0aWVzKHNoYXBlcykgewogIHJldHVybiBzaGFwZXMubWFwKHNoYXBlQ2FzY2FkZVByb3BlcnRpZXMoc2hhcGVzKSk7Cn07CgpleHBvcnRzLmNhc2NhZGVQcm9wZXJ0aWVzID0gY2FzY2FkZVByb3BlcnRpZXM7Cgp2YXIgYWxpZ25tZW50R3VpZGVzID0gZnVuY3Rpb24gYWxpZ25tZW50R3VpZGVzKGNvbmZpZywgc2hhcGVzLCBndWlkZWRTaGFwZXMsIGRyYWdnZWRTaGFwZSkgewogIHZhciByZXN1bHQgPSB7fTsKICB2YXIgY291bnRlciA9IDA7CiAgdmFyIGV4dHJlbWVIb3Jpem9udGFsID0gcmVzaXplTXVsdGlwbGllckhvcml6b250YWxbZHJhZ2dlZFNoYXBlLmhvcml6b250YWxQb3NpdGlvbl07CiAgdmFyIGV4dHJlbWVWZXJ0aWNhbCA9IHJlc2l6ZU11bHRpcGxpZXJWZXJ0aWNhbFtkcmFnZ2VkU2hhcGUudmVydGljYWxQb3NpdGlvbl07IC8vIHRvZG8gcmVwbGFjZSBmb3IgbG9vcHMgd2l0aCBbXS5tYXAgY2FsbHM7IERSWSBpdCB1cCwgYnJlYWsgb3V0IHBhcnRzOyBzZXZlcmFsIG9mIHdoaWNoIHRvIG1vdmUgdG8gZ2VvbWV0cnkuanMKICAvLyB0b2RvIHN3aXRjaCB0byBpbmZvcm1hdGl2ZSB2YXJpYWJsZSBuYW1lcwoKICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZ3VpZGVkU2hhcGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICB2YXIgZCA9IF9zdGVwLnZhbHVlOwoKICAgICAgaWYgKGQudHlwZSA9PT0gJ2Fubm90YXRpb24nKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0gLy8gZml4bWUgYXZvaWQgdGhpcyBieSBub3QgbGV0dGluZyBhbm5vdGF0aW9ucyBnZXQgaW4gaGVyZQogICAgICAvLyBrZXkgcG9pbnRzIG9mIHRoZSBkcmFnZ2VkIHNoYXBlIGJvdW5kaW5nIGJveAoKCiAgICAgIHZhciBhID0gY29uZmlnLnBhZ2VXaWR0aCAvIDIgKyAxOwogICAgICB2YXIgYiA9IGNvbmZpZy5wYWdlSGVpZ2h0IC8gMiArIDE7CiAgICAgIHZhciBwYWdlQm9yZGVyc0FuZENlbnRlckxpbmVzID0gW3sKICAgICAgICBhOiBhLAogICAgICAgIGI6IGIsCiAgICAgICAgbG9jYWxUcmFuc2Zvcm1NYXRyaXg6IFsxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCBhIC0gMSwgYiAtIDEsIDAsIDFdCiAgICAgIH1dOwogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlOwogICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7CiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBzaGFwZXMuY29uY2F0KHBhZ2VCb3JkZXJzQW5kQ2VudGVyTGluZXMpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7CiAgICAgICAgICB2YXIgcmVmZXJlbmNlU2hhcGUgPSBfc3RlcDIudmFsdWU7CgogICAgICAgICAgaWYgKHJlZmVyZW5jZVNoYXBlLnR5cGUgPT09ICdhbm5vdGF0aW9uJykgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gLy8gZml4bWUgYXZvaWQgdGhpcyBieSBub3QgbGV0dGluZyBhbm5vdGF0aW9ucyBnZXQgaW4gaGVyZQoKCiAgICAgICAgICBpZiAoIWNvbmZpZy5pbnRyYUdyb3VwTWFuaXB1bGF0aW9uICYmIHJlZmVyZW5jZVNoYXBlLnBhcmVudCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gLy8gZm9yIG5vdywgZG9uJ3Qgc25hcCB0byBncm91cGVkIGVsZW1lbnRzIGZpeG1lIGNvdWxkIHNuYXAsIGJ1dCBtYWtlIHN1cmUgdHJhbnNmb3JtIGlzIGdsb2FibAoKCiAgICAgICAgICBpZiAoY29uZmlnLmludHJhR3JvdXBTbmFwT25seSAmJiBkLnBhcmVudCAhPT0gcmVmZXJlbmNlU2hhcGUucGFyZW50ICYmIGQucGFyZW50ICE9PSByZWZlcmVuY2VTaGFwZS5pZAogICAgICAgICAgLyogYWxsb3cgcGFyZW50ICovCiAgICAgICAgICApIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgIHZhciBzID0gZC5pZCA9PT0gcmVmZXJlbmNlU2hhcGUuaWQgPyBfb2JqZWN0U3ByZWFkKHt9LCBkLCB7CiAgICAgICAgICAgIGxvY2FsVHJhbnNmb3JtTWF0cml4OiBkLmJhc2VsaW5lTG9jYWxUcmFuc2Zvcm1NYXRyaXggfHwgZC5sb2NhbFRyYW5zZm9ybU1hdHJpeCwKICAgICAgICAgICAgYTogZC5iYXNlQUIgPyBkLmJhc2VBQlswXSA6IGQuYSwKICAgICAgICAgICAgYjogZC5iYXNlQUIgPyBkLmJhc2VBQlsxXSA6IGQuYgogICAgICAgICAgfSkgOiByZWZlcmVuY2VTaGFwZTsgLy8ga2V5IHBvaW50cyBvZiB0aGUgc3RhdGlvbmFyeSBzaGFwZQoKICAgICAgICAgIGZvciAodmFyIGsgPSAtMTsgayA8IDI7IGsrKykgewogICAgICAgICAgICBmb3IgKHZhciBsID0gLTE7IGwgPCAyOyBsKyspIHsKICAgICAgICAgICAgICBpZiAoayAmJiAhbCB8fCAhayAmJiBsKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9IC8vIGRvbid0IHdvcnJ5IGFib3V0IG1pZHBvaW50cyBvZiB0aGUgZWRnZXMsIG9ubHkgdGhlIGNlbnRlcgoKCiAgICAgICAgICAgICAgaWYgKGRyYWdnZWRTaGFwZS5zdWJ0eXBlID09PSBjb25maWcucmVzaXplSGFuZGxlTmFtZSAmJiAhKGV4dHJlbWVIb3Jpem9udGFsID09PSBrICYmIGV4dHJlbWVWZXJ0aWNhbCA9PT0gbCB8fCAvLyBtb3ZlZCBjb3JuZXIKICAgICAgICAgICAgICAvLyBtb3ZlZCBtaWRwb2ludCBvbiBob3Jpem9udGFsIGJvcmRlcgogICAgICAgICAgICAgIGV4dHJlbWVIb3Jpem9udGFsID09PSAwICYmIGsgIT09IDAgJiYgZXh0cmVtZVZlcnRpY2FsID09PSBsIHx8IC8vIG1vdmVkIG1pZHBvaW50IG9uIHZlcnRpY2FsIGJvcmRlcgogICAgICAgICAgICAgIGV4dHJlbWVWZXJ0aWNhbCA9PT0gMCAmJiBsICE9PSAwICYmIGV4dHJlbWVIb3Jpem9udGFsID09PSBrKSkgewogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgRCA9ICgwLCBfZ2VvbWV0cnkubGFuZG1hcmtQb2ludCkoZC5hLCBkLmIsIGNhc2NhZGVVbnNuYXBwZWRUcmFuc2Zvcm1zKHNoYXBlcywgZCksIGssIGwpOwoKICAgICAgICAgICAgICBmb3IgKHZhciBtID0gLTE7IG0gPCAyOyBtKyspIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMTsgbiA8IDI7IG4rKykgewogICAgICAgICAgICAgICAgICBpZiAobSAmJiAhbiB8fCAhbSAmJiBuKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAgIH0gLy8gZG9uJ3Qgd29ycnkgYWJvdXQgbWlkcG9pbnRzIG9mIHRoZSBlZGdlcywgb25seSB0aGUgY2VudGVyCgoKICAgICAgICAgICAgICAgICAgdmFyIFMgPSAoMCwgX2dlb21ldHJ5LmxhbmRtYXJrUG9pbnQpKHMuYSwgcy5iLCBjYXNjYWRlVW5zbmFwcGVkVHJhbnNmb3JtcyhzaGFwZXMsIHMpLCBtLCBuKTsKCiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRpbSA9IDA7IGRpbSA8IDI7IGRpbSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG9ydGhvZ29uYWxEaW1lbnNpb24gPSAxIC0gZGltOwogICAgICAgICAgICAgICAgICAgIHZhciBkZCA9IERbZGltXTsKICAgICAgICAgICAgICAgICAgICB2YXIgc3MgPSBTW2RpbV07CiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGsgKyAnfCcgKyBsICsgJ3wnICsgZGltOwogICAgICAgICAgICAgICAgICAgIHZhciBzaWduZWREaXN0YW5jZSA9IGRkIC0gc3M7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMoc2lnbmVkRGlzdGFuY2UpOwogICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q2xvc2VzdCA9IHJlc3VsdFtrZXldOwoKICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChkaXN0YW5jZSkgPD0gY29uZmlnLmd1aWRlRGlzdGFuY2UgJiYgKCFjdXJyZW50Q2xvc2VzdCB8fCBkaXN0YW5jZSA8PSBjdXJyZW50Q2xvc2VzdC5kaXN0YW5jZSkpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBvcnRob2dvbmFsVmFsdWVzID0gW0Rbb3J0aG9nb25hbERpbWVuc2lvbl0sIFNbb3J0aG9nb25hbERpbWVuc2lvbl1dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY3VycmVudENsb3Nlc3QgPyBbY3VycmVudENsb3Nlc3QubG93UG9pbnQsIGN1cnJlbnRDbG9zZXN0LmhpZ2hQb2ludF0gOiBbXSkpOwogICAgICAgICAgICAgICAgICAgICAgdmFyIGxvd1BvaW50ID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KG9ydGhvZ29uYWxWYWx1ZXMpKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciBoaWdoUG9pbnQgPSBNYXRoLm1heC5hcHBseShNYXRoLCBfdG9Db25zdW1hYmxlQXJyYXkob3J0aG9nb25hbFZhbHVlcykpOwogICAgICAgICAgICAgICAgICAgICAgdmFyIG1pZFBvaW50ID0gKGxvd1BvaW50ICsgaGlnaFBvaW50KSAvIDI7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXVzID0gbWlkUG9pbnQgLSBsb3dQb2ludDsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gewogICAgICAgICAgICAgICAgICAgICAgICBpZDogY291bnRlcisrLAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogKDAsIF9tYXRyaXgudHJhbnNsYXRlKShkaW0gPyBtaWRQb2ludCA6IHNzLCBkaW0gPyBzcyA6IG1pZFBvaW50LCBjb25maWcuYXRvcFopLAogICAgICAgICAgICAgICAgICAgICAgICBhOiBkaW0gPyByYWRpdXMgOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgICAgIGI6IGRpbSA/IDAuNSA6IHJhZGl1cywKICAgICAgICAgICAgICAgICAgICAgICAgbG93UG9pbnQ6IGxvd1BvaW50LAogICAgICAgICAgICAgICAgICAgICAgICBoaWdoUG9pbnQ6IGhpZ2hQb2ludCwKICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLAogICAgICAgICAgICAgICAgICAgICAgICBzaWduZWREaXN0YW5jZTogc2lnbmVkRGlzdGFuY2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbjogZGltID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJywKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWluZWQ6IGQuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbmVyOiBzLmlkCiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpOwogICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7CiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpOwogICAgICB9CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHsKICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVzdWx0KTsKfTsKCnZhciBpc0hvcml6b250YWwgPSBmdW5jdGlvbiBpc0hvcml6b250YWwoY29uc3RyYWludCkgewogIHJldHVybiBjb25zdHJhaW50LmRpbWVuc2lvbiA9PT0gJ2hvcml6b250YWwnOwp9OwoKdmFyIGlzVmVydGljYWwgPSBmdW5jdGlvbiBpc1ZlcnRpY2FsKGNvbnN0cmFpbnQpIHsKICByZXR1cm4gY29uc3RyYWludC5kaW1lbnNpb24gPT09ICd2ZXJ0aWNhbCc7Cn07Cgp2YXIgY2xvc2VzdENvbnN0cmFpbnQgPSBmdW5jdGlvbiBjbG9zZXN0Q29uc3RyYWludCgpIHsKICB2YXIgcHJldiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogewogICAgZGlzdGFuY2U6IEluZmluaXR5CiAgfTsKICB2YXIgbmV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogIHJldHVybiBuZXh0LmRpc3RhbmNlIDwgcHJldi5kaXN0YW5jZSA/IHsKICAgIGNvbnN0cmFpbnQ6IG5leHQsCiAgICBkaXN0YW5jZTogbmV4dC5kaXN0YW5jZQogIH0gOiBwcmV2Owp9OwoKdmFyIGRpcmVjdGlvbmFsQ29uc3RyYWludCA9IGZ1bmN0aW9uIGRpcmVjdGlvbmFsQ29uc3RyYWludChjb25zdHJhaW50cywgZmlsdGVyRnVuKSB7CiAgdmFyIGRpcmVjdGlvbmFsQ29uc3RyYWludHMgPSBjb25zdHJhaW50cy5maWx0ZXIoZmlsdGVyRnVuKTsKICB2YXIgY2xvc2VzdCA9IGRpcmVjdGlvbmFsQ29uc3RyYWludHMucmVkdWNlKGNsb3Nlc3RDb25zdHJhaW50LCB1bmRlZmluZWQpOwogIHJldHVybiBjbG9zZXN0ICYmIGNsb3Nlc3QuY29uc3RyYWludDsKfTsKCnZhciByb3RhdGlvbkFubm90YXRpb24gPSBmdW5jdGlvbiByb3RhdGlvbkFubm90YXRpb24oY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzLCBzaGFwZSwgaSkgewogIHZhciBmb3VuZFNoYXBlID0gc2hhcGVzLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzaGFwZS5pZCA9PT0gcy5pZDsKICB9KTsKCiAgaWYgKCFmb3VuZFNoYXBlKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpZiAoZm91bmRTaGFwZS50eXBlID09PSAnYW5ub3RhdGlvbicpIHsKICAgIHJldHVybiByb3RhdGlvbkFubm90YXRpb24oY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzLCBzaGFwZXMuZmluZChmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gZm91bmRTaGFwZS5wYXJlbnQgPT09IHMuaWQ7CiAgICB9KSwgaSk7CiAgfQoKICB2YXIgYiA9IHNuYXBwZWRCKGZvdW5kU2hhcGUpOwogIHZhciBjZW50ZXJUb3AgPSAoMCwgX21hdHJpeC50cmFuc2xhdGUpKDAsIC1iLCAwKTsKICB2YXIgcGl4ZWxPZmZzZXQgPSAoMCwgX21hdHJpeC50cmFuc2xhdGUpKDAsIC1jb25maWcucm90YXRlQW5ub3RhdGlvbk9mZnNldCwgY29uZmlnLmF0b3BaKTsKICB2YXIgdHJhbnNmb3JtID0gKDAsIF9tYXRyaXgubXVsdGlwbHkpKGNlbnRlclRvcCwgcGl4ZWxPZmZzZXQpOwogIHJldHVybiB7CiAgICBpZDogY29uZmlnLnJvdGF0aW9uSGFuZGxlTmFtZSArICdfJyArIGksCiAgICB0eXBlOiAnYW5ub3RhdGlvbicsCiAgICBzdWJ0eXBlOiBjb25maWcucm90YXRpb25IYW5kbGVOYW1lLAogICAgaW50ZXJhY3RpdmU6IHRydWUsCiAgICBwYXJlbnQ6IGZvdW5kU2hhcGUuaWQsCiAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogdHJhbnNmb3JtLAogICAgYTogY29uZmlnLnJvdGF0aW9uSGFuZGxlU2l6ZSwKICAgIGI6IGNvbmZpZy5yb3RhdGlvbkhhbmRsZVNpemUKICB9Owp9OwoKdmFyIGdldFJvdGF0aW9uVG9vbHRpcEFubm90YXRpb24gPSBmdW5jdGlvbiBnZXRSb3RhdGlvblRvb2x0aXBBbm5vdGF0aW9uKGNvbmZpZywgcHJvcGVyLCBzaGFwZSwgaW50ZW50cywgY3Vyc29yUG9zaXRpb24pIHsKICByZXR1cm4gc2hhcGUgJiYgc2hhcGUuc3VidHlwZSA9PT0gY29uZmlnLnJvdGF0aW9uSGFuZGxlTmFtZSA/IFt7CiAgICBpZDogY29uZmlnLnJvdGF0aW9uVG9vbHRpcE5hbWUgKyAnXycgKyBwcm9wZXIuaWQsCiAgICB0eXBlOiAnYW5ub3RhdGlvbicsCiAgICBzdWJ0eXBlOiBjb25maWcucm90YXRpb25Ub29sdGlwTmFtZSwKICAgIGludGVyYWN0aXZlOiBmYWxzZSwKICAgIHBhcmVudDogbnVsbCwKICAgIGxvY2FsVHJhbnNmb3JtTWF0cml4OiAoMCwgX21hdHJpeC50cmFuc2xhdGUpKGN1cnNvclBvc2l0aW9uLngsIGN1cnNvclBvc2l0aW9uLnksIGNvbmZpZy50b29sdGlwWiksCiAgICBhOiAwLAogICAgYjogMCwKICAgIHRleHQ6IFN0cmluZyhNYXRoLnJvdW5kKCgwLCBfbWF0cml4Lm1hdHJpeFRvQW5nbGUpKHByb3Blci50cmFuc2Zvcm1NYXRyaXgpIC8gTWF0aC5QSSAqIDE4MCkpCiAgfV0gOiBbXTsKfTsKCmV4cG9ydHMuZ2V0Um90YXRpb25Ub29sdGlwQW5ub3RhdGlvbiA9IGdldFJvdGF0aW9uVG9vbHRpcEFubm90YXRpb247Cgp2YXIgcmVzaXplUG9pbnRBbm5vdGF0aW9ucyA9IGZ1bmN0aW9uIHJlc2l6ZVBvaW50QW5ub3RhdGlvbnMoY29uZmlnLCBwYXJlbnQsIGEsIGIpIHsKICByZXR1cm4gZnVuY3Rpb24gKF9yZWYxOCkgewogICAgdmFyIF9yZWYxOSA9IF9zbGljZWRUb0FycmF5KF9yZWYxOCwgMyksCiAgICAgICAgeCA9IF9yZWYxOVswXSwKICAgICAgICB5ID0gX3JlZjE5WzFdLAogICAgICAgIGN1cnNvckFuZ2xlID0gX3JlZjE5WzJdOwoKICAgIHZhciBtYXJrZXJQbGFjZSA9ICgwLCBfbWF0cml4LnRyYW5zbGF0ZSkoeCAqIGEsIHkgKiBiLCBjb25maWcucmVzaXplQW5ub3RhdGlvbk9mZnNldFopOwogICAgdmFyIHBpeGVsT2Zmc2V0ID0gKDAsIF9tYXRyaXgudHJhbnNsYXRlKSgteCAqIGNvbmZpZy5yZXNpemVBbm5vdGF0aW9uT2Zmc2V0LCAteSAqIGNvbmZpZy5yZXNpemVBbm5vdGF0aW9uT2Zmc2V0LCBjb25maWcuYXRvcFogKyAxMCk7CiAgICB2YXIgdHJhbnNmb3JtID0gKDAsIF9tYXRyaXgubXVsdGlwbHkpKG1hcmtlclBsYWNlLCBwaXhlbE9mZnNldCk7CiAgICB2YXIgeE5hbWUgPSB4TmFtZXNbeF07CiAgICB2YXIgeU5hbWUgPSB5TmFtZXNbeV07CiAgICByZXR1cm4gewogICAgICBpZDogW2NvbmZpZy5yZXNpemVIYW5kbGVOYW1lLCB4TmFtZSwgeU5hbWUsIHBhcmVudF0uam9pbignXycpLAogICAgICB0eXBlOiAnYW5ub3RhdGlvbicsCiAgICAgIHN1YnR5cGU6IGNvbmZpZy5yZXNpemVIYW5kbGVOYW1lLAogICAgICBob3Jpem9udGFsUG9zaXRpb246IHhOYW1lLAogICAgICB2ZXJ0aWNhbFBvc2l0aW9uOiB5TmFtZSwKICAgICAgY3Vyc29yQW5nbGU6IGN1cnNvckFuZ2xlLAogICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSwKICAgICAgcGFyZW50OiBwYXJlbnQuaWQsCiAgICAgIGxvY2FsVHJhbnNmb3JtTWF0cml4OiB0cmFuc2Zvcm0sCiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigwLDI1NSwwLDEpJywKICAgICAgYTogY29uZmlnLnJlc2l6ZUFubm90YXRpb25TaXplLAogICAgICBiOiBjb25maWcucmVzaXplQW5ub3RhdGlvblNpemUKICAgIH07CiAgfTsKfTsKCnZhciByZXNpemVFZGdlQW5ub3RhdGlvbnMgPSBmdW5jdGlvbiByZXNpemVFZGdlQW5ub3RhdGlvbnMoY29uZmlnLCBwYXJlbnQsIGEsIGIpIHsKICByZXR1cm4gZnVuY3Rpb24gKF9yZWYyMCkgewogICAgdmFyIF9yZWYyMSA9IF9zbGljZWRUb0FycmF5KF9yZWYyMCwgMiksCiAgICAgICAgX3JlZjIxJCA9IF9zbGljZWRUb0FycmF5KF9yZWYyMVswXSwgMiksCiAgICAgICAgeDAgPSBfcmVmMjEkWzBdLAogICAgICAgIHkwID0gX3JlZjIxJFsxXSwKICAgICAgICBfcmVmMjEkMiA9IF9zbGljZWRUb0FycmF5KF9yZWYyMVsxXSwgMiksCiAgICAgICAgeDEgPSBfcmVmMjEkMlswXSwKICAgICAgICB5MSA9IF9yZWYyMSQyWzFdOwoKICAgIHZhciB4ID0gYSAqICgwLCBfZnVuY3Rpb25hbC5tZWFuKSh4MCwgeDEpOwogICAgdmFyIHkgPSBiICogKDAsIF9mdW5jdGlvbmFsLm1lYW4pKHkwLCB5MSk7CiAgICB2YXIgbWFya2VyUGxhY2UgPSAoMCwgX21hdHJpeC50cmFuc2xhdGUpKHgsIHksIGNvbmZpZy5hdG9wWiAtIDEwKTsKICAgIHZhciB0cmFuc2Zvcm0gPSBtYXJrZXJQbGFjZTsgLy8gbm8gb2Zmc2V0IGV0Yy4gYXQgdGhlIG1vbWVudAoKICAgIHZhciBob3Jpem9udGFsID0geTAgPT09IHkxOwogICAgdmFyIGxlbmd0aCA9IGhvcml6b250YWwgPyBhICogTWF0aC5hYnMoeDEgLSB4MCkgOiBiICogTWF0aC5hYnMoeTEgLSB5MCk7CiAgICB2YXIgc2VjdGlvbkhhbGZMZW5ndGggPSBNYXRoLm1heCgwLCBsZW5ndGggLyAyIC0gY29uZmlnLnJlc2l6ZUFubm90YXRpb25Db25uZWN0b3JPZmZzZXQpOwogICAgdmFyIHdpZHRoID0gMC41OwogICAgcmV0dXJuIHsKICAgICAgaWQ6IFtjb25maWcucmVzaXplQ29ubmVjdG9yTmFtZSwgeE5hbWVzW3gwXSwgeU5hbWVzW3kwXSwgeE5hbWVzW3gxXSwgeU5hbWVzW3kxXSwgcGFyZW50XS5qb2luKCdfJyksCiAgICAgIHR5cGU6ICdhbm5vdGF0aW9uJywKICAgICAgc3VidHlwZTogY29uZmlnLnJlc2l6ZUNvbm5lY3Rvck5hbWUsCiAgICAgIGludGVyYWN0aXZlOiB0cnVlLAogICAgICBwYXJlbnQ6IHBhcmVudC5pZCwKICAgICAgbG9jYWxUcmFuc2Zvcm1NYXRyaXg6IHRyYW5zZm9ybSwKICAgICAgYmFja2dyb3VuZENvbG9yOiBjb25maWcuZGV2Q29sb3IsCiAgICAgIGE6IGhvcml6b250YWwgPyBzZWN0aW9uSGFsZkxlbmd0aCA6IHdpZHRoLAogICAgICBiOiBob3Jpem9udGFsID8gd2lkdGggOiBzZWN0aW9uSGFsZkxlbmd0aAogICAgfTsKICB9Owp9OwoKdmFyIGdyb3VwZWRTaGFwZSA9IGZ1bmN0aW9uIGdyb3VwZWRTaGFwZShwcm9wZXJTaGFwZSkgewogIHJldHVybiBmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS5wYXJlbnQgPT09IHByb3BlclNoYXBlLmlkOwogIH07Cn07Cgp2YXIgbWFnaWMgPSBmdW5jdGlvbiBtYWdpYyhjb25maWcsIHNoYXBlLCBzaGFwZXMpIHsKICB2YXIgZXBzaWxvbiA9IGNvbmZpZy5yb3RhdGlvbkVwc2lsb247CiAgdmFyIGludGVncmFsT2YgPSBNYXRoLlBJICogMjsKCiAgdmFyIGlzSW50ZWdlck11bHRpcGxlID0gZnVuY3Rpb24gaXNJbnRlZ2VyTXVsdGlwbGUocykgewogICAgdmFyIHpSb3RhdGlvbiA9ICgwLCBfbWF0cml4Lm1hdHJpeFRvQW5nbGUpKHMubG9jYWxUcmFuc2Zvcm1NYXRyaXgpOwogICAgdmFyIHJhdGlvID0gelJvdGF0aW9uIC8gaW50ZWdyYWxPZjsKICAgIHJldHVybiBNYXRoLmFicyhNYXRoLnJvdW5kKHJhdGlvKSAtIHJhdGlvKSA8IGVwc2lsb247CiAgfTsKCiAgZnVuY3Rpb24gcmVjdXJzZShzKSB7CiAgICByZXR1cm4gc2hhcGVzLmZpbHRlcihncm91cGVkU2hhcGUocykpLmV2ZXJ5KHJlc2l6YWJsZUNoaWxkKTsKICB9CgogIGZ1bmN0aW9uIHJlc2l6YWJsZUNoaWxkKHMpIHsKICAgIHJldHVybiBpc0ludGVnZXJNdWx0aXBsZShzKSAmJiByZWN1cnNlKHMpOwogIH0KCiAgcmV0dXJuIHJlY3Vyc2Uoc2hhcGUpOwp9OwoKZnVuY3Rpb24gcmVzaXplQW5ub3RhdGlvbihjb25maWcsIHNoYXBlcywgc2VsZWN0ZWRTaGFwZXMsIHNoYXBlKSB7CiAgdmFyIGZvdW5kU2hhcGUgPSBzaGFwZXMuZmluZChmdW5jdGlvbiAocykgewogICAgcmV0dXJuIHNoYXBlLmlkID09PSBzLmlkOwogIH0pOwogIHZhciBwcm9wZXJTaGFwZSA9IGZvdW5kU2hhcGUgJiYgKGZvdW5kU2hhcGUuc3VidHlwZSA9PT0gY29uZmlnLnJlc2l6ZUhhbmRsZU5hbWUgPyBzaGFwZXMuZmluZChmdW5jdGlvbiAocykgewogICAgcmV0dXJuIHNoYXBlLnBhcmVudCA9PT0gcy5pZDsKICB9KSA6IGZvdW5kU2hhcGUpOwoKICBpZiAoIWZvdW5kU2hhcGUpIHsKICAgIHJldHVybiBbXTsKICB9CgogIGlmIChmb3VuZFNoYXBlLnN1YnR5cGUgPT09IGNvbmZpZy5yZXNpemVIYW5kbGVOYW1lKSB7CiAgICAvLyBwcmVzZXJ2ZSBhbnkgaW50ZXJhY3RpdmUgYW5ub3RhdGlvbiB3aGVuIGhhbmRsaW5nCiAgICB2YXIgcmVzdWx0ID0gZm91bmRTaGFwZS5pbnRlcmFjdGl2ZSA/IHJlc2l6ZUFubm90YXRpb25zRnVuY3Rpb24oY29uZmlnLCB7CiAgICAgIHNoYXBlczogc2hhcGVzLAogICAgICBzZWxlY3RlZFNoYXBlczogW3NoYXBlcy5maW5kKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgcmV0dXJuIHNoYXBlLnBhcmVudCA9PT0gcy5pZDsKICAgICAgfSldCiAgICB9KSA6IFtdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIGlmIChmb3VuZFNoYXBlLnR5cGUgPT09ICdhbm5vdGF0aW9uJykgewogICAgcmV0dXJuIHJlc2l6ZUFubm90YXRpb24oY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzLCBzaGFwZXMuZmluZChmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gZm91bmRTaGFwZS5wYXJlbnQgPT09IHMuaWQ7CiAgICB9KSk7CiAgfSAvLyBmaXhtZSBsZWZ0IGFjdGl2ZTogc25hcCB3b2JibGUuIHJpZ2h0IGFjdGl2ZTogb3Bwb3NpdGUgc2lkZSB3b2JibGUuCgoKICB2YXIgYSA9IHNuYXBwZWRBKHByb3BlclNoYXBlKTsKICB2YXIgYiA9IHNuYXBwZWRCKHByb3BlclNoYXBlKTsKICB2YXIgYWxsb3dSZXNpemUgPSBwcm9wZXJTaGFwZS50eXBlICE9PSAnZ3JvdXAnIHx8IGNvbmZpZy5ncm91cFJlc2l6ZSAmJiBtYWdpYyhjb25maWcsIHByb3BlclNoYXBlLCBzaGFwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy50eXBlICE9PSAnYW5ub3RhdGlvbic7CiAgfSkpOwogIHZhciByZXNpemVWZXJ0aWNlcyA9IGFsbG93UmVzaXplID8gcmVzaXplVmVydGV4VHVwbGVzIDogW107CiAgdmFyIHJlc2l6ZVBvaW50cyA9IHJlc2l6ZVZlcnRpY2VzLm1hcChyZXNpemVQb2ludEFubm90YXRpb25zKGNvbmZpZywgc2hhcGUsIGEsIGIpKTsKICB2YXIgY29ubmVjdG9ycyA9IGNvbm5lY3RvclZlcnRpY2VzLm1hcChyZXNpemVFZGdlQW5ub3RhdGlvbnMoY29uZmlnLCBzaGFwZSwgYSwgYikpOwogIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHJlc2l6ZVBvaW50cyksIF90b0NvbnN1bWFibGVBcnJheShjb25uZWN0b3JzKSk7Cn0KCmZ1bmN0aW9uIHJlc2l6ZUFubm90YXRpb25zRnVuY3Rpb24oY29uZmlnLCBfcmVmMjIpIHsKICB2YXIgc2hhcGVzID0gX3JlZjIyLnNoYXBlcywKICAgICAgc2VsZWN0ZWRTaGFwZXMgPSBfcmVmMjIuc2VsZWN0ZWRTaGFwZXM7CiAgdmFyIHNoYXBlc1RvQW5ub3RhdGUgPSBzZWxlY3RlZFNoYXBlczsKICByZXR1cm4gKDAsIF9mdW5jdGlvbmFsLmZsYXR0ZW4pKHNoYXBlc1RvQW5ub3RhdGUubWFwKGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIHJlc2l6ZUFubm90YXRpb24oY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzLCBzaGFwZSk7CiAgfSkuZmlsdGVyKF9mdW5jdGlvbmFsLmlkZW50aXR5KSk7Cn0KCnZhciBjcnlzdGFsbGl6ZUNvbnN0cmFpbnQgPSBmdW5jdGlvbiBjcnlzdGFsbGl6ZUNvbnN0cmFpbnQoc2hhcGUpIHsKICB2YXIgcmVzdWx0ID0gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUpOwoKICBpZiAoc2hhcGUuc25hcERlbHRhTWF0cml4KSB7CiAgICByZXN1bHQubG9jYWxUcmFuc2Zvcm1NYXRyaXggPSAoMCwgX21hdHJpeC5tdWx0aXBseSkoc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXgsIHNoYXBlLnNuYXBEZWx0YU1hdHJpeCk7CiAgICByZXN1bHQuc25hcERlbHRhTWF0cml4ID0gbnVsbDsKICB9CgogIGlmIChzaGFwZS5zbmFwUmVzaXplVmVjdG9yKSB7CiAgICByZXN1bHQuYSA9IHNuYXBwZWRBKHNoYXBlKTsKICAgIHJlc3VsdC5iID0gc25hcHBlZEIoc2hhcGUpOwogICAgcmVzdWx0LnNuYXBSZXNpemVWZWN0b3IgPSBudWxsOwogIH0KCiAgcmV0dXJuIHJlc3VsdDsKfTsKCnZhciB0cmFuc2xhdGVTaGFwZVNuYXAgPSBmdW5jdGlvbiB0cmFuc2xhdGVTaGFwZVNuYXAoaG9yaXpvbnRhbENvbnN0cmFpbnQsIHZlcnRpY2FsQ29uc3RyYWludCwgZHJhZ2dlZEVsZW1lbnQpIHsKICByZXR1cm4gZnVuY3Rpb24gKHNoYXBlKSB7CiAgICB2YXIgY29uc3RyYWluZWRYID0gaG9yaXpvbnRhbENvbnN0cmFpbnQgJiYgaG9yaXpvbnRhbENvbnN0cmFpbnQuY29uc3RyYWluZWQgPT09IHNoYXBlLmlkOwogICAgdmFyIGNvbnN0cmFpbmVkWSA9IHZlcnRpY2FsQ29uc3RyYWludCAmJiB2ZXJ0aWNhbENvbnN0cmFpbnQuY29uc3RyYWluZWQgPT09IHNoYXBlLmlkOwogICAgdmFyIHNuYXBPZmZzZXRYID0gY29uc3RyYWluZWRYID8gLWhvcml6b250YWxDb25zdHJhaW50LnNpZ25lZERpc3RhbmNlIDogMDsKICAgIHZhciBzbmFwT2Zmc2V0WSA9IGNvbnN0cmFpbmVkWSA/IC12ZXJ0aWNhbENvbnN0cmFpbnQuc2lnbmVkRGlzdGFuY2UgOiAwOwoKICAgIGlmIChjb25zdHJhaW5lZFggfHwgY29uc3RyYWluZWRZKSB7CiAgICAgIGlmICghc25hcE9mZnNldFggJiYgIXNuYXBPZmZzZXRZKSB7CiAgICAgICAgcmV0dXJuIHNoYXBlOwogICAgICB9CgogICAgICB2YXIgc25hcE9mZnNldCA9ICgwLCBfbWF0cml4LnRyYW5zbGF0ZUNvbXBvbmVudCkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKCgwLCBfbWF0cml4LnJvdGF0ZVopKCgwLCBfbWF0cml4Lm1hdHJpeFRvQW5nbGUpKGRyYWdnZWRFbGVtZW50LmxvY2FsVHJhbnNmb3JtTWF0cml4KSksICgwLCBfbWF0cml4LnRyYW5zbGF0ZSkoc25hcE9mZnNldFgsIHNuYXBPZmZzZXRZLCAwKSkpOwogICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUsIHsKICAgICAgICBzbmFwRGVsdGFNYXRyaXg6IHNuYXBPZmZzZXQKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKHNoYXBlLnNuYXBEZWx0YU1hdHJpeCB8fCBzaGFwZS5zbmFwUmVzaXplVmVjdG9yKSB7CiAgICAgIHJldHVybiBjcnlzdGFsbGl6ZUNvbnN0cmFpbnQoc2hhcGUpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHNoYXBlOwogICAgfQogIH07Cn07Cgp2YXIgcmVzaXplU2hhcGVTbmFwID0gZnVuY3Rpb24gcmVzaXplU2hhcGVTbmFwKGhvcml6b250YWxDb25zdHJhaW50LCB2ZXJ0aWNhbENvbnN0cmFpbnQsIGRyYWdnZWRFbGVtZW50LCBzeW1tZXRyaWMsIGhvcml6b250YWxQb3NpdGlvbiwgdmVydGljYWxQb3NpdGlvbikgewogIHJldHVybiBmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHZhciBjb25zdHJhaW5lZFNoYXBlID0gZHJhZ2dlZEVsZW1lbnQgJiYgc2hhcGUuaWQgPT09IGRyYWdnZWRFbGVtZW50LmlkOwogICAgdmFyIGNvbnN0cmFpbmVkWCA9IGhvcml6b250YWxDb25zdHJhaW50ICYmIGhvcml6b250YWxDb25zdHJhaW50LmNvbnN0cmFpbmVkID09PSBzaGFwZS5pZDsKICAgIHZhciBjb25zdHJhaW5lZFkgPSB2ZXJ0aWNhbENvbnN0cmFpbnQgJiYgdmVydGljYWxDb25zdHJhaW50LmNvbnN0cmFpbmVkID09PSBzaGFwZS5pZDsKICAgIHZhciBzbmFwT2Zmc2V0WCA9IGNvbnN0cmFpbmVkWCA/IGhvcml6b250YWxDb25zdHJhaW50LnNpZ25lZERpc3RhbmNlIDogMDsKICAgIHZhciBzbmFwT2Zmc2V0WSA9IGNvbnN0cmFpbmVkWSA/IC12ZXJ0aWNhbENvbnN0cmFpbnQuc2lnbmVkRGlzdGFuY2UgOiAwOwoKICAgIGlmIChjb25zdHJhaW5lZFggfHwgY29uc3RyYWluZWRZKSB7CiAgICAgIHZhciBtdWx0aXBsaWVyID0gc3ltbWV0cmljID8gMSA6IDAuNTsKICAgICAgdmFyIGFuZ2xlID0gKDAsIF9tYXRyaXgubWF0cml4VG9BbmdsZSkoZHJhZ2dlZEVsZW1lbnQubG9jYWxUcmFuc2Zvcm1NYXRyaXgpOwogICAgICB2YXIgaG9yaXpvbnRhbFNpZ24gPSAtcmVzaXplTXVsdGlwbGllckhvcml6b250YWxbaG9yaXpvbnRhbFBvc2l0aW9uXTsgLy8gZml4bWUgdW5pZnkgc2lnbgoKICAgICAgdmFyIHZlcnRpY2FsU2lnbiA9IHJlc2l6ZU11bHRpcGxpZXJWZXJ0aWNhbFt2ZXJ0aWNhbFBvc2l0aW9uXTsgLy8gdG9kbyB0dXJuIGl0IGludG8gbWF0cml4IGFsZ2VicmEgdmlhIG1hdHJpeDJkLmpzCgogICAgICB2YXIgc2luID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICB2YXIgc25hcE9mZnNldEEgPSBob3Jpem9udGFsU2lnbiAqIChjb3MgKiBzbmFwT2Zmc2V0WCAtIHNpbiAqIHNuYXBPZmZzZXRZKTsKICAgICAgdmFyIHNuYXBPZmZzZXRCID0gdmVydGljYWxTaWduICogKHNpbiAqIHNuYXBPZmZzZXRYICsgY29zICogc25hcE9mZnNldFkpOwogICAgICB2YXIgc25hcFRyYW5zbGF0ZU9mZnNldCA9ICgwLCBfbWF0cml4LnRyYW5zbGF0ZUNvbXBvbmVudCkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKCgwLCBfbWF0cml4LnJvdGF0ZVopKGFuZ2xlKSwgKDAsIF9tYXRyaXgudHJhbnNsYXRlKSgoMSAtIG11bHRpcGxpZXIpICogLXNuYXBPZmZzZXRYLCAoMSAtIG11bHRpcGxpZXIpICogc25hcE9mZnNldFksIDApKSk7CiAgICAgIHZhciBzbmFwU2l6ZU9mZnNldCA9IFttdWx0aXBsaWVyICogc25hcE9mZnNldEEsIG11bHRpcGxpZXIgKiBzbmFwT2Zmc2V0Ql07CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzaGFwZSwgewogICAgICAgIHNuYXBEZWx0YU1hdHJpeDogc25hcFRyYW5zbGF0ZU9mZnNldCwKICAgICAgICBzbmFwUmVzaXplVmVjdG9yOiBzbmFwU2l6ZU9mZnNldAogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoY29uc3RyYWluZWRTaGFwZSkgewogICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUsIHsKICAgICAgICBzbmFwRGVsdGFNYXRyaXg6IG51bGwsCiAgICAgICAgc25hcFJlc2l6ZVZlY3RvcjogbnVsbAogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjcnlzdGFsbGl6ZUNvbnN0cmFpbnQoc2hhcGUpOwogICAgfQogIH07Cn07Cgp2YXIgZGlzc29sdmVHcm91cHMgPSBmdW5jdGlvbiBkaXNzb2x2ZUdyb3Vwcyhncm91cHNUb0Rpc3NvbHZlLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzKSB7CiAgcmV0dXJuIHsKICAgIHNoYXBlczogc2hhcGVzLmZpbHRlcihmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gIWdyb3Vwc1RvRGlzc29sdmUuZmluZChmdW5jdGlvbiAoZykgewogICAgICAgIHJldHVybiBzLmlkID09PSBnLmlkOwogICAgICB9KTsKICAgIH0pLm1hcChmdW5jdGlvbiAoc2hhcGUpIHsKICAgICAgdmFyIHByZWV4aXN0aW5nR3JvdXBQYXJlbnQgPSBncm91cHNUb0Rpc3NvbHZlLmZpbmQoZnVuY3Rpb24gKGdyb3VwU2hhcGUpIHsKICAgICAgICByZXR1cm4gZ3JvdXBTaGFwZS5pZCA9PT0gc2hhcGUucGFyZW50OwogICAgICB9KTsgLy8gaWYgbGlua2VkLCBkaXNzb2NpYXRlIGZyb20gZ3JvdXAgcGFyZW50CgogICAgICByZXR1cm4gcHJlZXhpc3RpbmdHcm91cFBhcmVudCA/IF9vYmplY3RTcHJlYWQoe30sIHNoYXBlLCB7CiAgICAgICAgcGFyZW50OiBudWxsLAogICAgICAgIGxvY2FsVHJhbnNmb3JtTWF0cml4OiAoMCwgX21hdHJpeC5tdWx0aXBseSkoIC8vIHB1bGxpbmcgcHJlZXhpc3RpbmdHcm91cFBhcmVudCBmcm9tIGBzaGFwZXNgIHRvIGdldCBmcmVzaCBtYXRyaWNlcwogICAgICAgIHNoYXBlcy5maW5kKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgICByZXR1cm4gcy5pZCA9PT0gcHJlZXhpc3RpbmdHcm91cFBhcmVudC5pZDsKICAgICAgICB9KS5sb2NhbFRyYW5zZm9ybU1hdHJpeCwgLy8gcmVpbnN0YXRlIHRoZSBncm91cCBvZmZzZXQgb250byB0aGUgY2hpbGQKICAgICAgICBzaGFwZS5sb2NhbFRyYW5zZm9ybU1hdHJpeCkKICAgICAgfSkgOiBzaGFwZTsKICAgIH0pLAogICAgc2VsZWN0ZWRTaGFwZXM6IHNlbGVjdGVkU2hhcGVzLmZpbHRlcihmdW5jdGlvbiAocykgewogICAgICByZXR1cm4gIWdyb3Vwc1RvRGlzc29sdmUuZmluZChmdW5jdGlvbiAoZykgewogICAgICAgIHJldHVybiBnLmlkID09PSBzLmlkOwogICAgICB9KTsKICAgIH0pCiAgfTsKfTsKCnZhciBoYXNOb1BhcmVudFdpdGhpbiA9IGZ1bmN0aW9uIGhhc05vUGFyZW50V2l0aGluKHNoYXBlcykgewogIHJldHVybiBmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiAhc2hhcGVzLnNvbWUoZnVuY3Rpb24gKGcpIHsKICAgICAgcmV0dXJuIHNoYXBlLnBhcmVudCA9PT0gZy5pZDsKICAgIH0pOwogIH07Cn07Cgp2YXIgYXNZZXRVbmdyb3VwZWRTaGFwZXMgPSBmdW5jdGlvbiBhc1lldFVuZ3JvdXBlZFNoYXBlcyhwcmVleGlzdGluZ0FkSG9jR3JvdXBzLCBzZWxlY3RlZFNoYXBlcykgewogIHJldHVybiBzZWxlY3RlZFNoYXBlcy5maWx0ZXIoaGFzTm9QYXJlbnRXaXRoaW4ocHJlZXhpc3RpbmdBZEhvY0dyb3VwcykpOwp9OwoKdmFyIGlkTWF0Y2ggPSBmdW5jdGlvbiBpZE1hdGNoKHNoYXBlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy5pZCA9PT0gc2hhcGUuaWQ7CiAgfTsKfTsKCnZhciBpZHNNYXRjaCA9IGZ1bmN0aW9uIGlkc01hdGNoKHNlbGVjdGVkU2hhcGVzKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChzaGFwZSkgewogICAgcmV0dXJuIHNlbGVjdGVkU2hhcGVzLmZpbmQoaWRNYXRjaChzaGFwZSkpOwogIH07Cn07Cgp2YXIgYXhpc0FsaWduZWRCb3VuZGluZ0JveFNoYXBlID0gZnVuY3Rpb24gYXhpc0FsaWduZWRCb3VuZGluZ0JveFNoYXBlKGNvbmZpZywgc2hhcGVzVG9Cb3gpIHsKICB2YXIgYXhpc0FsaWduZWRCb3VuZGluZ0JveCA9IHNoYXBlc0FBQkIoc2hhcGVzVG9Cb3gpOwoKICB2YXIgX3Byb2plY3RBQUJCID0gcHJvamVjdEFBQkIoYXhpc0FsaWduZWRCb3VuZGluZ0JveCksCiAgICAgIGEgPSBfcHJvamVjdEFBQkIuYSwKICAgICAgYiA9IF9wcm9qZWN0QUFCQi5iLAogICAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeCA9IF9wcm9qZWN0QUFCQi5sb2NhbFRyYW5zZm9ybU1hdHJpeCwKICAgICAgcmlnVHJhbnNmb3JtID0gX3Byb2plY3RBQUJCLnJpZ1RyYW5zZm9ybTsKCiAgdmFyIGlkID0gZ2V0SWQoY29uZmlnLmdyb3VwTmFtZSwgc2hhcGVzVG9Cb3gubWFwKGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy5pZDsKICB9KS5qb2luKCd8JykpOwogIHZhciBhYWJiU2hhcGUgPSB7CiAgICBpZDogaWQsCiAgICB0eXBlOiBjb25maWcuZ3JvdXBOYW1lLAogICAgc3VidHlwZTogY29uZmlnLmFkSG9jR3JvdXBOYW1lLAogICAgYTogYSwKICAgIGI6IGIsCiAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogbG9jYWxUcmFuc2Zvcm1NYXRyaXgsCiAgICByaWdUcmFuc2Zvcm06IHJpZ1RyYW5zZm9ybSwKICAgIHBhcmVudDogbnVsbAogIH07CiAgcmV0dXJuIGFhYmJTaGFwZTsKfTsKCnZhciByZXNldENoaWxkID0gZnVuY3Rpb24gcmVzZXRDaGlsZChzKSB7CiAgaWYgKHMuY2hpbGRCYXNlQUIpIHsKICAgIHMuY2hpbGRCYXNlQUIgPSBudWxsOwogICAgcy5iYXNlTG9jYWxUcmFuc2Zvcm1NYXRyaXggPSBudWxsOwogIH0KfTsKCnZhciBjaGlsZFNjYWxlciA9IGZ1bmN0aW9uIGNoaWxkU2NhbGVyKF9yZWYyMywgYmFzZUFCKSB7CiAgdmFyIGEgPSBfcmVmMjMuYSwKICAgICAgYiA9IF9yZWYyMy5iOwogIC8vIGEgc2NhbGVyIG9mIDAsIGVuY291bnRlcmVkIHdoZW4gZWxlbWVudCBpcyBzaHJ1bmsgdG8gemVybyBzaXplLCB3b3VsZCByZXN1bHQgaW4gYSBub24taW52ZXJ0aWJsZSB0cmFuc2Zvcm0gbWF0cml4CiAgdmFyIGVwc2lsb24gPSAxZS02OwogIHZhciBncm91cFNjYWxlWCA9IE1hdGgubWF4KGEgLyBiYXNlQUJbMF0sIGVwc2lsb24pOwogIHZhciBncm91cFNjYWxlWSA9IE1hdGgubWF4KGIgLyBiYXNlQUJbMV0sIGVwc2lsb24pOwogIHZhciBncm91cFNjYWxlID0gKDAsIF9tYXRyaXguc2NhbGUpKGdyb3VwU2NhbGVYLCBncm91cFNjYWxlWSwgMSk7CiAgcmV0dXJuIGdyb3VwU2NhbGU7Cn07Cgp2YXIgcmVzaXplQ2hpbGQgPSBmdW5jdGlvbiByZXNpemVDaGlsZChncm91cFNjYWxlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChzKSB7CiAgICB2YXIgY2hpbGRCYXNlQUIgPSBzLmNoaWxkQmFzZUFCIHx8IFtzLmEsIHMuYl07CgogICAgdmFyIGltcGxpZWRTY2FsZSA9IF9tYXRyaXguc2NhbGUuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRCYXNlQUIpLmNvbmNhdChbMV0pKTsKCiAgICB2YXIgaW52ZXJzZUltcGxpZWRTY2FsZSA9ICgwLCBfbWF0cml4LmludmVydCkoaW1wbGllZFNjYWxlKTsKICAgIHZhciBiYXNlTG9jYWxUcmFuc2Zvcm1NYXRyaXggPSBzLmJhc2VMb2NhbFRyYW5zZm9ybU1hdHJpeCB8fCBzLmxvY2FsVHJhbnNmb3JtTWF0cml4OwogICAgdmFyIG5vcm1hbGl6ZWRCYXNlTG9jYWxUcmFuc2Zvcm1NYXRyaXggPSAoMCwgX21hdHJpeC5tdWx0aXBseSkoYmFzZUxvY2FsVHJhbnNmb3JtTWF0cml4LCBpbXBsaWVkU2NhbGUpOwogICAgdmFyIFQgPSAoMCwgX21hdHJpeC5tdWx0aXBseSkoZ3JvdXBTY2FsZSwgbm9ybWFsaXplZEJhc2VMb2NhbFRyYW5zZm9ybU1hdHJpeCk7CiAgICB2YXIgYmFja1NjYWxlciA9IGdyb3VwU2NhbGUubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgIHJldHVybiBNYXRoLmFicyhkKTsKICAgIH0pOwogICAgdmFyIGludmVyc2VCYWNrU2NhbGVyID0gKDAsIF9tYXRyaXguaW52ZXJ0KShiYWNrU2NhbGVyKTsKICAgIHZhciBhYlR1cGxlID0gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkoKDAsIF9tYXRyaXgubXVsdGlwbHkpKGJhY2tTY2FsZXIsIGltcGxpZWRTY2FsZSksIFsxLCAxLCAxLCAxXSk7CiAgICBzLmxvY2FsVHJhbnNmb3JtTWF0cml4ID0gKDAsIF9tYXRyaXgubXVsdGlwbHkpKFQsICgwLCBfbWF0cml4Lm11bHRpcGx5KShpbnZlcnNlSW1wbGllZFNjYWxlLCBpbnZlcnNlQmFja1NjYWxlcikpOwogICAgcy5hID0gYWJUdXBsZVswXTsKICAgIHMuYiA9IGFiVHVwbGVbMV07CiAgICBzLmNoaWxkQmFzZUFCID0gY2hpbGRCYXNlQUI7CiAgICBzLmJhc2VMb2NhbFRyYW5zZm9ybU1hdHJpeCA9IGJhc2VMb2NhbFRyYW5zZm9ybU1hdHJpeDsKICB9Owp9OwoKdmFyIHJlc2l6ZUdyb3VwID0gZnVuY3Rpb24gcmVzaXplR3JvdXAoc2hhcGVzLCByb290RWxlbWVudCkgewogIHZhciBpZE1hcCA9IHt9OwogIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7CiAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlOwogIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gc2hhcGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7CiAgICAgIHZhciBzaGFwZSA9IF9zdGVwMy52YWx1ZTsKICAgICAgaWRNYXBbc2hhcGUuaWRdID0gc2hhcGU7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlOwogICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuICE9IG51bGwpIHsKICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpOwogICAgICB9CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7CiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzOwogICAgICB9CiAgICB9CiAgfQoKICB2YXIgZGVwdGhzID0ge307CgogIHZhciBhbmNlc3RvcnNMZW5ndGggPSBmdW5jdGlvbiBhbmNlc3RvcnNMZW5ndGgoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS5wYXJlbnQgPyBhbmNlc3RvcnNMZW5ndGgoaWRNYXBbc2hhcGUucGFyZW50XSkgKyAxIDogMDsKICB9OwoKICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlOwogIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTsKICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHNoYXBlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkgewogICAgICB2YXIgX3NoYXBlID0gX3N0ZXA0LnZhbHVlOwogICAgICBkZXB0aHNbX3NoYXBlLmlkXSA9IGFuY2VzdG9yc0xlbmd0aChfc2hhcGUpOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTsKICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTsKICAgICAgfQogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkgewogICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDsKICAgICAgfQogICAgfQogIH0KCiAgdmFyIHJlc2l6ZWRQYXJlbnRzID0gX2RlZmluZVByb3BlcnR5KHt9LCByb290RWxlbWVudC5pZCwgcm9vdEVsZW1lbnQpOwoKICB2YXIgc29ydGVkU2hhcGVzID0gc2hhcGVzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIGRlcHRoc1thLmlkXSAtIGRlcHRoc1tiLmlkXTsKICB9KTsKCiAgdmFyIHBhcmVudFJlc2l6ZWQgPSBmdW5jdGlvbiBwYXJlbnRSZXNpemVkKHMpIHsKICAgIHJldHVybiBCb29sZWFuKHMuY2hpbGRCYXNlQUIgfHwgcy5iYXNlQUIpOwogIH07CgogIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSA9IHRydWU7CiAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlOwogIHZhciBfaXRlcmF0b3JFcnJvcjUgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaXRlcmF0b3I1ID0gc29ydGVkU2hhcGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7CiAgICAgIHZhciBfc2hhcGUyID0gX3N0ZXA1LnZhbHVlOwogICAgICB2YXIgcGFyZW50ID0gcmVzaXplZFBhcmVudHNbX3NoYXBlMi5wYXJlbnRdOwoKICAgICAgaWYgKHBhcmVudCkgewogICAgICAgIHJlc2l6ZWRQYXJlbnRzW19zaGFwZTIuaWRdID0gX3NoYXBlMjsKCiAgICAgICAgaWYgKHBhcmVudFJlc2l6ZWQocGFyZW50KSkgewogICAgICAgICAgcmVzaXplQ2hpbGQoY2hpbGRTY2FsZXIocGFyZW50LCBwYXJlbnQuY2hpbGRCYXNlQUIgfHwgcGFyZW50LmJhc2VBQikpKF9zaGFwZTIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNldENoaWxkKF9zaGFwZTIpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2RpZEl0ZXJhdG9yRXJyb3I1ID0gdHJ1ZTsKICAgIF9pdGVyYXRvckVycm9yNSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSAmJiBfaXRlcmF0b3I1LnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgX2l0ZXJhdG9yNS5yZXR1cm4oKTsKICAgICAgfQogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkgewogICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIHNvcnRlZFNoYXBlczsKfTsKCnZhciBnZXRMZWFmcyA9IGZ1bmN0aW9uIGdldExlYWZzKGRlc2NlbmRDb25kaXRpb24sIGFsbFNoYXBlcywgc2hhcGVzKSB7CiAgcmV0dXJuICgwLCBfZnVuY3Rpb25hbC5yZW1vdmVEdXBsaWNhdGVzKShmdW5jdGlvbiAocykgewogICAgcmV0dXJuIHMuaWQ7CiAgfSwgKDAsIF9mdW5jdGlvbmFsLmZsYXR0ZW4pKHNoYXBlcy5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gZGVzY2VuZENvbmRpdGlvbihzaGFwZSkgPyBhbGxTaGFwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7CiAgICAgIHJldHVybiBzLnBhcmVudCA9PT0gc2hhcGUuaWQ7CiAgICB9KSA6IHNoYXBlOwogIH0pKSk7Cn07Cgp2YXIgcHJlc2VydmVDdXJyZW50R3JvdXBzID0gZnVuY3Rpb24gcHJlc2VydmVDdXJyZW50R3JvdXBzKHNoYXBlcywgc2VsZWN0ZWRTaGFwZXMpIHsKICByZXR1cm4gewogICAgc2hhcGVzOiBzaGFwZXMsCiAgICBzZWxlY3RlZFNoYXBlczogc2VsZWN0ZWRTaGFwZXMKICB9Owp9OwoKdmFyIGdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maWd1cmF0aW9uKHNjZW5lKSB7CiAgcmV0dXJuIHNjZW5lLmNvbmZpZ3VyYXRpb247Cn07CgpleHBvcnRzLmdldENvbmZpZ3VyYXRpb24gPSBnZXRDb25maWd1cmF0aW9uOwoKdmFyIGdldFNoYXBlcyA9IGZ1bmN0aW9uIGdldFNoYXBlcyhzY2VuZSkgewogIHJldHVybiBzY2VuZS5zaGFwZXM7Cn07CgpleHBvcnRzLmdldFNoYXBlcyA9IGdldFNoYXBlczsKCnZhciBnZXRIb3ZlcmVkU2hhcGVzID0gZnVuY3Rpb24gZ2V0SG92ZXJlZFNoYXBlcyhjb25maWcsIHNoYXBlcywgY3Vyc29yUG9zaXRpb24pIHsKICByZXR1cm4gKDAsIF9nZW9tZXRyeS5zaGFwZXNBdCkoc2hhcGVzLmZpbHRlciggLy8gc2Vjb25kIEFORCB0ZXJtIGV4Y2x1ZGVzIGludHJhLWdyb3VwIGVsZW1lbnQgaG92ZXIgKGFuZCB0aGVyZWZvcmUgZHJhZyAmIGRyb3ApLCB0b2RvOiByZW1vdmUgdGhpcyBjdXJyZW50IGxpbWl0YXRpb24KICBmdW5jdGlvbiAocykgewogICAgcmV0dXJuIChzLnR5cGUgIT09ICdhbm5vdGF0aW9uJyB8fCBzLmludGVyYWN0aXZlKSAmJiAoY29uZmlnLmludHJhR3JvdXBNYW5pcHVsYXRpb24gfHwgIXMucGFyZW50IHx8IHMudHlwZSA9PT0gJ2Fubm90YXRpb24nKTsKICB9KSwgY3Vyc29yUG9zaXRpb24pOwp9OwoKZXhwb3J0cy5nZXRIb3ZlcmVkU2hhcGVzID0gZ2V0SG92ZXJlZFNoYXBlczsKCnZhciBnZXRIb3ZlcmVkU2hhcGUgPSBmdW5jdGlvbiBnZXRIb3ZlcmVkU2hhcGUoaG92ZXJlZFNoYXBlcykgewogIHJldHVybiBob3ZlcmVkU2hhcGVzLmxlbmd0aCA/IGhvdmVyZWRTaGFwZXNbMF0gOiBudWxsOwp9OwoKZXhwb3J0cy5nZXRIb3ZlcmVkU2hhcGUgPSBnZXRIb3ZlcmVkU2hhcGU7Cgp2YXIgc2luZ2xlU2VsZWN0ID0gZnVuY3Rpb24gc2luZ2xlU2VsZWN0KHByZXYsIGNvbmZpZywgaG92ZXJlZFNoYXBlcywgbWV0YUhlbGQsIHVpZCwgXywgYm94SGlnaGxpZ2h0ZWRTaGFwZXMpIHsKICAvLyBjeWNsZSBmcm9tIHRvcCBpZS4gZnJvbSB6ZXJvIGFmdGVyIHRoZSBjdXJzb3IgcG9zaXRpb24gY2hhbmdlZCBpZS4gIXNhbWVMb2NhdGlvbgogIHZhciBkb3duID0gdHJ1ZTsgLy8gdGhpcyBmdW5jdGlvbiB3b24ndCBiZSBjYWxsZWQgb3RoZXJ3aXNlCgogIHZhciBkZXB0aEluZGV4ID0gY29uZmlnLmRlcHRoU2VsZWN0ICYmIG1ldGFIZWxkICYmICghaG92ZXJlZFNoYXBlcy5sZW5ndGggfHwgaG92ZXJlZFNoYXBlc1swXS50eXBlICE9PSAnYW5ub3RhdGlvbicpID8gKHByZXYuZGVwdGhJbmRleCArIChkb3duICYmICFwcmV2LmRvd24gPyAxIDogMCkpICUgaG92ZXJlZFNoYXBlcy5sZW5ndGggOiAwOwogIHJldHVybiB7CiAgICBzaGFwZXM6IGhvdmVyZWRTaGFwZXMubGVuZ3RoID8gW2hvdmVyZWRTaGFwZXNbZGVwdGhJbmRleF1dIDogW10sCiAgICB1aWQ6IHVpZCwKICAgIGRlcHRoSW5kZXg6IGhvdmVyZWRTaGFwZXMubGVuZ3RoID8gZGVwdGhJbmRleCA6IDAsCiAgICBkb3duOiBkb3duLAogICAgYm94SGlnaGxpZ2h0ZWRTaGFwZXM6IGJveEhpZ2hsaWdodGVkU2hhcGVzCiAgfTsKfTsKCnZhciBtdWx0aVNlbGVjdCA9IGZ1bmN0aW9uIG11bHRpU2VsZWN0KHByZXYsIGNvbmZpZywgaG92ZXJlZFNoYXBlcywgbWV0YUhlbGQsIHVpZCwgc2VsZWN0ZWRTaGFwZU9iamVjdHMsIGJveEhpZ2hsaWdodGVkU2hhcGVzKSB7CiAgdmFyIHNoYXBlcyA9IGhvdmVyZWRTaGFwZXMubGVuZ3RoID4gMCA/ICgwLCBfZnVuY3Rpb25hbC5kaXNqdW5jdGl2ZVVuaW9uKShmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS5pZDsKICB9LCBzZWxlY3RlZFNoYXBlT2JqZWN0cywgaG92ZXJlZFNoYXBlcy5zbGljZSgwLCAxKSkgLy8gaWUuIGRlcHRoSW5kZXggb2YgMCwgaWYgYW55CiAgOiBbXTsKICByZXR1cm4gewogICAgc2hhcGVzOiBzaGFwZXMsCiAgICB1aWQ6IHVpZCwKICAgIGRlcHRoSW5kZXg6IDAsCiAgICBkb3duOiBmYWxzZSwKICAgIGJveEhpZ2hsaWdodGVkU2hhcGVzOiBib3hIaWdobGlnaHRlZFNoYXBlcwogIH07Cn07Cgp2YXIgZ2V0R3JvdXBpbmdUdXBsZSA9IGZ1bmN0aW9uIGdldEdyb3VwaW5nVHVwbGUoY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzKSB7CiAgdmFyIGNoaWxkT2ZHcm91cCA9IGZ1bmN0aW9uIGNoaWxkT2ZHcm91cChzaGFwZSkgewogICAgcmV0dXJuIHNoYXBlLnBhcmVudCAmJiBzaGFwZS5wYXJlbnQuc3RhcnRzV2l0aChjb25maWcuZ3JvdXBOYW1lKTsKICB9OwoKICB2YXIgaXNBZEhvY0dyb3VwID0gZnVuY3Rpb24gaXNBZEhvY0dyb3VwKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUudHlwZSA9PT0gY29uZmlnLmdyb3VwTmFtZSAmJiBzaGFwZS5zdWJ0eXBlID09PSBjb25maWcuYWRIb2NHcm91cE5hbWU7CiAgfTsKCiAgdmFyIHByZWV4aXN0aW5nQWRIb2NHcm91cHMgPSBzaGFwZXMuZmlsdGVyKGlzQWRIb2NHcm91cCk7CiAgdmFyIG1hdGNoZXIgPSBpZHNNYXRjaChzZWxlY3RlZFNoYXBlcyk7CgogIHZhciBzZWxlY3RlZEZuID0gZnVuY3Rpb24gc2VsZWN0ZWRGbihzaGFwZSkgewogICAgcmV0dXJuIG1hdGNoZXIoc2hhcGUpICYmIHNoYXBlLnR5cGUgIT09ICdhbm5vdGF0aW9uJzsKICB9OwoKICB2YXIgZnJlc2hTZWxlY3RlZFNoYXBlcyA9IHNoYXBlcy5maWx0ZXIoc2VsZWN0ZWRGbik7CiAgdmFyIGZyZXNoTm9uU2VsZWN0ZWRTaGFwZXMgPSBzaGFwZXMuZmlsdGVyKCgwLCBfZnVuY3Rpb25hbC5ub3QpKHNlbGVjdGVkRm4pKTsKCiAgdmFyIGlzR3JvdXAgPSBmdW5jdGlvbiBpc0dyb3VwKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUudHlwZSA9PT0gY29uZmlnLmdyb3VwTmFtZTsKICB9OwoKICB2YXIgaXNPckJlbG9uZ3NUb0dyb3VwID0gZnVuY3Rpb24gaXNPckJlbG9uZ3NUb0dyb3VwKHNoYXBlKSB7CiAgICByZXR1cm4gaXNHcm91cChzaGFwZSkgfHwgY2hpbGRPZkdyb3VwKHNoYXBlKTsKICB9OwoKICB2YXIgc29tZVNlbGVjdGVkU2hhcGVzQXJlR3JvdXBlZCA9IHNlbGVjdGVkU2hhcGVzLnNvbWUoaXNPckJlbG9uZ3NUb0dyb3VwKTsKICB2YXIgc2VsZWN0aW9uT3V0c2lkZUdyb3VwID0gIXNvbWVTZWxlY3RlZFNoYXBlc0FyZUdyb3VwZWQ7CiAgcmV0dXJuIHsKICAgIHNlbGVjdGlvbk91dHNpZGVHcm91cDogc2VsZWN0aW9uT3V0c2lkZUdyb3VwLAogICAgZnJlc2hTZWxlY3RlZFNoYXBlczogZnJlc2hTZWxlY3RlZFNoYXBlcywKICAgIGZyZXNoTm9uU2VsZWN0ZWRTaGFwZXM6IGZyZXNoTm9uU2VsZWN0ZWRTaGFwZXMsCiAgICBwcmVleGlzdGluZ0FkSG9jR3JvdXBzOiBwcmVleGlzdGluZ0FkSG9jR3JvdXBzCiAgfTsKfTsKCmV4cG9ydHMuZ2V0R3JvdXBpbmdUdXBsZSA9IGdldEdyb3VwaW5nVHVwbGU7Cgp2YXIgZ2V0R3JvdXBpbmcgPSBmdW5jdGlvbiBnZXRHcm91cGluZyhjb25maWcsIHNoYXBlcywgc2VsZWN0ZWRTaGFwZXMsIGdyb3VwQWN0aW9uLCB0dXBsZSkgewogIHZhciBzZWxlY3Rpb25PdXRzaWRlR3JvdXAgPSB0dXBsZS5zZWxlY3Rpb25PdXRzaWRlR3JvdXAsCiAgICAgIGZyZXNoU2VsZWN0ZWRTaGFwZXMgPSB0dXBsZS5mcmVzaFNlbGVjdGVkU2hhcGVzLAogICAgICBmcmVzaE5vblNlbGVjdGVkU2hhcGVzID0gdHVwbGUuZnJlc2hOb25TZWxlY3RlZFNoYXBlcywKICAgICAgcHJlZXhpc3RpbmdBZEhvY0dyb3VwcyA9IHR1cGxlLnByZWV4aXN0aW5nQWRIb2NHcm91cHM7CgogIGlmIChncm91cEFjdGlvbiA9PT0gJ2dyb3VwJykgewogICAgdmFyIHNlbGVjdGVkQWRIb2NHcm91cHNUb1BlcnNpc3QgPSBzZWxlY3RlZFNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgICAgcmV0dXJuIHMuc3VidHlwZSA9PT0gY29uZmlnLmFkSG9jR3JvdXBOYW1lOwogICAgfSk7CiAgICByZXR1cm4gewogICAgICBzaGFwZXM6IHNoYXBlcy5tYXAoZnVuY3Rpb24gKHMpIHsKICAgICAgICByZXR1cm4gcy5zdWJ0eXBlID09PSBjb25maWcuYWRIb2NHcm91cE5hbWUgPyBfb2JqZWN0U3ByZWFkKHt9LCBzLCB7CiAgICAgICAgICBzdWJ0eXBlOiBjb25maWcucGVyc2lzdGVudEdyb3VwTmFtZQogICAgICAgIH0pIDogczsKICAgICAgfSksCiAgICAgIHNlbGVjdGVkU2hhcGVzOiBzZWxlY3RlZFNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNlbGVjdGVkKSB7CiAgICAgICAgcmV0dXJuIHNlbGVjdGVkLnN1YnR5cGUgIT09IGNvbmZpZy5hZEhvY0dyb3VwTmFtZTsKICAgICAgfSkuY29uY2F0KHNlbGVjdGVkQWRIb2NHcm91cHNUb1BlcnNpc3QubWFwKGZ1bmN0aW9uIChzaGFwZSkgewogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzaGFwZSwgewogICAgICAgICAgc3VidHlwZTogY29uZmlnLnBlcnNpc3RlbnRHcm91cE5hbWUKICAgICAgICB9KTsKICAgICAgfSkpCiAgICB9OwogIH0KCiAgaWYgKGdyb3VwQWN0aW9uID09PSAndW5ncm91cCcpIHsKICAgIHJldHVybiBkaXNzb2x2ZUdyb3VwcyhzZWxlY3RlZFNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgICAgcmV0dXJuIHMuc3VidHlwZSA9PT0gY29uZmlnLnBlcnNpc3RlbnRHcm91cE5hbWU7CiAgICB9KSwgc2hhcGVzLCBhc1lldFVuZ3JvdXBlZFNoYXBlcyhwcmVleGlzdGluZ0FkSG9jR3JvdXBzLCBmcmVzaFNlbGVjdGVkU2hhcGVzKSk7CiAgfSAvLyBhZCBob2MgZ3JvdXBzIG11c3QgZGlzc29sdmUgaWYgMS4gdGhlIHVzZXIgY2xpY2tzIGF3YXksIDIuIGhhcyBhIHNlbGVjdGlvbiB0aGF0J3Mgbm90IHRoZSBncm91cCwgb3IgMy4gc2VsZWN0ZWQgc29tZXRoaW5nIGVsc2UKCgogIGlmIChwcmVleGlzdGluZ0FkSG9jR3JvdXBzLmxlbmd0aCAmJiBzZWxlY3Rpb25PdXRzaWRlR3JvdXApIHsKICAgIC8vIGFzWWV0VW5ncm91cGVkU2hhcGVzIHdpbGwgdHJpdmlhbGx5IGJlIHRoZSBlbXB0eSBzZXQgaWYgY2FzZSAxIGlzIHJlYWxpemVkOiB1c2VyIGNsaWNrcyBhc2lkZSAtPiBzZWxlY3RlZFNoYXBlcyA9PT0gW10KICAgIC8vIHJldHVybiBwcmVzZXJ2ZUN1cnJlbnRHcm91cHMoc2hhcGVzLCBzZWxlY3RlZFNoYXBlcyk7CiAgICByZXR1cm4gZGlzc29sdmVHcm91cHMocHJlZXhpc3RpbmdBZEhvY0dyb3Vwcywgc2hhcGVzLCBhc1lldFVuZ3JvdXBlZFNoYXBlcyhwcmVleGlzdGluZ0FkSG9jR3JvdXBzLCBmcmVzaFNlbGVjdGVkU2hhcGVzKSk7CiAgfSAvLyBwcmVzZXJ2ZSB0aGUgY3VycmVudCBzZWxlY3Rpb24gaWYgdGhlIHNvbGUgYWQgaG9jIGdyb3VwIGlzIGJlaW5nIG1hbmlwdWxhdGVkCgoKICB2YXIgZWxlbWVudHMgPSBnZXRDb250ZW50U2hhcGVzKHNoYXBlcywgc2VsZWN0ZWRTaGFwZXMpOwoKICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAxICYmIGVsZW1lbnRzWzBdLnR5cGUgPT09ICdncm91cCcpIHsKICAgIHJldHVybiBjb25maWcuZ3JvdXBSZXNpemUgPyB7CiAgICAgIHNoYXBlczogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShyZXNpemVHcm91cChzaGFwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7CiAgICAgICAgcmV0dXJuIHMudHlwZSAhPT0gJ2Fubm90YXRpb24nOwogICAgICB9KSwgZWxlbWVudHNbMF0pKSwgX3RvQ29uc3VtYWJsZUFycmF5KHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgICAgICByZXR1cm4gcy50eXBlID09PSAnYW5ub3RhdGlvbic7CiAgICAgIH0pKSksCiAgICAgIHNlbGVjdGVkU2hhcGVzOiBzZWxlY3RlZFNoYXBlcwogICAgfSA6IHByZXNlcnZlQ3VycmVudEdyb3VwcyhzaGFwZXMsIHNlbGVjdGVkU2hhcGVzKTsKICB9IC8vIGdyb3VwIGl0ZW1zIG9yIGV4dGVuZCBncm91cCBib3VuZGluZyBib3ggKGlmIGVuYWJsZWQpCgoKICBpZiAoc2VsZWN0ZWRTaGFwZXMubGVuZ3RoIDwgMikgewogICAgLy8gcmVzaXplIHRoZSBncm91cCBpZiBuZWVkZWQgKGFkLWhvYyBncm91cCByZXNpemUgaXMgbWFuaXB1bGF0ZWQpCiAgICByZXR1cm4gcHJlc2VydmVDdXJyZW50R3JvdXBzKHNoYXBlcywgc2VsZWN0ZWRTaGFwZXMpOwogIH0gZWxzZSB7CiAgICAvLyBncm91cCB0b2dldGhlciB0aGUgbXVsdGlwbGUgaXRlbXMKICAgIHZhciBncm91cCA9IGF4aXNBbGlnbmVkQm91bmRpbmdCb3hTaGFwZShjb25maWcsIGZyZXNoU2VsZWN0ZWRTaGFwZXMpOwogICAgdmFyIHNlbGVjdGVkTGVhZlNoYXBlcyA9IGdldExlYWZzKGZ1bmN0aW9uIChzaGFwZSkgewogICAgICByZXR1cm4gc2hhcGUuc3VidHlwZSA9PT0gY29uZmlnLmFkSG9jR3JvdXBOYW1lOwogICAgfSwgc2hhcGVzLCBmcmVzaFNlbGVjdGVkU2hhcGVzKTsKICAgIHZhciBwYXJlbnRlZFNlbGVjdGVkU2hhcGVzID0gc2VsZWN0ZWRMZWFmU2hhcGVzLm1hcChmdW5jdGlvbiAoc2hhcGUpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHNoYXBlLCB7CiAgICAgICAgcGFyZW50OiBncm91cC5pZCwKICAgICAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogKDAsIF9tYXRyaXgubXVsdGlwbHkpKGdyb3VwLnJpZ1RyYW5zZm9ybSwgc2hhcGUudHJhbnNmb3JtTWF0cml4KQogICAgICB9KTsKICAgIH0pOwoKICAgIHZhciBub25Hcm91cEdyYXBoQ29uc3RpdHVlbnQgPSBmdW5jdGlvbiBub25Hcm91cEdyYXBoQ29uc3RpdHVlbnQocykgewogICAgICByZXR1cm4gcy5zdWJ0eXBlICE9PSBjb25maWcuYWRIb2NHcm91cE5hbWUgJiYgIXBhcmVudGVkU2VsZWN0ZWRTaGFwZXMuZmluZChmdW5jdGlvbiAoc3MpIHsKICAgICAgICByZXR1cm4gcy5pZCA9PT0gc3MuaWQ7CiAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgZGlzc29jaWF0ZUZyb21QYXJlbnRJZkFueSA9IGZ1bmN0aW9uIGRpc3NvY2lhdGVGcm9tUGFyZW50SWZBbnkocykgewogICAgICByZXR1cm4gcy5wYXJlbnQgJiYgcy5wYXJlbnQuc3RhcnRzV2l0aChjb25maWcuZ3JvdXBOYW1lKSAmJiBwcmVleGlzdGluZ0FkSG9jR3JvdXBzLmZpbmQoZnVuY3Rpb24gKGFoZykgewogICAgICAgIHJldHVybiBhaGcuaWQgPT09IHMucGFyZW50OwogICAgICB9KSA/IF9vYmplY3RTcHJlYWQoe30sIHMsIHsKICAgICAgICBwYXJlbnQ6IG51bGwKICAgICAgfSkgOiBzOwogICAgfTsKCiAgICB2YXIgYWxsVGVybWluYWxTaGFwZXMgPSBwYXJlbnRlZFNlbGVjdGVkU2hhcGVzLmNvbmNhdChmcmVzaE5vblNlbGVjdGVkU2hhcGVzLmZpbHRlcihub25Hcm91cEdyYXBoQ29uc3RpdHVlbnQpLm1hcChkaXNzb2NpYXRlRnJvbVBhcmVudElmQW55KSk7CiAgICByZXR1cm4gewogICAgICBzaGFwZXM6IGFsbFRlcm1pbmFsU2hhcGVzLmNvbmNhdChbZ3JvdXBdKSwKICAgICAgc2VsZWN0ZWRTaGFwZXM6IFtncm91cF0KICAgIH07CiAgfQp9OwoKZXhwb3J0cy5nZXRHcm91cGluZyA9IGdldEdyb3VwaW5nOwoKdmFyIGdldEN1cnNvciA9IGZ1bmN0aW9uIGdldEN1cnNvcihjb25maWcsIHNoYXBlLCBkcmFnZ2VkUHJpbWFyeVNoYXBlKSB7CiAgaWYgKCFzaGFwZSkgewogICAgcmV0dXJuICdhdXRvJzsKICB9CgogIHN3aXRjaCAoc2hhcGUuc3VidHlwZSkgewogICAgY2FzZSBjb25maWcucm90YXRpb25IYW5kbGVOYW1lOgogICAgICByZXR1cm4gJ2Nyb3NzaGFpcic7CgogICAgY2FzZSBjb25maWcucmVzaXplSGFuZGxlTmFtZToKICAgICAgdmFyIGFuZ2xlID0gKCgwLCBfbWF0cml4Lm1hdHJpeFRvQW5nbGUpKHNoYXBlLnRyYW5zZm9ybU1hdHJpeCkgKiAxODAgLyBNYXRoLlBJICsgMzYwKSAlIDM2MDsKICAgICAgdmFyIHNjcmVlblByb2plY3RlZEFuZ2xlID0gYW5nbGUgKyBzaGFwZS5jdXJzb3JBbmdsZTsKICAgICAgdmFyIGRpc2NyZXRpemVkQW5nbGUgPSAoTWF0aC5yb3VuZChzY3JlZW5Qcm9qZWN0ZWRBbmdsZSAvIDQ1KSAqIDQ1ICsgMzYwKSAlIDM2MDsKICAgICAgcmV0dXJuIGJpZGlyZWN0aW9uYWxDdXJzb3JzW2Rpc2NyZXRpemVkQW5nbGVdOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBkcmFnZ2VkUHJpbWFyeVNoYXBlID8gJ2dyYWJiaW5nJyA6ICdncmFiJzsKICB9Cn07CgpleHBvcnRzLmdldEN1cnNvciA9IGdldEN1cnNvcjsKCnZhciBnZXRTZWxlY3RlZFNoYXBlc1ByZXYgPSBmdW5jdGlvbiBnZXRTZWxlY3RlZFNoYXBlc1ByZXYoc2NlbmUpIHsKICByZXR1cm4gc2NlbmUuc2VsZWN0aW9uU3RhdGU7Cn07CgpleHBvcnRzLmdldFNlbGVjdGVkU2hhcGVzUHJldiA9IGdldFNlbGVjdGVkU2hhcGVzUHJldjsKCnZhciBnZXRTZWxlY3Rpb25TdGF0ZUZ1bGwgPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb25TdGF0ZUZ1bGwocHJldiwgY29uZmlnLCBzZWxlY3RlZFNoYXBlT2JqZWN0cywgaG92ZXJlZFNoYXBlcywgX3JlZjI0LCBtZXRhSGVsZCwgbXVsdGlzZWxlY3QsIGJveEhpZ2hsaWdodGVkU2hhcGVzKSB7CiAgdmFyIHVwID0gX3JlZjI0LnVwLAogICAgICBkb3duID0gX3JlZjI0LmRvd24sCiAgICAgIHVpZCA9IF9yZWYyNC51aWQ7CiAgdmFyIHVpZFVuY2hhbmdlZCA9IHVpZCA9PT0gcHJldi51aWQ7CiAgdmFyIG1vdXNlQnV0dG9uVXAgPSAhZG93bjsKCiAgaWYgKHNlbGVjdGVkU2hhcGVPYmplY3RzKSB7CiAgICBwcmV2LnNoYXBlcyA9IHNlbGVjdGVkU2hhcGVPYmplY3RzLnNsaWNlKCk7CiAgfQoKICBpZiAobW91c2VCdXR0b25VcCB8fCB1aWRVbmNoYW5nZWQpIHsKICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBwcmV2LCB7CiAgICAgIHNoYXBlczogdXAgJiYgcHJldi5ib3hIaWdobGlnaHRlZFNoYXBlcy5sZW5ndGggPyBwcmV2LnNoYXBlcy5jb25jYXQocHJldi5ib3hIaWdobGlnaHRlZFNoYXBlcykuZmlsdGVyKGZ1bmN0aW9uIChkLCBpLCBhKSB7CiAgICAgICAgcmV0dXJuIGEuZmluZEluZGV4KGZ1bmN0aW9uIChkZCkgewogICAgICAgICAgcmV0dXJuIGRkLmlkID09PSBkLmlkOwogICAgICAgIH0pID09PSBpOwogICAgICB9KSA6IHByZXYuc2hhcGVzLAogICAgICBkb3duOiBkb3duLAogICAgICB1aWQ6IHVpZCwKICAgICAgbWV0YUhlbGQ6IG1ldGFIZWxkLAogICAgICBib3hIaWdobGlnaHRlZFNoYXBlczogYm94SGlnaGxpZ2h0ZWRTaGFwZXMKICAgIH0pOwogIH0KCiAgdmFyIHNlbGVjdEZ1bmN0aW9uID0gY29uZmlnLnNpbmdsZVNlbGVjdCB8fCAhbXVsdGlzZWxlY3QgPyBzaW5nbGVTZWxlY3QgOiBtdWx0aVNlbGVjdDsKICByZXR1cm4gc2VsZWN0RnVuY3Rpb24ocHJldiwgY29uZmlnLCBob3ZlcmVkU2hhcGVzLCBtZXRhSGVsZCwgdWlkLCBzZWxlY3RlZFNoYXBlT2JqZWN0cywgYm94SGlnaGxpZ2h0ZWRTaGFwZXMpOwp9OwoKZXhwb3J0cy5nZXRTZWxlY3Rpb25TdGF0ZUZ1bGwgPSBnZXRTZWxlY3Rpb25TdGF0ZUZ1bGw7Cgp2YXIgZ2V0U2VsZWN0ZWRTaGFwZXMgPSBmdW5jdGlvbiBnZXRTZWxlY3RlZFNoYXBlcyhzZWxlY3Rpb25UdXBsZSkgewogIHJldHVybiBzZWxlY3Rpb25UdXBsZS5zaGFwZXM7Cn07CgpleHBvcnRzLmdldFNlbGVjdGVkU2hhcGVzID0gZ2V0U2VsZWN0ZWRTaGFwZXM7Cgp2YXIgZ2V0U2VsZWN0aW9uU3RhdGUgPSBmdW5jdGlvbiBnZXRTZWxlY3Rpb25TdGF0ZShfcmVmMjUpIHsKICB2YXIgdWlkID0gX3JlZjI1LnVpZCwKICAgICAgZGVwdGhJbmRleCA9IF9yZWYyNS5kZXB0aEluZGV4LAogICAgICBkb3duID0gX3JlZjI1LmRvd24sCiAgICAgIG1ldGFIZWxkID0gX3JlZjI1Lm1ldGFIZWxkLAogICAgICBib3hIaWdobGlnaHRlZFNoYXBlcyA9IF9yZWYyNS5ib3hIaWdobGlnaHRlZFNoYXBlczsKICByZXR1cm4gewogICAgdWlkOiB1aWQsCiAgICBkZXB0aEluZGV4OiBkZXB0aEluZGV4LAogICAgZG93bjogZG93biwKICAgIG1ldGFIZWxkOiBtZXRhSGVsZCwKICAgIGJveEhpZ2hsaWdodGVkU2hhcGVzOiBib3hIaWdobGlnaHRlZFNoYXBlcwogIH07Cn07CgpleHBvcnRzLmdldFNlbGVjdGlvblN0YXRlID0gZ2V0U2VsZWN0aW9uU3RhdGU7Cgp2YXIgZ2V0U2VsZWN0ZWRQcmltYXJ5U2hhcGVJZHMgPSBmdW5jdGlvbiBnZXRTZWxlY3RlZFByaW1hcnlTaGFwZUlkcyhzaGFwZXMpIHsKICByZXR1cm4gc2hhcGVzLm1hcChwcmltYXJ5U2hhcGUpOwp9OwoKZXhwb3J0cy5nZXRTZWxlY3RlZFByaW1hcnlTaGFwZUlkcyA9IGdldFNlbGVjdGVkUHJpbWFyeVNoYXBlSWRzOwoKdmFyIGdldFJlc2l6ZU1hbmlwdWxhdG9yID0gZnVuY3Rpb24gZ2V0UmVzaXplTWFuaXB1bGF0b3IoY29uZmlnLCB0b2dnbGUpIHsKICByZXR1cm4gKHRvZ2dsZSA/IGNlbnRlcmVkUmVzaXplTWFuaXB1bGF0aW9uIDogYXN5bW1ldHJpY1Jlc2l6ZU1hbmlwdWxhdGlvbikoY29uZmlnKTsKfTsKCmV4cG9ydHMuZ2V0UmVzaXplTWFuaXB1bGF0b3IgPSBnZXRSZXNpemVNYW5pcHVsYXRvcjsKCnZhciBnZXRUcmFuc2Zvcm1JbnRlbnRzID0gZnVuY3Rpb24gZ2V0VHJhbnNmb3JtSW50ZW50cyhjb25maWcsIHRyYW5zZm9ybUdlc3R1cmVzLCBkaXJlY3RTaGFwZXMsIHNoYXBlcywgY3Vyc29yUG9zaXRpb24sIGFsdGVyU25hcEdlc3R1cmUsIG1hbmlwdWxhdG9yKSB7CiAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZGlyZWN0U2hhcGVUcmFuc2xhdGVNYW5pcHVsYXRpb24odHJhbnNmb3JtR2VzdHVyZXMubWFwKGZ1bmN0aW9uIChnKSB7CiAgICByZXR1cm4gZy5jdW11bGF0aXZlVHJhbnNmb3JtOwogIH0pLCBkaXJlY3RTaGFwZXMpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHJvdGF0aW9uQW5ub3RhdGlvbk1hbmlwdWxhdGlvbihjb25maWcsIHRyYW5zZm9ybUdlc3R1cmVzLm1hcChmdW5jdGlvbiAoZykgewogICAgcmV0dXJuIGcudHJhbnNmb3JtOwogIH0pLCBkaXJlY3RTaGFwZXMsIHNoYXBlcywgY3Vyc29yUG9zaXRpb24sIGFsdGVyU25hcEdlc3R1cmUpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc2l6ZUFubm90YXRpb25NYW5pcHVsYXRpb24oY29uZmlnLCB0cmFuc2Zvcm1HZXN0dXJlcywgZGlyZWN0U2hhcGVzLCBzaGFwZXMsIG1hbmlwdWxhdG9yKSkpOwp9OwoKZXhwb3J0cy5nZXRUcmFuc2Zvcm1JbnRlbnRzID0gZ2V0VHJhbnNmb3JtSW50ZW50czsKCnZhciBnZXREcmFnZ2VkUHJpbWFyeVNoYXBlID0gZnVuY3Rpb24gZ2V0RHJhZ2dlZFByaW1hcnlTaGFwZShzaGFwZXMsIGRyYWdnZWRTaGFwZSkgewogIHJldHVybiBkcmFnZ2VkU2hhcGUgJiYgc2hhcGVzLmZpbmQoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUuaWQgPT09IHByaW1hcnlTaGFwZShkcmFnZ2VkU2hhcGUpOwogIH0pOwp9OwoKZXhwb3J0cy5nZXREcmFnZ2VkUHJpbWFyeVNoYXBlID0gZ2V0RHJhZ2dlZFByaW1hcnlTaGFwZTsKCnZhciBnZXRBbGlnbm1lbnRHdWlkZUFubm90YXRpb25zID0gZnVuY3Rpb24gZ2V0QWxpZ25tZW50R3VpZGVBbm5vdGF0aW9ucyhjb25maWcsIHNoYXBlcywgZHJhZ2dlZFByaW1hcnlTaGFwZSwgZHJhZ2dlZFNoYXBlKSB7CiAgdmFyIGd1aWRlZFNoYXBlcyA9IGRyYWdnZWRQcmltYXJ5U2hhcGUgPyBbc2hhcGVzLmZpbmQoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLmlkID09PSBkcmFnZ2VkUHJpbWFyeVNoYXBlLmlkOwogIH0pXS5maWx0ZXIoX2Z1bmN0aW9uYWwuaWRlbnRpdHkpIDogW107CiAgcmV0dXJuIGd1aWRlZFNoYXBlcy5sZW5ndGggPyBhbGlnbm1lbnRHdWlkZXMoY29uZmlnLCBzaGFwZXMsIGd1aWRlZFNoYXBlcywgZHJhZ2dlZFNoYXBlKS5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUsIHsKICAgICAgaWQ6IGNvbmZpZy5hbGlnbm1lbnRHdWlkZU5hbWUgKyAnXycgKyBzaGFwZS5pZCwKICAgICAgdHlwZTogJ2Fubm90YXRpb24nLAogICAgICBzdWJ0eXBlOiBjb25maWcuYWxpZ25tZW50R3VpZGVOYW1lLAogICAgICBpbnRlcmFjdGl2ZTogZmFsc2UsCiAgICAgIGJhY2tncm91bmRDb2xvcjogJ21hZ2VudGEnLAogICAgICBwYXJlbnQ6IG51bGwKICAgIH0pOwogIH0pIDogW107Cn07CgpleHBvcnRzLmdldEFsaWdubWVudEd1aWRlQW5ub3RhdGlvbnMgPSBnZXRBbGlnbm1lbnRHdWlkZUFubm90YXRpb25zOwoKdmFyIGJvcmRlckFubm90YXRpb24gPSBmdW5jdGlvbiBib3JkZXJBbm5vdGF0aW9uKHN1YnR5cGUsIGxpZnQpIHsKICByZXR1cm4gZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcGUsIHsKICAgICAgaWQ6IHN1YnR5cGUgKyAnXycgKyBzaGFwZS5pZCwKICAgICAgdHlwZTogJ2Fubm90YXRpb24nLAogICAgICBzdWJ0eXBlOiBzdWJ0eXBlLAogICAgICBpbnRlcmFjdGl2ZTogZmFsc2UsCiAgICAgIGxvY2FsVHJhbnNmb3JtTWF0cml4OiAoMCwgX21hdHJpeC5tdWx0aXBseSkoc2hhcGUubG9jYWxUcmFuc2Zvcm1NYXRyaXgsICgwLCBfbWF0cml4LnRyYW5zbGF0ZSkoMCwgMCwgbGlmdCkpLAogICAgICBwYXJlbnQ6IHNoYXBlLnBhcmVudAogICAgfSk7CiAgfTsKfTsKCnZhciBnZXRBZEhvY0NoaWxkcmVuQW5ub3RhdGlvbnMgPSBmdW5jdGlvbiBnZXRBZEhvY0NoaWxkcmVuQW5ub3RhdGlvbnMoY29uZmlnLCBfcmVmMjYpIHsKICB2YXIgc2hhcGVzID0gX3JlZjI2LnNoYXBlczsKICB2YXIgYWRIb2NHcm91cHMgPSBzaGFwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7CiAgICByZXR1cm4gcy5zdWJ0eXBlID09PSBjb25maWcuYWRIb2NHcm91cE5hbWU7CiAgfSk7CiAgcmV0dXJuIHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLnR5cGUgIT09ICdhbm5vdGF0aW9uJyAmJiBzLnBhcmVudCAmJiBhZEhvY0dyb3Vwcy5maW5kKGZ1bmN0aW9uIChwKSB7CiAgICAgIHJldHVybiBwLmlkID09PSBzLnBhcmVudDsKICAgIH0pOwogIH0pLm1hcChib3JkZXJBbm5vdGF0aW9uKGNvbmZpZy5nZXRBZEhvY0NoaWxkQW5ub3RhdGlvbk5hbWUsIGNvbmZpZy5ob3ZlckxpZnQpKTsKfTsKCmV4cG9ydHMuZ2V0QWRIb2NDaGlsZHJlbkFubm90YXRpb25zID0gZ2V0QWRIb2NDaGlsZHJlbkFubm90YXRpb25zOwoKdmFyIGdldEhvdmVyQW5ub3RhdGlvbnMgPSBmdW5jdGlvbiBnZXRIb3ZlckFubm90YXRpb25zKGNvbmZpZywgc2hhcGVzLCBzZWxlY3RlZFByaW1hcnlTaGFwZUlkcywgZHJhZ2dlZFNoYXBlKSB7CiAgcmV0dXJuIHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUgJiYgc2hhcGUudHlwZSAhPT0gJ2Fubm90YXRpb24nICYmIHNlbGVjdGVkUHJpbWFyeVNoYXBlSWRzLmluZGV4T2Yoc2hhcGUuaWQpID09PSAtMSAmJiAhZHJhZ2dlZFNoYXBlOwogIH0pLm1hcChib3JkZXJBbm5vdGF0aW9uKGNvbmZpZy5ob3ZlckFubm90YXRpb25OYW1lLCBjb25maWcuaG92ZXJMaWZ0KSk7Cn07CgpleHBvcnRzLmdldEhvdmVyQW5ub3RhdGlvbnMgPSBnZXRIb3ZlckFubm90YXRpb25zOwoKdmFyIGdldFNoYXBlc1RvSG92ZXIgPSBmdW5jdGlvbiBnZXRTaGFwZXNUb0hvdmVyKGRyYWdCb3gsIGhvdmVyZWRTaGFwZXMsIGJveEhpZ2hsaWdodGVkU2hhcGVzKSB7CiAgcmV0dXJuIGRyYWdCb3ggPyBib3hIaWdobGlnaHRlZFNoYXBlcyA6IGhvdmVyZWRTaGFwZXMuc2xpY2UoMCwgMSk7Cn07CgpleHBvcnRzLmdldFNoYXBlc1RvSG92ZXIgPSBnZXRTaGFwZXNUb0hvdmVyOwoKdmFyIGdldFNuYXBwZWRTaGFwZXMgPSBmdW5jdGlvbiBnZXRTbmFwcGVkU2hhcGVzKGNvbmZpZywgc2hhcGVzLCBkcmFnZ2VkU2hhcGUsIGRyYWdnZWRFbGVtZW50LCBhbGlnbm1lbnRHdWlkZUFubm90YXRpb25zLCBhbHRlclNuYXBHZXN0dXJlLCBzeW1tZXRyaWNNYW5pcHVsYXRpb24pIHsKICB2YXIgY29udGVudFNoYXBlcyA9IHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUudHlwZSAhPT0gJ2Fubm90YXRpb24nOwogIH0pOwogIHZhciBzdWJ0eXBlID0gZHJhZ2dlZFNoYXBlICYmIGRyYWdnZWRTaGFwZS5zdWJ0eXBlOyAvLyBzbmFwcGluZyBkb2Vzbid0IGNvbWUgaW50byBwbGF5IGlmIHRoZXJlJ3Mgbm8gZHJhZ2dpbmcsIG9yIGl0J3Mgbm90IGEgcmVzaXplIGRyYWcgb3IgdHJhbnNsYXRlIGRyYWcgb24gYQogIC8vIGxlYWYgZWxlbWVudCBvciBhIGdyb3VwIGVsZW1lbnQ6CgogIGlmIChzdWJ0eXBlICYmIFtjb25maWcucmVzaXplSGFuZGxlTmFtZSwgY29uZmlnLmFkSG9jR3JvdXBOYW1lLCBjb25maWcucGVyc2lzdGVudEdyb3VwTmFtZV0uaW5kZXhPZihzdWJ0eXBlKSA9PT0gLTEpIHsKICAgIHJldHVybiBjb250ZW50U2hhcGVzOwogIH0KCiAgdmFyIGNvbnN0cmFpbnRzID0gYWxpZ25tZW50R3VpZGVBbm5vdGF0aW9uczsgLy8gZml4bWUgc3BsaXQgY29uY2VwdCBvZiBzbmFwIGNvbnN0cmFpbnRzIGFuZCB0aGVpciBhbm5vdGF0aW9ucwoKICB2YXIgcmVsYXhlZCA9IGFsdGVyU25hcEdlc3R1cmUuaW5kZXhPZigncmVsYXgnKSAhPT0gLTE7CiAgdmFyIGNvbnN0cmFpbmVkID0gY29uZmlnLnNuYXBDb25zdHJhaW50ICYmICFyZWxheGVkOwogIHZhciBob3Jpem9udGFsQ29uc3RyYWludCA9IGNvbnN0cmFpbmVkICYmIGRpcmVjdGlvbmFsQ29uc3RyYWludChjb25zdHJhaW50cywgaXNIb3Jpem9udGFsKTsKICB2YXIgdmVydGljYWxDb25zdHJhaW50ID0gY29uc3RyYWluZWQgJiYgZGlyZWN0aW9uYWxDb25zdHJhaW50KGNvbnN0cmFpbnRzLCBpc1ZlcnRpY2FsKTsKICB2YXIgc25hcHBlciA9IHN1YnR5cGUgPT09IGNvbmZpZy5yZXNpemVIYW5kbGVOYW1lID8gcmVzaXplU2hhcGVTbmFwKGhvcml6b250YWxDb25zdHJhaW50LCB2ZXJ0aWNhbENvbnN0cmFpbnQsIGRyYWdnZWRFbGVtZW50LCBzeW1tZXRyaWNNYW5pcHVsYXRpb24sIGRyYWdnZWRTaGFwZS5ob3Jpem9udGFsUG9zaXRpb24sIGRyYWdnZWRTaGFwZS52ZXJ0aWNhbFBvc2l0aW9uKSA6IHRyYW5zbGF0ZVNoYXBlU25hcChob3Jpem9udGFsQ29uc3RyYWludCwgdmVydGljYWxDb25zdHJhaW50LCBkcmFnZ2VkRWxlbWVudCk7IC8vIGxlYWYgZWxlbWVudCBvciBhZC1ob2MgZ3JvdXAKCiAgcmV0dXJuIGNvbnRlbnRTaGFwZXMubWFwKHNuYXBwZXIpOwp9OwoKZXhwb3J0cy5nZXRTbmFwcGVkU2hhcGVzID0gZ2V0U25hcHBlZFNoYXBlczsKCnZhciBnZXRDb25zdHJhaW5lZFNoYXBlc1dpdGhQcmVleGlzdGluZ0Fubm90YXRpb25zID0gZnVuY3Rpb24gZ2V0Q29uc3RyYWluZWRTaGFwZXNXaXRoUHJlZXhpc3RpbmdBbm5vdGF0aW9ucyhzbmFwcGVkLCB0cmFuc2Zvcm1lZCkgewogIHJldHVybiBzbmFwcGVkLmNvbmNhdCh0cmFuc2Zvcm1lZC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLnR5cGUgPT09ICdhbm5vdGF0aW9uJzsKICB9KSk7Cn07CgpleHBvcnRzLmdldENvbnN0cmFpbmVkU2hhcGVzV2l0aFByZWV4aXN0aW5nQW5ub3RhdGlvbnMgPSBnZXRDb25zdHJhaW5lZFNoYXBlc1dpdGhQcmVleGlzdGluZ0Fubm90YXRpb25zOwoKdmFyIGdldEdyb3VwQWN0aW9uID0gZnVuY3Rpb24gZ2V0R3JvdXBBY3Rpb24oYWN0aW9uLCBtb3VzZUlzRG93bikgewogIHZhciBldmVudCA9IGFjdGlvbiAmJiBhY3Rpb24uZXZlbnQ7CiAgcmV0dXJuICFtb3VzZUlzRG93biAmJiAoZXZlbnQgPT09ICdncm91cCcgfHwgZXZlbnQgPT09ICd1bmdyb3VwJykgPyBldmVudCA6IG51bGw7Cn07CgpleHBvcnRzLmdldEdyb3VwQWN0aW9uID0gZ2V0R3JvdXBBY3Rpb247CnZhciBhbGlnbm1lbnRzID0gewogIC8vIGluIHRoZSBmdXR1cmUsIHdlIG1pZ2h0IHdhbnQgdG8gc25hcCBlZy4gdGhlIGVsZW1lbnQgY2VudGVyIHRvIHRoZSBsZWZ0IGVkZ2UKICAvLyBjb250cm9sbGluZyBhbmNob3IgaXMgd2hpY2ggc2lkZSAoLTE6IGxvd2VyLCBlZy4gbGVmdDsgMDogY2VudHJhbCkgb2YgdGhlIGNvbnRhaW5lcgogIC8vIHdlIHdhbnQgdG8gc25hcCB0bzsgY29udHJvbGxlZCBhbmNob3Igc3BlY2lmaWVzIHdoaWNoIHNpZGUgb2YgdGhlIGVsZW1lbnQgc25hcHMKICBhbGlnbkxlZnQ6IHsKICAgIHR5cGU6ICdhbGlnbkxlZnRBY3Rpb24nLAogICAgaG9yaXpvbnRhbDogdHJ1ZSwKICAgIGNvbnRyb2xsZWRBbmNob3I6IC0xLAogICAgY29udHJvbGxpbmdBbmNob3I6IC0xCiAgfSwKICBhbGlnbkNlbnRlcjogewogICAgdHlwZTogJ2FsaWduQ2VudGVyQWN0aW9uJywKICAgIGhvcml6b250YWw6IHRydWUsCiAgICBjb250cm9sbGVkQW5jaG9yOiAwLAogICAgY29udHJvbGxpbmdBbmNob3I6IDAKICB9LAogIGFsaWduUmlnaHQ6IHsKICAgIHR5cGU6ICdhbGlnblJpZ2h0QWN0aW9uJywKICAgIGhvcml6b250YWw6IHRydWUsCiAgICBjb250cm9sbGVkQW5jaG9yOiAxLAogICAgY29udHJvbGxpbmdBbmNob3I6IDEKICB9LAogIGFsaWduVG9wOiB7CiAgICB0eXBlOiAnYWxpZ25Ub3BBY3Rpb24nLAogICAgaG9yaXpvbnRhbDogZmFsc2UsCiAgICBjb250cm9sbGVkQW5jaG9yOiAtMSwKICAgIGNvbnRyb2xsaW5nQW5jaG9yOiAtMQogIH0sCiAgYWxpZ25NaWRkbGU6IHsKICAgIHR5cGU6ICdhbGlnbk1pZGRsZUFjdGlvbicsCiAgICBob3Jpem9udGFsOiBmYWxzZSwKICAgIGNvbnRyb2xsZWRBbmNob3I6IDAsCiAgICBjb250cm9sbGluZ0FuY2hvcjogMAogIH0sCiAgYWxpZ25Cb3R0b206IHsKICAgIHR5cGU6ICdhbGlnbkJvdHRvbUFjdGlvbicsCiAgICBob3Jpem9udGFsOiBmYWxzZSwKICAgIGNvbnRyb2xsZWRBbmNob3I6IDEsCiAgICBjb250cm9sbGluZ0FuY2hvcjogMQogIH0KfTsKdmFyIGRpc3RyaWJ1dGlvbnMgPSB7CiAgZGlzdHJpYnV0ZUhvcml6b250YWxseTogewogICAgdHlwZTogJ2Rpc3RyaWJ1dGVIb3Jpem9udGFsbHlBY3Rpb24nLAogICAgaG9yaXpvbnRhbDogdHJ1ZQogIH0sCiAgZGlzdHJpYnV0ZVZlcnRpY2FsbHk6IHsKICAgIHR5cGU6ICdkaXN0cmlidXRlVmVydGljYWxseUFjdGlvbicsCiAgICBob3Jpem9udGFsOiBmYWxzZQogIH0KfTsKCnZhciBnZXRBbGlnbkFjdGlvbiA9IGZ1bmN0aW9uIGdldEFsaWduQWN0aW9uKGFjdGlvbikgewogIHJldHVybiBhbGlnbm1lbnRzW2FjdGlvbiAmJiBhY3Rpb24uZXZlbnRdIHx8IG51bGw7Cn07CgpleHBvcnRzLmdldEFsaWduQWN0aW9uID0gZ2V0QWxpZ25BY3Rpb247Cgp2YXIgZ2V0RGlzdHJpYnV0ZUFjdGlvbiA9IGZ1bmN0aW9uIGdldERpc3RyaWJ1dGVBY3Rpb24oYWN0aW9uKSB7CiAgcmV0dXJuIGRpc3RyaWJ1dGlvbnNbYWN0aW9uICYmIGFjdGlvbi5ldmVudF0gfHwgbnVsbDsKfTsKCmV4cG9ydHMuZ2V0RGlzdHJpYnV0ZUFjdGlvbiA9IGdldERpc3RyaWJ1dGVBY3Rpb247Cgp2YXIgZ2V0R3JvdXBlZFNlbGVjdGVkU2hhcGVzID0gZnVuY3Rpb24gZ2V0R3JvdXBlZFNlbGVjdGVkU2hhcGVzKF9yZWYyNykgewogIHZhciBzZWxlY3RlZFNoYXBlcyA9IF9yZWYyNy5zZWxlY3RlZFNoYXBlczsKICByZXR1cm4gc2VsZWN0ZWRTaGFwZXM7Cn07CgpleHBvcnRzLmdldEdyb3VwZWRTZWxlY3RlZFNoYXBlcyA9IGdldEdyb3VwZWRTZWxlY3RlZFNoYXBlczsKCnZhciBnZXRHcm91cGVkU2VsZWN0ZWRQcmltYXJ5U2hhcGVJZHMgPSBmdW5jdGlvbiBnZXRHcm91cGVkU2VsZWN0ZWRQcmltYXJ5U2hhcGVJZHMoc2VsZWN0ZWRTaGFwZXMpIHsKICByZXR1cm4gc2VsZWN0ZWRTaGFwZXMubWFwKHByaW1hcnlTaGFwZSk7Cn07CgpleHBvcnRzLmdldEdyb3VwZWRTZWxlY3RlZFByaW1hcnlTaGFwZUlkcyA9IGdldEdyb3VwZWRTZWxlY3RlZFByaW1hcnlTaGFwZUlkczsKCnZhciBnZXRHcm91cGVkU2VsZWN0ZWRTaGFwZUlkcyA9IGZ1bmN0aW9uIGdldEdyb3VwZWRTZWxlY3RlZFNoYXBlSWRzKHNlbGVjdGVkU2hhcGVzKSB7CiAgcmV0dXJuIHNlbGVjdGVkU2hhcGVzLm1hcChmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS5pZDsKICB9KTsKfTsKCmV4cG9ydHMuZ2V0R3JvdXBlZFNlbGVjdGVkU2hhcGVJZHMgPSBnZXRHcm91cGVkU2VsZWN0ZWRTaGFwZUlkczsKCnZhciBnZXRSb3RhdGlvbkFubm90YXRpb25zID0gZnVuY3Rpb24gZ2V0Um90YXRpb25Bbm5vdGF0aW9ucyhjb25maWcsIF9yZWYyOCkgewogIHZhciBzaGFwZXMgPSBfcmVmMjguc2hhcGVzLAogICAgICBzZWxlY3RlZFNoYXBlcyA9IF9yZWYyOC5zZWxlY3RlZFNoYXBlczsKICB2YXIgc2hhcGVzVG9Bbm5vdGF0ZSA9IHNlbGVjdGVkU2hhcGVzOwogIHJldHVybiBzaGFwZXNUb0Fubm90YXRlLm1hcChmdW5jdGlvbiAoc2hhcGUsIGkpIHsKICAgIHJldHVybiByb3RhdGlvbkFubm90YXRpb24oY29uZmlnLCBzaGFwZXMsIHNlbGVjdGVkU2hhcGVzLCBzaGFwZSwgaSk7CiAgfSkuZmlsdGVyKF9mdW5jdGlvbmFsLmlkZW50aXR5KTsKfTsKCmV4cG9ydHMuZ2V0Um90YXRpb25Bbm5vdGF0aW9ucyA9IGdldFJvdGF0aW9uQW5ub3RhdGlvbnM7Cgp2YXIgZ2V0RHJhZ0JveCA9IGZ1bmN0aW9uIGdldERyYWdCb3goZHJhZ2dpbmcsIGRyYWdnZWRTaGFwZSwgX3JlZjI5KSB7CiAgdmFyIHgwID0gX3JlZjI5LngwLAogICAgICB5MCA9IF9yZWYyOS55MCwKICAgICAgeDEgPSBfcmVmMjkueDEsCiAgICAgIHkxID0gX3JlZjI5LnkxOwogIHJldHVybiBkcmFnZ2luZyAmJiAhZHJhZ2dlZFNoYXBlICYmIHsKICAgIHg6ICh4MCArIHgxKSAvIDIsCiAgICB5OiAoeTAgKyB5MSkgLyAyLAogICAgYTogTWF0aC5hYnMoeDEgLSB4MCkgLyAyLAogICAgYjogTWF0aC5hYnMoeTEgLSB5MCkgLyAyCiAgfTsKfTsKCmV4cG9ydHMuZ2V0RHJhZ0JveCA9IGdldERyYWdCb3g7Cgp2YXIgZ2V0RHJhZ2JveEhpZ2hsaWdodGVkID0gZnVuY3Rpb24gZ2V0RHJhZ2JveEhpZ2hsaWdodGVkKGJveCwgc2hhcGVzKSB7CiAgaWYgKCFib3gpIHsKICAgIHJldHVybiBbXTsKICB9CgogIHZhciBmaWx0ZXIgPSAoMCwgX2dlb21ldHJ5Lmluc2lkZUFBQkIpKGJveCk7CiAgcmV0dXJuIHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsKICAgIHJldHVybiBzLnR5cGUgIT09ICdhbm5vdGF0aW9uJyAmJiAhcy5wYXJlbnQgJiYgZmlsdGVyKHMudHJhbnNmb3JtTWF0cml4LCBzLmEsIHMuYik7CiAgfSk7Cn07CgpleHBvcnRzLmdldERyYWdib3hIaWdobGlnaHRlZCA9IGdldERyYWdib3hIaWdobGlnaHRlZDsKCnZhciBnZXREcmFnQm94QW5ub3RhdGlvbiA9IGZ1bmN0aW9uIGdldERyYWdCb3hBbm5vdGF0aW9uKGNvbmZpZywgYm94KSB7CiAgcmV0dXJuIGJveCA/IFt7CiAgICBpZDogY29uZmlnLmRyYWdCb3hBbm5vdGF0aW9uTmFtZSwKICAgIHR5cGU6ICdhbm5vdGF0aW9uJywKICAgIHN1YnR5cGU6IGNvbmZpZy5kcmFnQm94QW5ub3RhdGlvbk5hbWUsCiAgICBpbnRlcmFjdGl2ZTogZmFsc2UsCiAgICBwYXJlbnQ6IG51bGwsCiAgICBsb2NhbFRyYW5zZm9ybU1hdHJpeDogKDAsIF9tYXRyaXgudHJhbnNsYXRlKShib3gueCwgYm94LnksIGNvbmZpZy5kcmFnQm94WiksCiAgICBhOiBib3guYSwKICAgIGI6IGJveC5iCiAgfV0gOiBbXTsKfTsKCmV4cG9ydHMuZ2V0RHJhZ0JveEFubm90YXRpb24gPSBnZXREcmFnQm94QW5ub3RhdGlvbjsKCnZhciBnZXRBbm5vdGF0ZWRTaGFwZXMgPSBmdW5jdGlvbiBnZXRBbm5vdGF0ZWRTaGFwZXMoX3JlZjMwLCBhbGlnbm1lbnRHdWlkZUFubm90YXRpb25zLCBob3ZlckFubm90YXRpb25zLCByb3RhdGlvbkFubm90YXRpb25zLCByZXNpemVBbm5vdGF0aW9ucywgcm90YXRpb25Ub29sdGlwQW5ub3RhdGlvbiwgYWRIb2NDaGlsZHJlbkFubm90YXRpb25zLCBkcmFnQm94QW5ub3RhdGlvbikgewogIHZhciBzaGFwZXMgPSBfcmVmMzAuc2hhcGVzOwogIC8vIGZpeG1lIHVwZGF0ZSBpdCB0byBhIHNpbXBsZSBjb25jYXRlbmF0b3IsIG5vIG5lZWQgZm9yIGVubGlzdGluZyB0aGUgbm93IHByZXR0eSBsb25nIHN1YnR5cGUgbGlzdAogIHZhciBhbm5vdGF0aW9ucyA9IFtdLmNvbmNhdChhbGlnbm1lbnRHdWlkZUFubm90YXRpb25zLCBob3ZlckFubm90YXRpb25zLCByb3RhdGlvbkFubm90YXRpb25zLCByZXNpemVBbm5vdGF0aW9ucywgcm90YXRpb25Ub29sdGlwQW5ub3RhdGlvbiwgYWRIb2NDaGlsZHJlbkFubm90YXRpb25zLCBkcmFnQm94QW5ub3RhdGlvbik7IC8vIHJlbW92ZSBwcmVleGlzdGluZyBhbm5vdGF0aW9ucwoKICB2YXIgY29udGVudFNoYXBlcyA9IHNoYXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUudHlwZSAhPT0gJ2Fubm90YXRpb24nOwogIH0pOwogIHJldHVybiBjb250ZW50U2hhcGVzLmNvbmNhdChhbm5vdGF0aW9ucyk7IC8vIGFkZCBjdXJyZW50IGFubm90YXRpb25zCn07IC8vIGNvbGxlY3Rpb24gb2Ygc2hhcGVzIHRoZW1zZWx2ZXMKCgpleHBvcnRzLmdldEFubm90YXRlZFNoYXBlcyA9IGdldEFubm90YXRlZFNoYXBlczsKCnZhciBnZXROZXh0U2NlbmUgPSBmdW5jdGlvbiBnZXROZXh0U2NlbmUoY29uZmlndXJhdGlvbiwgaG92ZXJlZFNoYXBlLCBzZWxlY3RlZFNoYXBlcywgc2VsZWN0ZWRQcmltYXJ5U2hhcGVzLCBzaGFwZXMsIGdlc3R1cmVFbmQsIGRyYWdnZWRTaGFwZSwgY3Vyc29yLCBzZWxlY3Rpb25TdGF0ZSwgbW91c2VUcmFuc2Zvcm1TdGF0ZSwgZ2VzdHVyZVN0YXRlKSB7CiAgcmV0dXJuIHsKICAgIGNvbmZpZ3VyYXRpb246IGNvbmZpZ3VyYXRpb24sCiAgICBob3ZlcmVkU2hhcGU6IGhvdmVyZWRTaGFwZSwKICAgIHNlbGVjdGVkU2hhcGVzOiBzZWxlY3RlZFNoYXBlcywKICAgIHNlbGVjdGVkUHJpbWFyeVNoYXBlczogc2VsZWN0ZWRQcmltYXJ5U2hhcGVzLAogICAgc2hhcGVzOiBzaGFwZXMsCiAgICBnZXN0dXJlRW5kOiBnZXN0dXJlRW5kLAogICAgZHJhZ2dlZFNoYXBlOiBkcmFnZ2VkU2hhcGUsCiAgICBjdXJzb3I6IGN1cnNvciwKICAgIHNlbGVjdGlvblN0YXRlOiBzZWxlY3Rpb25TdGF0ZSwKICAgIG1vdXNlVHJhbnNmb3JtU3RhdGU6IG1vdXNlVHJhbnNmb3JtU3RhdGUsCiAgICBnZXN0dXJlU3RhdGU6IGdlc3R1cmVTdGF0ZQogIH07Cn07CgpleHBvcnRzLmdldE5leHRTY2VuZSA9IGdldE5leHRTY2VuZTsKCnZhciB1cGRhdGVyRnVuID0gZnVuY3Rpb24gdXBkYXRlckZ1bihuZXh0U2NlbmUsIHByaW1hcnlVcGRhdGUpIHsKICByZXR1cm4gewogICAgcHJpbWFyeVVwZGF0ZTogcHJpbWFyeVVwZGF0ZSwKICAgIGN1cnJlbnRTY2VuZTogbmV4dFNjZW5lCiAgfTsKfTsKCmV4cG9ydHMudXBkYXRlckZ1biA9IHVwZGF0ZXJGdW47"},null]}