{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/observability/public/hooks/use_track_metric.js","dependencies":[{"path":"x-pack/plugins/observability/public/hooks/use_track_metric.js","mtime":1589249555061},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZVVpVHJhY2tlciA9IHVzZVVpVHJhY2tlcjsKZXhwb3J0cy51c2VUcmFja01ldHJpYyA9IHVzZVRyYWNrTWV0cmljOwpleHBvcnRzLnVzZVRyYWNrUGFnZXZpZXcgPSB1c2VUcmFja1BhZ2V2aWV3OwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIk1FVFJJQ19UWVBFIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2FuYWx5dGljcy5NRVRSSUNfVFlQRTsKICB9Cn0pOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX2FuYWx5dGljcyA9IHJlcXVpcmUoIkBrYm4vYW5hbHl0aWNzIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NyYy9wbHVnaW5zL2tpYmFuYV9yZWFjdC9wdWJsaWMiKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwoKICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7CgogIHZhciBrZXksIGk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgewogICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOwogICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOwogICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwogIHZhciB0YXJnZXQgPSB7fTsKICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7CiAgdmFyIGtleSwgaTsKCiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsKICAgIGtleSA9IHNvdXJjZUtleXNbaV07CiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIHVzZVVpVHJhY2tlcigpIHsKICB2YXIgX3VzZUtpYmFuYSRzZXJ2aWNlcywgX3VzZUtpYmFuYSRzZXJ2aWNlcyR1OwoKICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sCiAgICAgIGRlZmF1bHRBcHAgPSBfcmVmLmFwcDsKCiAgdmFyIHJlcG9ydFVpU3RhdHMgPSAoX3VzZUtpYmFuYSRzZXJ2aWNlcyA9ICgwLCBfcHVibGljLnVzZUtpYmFuYSkoKS5zZXJ2aWNlcykgPT09IG51bGwgfHwgX3VzZUtpYmFuYSRzZXJ2aWNlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF91c2VLaWJhbmEkc2VydmljZXMkdSA9IF91c2VLaWJhbmEkc2VydmljZXMudXNhZ2VDb2xsZWN0aW9uKSA9PT0gbnVsbCB8fCBfdXNlS2liYW5hJHNlcnZpY2VzJHUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91c2VLaWJhbmEkc2VydmljZXMkdS5yZXBvcnRVaVN0YXRzOwogIHZhciB0cmFja0V2ZW50ID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgIHZhciBfcmVmMiRhcHAgPSBfcmVmMi5hcHAsCiAgICAgICAgICBhcHAgPSBfcmVmMiRhcHAgPT09IHZvaWQgMCA/IGRlZmF1bHRBcHAgOiBfcmVmMiRhcHAsCiAgICAgICAgICBtZXRyaWMgPSBfcmVmMi5tZXRyaWMsCiAgICAgICAgICBfcmVmMiRtZXRyaWNUeXBlID0gX3JlZjIubWV0cmljVHlwZSwKICAgICAgICAgIG1ldHJpY1R5cGUgPSBfcmVmMiRtZXRyaWNUeXBlID09PSB2b2lkIDAgPyBfYW5hbHl0aWNzLk1FVFJJQ19UWVBFLkNPVU5UIDogX3JlZjIkbWV0cmljVHlwZTsKCiAgICAgIGlmIChyZXBvcnRVaVN0YXRzKSB7CiAgICAgICAgcmVwb3J0VWlTdGF0cyhhcHAsIG1ldHJpY1R5cGUsIG1ldHJpYyk7CiAgICAgIH0KICAgIH07CiAgfSwgW2RlZmF1bHRBcHAsIHJlcG9ydFVpU3RhdHNdKTsKICByZXR1cm4gdHJhY2tFdmVudDsKfQoKZnVuY3Rpb24gdXNlVHJhY2tNZXRyaWMoX3JlZjMpIHsKICB2YXIgX3VzZUtpYmFuYSRzZXJ2aWNlczIsIF91c2VLaWJhbmEkc2VydmljZXMyJDsKCiAgdmFyIGFwcCA9IF9yZWYzLmFwcCwKICAgICAgbWV0cmljID0gX3JlZjMubWV0cmljLAogICAgICBfcmVmMyRtZXRyaWNUeXBlID0gX3JlZjMubWV0cmljVHlwZSwKICAgICAgbWV0cmljVHlwZSA9IF9yZWYzJG1ldHJpY1R5cGUgPT09IHZvaWQgMCA/IF9hbmFseXRpY3MuTUVUUklDX1RZUEUuQ09VTlQgOiBfcmVmMyRtZXRyaWNUeXBlLAogICAgICBfcmVmMyRkZWxheSA9IF9yZWYzLmRlbGF5LAogICAgICBkZWxheSA9IF9yZWYzJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkZGVsYXk7CiAgdmFyIGVmZmVjdERlcGVuZGVuY2llcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107CiAgdmFyIHJlcG9ydFVpU3RhdHMgPSAoX3VzZUtpYmFuYSRzZXJ2aWNlczIgPSAoMCwgX3B1YmxpYy51c2VLaWJhbmEpKCkuc2VydmljZXMpID09PSBudWxsIHx8IF91c2VLaWJhbmEkc2VydmljZXMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3VzZUtpYmFuYSRzZXJ2aWNlczIkID0gX3VzZUtpYmFuYSRzZXJ2aWNlczIudXNhZ2VDb2xsZWN0aW9uKSA9PT0gbnVsbCB8fCBfdXNlS2liYW5hJHNlcnZpY2VzMiQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91c2VLaWJhbmEkc2VydmljZXMyJC5yZXBvcnRVaVN0YXRzOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXJlcG9ydFVpU3RhdHMpIHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgY29uc29sZS5sb2coJ3VzYWdlQ29sbGVjdGlvbi5yZXBvcnRVaVN0YXRzIGlzIHVuYXZhaWxhYmxlLiBFbnN1cmUgdGhpcyBpcyBzZXR1cCB2aWEgPEtpYmFuYUNvbnRleHRQcm92aWRlciAvPi4nKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBkZWNvcmF0ZWRNZXRyaWMgPSBtZXRyaWM7CgogICAgICBpZiAoZGVsYXkgPiAwKSB7CiAgICAgICAgZGVjb3JhdGVkTWV0cmljICs9ICJfX2RlbGF5ZWRfIi5jb25jYXQoZGVsYXksICJtcyIpOwogICAgICB9CgogICAgICB2YXIgaWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gcmVwb3J0VWlTdGF0cyhhcHAsIG1ldHJpY1R5cGUsIGRlY29yYXRlZE1ldHJpYyk7CiAgICAgIH0sIE1hdGgubWF4KGRlbGF5LCAwKSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7CiAgICAgIH07CiAgICB9IC8vIHRoZSBkZXBlbmRlbmNpZXMgYXJlIG1hbmFnZWQgZXh0ZXJuYWxseQogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcwoKICB9LCBlZmZlY3REZXBlbmRlbmNpZXMpOwp9Ci8qKgogKiB1c2VUcmFja1BhZ2V2aWV3IGlzIGEgY29udmVuaWVuY2Ugd3JhcHBlciBmb3IgdHJhY2tpbmcgYSBwYWdldmlldwogKiBJdHMgbWV0cmljcyB3aWxsIGJlIGZvdW5kIGF0OgogKiBzdGFja19zdGF0cy5raWJhbmEucGx1Z2lucy51aV9tZXRyaWMue2FwcH0ucGFnZXZpZXdfX3twYXRofShfX2RlbGF5ZWRfe259bXMpPwogKi8KCgpmdW5jdGlvbiB1c2VUcmFja1BhZ2V2aWV3KF9yZWY0KSB7CiAgdmFyIGVmZmVjdERlcGVuZGVuY2llcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107CgogIHZhciBwYXRoID0gX3JlZjQucGF0aCwKICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNCwgWyJwYXRoIl0pOwoKICB1c2VUcmFja01ldHJpYyhfb2JqZWN0U3ByZWFkKHt9LCByZXN0LCB7CiAgICBtZXRyaWM6ICJwYWdldmlld19fIi5jb25jYXQocGF0aCkKICB9KSwgZWZmZWN0RGVwZW5kZW5jaWVzKTsKfQ=="},null]}