{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_timeseries/public/visualizations/views/timeseries/index.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_timeseries/public/visualizations/views/timeseries/index.js","mtime":1589249550066},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRpbWVTZXJpZXMgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiY2xhc3NuYW1lcyIpKTsKCnZhciBfY2hhcnRzID0gcmVxdWlyZSgiQGVsYXN0aWMvY2hhcnRzIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9nZXRfdGltZXpvbmUgPSByZXF1aXJlKCIuLi8uLi8uLi9saWIvZ2V0X3RpbWV6b25lIik7Cgp2YXIgX2FjdGl2ZV9jdXJzb3IgPSByZXF1aXJlKCIuLi8uLi9saWIvYWN0aXZlX2N1cnNvciIpOwoKdmFyIF9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uLy4uLy4uL3NlcnZpY2VzIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uL2NvbnN0YW50cyIpOwoKdmFyIF9hcmVhX2RlY29yYXRvciA9IHJlcXVpcmUoIi4vZGVjb3JhdG9ycy9hcmVhX2RlY29yYXRvciIpOwoKdmFyIF9iYXJfZGVjb3JhdG9yID0gcmVxdWlyZSgiLi9kZWNvcmF0b3JzL2Jhcl9kZWNvcmF0b3IiKTsKCnZhciBfc3RhY2tfZm9ybWF0ID0gcmVxdWlyZSgiLi91dGlscy9zdGFja19mb3JtYXQiKTsKCnZhciBfdGhlbWUgPSByZXF1aXJlKCIuL3V0aWxzL3RoZW1lIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCnZhciBnZW5lcmF0ZUFubm90YXRpb25EYXRhID0gZnVuY3Rpb24gZ2VuZXJhdGVBbm5vdGF0aW9uRGF0YSh2YWx1ZXMsIGZvcm1hdHRlcikgewogIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uIChfcmVmKSB7CiAgICB2YXIga2V5ID0gX3JlZi5rZXksCiAgICAgICAgZG9jcyA9IF9yZWYuZG9jczsKICAgIHJldHVybiB7CiAgICAgIGRhdGFWYWx1ZToga2V5LAogICAgICBkZXRhaWxzOiBkb2NzWzBdLAogICAgICBoZWFkZXI6IGZvcm1hdHRlcih7CiAgICAgICAgdmFsdWU6IGtleQogICAgICB9KQogICAgfTsKICB9KTsKfTsKCnZhciBkZWNvcmF0ZUZvcm1hdHRlciA9IGZ1bmN0aW9uIGRlY29yYXRlRm9ybWF0dGVyKGZvcm1hdHRlcikgewogIHJldHVybiBmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciB2YWx1ZSA9IF9yZWYyLnZhbHVlOwogICAgcmV0dXJuIGZvcm1hdHRlcih2YWx1ZSk7CiAgfTsKfTsKCnZhciBoYW5kbGVDdXJzb3JVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVDdXJzb3JVcGRhdGUoY3Vyc29yKSB7CiAgX2FjdGl2ZV9jdXJzb3IuZXZlbnRCdXMudHJpZ2dlcihfYWN0aXZlX2N1cnNvci5BQ1RJVkVfQ1VSU09SLCBjdXJzb3IpOwp9OwoKdmFyIFRpbWVTZXJpZXMgPSBmdW5jdGlvbiBUaW1lU2VyaWVzKF9yZWYzKSB7CiAgdmFyIGRhcmtNb2RlID0gX3JlZjMuZGFya01vZGUsCiAgICAgIGJhY2tncm91bmRDb2xvciA9IF9yZWYzLmJhY2tncm91bmRDb2xvciwKICAgICAgc2hvd0dyaWQgPSBfcmVmMy5zaG93R3JpZCwKICAgICAgbGVnZW5kID0gX3JlZjMubGVnZW5kLAogICAgICBsZWdlbmRQb3NpdGlvbiA9IF9yZWYzLmxlZ2VuZFBvc2l0aW9uLAogICAgICB4QXhpc0xhYmVsID0gX3JlZjMueEF4aXNMYWJlbCwKICAgICAgc2VyaWVzID0gX3JlZjMuc2VyaWVzLAogICAgICB5QXhpcyA9IF9yZWYzLnlBeGlzLAogICAgICBvbkJydXNoID0gX3JlZjMub25CcnVzaCwKICAgICAgeEF4aXNGb3JtYXR0ZXIgPSBfcmVmMy54QXhpc0Zvcm1hdHRlciwKICAgICAgYW5ub3RhdGlvbnMgPSBfcmVmMy5hbm5vdGF0aW9ucywKICAgICAgZW5hYmxlSGlzdG9ncmFtTW9kZSA9IF9yZWYzLmVuYWJsZUhpc3RvZ3JhbU1vZGU7CiAgdmFyIGNoYXJ0UmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKCk7CgogIHZhciB1cGRhdGVDdXJzb3IgPSBmdW5jdGlvbiB1cGRhdGVDdXJzb3IoXywgY3Vyc29yKSB7CiAgICBpZiAoY2hhcnRSZWYuY3VycmVudCkgewogICAgICBjaGFydFJlZi5jdXJyZW50LmRpc3BhdGNoRXh0ZXJuYWxQb2ludGVyRXZlbnQoY3Vyc29yKTsKICAgIH0KICB9OwoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgX2FjdGl2ZV9jdXJzb3IuZXZlbnRCdXMub24oX2FjdGl2ZV9jdXJzb3IuQUNUSVZFX0NVUlNPUiwgdXBkYXRlQ3Vyc29yKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBfYWN0aXZlX2N1cnNvci5ldmVudEJ1cy5vZmYoX2FjdGl2ZV9jdXJzb3IuQUNUSVZFX0NVUlNPUiwgdW5kZWZpbmVkLCB1cGRhdGVDdXJzb3IpOwogICAgfTsKICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgdmFyIHRvb2x0aXBGb3JtYXR0ZXIgPSBkZWNvcmF0ZUZvcm1hdHRlcih4QXhpc0Zvcm1hdHRlcik7CiAgdmFyIHVpU2V0dGluZ3MgPSAoMCwgX3NlcnZpY2VzLmdldFVJU2V0dGluZ3MpKCk7CiAgdmFyIHRpbWVab25lID0gKDAsIF9nZXRfdGltZXpvbmUuZ2V0VGltZXpvbmUpKHVpU2V0dGluZ3MpOwogIHZhciBoYXNCYXJDaGFydCA9IHNlcmllcy5zb21lKGZ1bmN0aW9uIChfcmVmNCkgewogICAgdmFyIGJhcnMgPSBfcmVmNC5iYXJzOwogICAgcmV0dXJuIGJhcnMuc2hvdzsKICB9KTsgLy8gY29tcHV0ZSB0aGUgdGhlbWUgYmFzZWQgb24gdGhlIGJnIGNvbG9yCgogIHZhciB0aGVtZSA9ICgwLCBfdGhlbWUuZ2V0VGhlbWUpKGRhcmtNb2RlLCBiYWNrZ3JvdW5kQ29sb3IpOyAvLyBhcHBseSBsZWdlbmQgc3R5bGUgY2hhbmdlIGlmIGJnQ29sb3IgaXMgY29uZmlndXJlZAoKICB2YXIgY2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgndHZiVmlzVGltZVNlcmllcycsICgwLCBfdGhlbWUuZ2V0Q2hhcnRDbGFzc2VzKShiYWNrZ3JvdW5kQ29sb3IpKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLkNoYXJ0LCB7CiAgICByZWY6IGNoYXJ0UmVmLAogICAgcmVuZGVyZXI6ICJjYW52YXMiLAogICAgY2xhc3NOYW1lOiBjbGFzc2VzCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLlNldHRpbmdzLCB7CiAgICBzaG93TGVnZW5kOiBsZWdlbmQsCiAgICBzaG93TGVnZW5kRXh0cmE6IHRydWUsCiAgICBsZWdlbmRQb3NpdGlvbjogbGVnZW5kUG9zaXRpb24sCiAgICBvbkJydXNoRW5kOiBvbkJydXNoLAogICAgYW5pbWF0ZURhdGE6IGZhbHNlLAogICAgb25Qb2ludGVyVXBkYXRlOiBoYW5kbGVDdXJzb3JVcGRhdGUsCiAgICB0aGVtZTogaGFzQmFyQ2hhcnQgPyB7fSA6IHsKICAgICAgY3Jvc3NoYWlyOiB7CiAgICAgICAgYmFuZDogewogICAgICAgICAgZmlsbDogJyNGMDAnCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgYmFzZVRoZW1lOiB0aGVtZSwKICAgIHRvb2x0aXA6IHsKICAgICAgc25hcDogdHJ1ZSwKICAgICAgdHlwZTogX2NoYXJ0cy5Ub29sdGlwVHlwZS5WZXJ0aWNhbEN1cnNvciwKICAgICAgaGVhZGVyRm9ybWF0dGVyOiB0b29sdGlwRm9ybWF0dGVyCiAgICB9CiAgfSksIGFubm90YXRpb25zLm1hcChmdW5jdGlvbiAoX3JlZjUpIHsKICAgIHZhciBpZCA9IF9yZWY1LmlkLAogICAgICAgIGRhdGEgPSBfcmVmNS5kYXRhLAogICAgICAgIGljb24gPSBfcmVmNS5pY29uLAogICAgICAgIGNvbG9yID0gX3JlZjUuY29sb3I7CiAgICB2YXIgZGF0YVZhbHVlcyA9IGdlbmVyYXRlQW5ub3RhdGlvbkRhdGEoZGF0YSwgdG9vbHRpcEZvcm1hdHRlcik7CiAgICB2YXIgc3R5bGUgPSB7CiAgICAgIGxpbmU6IHsKICAgICAgICBzdHJva2U6IGNvbG9yCiAgICAgIH0KICAgIH07CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLkxpbmVBbm5vdGF0aW9uLCB7CiAgICAgIGtleTogaWQsCiAgICAgIGlkOiBpZCwKICAgICAgZG9tYWluVHlwZTogX2NoYXJ0cy5Bbm5vdGF0aW9uRG9tYWluVHlwZXMuWERvbWFpbiwKICAgICAgZGF0YVZhbHVlczogZGF0YVZhbHVlcywKICAgICAgbWFya2VyOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgICAgIHR5cGU6IF9jb25zdGFudHMuSUNPTl9UWVBFU19NQVBbaWNvbl0gfHwgJ2FzdGVyaXNrJwogICAgICB9KSwKICAgICAgaGlkZUxpbmVzVG9vbHRpcHM6IHRydWUsCiAgICAgIHN0eWxlOiBzdHlsZQogICAgfSk7CiAgfSksIHNlcmllcy5tYXAoZnVuY3Rpb24gKF9yZWY2LCBzb3J0SW5kZXgpIHsKICAgIHZhciBpZCA9IF9yZWY2LmlkLAogICAgICAgIGxhYmVsID0gX3JlZjYubGFiZWwsCiAgICAgICAgYmFycyA9IF9yZWY2LmJhcnMsCiAgICAgICAgbGluZXMgPSBfcmVmNi5saW5lcywKICAgICAgICBkYXRhID0gX3JlZjYuZGF0YSwKICAgICAgICBoaWRlSW5MZWdlbmQgPSBfcmVmNi5oaWRlSW5MZWdlbmQsCiAgICAgICAgeFNjYWxlVHlwZSA9IF9yZWY2LnhTY2FsZVR5cGUsCiAgICAgICAgeVNjYWxlVHlwZSA9IF9yZWY2LnlTY2FsZVR5cGUsCiAgICAgICAgZ3JvdXBJZCA9IF9yZWY2Lmdyb3VwSWQsCiAgICAgICAgY29sb3IgPSBfcmVmNi5jb2xvciwKICAgICAgICBzdGFjayA9IF9yZWY2LnN0YWNrLAogICAgICAgIHBvaW50cyA9IF9yZWY2LnBvaW50cywKICAgICAgICB1c2VEZWZhdWx0R3JvdXBEb21haW4gPSBfcmVmNi51c2VEZWZhdWx0R3JvdXBEb21haW4sCiAgICAgICAgeTFBY2Nlc3NvckZvcm1hdCA9IF9yZWY2LnkxQWNjZXNzb3JGb3JtYXQsCiAgICAgICAgeTBBY2Nlc3NvckZvcm1hdCA9IF9yZWY2LnkwQWNjZXNzb3JGb3JtYXQ7CiAgICB2YXIgc3RhY2tBY2Nlc3NvcnMgPSAoMCwgX3N0YWNrX2Zvcm1hdC5nZXRTdGFja0FjY2Vzc29ycykoc3RhY2spOwogICAgdmFyIGlzUGVyY2VudGFnZSA9IHN0YWNrID09PSBfY29uc3RhbnRzLlNUQUNLRURfT1BUSU9OUy5QRVJDRU5UOwogICAgdmFyIGtleSA9ICIiLmNvbmNhdChpZCwgIi0iKS5jb25jYXQobGFiZWwpOwoKICAgIGlmIChiYXJzLnNob3cpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Jhcl9kZWNvcmF0b3IuQmFyU2VyaWVzRGVjb3JhdG9yLCB7CiAgICAgICAga2V5OiBrZXksCiAgICAgICAgc2VyaWVzSWQ6IGlkLAogICAgICAgIHNlcmllc0dyb3VwSWQ6IGdyb3VwSWQsCiAgICAgICAgbmFtZTogbGFiZWwudG9TdHJpbmcoKSwKICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgIGhpZGVJbkxlZ2VuZDogaGlkZUluTGVnZW5kLAogICAgICAgIGJhcnM6IGJhcnMsCiAgICAgICAgY29sb3I6IGNvbG9yLAogICAgICAgIHN0YWNrQWNjZXNzb3JzOiBzdGFja0FjY2Vzc29ycywKICAgICAgICBzdGFja0FzUGVyY2VudGFnZTogaXNQZXJjZW50YWdlLAogICAgICAgIHhTY2FsZVR5cGU6IHhTY2FsZVR5cGUsCiAgICAgICAgeVNjYWxlVHlwZTogeVNjYWxlVHlwZSwKICAgICAgICB0aW1lWm9uZTogdGltZVpvbmUsCiAgICAgICAgZW5hYmxlSGlzdG9ncmFtTW9kZTogZW5hYmxlSGlzdG9ncmFtTW9kZSwKICAgICAgICB1c2VEZWZhdWx0R3JvdXBEb21haW46IHVzZURlZmF1bHRHcm91cERvbWFpbiwKICAgICAgICBzb3J0SW5kZXg6IHNvcnRJbmRleCwKICAgICAgICB5MUFjY2Vzc29yRm9ybWF0OiB5MUFjY2Vzc29yRm9ybWF0LAogICAgICAgIHkwQWNjZXNzb3JGb3JtYXQ6IHkwQWNjZXNzb3JGb3JtYXQKICAgICAgfSk7CiAgICB9CgogICAgaWYgKGxpbmVzLnNob3cpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FyZWFfZGVjb3JhdG9yLkFyZWFTZXJpZXNEZWNvcmF0b3IsIHsKICAgICAgICBrZXk6IGtleSwKICAgICAgICBzZXJpZXNJZDogaWQsCiAgICAgICAgc2VyaWVzR3JvdXBJZDogZ3JvdXBJZCwKICAgICAgICBuYW1lOiBsYWJlbC50b1N0cmluZygpLAogICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgaGlkZUluTGVnZW5kOiBoaWRlSW5MZWdlbmQsCiAgICAgICAgbGluZXM6IGxpbmVzLAogICAgICAgIGNvbG9yOiBjb2xvciwKICAgICAgICBzdGFja0FjY2Vzc29yczogc3RhY2tBY2Nlc3NvcnMsCiAgICAgICAgc3RhY2tBc1BlcmNlbnRhZ2U6IGlzUGVyY2VudGFnZSwKICAgICAgICBwb2ludHM6IHBvaW50cywKICAgICAgICB4U2NhbGVUeXBlOiB4U2NhbGVUeXBlLAogICAgICAgIHlTY2FsZVR5cGU6IHlTY2FsZVR5cGUsCiAgICAgICAgdGltZVpvbmU6IHRpbWVab25lLAogICAgICAgIGVuYWJsZUhpc3RvZ3JhbU1vZGU6IGVuYWJsZUhpc3RvZ3JhbU1vZGUsCiAgICAgICAgdXNlRGVmYXVsdEdyb3VwRG9tYWluOiB1c2VEZWZhdWx0R3JvdXBEb21haW4sCiAgICAgICAgc29ydEluZGV4OiBzb3J0SW5kZXgsCiAgICAgICAgeTFBY2Nlc3NvckZvcm1hdDogeTFBY2Nlc3NvckZvcm1hdCwKICAgICAgICB5MEFjY2Vzc29yRm9ybWF0OiB5MEFjY2Vzc29yRm9ybWF0CiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0pLCB5QXhpcy5tYXAoZnVuY3Rpb24gKF9yZWY3KSB7CiAgICB2YXIgaWQgPSBfcmVmNy5pZCwKICAgICAgICBncm91cElkID0gX3JlZjcuZ3JvdXBJZCwKICAgICAgICBwb3NpdGlvbiA9IF9yZWY3LnBvc2l0aW9uLAogICAgICAgIHRpY2tGb3JtYXR0ZXIgPSBfcmVmNy50aWNrRm9ybWF0dGVyLAogICAgICAgIGRvbWFpbiA9IF9yZWY3LmRvbWFpbiwKICAgICAgICBoaWRlID0gX3JlZjcuaGlkZTsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaGFydHMuQXhpcywgewogICAgICBrZXk6IGdyb3VwSWQsCiAgICAgIGdyb3VwSWQ6IGdyb3VwSWQsCiAgICAgIGlkOiBpZCwKICAgICAgcG9zaXRpb246IHBvc2l0aW9uLAogICAgICBkb21haW46IGRvbWFpbiwKICAgICAgaGlkZTogaGlkZSwKICAgICAgc2hvd0dyaWRMaW5lczogc2hvd0dyaWQsCiAgICAgIGdyaWRMaW5lU3R5bGU6IF9jb25zdGFudHMuR1JJRF9MSU5FX0NPTkZJRywKICAgICAgdGlja0Zvcm1hdDogdGlja0Zvcm1hdHRlcgogICAgfSk7CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5BeGlzLCB7CiAgICBpZDogImJvdHRvbSIsCiAgICBwb3NpdGlvbjogX2NoYXJ0cy5Qb3NpdGlvbi5Cb3R0b20sCiAgICB0aXRsZTogeEF4aXNMYWJlbCwKICAgIHRpY2tGb3JtYXQ6IHhBeGlzRm9ybWF0dGVyLAogICAgc2hvd0dyaWRMaW5lczogc2hvd0dyaWQsCiAgICBncmlkTGluZVN0eWxlOiBfY29uc3RhbnRzLkdSSURfTElORV9DT05GSUcKICB9KSk7Cn07CgpleHBvcnRzLlRpbWVTZXJpZXMgPSBUaW1lU2VyaWVzOwpUaW1lU2VyaWVzLmRlZmF1bHRQcm9wcyA9IHsKICBzaG93R3JpZDogdHJ1ZSwKICBsZWdlbmQ6IHRydWUsCiAgbGVnZW5kUG9zaXRpb246ICdyaWdodCcKfTsKVGltZVNlcmllcy5wcm9wVHlwZXMgPSB7CiAgZGFya01vZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLAogIGJhY2tncm91bmRDb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBzaG93R3JpZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsCiAgbGVnZW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwKICBsZWdlbmRQb3NpdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICB4QXhpc0xhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHNlcmllczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LAogIHlBeGlzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXksCiAgb25CcnVzaDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsCiAgeEF4aXNGb3JtYXR0ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLAogIGFubm90YXRpb25zOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXksCiAgZW5hYmxlSGlzdG9ncmFtTW9kZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZAp9Ow=="},null]}