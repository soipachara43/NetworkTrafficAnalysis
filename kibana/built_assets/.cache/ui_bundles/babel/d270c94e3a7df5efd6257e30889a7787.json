{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/components/logging/log_minimap/search_marker.js","dependencies":[{"path":"x-pack/plugins/infra/public/components/logging/log_minimap/search_marker.js","mtime":1589249554245},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU2VhcmNoTWFya2VyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL29ic2VydmFiaWxpdHkvcHVibGljIik7Cgp2YXIgX3NlYXJjaF9tYXJrZXJfdG9vbHRpcCA9IHJlcXVpcmUoIi4vc2VhcmNoX21hcmtlcl90b29sdGlwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDQoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gIGZpbGw6ICIsICI7XG4iXSk7CgogIF90ZW1wbGF0ZU9iamVjdDQgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q0KCkgewogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDMoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gIGZpbGw6ICIsICI7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgIiwgIiBlYXNlLWluO1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgIiwgIjpob3ZlciAmIHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gIH1cbiJdKTsKCiAgX3RlbXBsYXRlT2JqZWN0MyA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDMoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgYW5pbWF0aW9uOiAiLCAiICIsICIgZWFzZS1pbiBib3RoO1xuIl0pOwoKICBfdGVtcGxhdGVPYmplY3QyID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gIGZyb20ge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgdG8ge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbiJdKTsKCiAgX3RlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkgewogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7CiAgaWYgKCFyYXcpIHsKICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7CiAgfQoKICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7CiAgICByYXc6IHsKICAgICAgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KQogICAgfQogIH0pKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgU2VhcmNoTWFya2VyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoU2VhcmNoTWFya2VyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFNlYXJjaE1hcmtlcigpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VhcmNoTWFya2VyKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNlYXJjaE1hcmtlcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBob3ZlcmVkUG9zaXRpb246IG51bGwKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImhhbmRsZUNsaWNrIiwgZnVuY3Rpb24gKGV2dCkgewogICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7CgogICAgICBfdGhpcy5wcm9wcy5qdW1wVG9UYXJnZXQoX3RoaXMucHJvcHMuYnVja2V0LnJlcHJlc2VudGF0aXZlS2V5KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImhhbmRsZU1vdXNlRW50ZXIiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBob3ZlcmVkUG9zaXRpb246IGV2dC5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGFuZGxlTW91c2VMZWF2ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGhvdmVyZWRQb3NpdGlvbjogbnVsbAogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhTZWFyY2hNYXJrZXIsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIGJ1Y2tldCA9IF90aGlzJHByb3BzLmJ1Y2tldCwKICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzLmhlaWdodCwKICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMud2lkdGg7CiAgICAgIHZhciBob3ZlcmVkUG9zaXRpb24gPSB0aGlzLnN0YXRlLmhvdmVyZWRQb3NpdGlvbjsKICAgICAgdmFyIGJ1bGdlID0gYnVja2V0LmVudHJpZXNDb3VudCA+IDEgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFNlYXJjaE1hcmtlckZvcmVncm91bmRSZWN0LCB7CiAgICAgICAgeDogIi0yIiwKICAgICAgICB5OiAiLTIiLAogICAgICAgIHdpZHRoOiAiNCIsCiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAyLAogICAgICAgIHJ4OiAiMiIsCiAgICAgICAgcnk6ICIyIgogICAgICB9KSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VhcmNoTWFya2VyRm9yZWdyb3VuZFJlY3QsIHsKICAgICAgICB4OiAiLTEiLAogICAgICAgIHk6ICIwIiwKICAgICAgICB3aWR0aDogIjIiLAogICAgICAgIGhlaWdodDogaGVpZ2h0CiAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFNlYXJjaE1hcmtlckZvcmVncm91bmRSZWN0LCB7CiAgICAgICAgeDogIi0yIiwKICAgICAgICB5OiBoZWlnaHQgLyAyIC0gMiwKICAgICAgICB3aWR0aDogIjQiLAogICAgICAgIGhlaWdodDogIjQiLAogICAgICAgIHJ4OiAiMiIsCiAgICAgICAgcnk6ICIyIgogICAgICB9KSk7CiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBob3ZlcmVkUG9zaXRpb24gPyBSZWFjdC5jcmVhdGVFbGVtZW50KF9zZWFyY2hfbWFya2VyX3Rvb2x0aXAuU2VhcmNoTWFya2VyVG9vbHRpcCwgewogICAgICAgIG1hcmtlclBvc2l0aW9uOiBob3ZlcmVkUG9zaXRpb24KICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suaW5mcmEubG9ncy5zZWFyY2hSZXN1bHRUb29sdGlwIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIntidWNrZXRDb3VudCwgcGx1cmFsLCBvbmUgeyMgaGlnaGxpZ2h0ZWQgZW50cnl9IG90aGVyIHsjIGhpZ2hsaWdodGVkIGVudHJpZXN9fSIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBidWNrZXRDb3VudDogYnVja2V0LmVudHJpZXNDb3VudAogICAgICAgIH0KICAgICAgfSkpIDogbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChTZWFyY2hNYXJrZXJHcm91cCwgewogICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssCiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsCiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUKICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChTZWFyY2hNYXJrZXJCYWNrZ3JvdW5kUmVjdCwgewogICAgICAgIHg6ICIwIiwKICAgICAgICB5OiAiMCIsCiAgICAgICAgd2lkdGg6IHdpZHRoLAogICAgICAgIGhlaWdodDogaGVpZ2h0CiAgICAgIH0pLCBidWxnZSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNlYXJjaE1hcmtlcjsKfShSZWFjdC5QdXJlQ29tcG9uZW50KTsKCmV4cG9ydHMuU2VhcmNoTWFya2VyID0gU2VhcmNoTWFya2VyOwp2YXIgZmFkZUluQW5pbWF0aW9uID0gKDAsIF9wdWJsaWMua2V5ZnJhbWVzKShfdGVtcGxhdGVPYmplY3QoKSk7Cgp2YXIgU2VhcmNoTWFya2VyR3JvdXAgPSBfcHVibGljLmV1aVN0eWxlZC5nKF90ZW1wbGF0ZU9iamVjdDIoKSwgZmFkZUluQW5pbWF0aW9uLCBmdW5jdGlvbiAocHJvcHMpIHsKICByZXR1cm4gcHJvcHMudGhlbWUuZXVpLmV1aUFuaW1TcGVlZEV4dHJhU2xvdzsKfSk7Cgp2YXIgU2VhcmNoTWFya2VyQmFja2dyb3VuZFJlY3QgPSBfcHVibGljLmV1aVN0eWxlZC5yZWN0KF90ZW1wbGF0ZU9iamVjdDMoKSwgZnVuY3Rpb24gKHByb3BzKSB7CiAgcmV0dXJuIHByb3BzLnRoZW1lLmV1aS5ldWlDb2xvckFjY2VudDsKfSwgZnVuY3Rpb24gKHByb3BzKSB7CiAgcmV0dXJuIHByb3BzLnRoZW1lLmV1aS5ldWlBbmltU3BlZWROb3JtYWw7Cn0sIFNlYXJjaE1hcmtlckdyb3VwKTsKCnZhciBTZWFyY2hNYXJrZXJGb3JlZ3JvdW5kUmVjdCA9IF9wdWJsaWMuZXVpU3R5bGVkLnJlY3QoX3RlbXBsYXRlT2JqZWN0NCgpLCBmdW5jdGlvbiAocHJvcHMpIHsKICByZXR1cm4gcHJvcHMudGhlbWUuZXVpLmV1aUNvbG9yQWNjZW50Owp9KTs="},null]}