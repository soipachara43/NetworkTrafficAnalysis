{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/visualizations/public/np_ready/public/vis_types/types_service.js","dependencies":[{"path":"src/legacy/core_plugins/visualizations/public/np_ready/public/vis_types/types_service.js","mtime":1589249550170},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlZpc1R5cGVBbGlhcyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF92aXNfdHlwZV9hbGlhc19yZWdpc3RyeS5WaXNUeXBlQWxpYXM7CiAgfQp9KTsKZXhwb3J0cy5UeXBlc1NlcnZpY2UgPSB2b2lkIDA7Cgp2YXIgX3Zpc190eXBlX2FsaWFzX3JlZ2lzdHJ5ID0gcmVxdWlyZSgiLi92aXNfdHlwZV9hbGlhc19yZWdpc3RyeSIpOwoKdmFyIF9iYXNlX3Zpc190eXBlID0gcmVxdWlyZSgiLi9iYXNlX3Zpc190eXBlIik7Cgp2YXIgX3JlYWN0X3Zpc190eXBlID0gcmVxdWlyZSgiLi9yZWFjdF92aXNfdHlwZSIpOwoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKioKICogVmlzIFR5cGVzIFNlcnZpY2UKICoKICogQGludGVybmFsCiAqLwoKCnZhciBUeXBlc1NlcnZpY2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUeXBlc1NlcnZpY2UoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHlwZXNTZXJ2aWNlKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInR5cGVzIiwge30pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAidW5yZWdpc3RlcmVkSGlkZGVuVHlwZXMiLCBbXSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVHlwZXNTZXJ2aWNlLCBbewogICAga2V5OiAic2V0dXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHJlZ2lzdGVyVmlzdWFsaXphdGlvbiA9IGZ1bmN0aW9uIHJlZ2lzdGVyVmlzdWFsaXphdGlvbihyZWdpc3RlckZuKSB7CiAgICAgICAgdmFyIHZpc0RlZmluaXRpb24gPSByZWdpc3RlckZuKCk7CgogICAgICAgIGlmIChfdGhpcy51bnJlZ2lzdGVyZWRIaWRkZW5UeXBlcy5pbmNsdWRlcyh2aXNEZWZpbml0aW9uLm5hbWUpKSB7CiAgICAgICAgICB2aXNEZWZpbml0aW9uLmhpZGRlbiA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXMudHlwZXNbdmlzRGVmaW5pdGlvbi5uYW1lXSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eXBlIGFscmVhZHkgZXhpc3RzIScpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMudHlwZXNbdmlzRGVmaW5pdGlvbi5uYW1lXSA9IHZpc0RlZmluaXRpb247CiAgICAgIH07CgogICAgICByZXR1cm4gewogICAgICAgIC8qKgogICAgICAgICAqIHJlZ2lzdGVycyBhIHZpc3VhbGl6YXRpb24gdHlwZQogICAgICAgICAqIEBwYXJhbSB7VmlzVHlwZX0gY29uZmlnIC0gdmlzdWFsaXphdGlvbiB0eXBlIGRlZmluaXRpb24KICAgICAgICAgKi8KICAgICAgICBjcmVhdGVCYXNlVmlzdWFsaXphdGlvbjogZnVuY3Rpb24gY3JlYXRlQmFzZVZpc3VhbGl6YXRpb24oY29uZmlnKSB7CiAgICAgICAgICB2YXIgdmlzID0gbmV3IF9iYXNlX3Zpc190eXBlLkJhc2VWaXNUeXBlKGNvbmZpZyk7CiAgICAgICAgICByZWdpc3RlclZpc3VhbGl6YXRpb24oZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdmlzOwogICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogcmVnaXN0ZXJzIGEgdmlzdWFsaXphdGlvbiB3aGljaCB1c2VzIHJlYWN0IGZvciByZW5kZXJpbmcKICAgICAgICAgKiBAcGFyYW0ge1Zpc1R5cGV9IGNvbmZpZyAtIHZpc3VhbGl6YXRpb24gdHlwZSBkZWZpbml0aW9uCiAgICAgICAgICovCiAgICAgICAgY3JlYXRlUmVhY3RWaXN1YWxpemF0aW9uOiBmdW5jdGlvbiBjcmVhdGVSZWFjdFZpc3VhbGl6YXRpb24oY29uZmlnKSB7CiAgICAgICAgICB2YXIgdmlzID0gbmV3IF9yZWFjdF92aXNfdHlwZS5SZWFjdFZpc1R5cGUoY29uZmlnKTsKICAgICAgICAgIHJlZ2lzdGVyVmlzdWFsaXphdGlvbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB2aXM7CiAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICAvKioKICAgICAgICAgKiByZWdpc3RlcnMgYSB2aXN1YWxpemF0aW9uIGFsaWFzCiAgICAgICAgICogYWxpYXMgaXMgYSB2aXN1YWxpemF0aW9uIHR5cGUgd2l0aG91dCBpbXBsZW1lbnRhdGlvbiwgaXQganVzdCByZWRpcmVjdHMgc29tZXdoZXJlIGluIGtpYmFuYQogICAgICAgICAqIEBwYXJhbSB7VmlzVHlwZUFsaWFzfSBjb25maWcgLSB2aXN1YWxpemF0aW9uIGFsaWFzIGRlZmluaXRpb24KICAgICAgICAgKi8KICAgICAgICByZWdpc3RlckFsaWFzOiBfdmlzX3R5cGVfYWxpYXNfcmVnaXN0cnkudmlzVHlwZUFsaWFzUmVnaXN0cnkuYWRkLAoKICAgICAgICAvKioKICAgICAgICAgKiBhbGxvd3MgdG8gaGlkZSBzcGVjaWZpYyB2aXN1YWxpemF0aW9uIHR5cGVzIGZyb20gY3JlYXRlIHZpc3VhbGl6YXRpb24gZGlhbG9nCiAgICAgICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdHlwZU5hbWVzIC0gbGlzdCBvZiB0eXBlIGlkcyB0byBoaWRlCiAgICAgICAgICovCiAgICAgICAgaGlkZVR5cGVzOiBmdW5jdGlvbiBoaWRlVHlwZXModHlwZU5hbWVzKSB7CiAgICAgICAgICB0eXBlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICBpZiAoX3RoaXMudHlwZXNbbmFtZV0pIHsKICAgICAgICAgICAgICBfdGhpcy50eXBlc1tuYW1lXS5oaWRkZW4gPSB0cnVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF90aGlzLnVucmVnaXN0ZXJlZEhpZGRlblR5cGVzLnB1c2gobmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHsKICAgICAgICAvKioKICAgICAgICAgKiByZXR1cm5zIHNwZWNpZmljIHZpc3VhbGl6YXRpb24gb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZAogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2aXN1YWxpemF0aW9uIC0gaWQgb2YgdmlzdWFsaXphdGlvbiB0byByZXR1cm4KICAgICAgICAgKi8KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCh2aXN1YWxpemF0aW9uKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnR5cGVzW3Zpc3VhbGl6YXRpb25dOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIHJldHVybnMgYWxsIHJlZ2lzdGVyZWQgdmlzdWFsaXphdGlvbiB0eXBlcwogICAgICAgICAqLwogICAgICAgIGFsbDogZnVuY3Rpb24gYWxsKCkgewogICAgICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QudmFsdWVzKF90aGlzMi50eXBlcykpOwogICAgICAgIH0sCgogICAgICAgIC8qKgogICAgICAgICAqIHJldHVybnMgYWxsIHJlZ2lzdGVyZWQgYWxpYXNlcwogICAgICAgICAqLwogICAgICAgIGdldEFsaWFzZXM6IF92aXNfdHlwZV9hbGlhc19yZWdpc3RyeS52aXNUeXBlQWxpYXNSZWdpc3RyeS5nZXQKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgey8vIG5vdGhpbmcgdG8gZG8gaGVyZSB5ZXQKICAgIH0KICB9XSk7CgogIHJldHVybiBUeXBlc1NlcnZpY2U7Cn0oKTsKLyoqIEBpbnRlcm5hbCAqLwoKLyoqIEBwdWJsaWMgc3RhdGljIGNvZGUgKi8KLy8gVE9ETyBvbmNlIGl0ZW1zIGFyZSBtb3ZlZCBmcm9tIHVpL3ZpcyBpbnRvIHRoaXMgc2VydmljZQoKCmV4cG9ydHMuVHlwZXNTZXJ2aWNlID0gVHlwZXNTZXJ2aWNlOw=="},null]}