{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_timeseries/public/request_handler.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_timeseries/public/request_handler.js","mtime":1589249550018},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLm1ldHJpY3NSZXF1ZXN0SGFuZGxlciA9IHZvaWQgMDsKCnZhciBfdmFsaWRhdGVfaW50ZXJ2YWwgPSByZXF1aXJlKCIuL2xpYi92YWxpZGF0ZV9pbnRlcnZhbCIpOwoKdmFyIF9nZXRfdGltZXpvbmUgPSByZXF1aXJlKCIuL2xpYi9nZXRfdGltZXpvbmUiKTsKCnZhciBfc2VydmljZXMgPSByZXF1aXJlKCIuL3NlcnZpY2VzIik7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKdmFyIG1ldHJpY3NSZXF1ZXN0SGFuZGxlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZjIpIHsKICAgIHZhciB1aVN0YXRlLCB0aW1lUmFuZ2UsIGZpbHRlcnMsIHF1ZXJ5LCB2aXNQYXJhbXMsIHNhdmVkT2JqZWN0SWQsIGNvbmZpZywgdGltZXpvbmUsIHVpU3RhdGVPYmosIHBhcnNlZFRpbWVSYW5nZSwgc2NhbGVkRGF0YUZvcm1hdCwgZGF0ZUZvcm1hdCwgbWF4QnVja2V0cywgcmVzcDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgdWlTdGF0ZSA9IF9yZWYyLnVpU3RhdGUsIHRpbWVSYW5nZSA9IF9yZWYyLnRpbWVSYW5nZSwgZmlsdGVycyA9IF9yZWYyLmZpbHRlcnMsIHF1ZXJ5ID0gX3JlZjIucXVlcnksIHZpc1BhcmFtcyA9IF9yZWYyLnZpc1BhcmFtcywgc2F2ZWRPYmplY3RJZCA9IF9yZWYyLnNhdmVkT2JqZWN0SWQ7CiAgICAgICAgICAgIGNvbmZpZyA9ICgwLCBfc2VydmljZXMuZ2V0VUlTZXR0aW5ncykoKTsKICAgICAgICAgICAgdGltZXpvbmUgPSAoMCwgX2dldF90aW1lem9uZS5nZXRUaW1lem9uZSkoY29uZmlnKTsKICAgICAgICAgICAgdWlTdGF0ZU9iaiA9IHVpU3RhdGUuZ2V0KHZpc1BhcmFtcy50eXBlLCB7fSk7CiAgICAgICAgICAgIHBhcnNlZFRpbWVSYW5nZSA9ICgwLCBfc2VydmljZXMuZ2V0RGF0YVN0YXJ0KSgpLnF1ZXJ5LnRpbWVmaWx0ZXIudGltZWZpbHRlci5jYWxjdWxhdGVCb3VuZHModGltZVJhbmdlKTsKICAgICAgICAgICAgc2NhbGVkRGF0YUZvcm1hdCA9IGNvbmZpZy5nZXQoJ2RhdGVGb3JtYXQ6c2NhbGVkJyk7CiAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBjb25maWcuZ2V0KCdkYXRlRm9ybWF0Jyk7CgogICAgICAgICAgICBpZiAoISh2aXNQYXJhbXMgJiYgdmlzUGFyYW1zLmlkICYmICF2aXNQYXJhbXMuaXNNb2RlbEludmFsaWQpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIwOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgbWF4QnVja2V0cyA9IGNvbmZpZy5nZXQoJ21ldHJpY3M6bWF4X2J1Y2tldHMnKTsKICAgICAgICAgICAgKDAsIF92YWxpZGF0ZV9pbnRlcnZhbC52YWxpZGF0ZUludGVydmFsKShwYXJzZWRUaW1lUmFuZ2UsIHZpc1BhcmFtcywgbWF4QnVja2V0cyk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgcmV0dXJuICgwLCBfc2VydmljZXMuZ2V0Q29yZVN0YXJ0KSgpLmh0dHAucG9zdCgnL2FwaS9tZXRyaWNzL3Zpcy9kYXRhJywgewogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgIHRpbWVyYW5nZTogX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lem9uZQogICAgICAgICAgICAgICAgfSwgcGFyc2VkVGltZVJhbmdlKSwKICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IGZpbHRlcnMsCiAgICAgICAgICAgICAgICBwYW5lbHM6IFt2aXNQYXJhbXNdLAogICAgICAgICAgICAgICAgc3RhdGU6IHVpU3RhdGVPYmosCiAgICAgICAgICAgICAgICBzYXZlZE9iamVjdElkOiBzYXZlZE9iamVjdElkIHx8ICd1bnNhdmVkJwogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICBkYXRlRm9ybWF0OiBkYXRlRm9ybWF0LAogICAgICAgICAgICAgIHNjYWxlZERhdGFGb3JtYXQ6IHNjYWxlZERhdGFGb3JtYXQsCiAgICAgICAgICAgICAgdGltZXpvbmU6IHRpbWV6b25lCiAgICAgICAgICAgIH0sIHJlc3ApKTsKCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTc7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oOCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0LnQwKSk7CgogICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZXNvbHZlKHt9KSk7CgogICAgICAgICAgY2FzZSAyMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzgsIDE3XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIG1ldHJpY3NSZXF1ZXN0SGFuZGxlcihfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CgpleHBvcnRzLm1ldHJpY3NSZXF1ZXN0SGFuZGxlciA9IG1ldHJpY3NSZXF1ZXN0SGFuZGxlcjs="},null]}