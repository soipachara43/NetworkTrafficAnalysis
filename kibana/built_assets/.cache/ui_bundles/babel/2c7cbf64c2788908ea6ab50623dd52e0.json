{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/embeddable/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_flyout.js","dependencies":[{"path":"src/plugins/embeddable/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_flyout.js","mtime":1589249550771},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}