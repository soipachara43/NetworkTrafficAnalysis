{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/beats_management/public/index.js","dependencies":[{"path":"x-pack/legacy/plugins/beats_management/public/index.js","mtime":1589249551695},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIGV1aVZhcnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJAZWxhc3RpYy9ldWkvZGlzdC9ldWlfdGhlbWVfbGlnaHQuanNvbiIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0Um91dGVyRG9tID0gcmVxdWlyZSgicmVhY3Qtcm91dGVyLWRvbSIpOwoKdmFyIF9zdHlsZWRDb21wb25lbnRzID0gcmVxdWlyZSgic3R5bGVkLWNvbXBvbmVudHMiKTsKCnZhciBfaTE4bjIgPSByZXF1aXJlKCJ1aS9pMThuIik7Cgp2YXIgX3Vuc3RhdGVkID0gcmVxdWlyZSgidW5zdGF0ZWQiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9iYWNrZ3JvdW5kID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL2xheW91dHMvYmFja2dyb3VuZCIpOwoKdmFyIF9icmVhZGNydW1iID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL25hdmlnYXRpb24vYnJlYWRjcnVtYiIpOwoKdmFyIF9icmVhZGNydW1iMiA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9uYXZpZ2F0aW9uL2JyZWFkY3J1bWIvYnJlYWRjcnVtYiIpOwoKdmFyIF9iZWF0cyA9IHJlcXVpcmUoIi4vY29udGFpbmVycy9iZWF0cyIpOwoKdmFyIF90YWdzID0gcmVxdWlyZSgiLi9jb250YWluZXJzL3RhZ3MiKTsKCnZhciBfa2liYW5hID0gcmVxdWlyZSgiLi9saWIvY29tcG9zZS9raWJhbmEiKTsKCnZhciBfcm91dGVyID0gcmVxdWlyZSgiLi9yb3V0ZXIiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gc3RhcnRBcHAoX3gpIHsKICByZXR1cm4gX3N0YXJ0QXBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zdGFydEFwcCgpIHsKICBfc3RhcnRBcHAgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShsaWJzKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGxpYnMuZnJhbWV3b3JrLnJlbmRlclVJQXRQYXRoKF9jb25zdGFudHMuQkFTRV9QQVRILCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZWRDb21wb25lbnRzLlRoZW1lUHJvdmlkZXIsIHsKICAgICAgICAgICAgICB0aGVtZTogewogICAgICAgICAgICAgICAgZXVpOiBldWlWYXJzCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pMThuMi5JMThuQ29udGV4dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXJEb20uSGFzaFJvdXRlciwgewogICAgICAgICAgICAgIGJhc2VuYW1lOiAiL21hbmFnZW1lbnQvYmVhdHNfbWFuYWdlbWVudCIKICAgICAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdW5zdGF0ZWQuUHJvdmlkZXIsIHsKICAgICAgICAgICAgICBpbmplY3Q6IFtuZXcgX2JlYXRzLkJlYXRzQ29udGFpbmVyKGxpYnMpLCBuZXcgX3RhZ3MuVGFnc0NvbnRhaW5lcihsaWJzKV0KICAgICAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYnJlYWRjcnVtYi5CcmVhZGNydW1iUHJvdmlkZXIsIHsKICAgICAgICAgICAgICB1c2VHbG9iYWxCcmVhZGNydW1iczogbGlicy5mcmFtZXdvcmsudmVyc2lvbkdyZWF0ZXJUaGVuKCc2LjcuMCcpCiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3Vuc3RhdGVkLlN1YnNjcmliZSwgewogICAgICAgICAgICAgIHRvOiBbX2JlYXRzLkJlYXRzQ29udGFpbmVyLCBfdGFncy5UYWdzQ29udGFpbmVyXQogICAgICAgICAgICB9LCBmdW5jdGlvbiAoYmVhdHMsIHRhZ3MpIHsKICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYmFja2dyb3VuZC5CYWNrZ3JvdW5kLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9icmVhZGNydW1iMi5CcmVhZGNydW1iLCB7CiAgICAgICAgICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmJlYXRzTWFuYWdlbWVudC5tYW5hZ2VtZW50LmJyZWFkY3J1bWInLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWFuYWdlbWVudCcKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JvdXRlci5BcHBSb3V0ZXIsIHsKICAgICAgICAgICAgICAgIGxpYnM6IGxpYnMsCiAgICAgICAgICAgICAgICBiZWF0c0NvbnRhaW5lcjogYmVhdHMsCiAgICAgICAgICAgICAgICB0YWdzQ29udGFpbmVyOiB0YWdzCiAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9KSkpKSkpLCBsaWJzLmZyYW1ld29yay52ZXJzaW9uR3JlYXRlclRoZW4oJzYuNy4wJykgPyAnbWFuYWdlbWVudCcgOiAnc2VsZicpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGxpYnMuZnJhbWV3b3JrLndhaXRVbnRpbEZyYW1ld29ya1JlYWR5KCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBpZiAobGlicy5mcmFtZXdvcmsubGljZW5zZUlzQXRMZWFzdCgnc3RhbmRhcmQnKSkgewogICAgICAgICAgICAgIGxpYnMuZnJhbWV3b3JrLnJlZ2lzdGVyTWFuYWdlbWVudFNlY3Rpb24oewogICAgICAgICAgICAgICAgaWQ6ICdiZWF0cycsCiAgICAgICAgICAgICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYmVhdHNNYW5hZ2VtZW50LmNlbnRyYWxNYW5hZ2VtZW50U2VjdGlvbkxhYmVsJywgewogICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0JlYXRzJwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBpY29uTmFtZTogJ2xvZ29CZWF0cycKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBsaWJzLmZyYW1ld29yay5yZWdpc3Rlck1hbmFnZW1lbnRVSSh7CiAgICAgICAgICAgICAgICBzZWN0aW9uSWQ6ICdiZWF0cycsCiAgICAgICAgICAgICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYmVhdHNNYW5hZ2VtZW50LmNlbnRyYWxNYW5hZ2VtZW50TGlua0xhYmVsJywgewogICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0NlbnRyYWwgTWFuYWdlbWVudCcKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgYmFzZVBhdGg6IF9jb25zdGFudHMuQkFTRV9QQVRICiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfc3RhcnRBcHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKc3RhcnRBcHAoKDAsIF9raWJhbmEuY29tcG9zZSkoKSk7"},null]}