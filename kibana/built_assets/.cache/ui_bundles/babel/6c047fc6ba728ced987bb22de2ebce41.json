{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/state/selectors/workpad.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/state/selectors/workpad.js","mtime":1589249552083},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZ2V0V29ya3BhZCA9IGdldFdvcmtwYWQ7CmV4cG9ydHMuZ2V0RnVsbFdvcmtwYWRQZXJzaXN0ZWQgPSBnZXRGdWxsV29ya3BhZFBlcnNpc3RlZDsKZXhwb3J0cy5nZXRXb3JrcGFkUGVyc2lzdGVkID0gZ2V0V29ya3BhZFBlcnNpc3RlZDsKZXhwb3J0cy5nZXRXb3JrcGFkSW5mbyA9IGdldFdvcmtwYWRJbmZvOwpleHBvcnRzLmlzV3JpdGVhYmxlID0gaXNXcml0ZWFibGU7CmV4cG9ydHMuZ2V0U2VsZWN0ZWRQYWdlSW5kZXggPSBnZXRTZWxlY3RlZFBhZ2VJbmRleDsKZXhwb3J0cy5nZXRTZWxlY3RlZFBhZ2UgPSBnZXRTZWxlY3RlZFBhZ2U7CmV4cG9ydHMuZ2V0UGFnZXMgPSBnZXRQYWdlczsKZXhwb3J0cy5nZXRQYWdlQnlJZCA9IGdldFBhZ2VCeUlkOwpleHBvcnRzLmdldFBhZ2VJbmRleEJ5SWQgPSBnZXRQYWdlSW5kZXhCeUlkOwpleHBvcnRzLmdldFdvcmtwYWROYW1lID0gZ2V0V29ya3BhZE5hbWU7CmV4cG9ydHMuZ2V0V29ya3BhZEhlaWdodCA9IGdldFdvcmtwYWRIZWlnaHQ7CmV4cG9ydHMuZ2V0V29ya3BhZFdpZHRoID0gZ2V0V29ya3BhZFdpZHRoOwpleHBvcnRzLmdldFdvcmtwYWRCb3VuZGluZ0JveCA9IGdldFdvcmtwYWRCb3VuZGluZ0JveDsKZXhwb3J0cy5nZXRXb3JrcGFkQ29sb3JzID0gZ2V0V29ya3BhZENvbG9yczsKZXhwb3J0cy5nZXRBbGxFbGVtZW50cyA9IGdldEFsbEVsZW1lbnRzOwpleHBvcnRzLmdldEVsZW1lbnRDb3VudHMgPSBnZXRFbGVtZW50Q291bnRzOwpleHBvcnRzLmdldEVsZW1lbnRTdGF0cyA9IGdldEVsZW1lbnRTdGF0czsKZXhwb3J0cy5nZXRHbG9iYWxGaWx0ZXJzID0gZ2V0R2xvYmFsRmlsdGVyczsKZXhwb3J0cy5nZXRHbG9iYWxGaWx0ZXJHcm91cHMgPSBnZXRHbG9iYWxGaWx0ZXJHcm91cHM7CmV4cG9ydHMuZ2V0U2VsZWN0ZWRUb3BsZXZlbE5vZGVzID0gZ2V0U2VsZWN0ZWRUb3BsZXZlbE5vZGVzOwpleHBvcnRzLmdldFNlbGVjdGVkRWxlbWVudElkID0gZ2V0U2VsZWN0ZWRFbGVtZW50SWQ7CmV4cG9ydHMuZ2V0U2VsZWN0ZWRFbGVtZW50ID0gZ2V0U2VsZWN0ZWRFbGVtZW50OwpleHBvcnRzLmdldEVsZW1lbnRzID0gZ2V0RWxlbWVudHM7CmV4cG9ydHMuZ2V0Tm9kZXNGb3JQYWdlID0gZ2V0Tm9kZXNGb3JQYWdlOwpleHBvcnRzLmdldE5vZGVzID0gZ2V0Tm9kZXM7CmV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBnZXRFbGVtZW50QnlJZDsKZXhwb3J0cy5nZXROb2RlQnlJZCA9IGdldE5vZGVCeUlkOwpleHBvcnRzLmdldFJlc29sdmVkQXJncyA9IGdldFJlc29sdmVkQXJnczsKZXhwb3J0cy5nZXRTZWxlY3RlZFJlc29sdmVkQXJncyA9IGdldFNlbGVjdGVkUmVzb2x2ZWRBcmdzOwpleHBvcnRzLmdldENvbnRleHRGb3JJbmRleCA9IGdldENvbnRleHRGb3JJbmRleDsKZXhwb3J0cy5nZXRSZWZyZXNoSW50ZXJ2YWwgPSBnZXRSZWZyZXNoSW50ZXJ2YWw7CmV4cG9ydHMuZ2V0QXV0b3BsYXkgPSBnZXRBdXRvcGxheTsKZXhwb3J0cy5nZXRSZW5kZXJlZFdvcmtwYWQgPSBnZXRSZW5kZXJlZFdvcmtwYWQ7CmV4cG9ydHMuZ2V0UmVuZGVyZWRXb3JrcGFkRXhwcmVzc2lvbnMgPSBnZXRSZW5kZXJlZFdvcmtwYWRFeHByZXNzaW9uczsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2NvbW1vbiA9IHJlcXVpcmUoIkBrYm4vaW50ZXJwcmV0ZXIvY29tbW9uIik7Cgp2YXIgX21vZGlmeV9wYXRoID0gcmVxdWlyZSgiLi4vLi4vbGliL21vZGlmeV9wYXRoIik7Cgp2YXIgX2Fzc2V0cyA9IHJlcXVpcmUoIi4vYXNzZXRzIik7CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwoKICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7CgogIHZhciBrZXksIGk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgewogICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOwogICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOwogICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwogIHZhciB0YXJnZXQgPSB7fTsKICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7CiAgdmFyIGtleSwgaTsKCiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsKICAgIGtleSA9IHNvdXJjZUtleXNbaV07CiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgd29ya3BhZFJvb3QgPSAncGVyc2lzdGVudC53b3JrcGFkJzsKCnZhciBhcHBlbmRBc3QgPSBmdW5jdGlvbiBhcHBlbmRBc3QoZWxlbWVudCkgewogIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBlbGVtZW50LCB7CiAgICBhc3Q6ICgwLCBfY29tbW9uLnNhZmVFbGVtZW50RnJvbUV4cHJlc3Npb24pKGVsZW1lbnQuZXhwcmVzc2lvbikKICB9KTsKfTsgLy8gd29ya3BhZCBnZXR0ZXJzCgoKZnVuY3Rpb24gZ2V0V29ya3BhZChzdGF0ZSkgewogIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKHN0YXRlLCB3b3JrcGFkUm9vdCk7Cn0gLy8gc2hvdWxkIHdlIHNwbGl0IGB3b3JrcGFkLmpzYCB0byBlZy4gYHdvcmtwYWQuanNgIChmdWxsKSBhbmQgYHBlcnNpc3RlbnRXb3JrcGFkU3RydWN0dXJlLmpzYCAocGVyc2lzdGVudC53b3JrcGFkKT8KLy8gaG93IGNhbiB3ZSBiZXR0ZXIgZGlzYW1iaWd1YXRlIHRoZSB0d28/IG5vdyBib3RoIHRoZSBlbnRpcmUgc3RhdGUgYW5kIGBwZXJzaXN0ZW50LndvcmtwYWRgIGFyZSBpbmZvcm1hbGx5IGNhbGxlZCB3b3JrcGFkCgoKZnVuY3Rpb24gZ2V0RnVsbFdvcmtwYWRQZXJzaXN0ZWQoc3RhdGUpIHsKICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgZ2V0V29ya3BhZChzdGF0ZSksIHsKICAgIGFzc2V0czogKDAsIF9hc3NldHMuZ2V0QXNzZXRzKShzdGF0ZSkKICB9KTsKfQoKZnVuY3Rpb24gZ2V0V29ya3BhZFBlcnNpc3RlZChzdGF0ZSkgewogIHJldHVybiBnZXRXb3JrcGFkKHN0YXRlKTsKfQoKZnVuY3Rpb24gZ2V0V29ya3BhZEluZm8oc3RhdGUpIHsKICByZXR1cm4gKDAsIF9sb2Rhc2gub21pdCkoZ2V0V29ya3BhZChzdGF0ZSksIFsncGFnZXMnXSk7Cn0KCmZ1bmN0aW9uIGlzV3JpdGVhYmxlKHN0YXRlKSB7CiAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoc3RhdGUsICgwLCBfbW9kaWZ5X3BhdGguYXBwZW5kKSh3b3JrcGFkUm9vdCwgJ2lzV3JpdGVhYmxlJyksIHRydWUpOwp9IC8vIHBhZ2UgZ2V0dGVycwoKCmZ1bmN0aW9uIGdldFNlbGVjdGVkUGFnZUluZGV4KHN0YXRlKSB7CiAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoc3RhdGUsICgwLCBfbW9kaWZ5X3BhdGguYXBwZW5kKSh3b3JrcGFkUm9vdCwgJ3BhZ2UnKSk7Cn0KCmZ1bmN0aW9uIGdldFNlbGVjdGVkUGFnZShzdGF0ZSkgewogIHZhciBwYWdlSW5kZXggPSBnZXRTZWxlY3RlZFBhZ2VJbmRleChzdGF0ZSk7CiAgdmFyIHBhZ2VzID0gZ2V0UGFnZXMoc3RhdGUpOwogIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKHBhZ2VzLCAiWyIuY29uY2F0KHBhZ2VJbmRleCwgIl0uaWQiKSk7Cn0KCmZ1bmN0aW9uIGdldFBhZ2VzKHN0YXRlKSB7CiAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoc3RhdGUsICgwLCBfbW9kaWZ5X3BhdGguYXBwZW5kKSh3b3JrcGFkUm9vdCwgJ3BhZ2VzJyksIFtdKTsKfQoKZnVuY3Rpb24gZ2V0UGFnZUJ5SWQoc3RhdGUsIGlkKSB7CiAgdmFyIHBhZ2VzID0gZ2V0UGFnZXMoc3RhdGUpOwogIHJldHVybiBwYWdlcy5maW5kKGZ1bmN0aW9uIChwYWdlKSB7CiAgICByZXR1cm4gcGFnZS5pZCA9PT0gaWQ7CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldFBhZ2VJbmRleEJ5SWQoc3RhdGUsIGlkKSB7CiAgdmFyIHBhZ2VzID0gZ2V0UGFnZXMoc3RhdGUpOwogIHJldHVybiBwYWdlcy5maW5kSW5kZXgoZnVuY3Rpb24gKHBhZ2UpIHsKICAgIHJldHVybiBwYWdlLmlkID09PSBpZDsKICB9KTsKfQoKZnVuY3Rpb24gZ2V0V29ya3BhZE5hbWUoc3RhdGUpIHsKICByZXR1cm4gKDAsIF9sb2Rhc2guZ2V0KShzdGF0ZSwgKDAsIF9tb2RpZnlfcGF0aC5hcHBlbmQpKHdvcmtwYWRSb290LCAnbmFtZScpKTsKfQoKZnVuY3Rpb24gZ2V0V29ya3BhZEhlaWdodChzdGF0ZSkgewogIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKHN0YXRlLCAoMCwgX21vZGlmeV9wYXRoLmFwcGVuZCkod29ya3BhZFJvb3QsICdoZWlnaHQnKSk7Cn0KCmZ1bmN0aW9uIGdldFdvcmtwYWRXaWR0aChzdGF0ZSkgewogIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKHN0YXRlLCAoMCwgX21vZGlmeV9wYXRoLmFwcGVuZCkod29ya3BhZFJvb3QsICd3aWR0aCcpKTsKfQoKZnVuY3Rpb24gZ2V0V29ya3BhZEJvdW5kaW5nQm94KHN0YXRlKSB7CiAgcmV0dXJuIGdldFBhZ2VzKHN0YXRlKS5yZWR1Y2UoZnVuY3Rpb24gKGJvdW5kaW5nQm94LCBwYWdlKSB7CiAgICBwYWdlLmVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIHBvc2l0aW9uID0gX3JlZi5wb3NpdGlvbjsKICAgICAgdmFyIGxlZnQgPSBwb3NpdGlvbi5sZWZ0LAogICAgICAgICAgdG9wID0gcG9zaXRpb24udG9wLAogICAgICAgICAgd2lkdGggPSBwb3NpdGlvbi53aWR0aCwKICAgICAgICAgIGhlaWdodCA9IHBvc2l0aW9uLmhlaWdodDsKICAgICAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoOwogICAgICB2YXIgYm90dG9tID0gdG9wICsgaGVpZ2h0OwoKICAgICAgaWYgKGxlZnQgPCBib3VuZGluZ0JveC5sZWZ0KSB7CiAgICAgICAgYm91bmRpbmdCb3gubGVmdCA9IGxlZnQ7CiAgICAgIH0KCiAgICAgIGlmICh0b3AgPCBib3VuZGluZ0JveC50b3ApIHsKICAgICAgICBib3VuZGluZ0JveC50b3AgPSB0b3A7CiAgICAgIH0KCiAgICAgIGlmIChyaWdodCA+IGJvdW5kaW5nQm94LnJpZ2h0KSB7CiAgICAgICAgYm91bmRpbmdCb3gucmlnaHQgPSByaWdodDsKICAgICAgfQoKICAgICAgaWYgKGJvdHRvbSA+IGJvdW5kaW5nQm94LmJvdHRvbSkgewogICAgICAgIGJvdW5kaW5nQm94LmJvdHRvbSA9IGJvdHRvbTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gYm91bmRpbmdCb3g7CiAgfSwgewogICAgbGVmdDogMCwKICAgIHJpZ2h0OiBnZXRXb3JrcGFkV2lkdGgoc3RhdGUpLAogICAgdG9wOiAwLAogICAgYm90dG9tOiBnZXRXb3JrcGFkSGVpZ2h0KHN0YXRlKQogIH0pOwp9CgpmdW5jdGlvbiBnZXRXb3JrcGFkQ29sb3JzKHN0YXRlKSB7CiAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoc3RhdGUsICgwLCBfbW9kaWZ5X3BhdGguYXBwZW5kKSh3b3JrcGFkUm9vdCwgJ2NvbG9ycycpKTsKfQoKZnVuY3Rpb24gZ2V0QWxsRWxlbWVudHMoc3RhdGUpIHsKICByZXR1cm4gZ2V0UGFnZXMoc3RhdGUpLnJlZHVjZShmdW5jdGlvbiAoZWxlbWVudHMsIHBhZ2UpIHsKICAgIHJldHVybiBlbGVtZW50cy5jb25jYXQocGFnZS5lbGVtZW50cyk7CiAgfSwgW10pOwp9CgpmdW5jdGlvbiBnZXRFbGVtZW50Q291bnRzKHN0YXRlKSB7CiAgdmFyIHJlc29sdmVkQXJncyA9IHN0YXRlLnRyYW5zaWVudC5yZXNvbHZlZEFyZ3M7CiAgdmFyIHJlc3VsdHMgPSB7CiAgICByZWFkeTogMCwKICAgIHBlbmRpbmc6IDAsCiAgICBlcnJvcjogMAogIH07CiAgT2JqZWN0LnZhbHVlcyhyZXNvbHZlZEFyZ3MpLmZpbHRlcihmdW5jdGlvbiAobWF5YmVSZXNvbHZlZEFyZykgewogICAgcmV0dXJuIG1heWJlUmVzb2x2ZWRBcmcgIT09IHVuZGVmaW5lZDsKICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChyZXNvbHZlZEFyZykgewogICAgdmFyIGV4cHJlc3Npb25SZW5kZXJhYmxlID0gcmVzb2x2ZWRBcmcuZXhwcmVzc2lvblJlbmRlcmFibGU7CgogICAgaWYgKCFleHByZXNzaW9uUmVuZGVyYWJsZSkgewogICAgICByZXN1bHRzLnBlbmRpbmcrKzsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciB2YWx1ZSA9IGV4cHJlc3Npb25SZW5kZXJhYmxlLnZhbHVlLAogICAgICAgIHJlYWR5U3RhdGUgPSBleHByZXNzaW9uUmVuZGVyYWJsZS5zdGF0ZTsKCiAgICBpZiAodmFsdWUgJiYgdmFsdWUuYXMgPT09ICdlcnJvcicpIHsKICAgICAgcmVzdWx0cy5lcnJvcisrOwogICAgfSBlbHNlIGlmIChyZWFkeVN0YXRlID09PSAncmVhZHknKSB7CiAgICAgIHJlc3VsdHMucmVhZHkrKzsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdHMucGVuZGluZysrOwogICAgfQogIH0pOwogIHJldHVybiByZXN1bHRzOwp9CgpmdW5jdGlvbiBnZXRFbGVtZW50U3RhdHMoc3RhdGUpIHsKICByZXR1cm4gKDAsIF9sb2Rhc2guZ2V0KShzdGF0ZSwgJ3RyYW5zaWVudC5lbGVtZW50U3RhdHMnKTsKfQoKZnVuY3Rpb24gZ2V0R2xvYmFsRmlsdGVycyhzdGF0ZSkgewogIHJldHVybiBnZXRBbGxFbGVtZW50cyhzdGF0ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVsKSB7CiAgICAvLyBjaGVjayB0aGF0IGEgZmlsdGVyIGlzIGRlZmluZWQKICAgIGlmIChlbC5maWx0ZXIgIT0gbnVsbCAmJiBlbC5maWx0ZXIubGVuZ3RoKSB7CiAgICAgIHJldHVybiBhY2MuY29uY2F0KGVsLmZpbHRlcik7CiAgICB9CgogICAgcmV0dXJuIGFjYzsKICB9LCBbXSk7Cn0KCmZ1bmN0aW9uIGJ1aWxkR3JvdXBWYWx1ZXMoYXJncywgb25WYWx1ZSkgewogIHZhciBhcmdOYW1lcyA9IE9iamVjdC5rZXlzKGFyZ3MpOwogIHJldHVybiBhcmdOYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlcywgYXJnTmFtZSkgewogICAgLy8gd2Ugb25seSBjYXJlIGFib3V0IGdyb3VwIHZhbHVlcwogICAgaWYgKGFyZ05hbWUgIT09ICdfJyAmJiBhcmdOYW1lICE9PSAnZ3JvdXAnKSB7CiAgICAgIHJldHVybiB2YWx1ZXM7CiAgICB9CgogICAgcmV0dXJuIGFyZ3NbYXJnTmFtZV0ucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFyZ1ZhbHVlKSB7CiAgICAgIC8vIGRlbGVnYXRlIHRvIHBhc3NlZCBmdW5jdGlvbiB0byBidXlsZCBsaXN0CiAgICAgIHJldHVybiBhY2MuY29uY2F0KG9uVmFsdWUoYXJnVmFsdWUsIGFyZ05hbWUsIGFyZ3MpIHx8IFtdKTsKICAgIH0sIHZhbHVlcyk7CiAgfSwgW10pOwp9CgpmdW5jdGlvbiBleHRyYWN0RmlsdGVyR3JvdXBzKGFzdCkgewogIGlmIChhc3QudHlwZSAhPT0gJ2V4cHJlc3Npb24nKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FTVCBtdXN0IGJlIGFuIGV4cHJlc3Npb24nKTsKICB9CgogIHJldHVybiBhc3QuY2hhaW4ucmVkdWNlKGZ1bmN0aW9uIChncm91cHMsIGl0ZW0pIHsKICAgIC8vIFRPRE86IHdlIGFsd2F5cyBnZXQgYSBmdW5jdGlvbiBoZXJlLCByaWdodD8KICAgIHZhciBmbiA9IGl0ZW0uZnVuY3Rpb24sCiAgICAgICAgYXJncyA9IGl0ZW0uYXJndW1lbnRzOwoKICAgIGlmIChmbiA9PT0gJ2ZpbHRlcnMnKSB7CiAgICAgIC8vIHdlIGhhdmUgYSBmaWx0ZXIgZnVuY3Rpb24sIGV4dHJhY3QgZ3JvdXBzIGZyb20gYXJncwogICAgICByZXR1cm4gZ3JvdXBzLmNvbmNhdChidWlsZEdyb3VwVmFsdWVzKGFyZ3MsIGZ1bmN0aW9uIChhcmdWYWx1ZSkgewogICAgICAgIC8vIHRoaXMgb25seSBoYW5kbGVzIHNpbXBsZSB2YWx1ZXMKICAgICAgICBpZiAoYXJnVmFsdWUgIT09IG51bGwgJiYgX3R5cGVvZihhcmdWYWx1ZSkgIT09ICdvYmplY3QnKSB7CiAgICAgICAgICByZXR1cm4gYXJnVmFsdWU7CiAgICAgICAgfQogICAgICB9KSk7CiAgICB9IGVsc2UgewogICAgICAvLyBkaWcgaW50byBvdGhlciBmdW5jdGlvbnMsIGxvb2tpbmcgZm9yIGZpbHRlcnMgZnVuY3Rpb24KICAgICAgcmV0dXJuIGdyb3Vwcy5jb25jYXQoYnVpbGRHcm91cFZhbHVlcyhhcmdzLCBmdW5jdGlvbiAoYXJnVmFsdWUpIHsKICAgICAgICAvLyByZWN1cnNpdmVseSBjb2xsZWN0IGZpbHRlciBncm91cHMKICAgICAgICBpZiAoYXJnVmFsdWUgIT09IG51bGwgJiYgX3R5cGVvZihhcmdWYWx1ZSkgPT09ICdvYmplY3QnICYmIGFyZ1ZhbHVlLnR5cGUgPT09ICdleHByZXNzaW9uJykgewogICAgICAgICAgcmV0dXJuIGV4dHJhY3RGaWx0ZXJHcm91cHMoYXJnVmFsdWUpOwogICAgICAgIH0KICAgICAgfSkpOwogICAgfQogIH0sIFtdKTsKfQoKZnVuY3Rpb24gZ2V0R2xvYmFsRmlsdGVyR3JvdXBzKHN0YXRlKSB7CiAgdmFyIGZpbHRlckdyb3VwcyA9IGdldEFsbEVsZW1lbnRzKHN0YXRlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZWwpIHsKICAgIC8vIGNoZWNrIHRoYXQgYSBmaWx0ZXIgaXMgZGVmaW5lZAogICAgaWYgKGVsLmZpbHRlciAhPSBudWxsICYmIGVsLmZpbHRlci5sZW5ndGgpIHsKICAgICAgLy8gZXh0cmFjdCB0aGUgZmlsdGVyIGdyb3VwCiAgICAgIHZhciBmaWx0ZXJBc3QgPSAoMCwgX2NvbW1vbi5mcm9tRXhwcmVzc2lvbikoZWwuZmlsdGVyKTsKICAgICAgdmFyIGZpbHRlckdyb3VwID0gKDAsIF9sb2Rhc2guZ2V0KShmaWx0ZXJBc3QsICJjaGFpblswXS5hcmd1bWVudHMuZmlsdGVyR3JvdXBbMF0iKTsgLy8gYWRkIGFueSBuZXcgZ3JvdXAgdG8gdGhlIGFycmF5CgogICAgICBpZiAoZmlsdGVyR3JvdXAgJiYgZmlsdGVyR3JvdXAgIT09ICcnICYmICFhY2MuaW5jbHVkZXMoU3RyaW5nKGZpbHRlckdyb3VwKSkpIHsKICAgICAgICBhY2MucHVzaChTdHJpbmcoZmlsdGVyR3JvdXApKTsKICAgICAgfQogICAgfSAvLyBleHRyYWN0IGdyb3VwcyBmcm9tIGFsbCBleHByZXNzaW9ucyB0aGF0IHVzZSBmaWx0ZXJzIGZ1bmN0aW9uCgoKICAgIGlmIChlbC5leHByZXNzaW9uICE9IG51bGwgJiYgZWwuZXhwcmVzc2lvbi5sZW5ndGgpIHsKICAgICAgdmFyIGV4cHJlc3Npb25Bc3QgPSAoMCwgX2NvbW1vbi5mcm9tRXhwcmVzc2lvbikoZWwuZXhwcmVzc2lvbik7CiAgICAgIHZhciBncm91cHMgPSBleHRyYWN0RmlsdGVyR3JvdXBzKGV4cHJlc3Npb25Bc3QpOwogICAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgICBpZiAoIWFjYy5pbmNsdWRlcyhTdHJpbmcoZ3JvdXApKSkgewogICAgICAgICAgYWNjLnB1c2goU3RyaW5nKGdyb3VwKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gYWNjOwogIH0sIFtdKTsKICByZXR1cm4gZmlsdGVyR3JvdXBzLnNvcnQoKTsKfSAvLyBlbGVtZW50IGdldHRlcnMKCgpmdW5jdGlvbiBnZXRTZWxlY3RlZFRvcGxldmVsTm9kZXMoc3RhdGUpIHsKICByZXR1cm4gKDAsIF9sb2Rhc2guZ2V0KShzdGF0ZSwgJ3RyYW5zaWVudC5zZWxlY3RlZFRvcGxldmVsTm9kZXMnLCBbXSk7Cn0KCmZ1bmN0aW9uIGdldFNlbGVjdGVkRWxlbWVudElkKHN0YXRlKSB7CiAgdmFyIHRvcGxldmVsTm9kZXMgPSBnZXRTZWxlY3RlZFRvcGxldmVsTm9kZXMoc3RhdGUpOwogIHJldHVybiB0b3BsZXZlbE5vZGVzLmxlbmd0aCA9PT0gMSA/IHRvcGxldmVsTm9kZXNbMF0gOiBudWxsOwp9CgpmdW5jdGlvbiBnZXRTZWxlY3RlZEVsZW1lbnQoc3RhdGUpIHsKICByZXR1cm4gZ2V0RWxlbWVudEJ5SWQoc3RhdGUsIGdldFNlbGVjdGVkRWxlbWVudElkKHN0YXRlKSk7Cn0KCmZ1bmN0aW9uIGdldEVsZW1lbnRzKHN0YXRlKSB7CiAgdmFyIHBhZ2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogIHZhciB3aXRoQXN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlOwogIHZhciBpZCA9IHBhZ2VJZCB8fCBnZXRTZWxlY3RlZFBhZ2Uoc3RhdGUpOwoKICBpZiAoIWlkKSB7CiAgICByZXR1cm4gW107CiAgfQoKICB2YXIgcGFnZSA9IGdldFBhZ2VCeUlkKHN0YXRlLCBpZCk7CiAgdmFyIGVsZW1lbnRzID0gKDAsIF9sb2Rhc2guZ2V0KShwYWdlLCAnZWxlbWVudHMnKTsKCiAgaWYgKCFlbGVtZW50cykgewogICAgcmV0dXJuIFtdOwogIH0gLy8gZXhwbGljaXRseSBzdHJpcCB0aGUgYXN0LCBiYXNpY2FsbHkgYSBmaXggZm9yIGNvcnJ1cHRlZCB3b3JrcGFkcwogIC8vIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9raWJhbmEtY2FudmFzL2lzc3Vlcy8yNjAKICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGl0J3MgYmVlbiBpbiB0aGUgd2lsZCBhIGJpdAoKCiAgaWYgKCF3aXRoQXN0KSB7CiAgICByZXR1cm4gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbCkgewogICAgICByZXR1cm4gKDAsIF9sb2Rhc2gub21pdCkoZWwsIFsnYXN0J10pOwogICAgfSk7CiAgfQoKICByZXR1cm4gZWxlbWVudHMubWFwKGFwcGVuZEFzdCk7Cn0KCnZhciBhdWdtZW50ID0gZnVuY3Rpb24gYXVnbWVudCh0eXBlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbiwgewogICAgICBwb3NpdGlvbjogX29iamVjdFNwcmVhZCh7fSwgbi5wb3NpdGlvbiwgewogICAgICAgIHR5cGU6IHR5cGUKICAgICAgfSkKICAgIH0sIHR5cGUgPT09ICdncm91cCcgJiYgewogICAgICBleHByZXNzaW9uOiAnc2hhcGUgZmlsbD0icmdiYSgyNTUsMjU1LDI1NSwwKSIgfCByZW5kZXInCiAgICB9KTsKICB9Owp9OwoKdmFyIGdldE5vZGVzT2ZQYWdlID0gZnVuY3Rpb24gZ2V0Tm9kZXNPZlBhZ2UocGFnZSkgewogIHZhciBlbGVtZW50cyA9ICgwLCBfbG9kYXNoLmdldCkocGFnZSwgJ2VsZW1lbnRzJykubWFwKGF1Z21lbnQoJ2VsZW1lbnQnKSk7CiAgdmFyIGdyb3VwcyA9ICgwLCBfbG9kYXNoLmdldCkocGFnZSwgJ2dyb3VwcycsIFtdKS5tYXAoYXVnbWVudCgnZ3JvdXAnKSk7CiAgcmV0dXJuIGVsZW1lbnRzLmNvbmNhdChncm91cHMpOwp9OwoKZnVuY3Rpb24gZ2V0Tm9kZXNGb3JQYWdlKHBhZ2UsIHdpdGhBc3QpIHsKICB2YXIgZWxlbWVudHMgPSBnZXROb2Rlc09mUGFnZShwYWdlKTsKCiAgaWYgKCFlbGVtZW50cykgewogICAgcmV0dXJuIFtdOwogIH0gLy8gZXhwbGljaXRseSBzdHJpcCB0aGUgYXN0LCBiYXNpY2FsbHkgYSBmaXggZm9yIGNvcnJ1cHRlZCB3b3JrcGFkcwogIC8vIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9raWJhbmEtY2FudmFzL2lzc3Vlcy8yNjAKICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGl0J3MgYmVlbiBpbiB0aGUgd2lsZCBhIGJpdAoKCiAgaWYgKCF3aXRoQXN0KSB7CiAgICByZXR1cm4gZWxlbWVudHMubWFwKGZ1bmN0aW9uIChlbCkgewogICAgICByZXR1cm4gKDAsIF9sb2Rhc2gub21pdCkoZWwsIFsnYXN0J10pOwogICAgfSk7CiAgfQoKICByZXR1cm4gZWxlbWVudHMubWFwKGFwcGVuZEFzdCk7Cn0gLy8gdG9kbyB1bmlmeSBvciBEUlkgdXAgd2l0aCBgZ2V0RWxlbWVudHNgCgoKZnVuY3Rpb24gZ2V0Tm9kZXMoc3RhdGUsIHBhZ2VJZCkgewogIHZhciB3aXRoQXN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlOwogIHZhciBpZCA9IHBhZ2VJZCB8fCBnZXRTZWxlY3RlZFBhZ2Uoc3RhdGUpOwoKICBpZiAoIWlkKSB7CiAgICByZXR1cm4gW107CiAgfQoKICB2YXIgcGFnZSA9IGdldFBhZ2VCeUlkKHN0YXRlLCBpZCk7CgogIGlmICghcGFnZSkgewogICAgcmV0dXJuIFtdOwogIH0KCiAgcmV0dXJuIGdldE5vZGVzRm9yUGFnZShwYWdlLCB3aXRoQXN0KTsKfQoKZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoc3RhdGUsIGlkLCBwYWdlSWQpIHsKICB2YXIgZWxlbWVudCA9IGdldEVsZW1lbnRzKHN0YXRlLCBwYWdlSWQsIHRydWUpLmZpbmQoZnVuY3Rpb24gKGVsKSB7CiAgICByZXR1cm4gZWwuaWQgPT09IGlkOwogIH0pOwoKICBpZiAoZWxlbWVudCkgewogICAgcmV0dXJuIGFwcGVuZEFzdChlbGVtZW50KTsKICB9Cn0KCmZ1bmN0aW9uIGdldE5vZGVCeUlkKHN0YXRlLCBpZCwgcGFnZUlkKSB7CiAgLy8gZG8gd2UgbmVlZCB0byBwYXNzIGEgdHJ1dGh5IGVtcHR5IGFycmF5IGluc3RlYWQgb2YgYHRydWVgPwogIHZhciBncm91cCA9IGdldE5vZGVzKHN0YXRlLCBwYWdlSWQsIHRydWUpLmZpbmQoZnVuY3Rpb24gKGVsKSB7CiAgICByZXR1cm4gZWwuaWQgPT09IGlkOwogIH0pOwoKICBpZiAoZ3JvdXApIHsKICAgIHJldHVybiBhcHBlbmRBc3QoZ3JvdXApOwogIH0KfSAvLyBGSVg6IEZpeCB0aGUgImFueSIgdHlwaW5ncyBiZWxvdy4gTmVlZCB0byBmaWd1cmUgb3V0IGhvdyB0byBwcm9wZXJseSB0eXBlIGFueSAicmVzb2x2ZWRBcmciCgoKZnVuY3Rpb24gZ2V0UmVzb2x2ZWRBcmdzKHN0YXRlLCBlbGVtZW50SWQsIHBhdGgpIHsKICBpZiAoIWVsZW1lbnRJZCkgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIGFyZ3MgPSAoMCwgX2xvZGFzaC5nZXQpKHN0YXRlLCBbJ3RyYW5zaWVudCcsICdyZXNvbHZlZEFyZ3MnLCBlbGVtZW50SWRdKTsKCiAgaWYgKHBhdGgpIHsKICAgIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKGFyZ3MsIHBhdGgpOwogIH0KCiAgcmV0dXJuIGFyZ3M7Cn0KCmZ1bmN0aW9uIGdldFNlbGVjdGVkUmVzb2x2ZWRBcmdzKHN0YXRlLCBwYXRoKSB7CiAgdmFyIGVsZW1lbnRJZCA9IGdldFNlbGVjdGVkRWxlbWVudElkKHN0YXRlKTsKCiAgaWYgKGVsZW1lbnRJZCkgewogICAgcmV0dXJuIGdldFJlc29sdmVkQXJncyhzdGF0ZSwgZWxlbWVudElkLCBwYXRoKTsKICB9Cn0KCmZ1bmN0aW9uIGdldENvbnRleHRGb3JJbmRleChzdGF0ZSwgaW5kZXgpIHsKICByZXR1cm4gZ2V0U2VsZWN0ZWRSZXNvbHZlZEFyZ3Moc3RhdGUsIFsnZXhwcmVzc2lvbkNvbnRleHQnLCBpbmRleCAtIDFdKTsKfQoKZnVuY3Rpb24gZ2V0UmVmcmVzaEludGVydmFsKHN0YXRlKSB7CiAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoc3RhdGUsICd0cmFuc2llbnQucmVmcmVzaC5pbnRlcnZhbCcsIDApOwp9CgpmdW5jdGlvbiBnZXRBdXRvcGxheShzdGF0ZSkgewogIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKHN0YXRlLCAndHJhbnNpZW50LmF1dG9wbGF5Jyk7Cn0KCmZ1bmN0aW9uIGdldFJlbmRlcmVkV29ya3BhZChzdGF0ZSkgewogIHZhciBjdXJyZW50UGFnZXMgPSBnZXRQYWdlcyhzdGF0ZSk7CiAgdmFyIGFyZ3MgPSBzdGF0ZS50cmFuc2llbnQucmVzb2x2ZWRBcmdzOwogIHZhciByZW5kZXJlZFBhZ2VzID0gY3VycmVudFBhZ2VzLm1hcChmdW5jdGlvbiAocGFnZSkgewogICAgdmFyIGVsZW1lbnRzID0gcGFnZS5lbGVtZW50cywKICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHBhZ2UsIFsiZWxlbWVudHMiXSk7CgogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHJlc3QsIHsKICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIHZhciBpZCA9IGVsZW1lbnQuaWQsCiAgICAgICAgICAgIHBvc2l0aW9uID0gZWxlbWVudC5wb3NpdGlvbjsKICAgICAgICB2YXIgYXJnID0gYXJnc1tpZF07CgogICAgICAgIGlmICghYXJnKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIHZhciBleHByZXNzaW9uUmVuZGVyYWJsZSA9IGFyZy5leHByZXNzaW9uUmVuZGVyYWJsZTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgaWQ6IGlkLAogICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLAogICAgICAgICAgZXhwcmVzc2lvblJlbmRlcmFibGU6IGV4cHJlc3Npb25SZW5kZXJhYmxlCiAgICAgICAgfTsKICAgICAgfSkKICAgIH0pOwogIH0pOwogIHZhciB3b3JrcGFkID0gZ2V0V29ya3BhZChzdGF0ZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycwoKICB2YXIgcGFnZXMgPSB3b3JrcGFkLnBhZ2VzLAogICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHdvcmtwYWQsIFsicGFnZXMiXSk7CgogIHJldHVybiBfb2JqZWN0U3ByZWFkKHsKICAgIHBhZ2VzOiByZW5kZXJlZFBhZ2VzCiAgfSwgcmVzdCk7Cn0KCmZ1bmN0aW9uIGdldFJlbmRlcmVkV29ya3BhZEV4cHJlc3Npb25zKHN0YXRlKSB7CiAgdmFyIHdvcmtwYWQgPSBnZXRSZW5kZXJlZFdvcmtwYWQoc3RhdGUpOwogIHZhciBwYWdlcyA9IHdvcmtwYWQucGFnZXM7CiAgdmFyIGV4cHJlc3Npb25zID0gW107CiAgcGFnZXMuZm9yRWFjaChmdW5jdGlvbiAocGFnZSkgewogICAgcmV0dXJuIHBhZ2UuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmV4cHJlc3Npb25SZW5kZXJhYmxlKSB7CiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudC5leHByZXNzaW9uUmVuZGVyYWJsZS52YWx1ZTsKCiAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICB2YXIgYXMgPSB2YWx1ZS5hczsKCiAgICAgICAgICBpZiAoIWV4cHJlc3Npb25zLmluY2x1ZGVzKGFzKSkgewogICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGFzKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0pOwogIHJldHVybiBleHByZXNzaW9uczsKfQ=="},null]}