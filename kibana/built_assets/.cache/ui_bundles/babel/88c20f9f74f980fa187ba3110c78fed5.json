{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/state/middleware/es_persist.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/state/middleware/es_persist.js","mtime":1589249552063},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmVzUGVyc2lzdE1pZGRsZXdhcmUgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiLi4vLi4vLi4vaTE4biIpOwoKdmFyIF93b3JrcGFkID0gcmVxdWlyZSgiLi4vc2VsZWN0b3JzL3dvcmtwYWQiKTsKCnZhciBfYXNzZXRzID0gcmVxdWlyZSgiLi4vc2VsZWN0b3JzL2Fzc2V0cyIpOwoKdmFyIF9hcHAgPSByZXF1aXJlKCIuLi9hY3Rpb25zL2FwcCIpOwoKdmFyIF93b3JrcGFkMiA9IHJlcXVpcmUoIi4uL2FjdGlvbnMvd29ya3BhZCIpOwoKdmFyIF9hc3NldHMyID0gcmVxdWlyZSgiLi4vYWN0aW9ucy9hc3NldHMiKTsKCnZhciB0cmFuc2llbnRBY3Rpb25zID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi4vYWN0aW9ucy90cmFuc2llbnQiKSk7Cgp2YXIgcmVzb2x2ZWRBcmdzQWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4uL2FjdGlvbnMvcmVzb2x2ZWRfYXJncyIpKTsKCnZhciBfd29ya3BhZF9zZXJ2aWNlID0gcmVxdWlyZSgiLi4vLi4vbGliL3dvcmtwYWRfc2VydmljZSIpOwoKdmFyIF9ub3RpZnkgPSByZXF1aXJlKCIuLi8uLi9saWIvbm90aWZ5Iik7Cgp2YXIgX2FwcDIgPSByZXF1aXJlKCIuLi9zZWxlY3RvcnMvYXBwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9Cgp2YXIgc3RyaW5ncyA9IF9pMThuLkVycm9yU3RyaW5ncy5lc1BlcnNpc3Q7Cgp2YXIgd29ya3BhZENoYW5nZWQgPSBmdW5jdGlvbiB3b3JrcGFkQ2hhbmdlZChiZWZvcmUsIGFmdGVyKSB7CiAgdmFyIHdvcmtwYWQgPSAoMCwgX3dvcmtwYWQuZ2V0V29ya3BhZCkoYmVmb3JlKTsKICByZXR1cm4gKDAsIF93b3JrcGFkLmdldFdvcmtwYWQpKGFmdGVyKSAhPT0gd29ya3BhZDsKfTsKCnZhciBhc3NldHNDaGFuZ2VkID0gZnVuY3Rpb24gYXNzZXRzQ2hhbmdlZChiZWZvcmUsIGFmdGVyKSB7CiAgdmFyIGFzc2V0cyA9ICgwLCBfYXNzZXRzLmdldEFzc2V0SWRzKShiZWZvcmUpOwogIHJldHVybiAhKDAsIF9sb2Rhc2guaXNFcXVhbCkoYXNzZXRzLCAoMCwgX2Fzc2V0cy5nZXRBc3NldElkcykoYWZ0ZXIpKTsKfTsKCnZhciBlc1BlcnNpc3RNaWRkbGV3YXJlID0gZnVuY3Rpb24gZXNQZXJzaXN0TWlkZGxld2FyZShfcmVmKSB7CiAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTsKICAvLyB0aGVzZSBhcmUgdGhlIGFjdGlvbnMgd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGEgcGVyc2lzdCBjYWxsCiAgdmFyIHNraXBwZWRBY3Rpb25zID0gW19hcHAuYXBwUmVhZHksIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byByZXNhdmUgdGhlIHdvcmtwYWQgb25jZSB3ZSd2ZSBsb2FkZWQgaXQuCiAgX3dvcmtwYWQyLnJlc2V0V29ya3BhZCwgLy8gdXNlZCBmb3IgcmVzZXR0aW5nIHRoZSB3b3JrcGFkIGluIHN0YXRlCiAgX3dvcmtwYWQyLnNldFdvcmtwYWQsIC8vIHVzZWQgZm9yIGxvYWRpbmcgYW5kIGNyZWF0aW5nIHdvcmtwYWRzCiAgX2Fzc2V0czIuc2V0QXNzZXRzLCAvLyB1c2VkIHdoZW4gbG9hZGluZyBhc3NldHMKICBfYXNzZXRzMi5yZXNldEFzc2V0cywgLy8gdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB3b3JrcGFkcwogIF93b3JrcGFkMi5zZXRSZWZyZXNoSW50ZXJ2YWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LnZhbHVlcyhyZXNvbHZlZEFyZ3NBY3Rpb25zKSksIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QudmFsdWVzKHRyYW5zaWVudEFjdGlvbnMpKSkubWFwKGZ1bmN0aW9uIChhKSB7CiAgICByZXR1cm4gYS50b1N0cmluZygpOwogIH0pOwogIHJldHVybiBmdW5jdGlvbiAobmV4dCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgLy8gaWYgdGhlIGFjdGlvbiBpcyBpbiB0aGUgc2tpcHBlZCBsaXN0LCBkbyBub3QgcGVyc2lzdAogICAgICBpZiAoc2tpcHBlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgPj0gMCkgewogICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7CiAgICAgIH0gLy8gY2FwdHVyZSBzdGF0ZSBiZWZvcmUgYW5kIGFmdGVyIHRoZSBhY3Rpb24KCgogICAgICB2YXIgY3VyU3RhdGUgPSBnZXRTdGF0ZSgpOwogICAgICBuZXh0KGFjdGlvbik7CiAgICAgIHZhciBuZXdTdGF0ZSA9IGdldFN0YXRlKCk7IC8vIHNraXBzIHRoZSB1cGRhdGUgcmVxdWVzdCBpZiB1c2VyIGRvZXNuJ3QgaGF2ZSB3cml0ZSBwZXJtaXNzaW9ucwoKICAgICAgaWYgKCEoMCwgX2FwcDIuY2FuVXNlcldyaXRlKShuZXdTdGF0ZSkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBub3RpZnlFcnJvciA9IGZ1bmN0aW9uIG5vdGlmeUVycm9yKGVycikgewogICAgICAgIHZhciBzdGF0dXNDb2RlID0gZXJyLnJlc3BvbnNlICYmIGVyci5yZXNwb25zZS5zdGF0dXM7CgogICAgICAgIHN3aXRjaCAoc3RhdHVzQ29kZSkgewogICAgICAgICAgY2FzZSA0MDA6CiAgICAgICAgICAgIHJldHVybiBfbm90aWZ5Lm5vdGlmeS5lcnJvcihlcnIucmVzcG9uc2UsIHsKICAgICAgICAgICAgICB0aXRsZTogc3RyaW5ncy5nZXRTYXZlRmFpbHVyZVRpdGxlKCkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA0MTM6CiAgICAgICAgICAgIHJldHVybiBfbm90aWZ5Lm5vdGlmeS5lcnJvcihzdHJpbmdzLmdldFRvb0xhcmdlRXJyb3JNZXNzYWdlKCksIHsKICAgICAgICAgICAgICB0aXRsZTogc3RyaW5ncy5nZXRTYXZlRmFpbHVyZVRpdGxlKCkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuIF9ub3RpZnkubm90aWZ5LmVycm9yKGVyciwgewogICAgICAgICAgICAgIHRpdGxlOiBzdHJpbmdzLmdldFVwZGF0ZUZhaWx1cmVUaXRsZSgpCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHZhciBjaGFuZ2VkV29ya3BhZCA9IHdvcmtwYWRDaGFuZ2VkKGN1clN0YXRlLCBuZXdTdGF0ZSk7CiAgICAgIHZhciBjaGFuZ2VkQXNzZXRzID0gYXNzZXRzQ2hhbmdlZChjdXJTdGF0ZSwgbmV3U3RhdGUpOwoKICAgICAgaWYgKGNoYW5nZWRXb3JrcGFkICYmIGNoYW5nZWRBc3NldHMpIHsKICAgICAgICAvLyBpZiBib3RoIHRoZSB3b3JrcGFkIGFuZCB0aGUgYXNzZXRzIGNoYW5nZWQsIHNhdmUgaXQgaW4gaXRzIGVudGlyZXR5IHRvIGVsYXN0aWNzZWFyY2gKICAgICAgICB2YXIgcGVyc2lzdGVkV29ya3BhZCA9ICgwLCBfd29ya3BhZC5nZXRGdWxsV29ya3BhZFBlcnNpc3RlZCkoZ2V0U3RhdGUoKSk7CiAgICAgICAgcmV0dXJuICgwLCBfd29ya3BhZF9zZXJ2aWNlLnVwZGF0ZSkocGVyc2lzdGVkV29ya3BhZC5pZCwgcGVyc2lzdGVkV29ya3BhZCkuY2F0Y2gobm90aWZ5RXJyb3IpOwogICAgICB9IGVsc2UgaWYgKGNoYW5nZWRXb3JrcGFkKSB7CiAgICAgICAgLy8gaWYgdGhlIHdvcmtwYWQgY2hhbmdlZCwgc2F2ZSBpdCB0byBlbGFzdGljc2VhcmNoCiAgICAgICAgdmFyIF9wZXJzaXN0ZWRXb3JrcGFkID0gKDAsIF93b3JrcGFkLmdldFdvcmtwYWRQZXJzaXN0ZWQpKGdldFN0YXRlKCkpOwoKICAgICAgICByZXR1cm4gKDAsIF93b3JrcGFkX3NlcnZpY2UudXBkYXRlV29ya3BhZCkoX3BlcnNpc3RlZFdvcmtwYWQuaWQsIF9wZXJzaXN0ZWRXb3JrcGFkKS5jYXRjaChub3RpZnlFcnJvcik7CiAgICAgIH0gZWxzZSBpZiAoY2hhbmdlZEFzc2V0cykgewogICAgICAgIC8vIGlmIHRoZSBhc3NldHMgY2hhbmdlZCwgc2F2ZSBpdCB0byBlbGFzdGljc2VhcmNoCiAgICAgICAgdmFyIF9wZXJzaXN0ZWRXb3JrcGFkMiA9ICgwLCBfd29ya3BhZC5nZXRGdWxsV29ya3BhZFBlcnNpc3RlZCkoZ2V0U3RhdGUoKSk7CgogICAgICAgIHJldHVybiAoMCwgX3dvcmtwYWRfc2VydmljZS51cGRhdGVBc3NldHMpKF9wZXJzaXN0ZWRXb3JrcGFkMi5pZCwgX3BlcnNpc3RlZFdvcmtwYWQyLmFzc2V0cykuY2F0Y2gobm90aWZ5RXJyb3IpOwogICAgICB9CiAgICB9OwogIH07Cn07CgpleHBvcnRzLmVzUGVyc2lzdE1pZGRsZXdhcmUgPSBlc1BlcnNpc3RNaWRkbGV3YXJlOw=="},null]}