{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/saved_objects/public/saved_object/helpers/check_for_duplicate_title.js","dependencies":[{"path":"src/plugins/saved_objects/public/saved_object/helpers/check_for_duplicate_title.js","mtime":1589249551007},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNoZWNrRm9yRHVwbGljYXRlVGl0bGUgPSBjaGVja0ZvckR1cGxpY2F0ZVRpdGxlOwoKdmFyIF9maW5kX29iamVjdF9ieV90aXRsZSA9IHJlcXVpcmUoIi4vZmluZF9vYmplY3RfYnlfdGl0bGUiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vY29uc3RhbnRzIik7Cgp2YXIgX2Rpc3BsYXlfZHVwbGljYXRlX3RpdGxlX2NvbmZpcm1fbW9kYWwgPSByZXF1aXJlKCIuL2Rpc3BsYXlfZHVwbGljYXRlX3RpdGxlX2NvbmZpcm1fbW9kYWwiKTsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KLyoqCiAqIGNoZWNrIGZvciBhbiBleGlzdGluZyBTYXZlZE9iamVjdCB3aXRoIHRoZSBzYW1lIHRpdGxlIGluIEVTCiAqIHJldHVybnMgUHJvbWlzZTx0cnVlPiB3aGVuIGl0J3Mgbm8gZHVwbGljYXRlLCBvciB0aGUgbW9kYWwgZGlzcGxheWluZyB0aGUgd2FybmluZwogKiB0aGF0J3MgdGhlcmUncyBhIGR1cGxpY2F0ZSBpcyBjb25maXJtZWQsIGVsc2UgaXQgcmV0dXJucyBhIHJlamVjdGVkIFByb21pc2U8RXJyb3JNc2c+CiAqIEBwYXJhbSBzYXZlZE9iamVjdAogKiBAcGFyYW0gaXNUaXRsZUR1cGxpY2F0ZUNvbmZpcm1lZAogKiBAcGFyYW0gb25UaXRsZUR1cGxpY2F0ZQogKiBAcGFyYW0gc2VydmljZXMKICovCgoKZnVuY3Rpb24gY2hlY2tGb3JEdXBsaWNhdGVUaXRsZShfeCwgX3gyLCBfeDMsIF94NCkgewogIHJldHVybiBfY2hlY2tGb3JEdXBsaWNhdGVUaXRsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfY2hlY2tGb3JEdXBsaWNhdGVUaXRsZSgpIHsKICBfY2hlY2tGb3JEdXBsaWNhdGVUaXRsZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNhdmVkT2JqZWN0LCBpc1RpdGxlRHVwbGljYXRlQ29uZmlybWVkLCBvblRpdGxlRHVwbGljYXRlLCBzZXJ2aWNlcykgewogICAgdmFyIHNhdmVkT2JqZWN0c0NsaWVudCwgb3ZlcmxheXMsIGR1cGxpY2F0ZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgc2F2ZWRPYmplY3RzQ2xpZW50ID0gc2VydmljZXMuc2F2ZWRPYmplY3RzQ2xpZW50LCBvdmVybGF5cyA9IHNlcnZpY2VzLm92ZXJsYXlzOyAvLyBEb24ndCBjaGVjayBmb3IgZHVwbGljYXRlcyBpZiB1c2VyIGhhcyBhbHJlYWR5IGNvbmZpcm1lZCBzYXZlIHdpdGggZHVwbGljYXRlIHRpdGxlCgogICAgICAgICAgICBpZiAoIWlzVGl0bGVEdXBsaWNhdGVDb25maXJtZWQpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBpZiAoIShzYXZlZE9iamVjdC50aXRsZSA9PT0gc2F2ZWRPYmplY3QubGFzdFNhdmVkVGl0bGUgJiYgIXNhdmVkT2JqZWN0LmNvcHlPblNhdmUpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2ZpbmRfb2JqZWN0X2J5X3RpdGxlLmZpbmRPYmplY3RCeVRpdGxlKShzYXZlZE9iamVjdHNDbGllbnQsIHNhdmVkT2JqZWN0LmdldEVzVHlwZSgpLCBzYXZlZE9iamVjdC50aXRsZSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBkdXBsaWNhdGUgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKCEoIWR1cGxpY2F0ZSB8fCBkdXBsaWNhdGUuaWQgPT09IHNhdmVkT2JqZWN0LmlkKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgaWYgKCFvblRpdGxlRHVwbGljYXRlKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvblRpdGxlRHVwbGljYXRlKCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihfY29uc3RhbnRzLlNBVkVfRFVQTElDQVRFX1JFSkVDVEVEKSkpOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsICgwLCBfZGlzcGxheV9kdXBsaWNhdGVfdGl0bGVfY29uZmlybV9tb2RhbC5kaXNwbGF5RHVwbGljYXRlVGl0bGVDb25maXJtTW9kYWwpKHNhdmVkT2JqZWN0LCBvdmVybGF5cykpOwoKICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfY2hlY2tGb3JEdXBsaWNhdGVUaXRsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9"},null]}