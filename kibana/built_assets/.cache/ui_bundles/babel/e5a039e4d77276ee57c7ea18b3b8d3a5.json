{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_vislib/public/vislib/lib/chart_title.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_vislib/public/vislib/lib/chart_title.js","mtime":1589249550142},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNoYXJ0VGl0bGUgPSB2b2lkIDA7Cgp2YXIgX2QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImQzIikpOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfZXJyb3JfaGFuZGxlciA9IHJlcXVpcmUoIi4vX2Vycm9yX2hhbmRsZXIiKTsKCnZhciBfdG9vbHRpcCA9IHJlcXVpcmUoIi4uL2NvbXBvbmVudHMvdG9vbHRpcCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCnZhciBDaGFydFRpdGxlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0Vycm9ySGFuZGxlcikgewogIF9pbmhlcml0cyhDaGFydFRpdGxlLCBfRXJyb3JIYW5kbGVyKTsKCiAgZnVuY3Rpb24gQ2hhcnRUaXRsZSh2aXNDb25maWcpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhcnRUaXRsZSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ2hhcnRUaXRsZSkuY2FsbCh0aGlzKSk7CiAgICBfdGhpcy5lbCA9IHZpc0NvbmZpZy5nZXQoJ2VsJyk7CiAgICBfdGhpcy50b29sdGlwID0gbmV3IF90b29sdGlwLlRvb2x0aXAoJ2NoYXJ0LXRpdGxlJywgX3RoaXMuZWwsIGZ1bmN0aW9uIChkKSB7CiAgICAgIHJldHVybiAnPHA+JyArIF9sb2Rhc2guZGVmYXVsdC5lc2NhcGUoZC5sYWJlbCkgKyAnPC9wPic7CiAgICB9KTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhDaGFydFRpdGxlLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBlbCA9IF9kLmRlZmF1bHQuc2VsZWN0KHRoaXMuZWwpLnNlbGVjdCgnLmNoYXJ0LXRpdGxlJykubm9kZSgpOwoKICAgICAgdmFyIHdpZHRoID0gZWwgPyBlbC5jbGllbnRXaWR0aCA6IDA7CiAgICAgIHZhciBoZWlnaHQgPSBlbCA/IGVsLmNsaWVudEhlaWdodCA6IDA7CiAgICAgIHJldHVybiBfZC5kZWZhdWx0LnNlbGVjdCh0aGlzLmVsKS5zZWxlY3RBbGwoJy5jaGFydC10aXRsZScpLmNhbGwodGhpcy5kcmF3KHdpZHRoLCBoZWlnaHQpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cnVuY2F0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJ1bmNhdGUoc2l6ZSkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7CiAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHRleHQgPSBfZC5kZWZhdWx0LnNlbGVjdCh0aGlzKTsKCiAgICAgICAgICB2YXIgbiA9IHRleHRbMF0ubGVuZ3RoOwogICAgICAgICAgdmFyIG1heFdpZHRoID0gc2l6ZSAvIG4gKiAwLjk7CiAgICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTsKICAgICAgICAgIHZhciBzdHI7CiAgICAgICAgICB2YXIgYXZnOwogICAgICAgICAgdmFyIGVuZDsKCiAgICAgICAgICBpZiAobGVuZ3RoID4gbWF4V2lkdGgpIHsKICAgICAgICAgICAgc3RyID0gdGV4dC50ZXh0KCk7CiAgICAgICAgICAgIGF2ZyA9IGxlbmd0aCAvIHN0ci5sZW5ndGg7CiAgICAgICAgICAgIGVuZCA9IE1hdGguZmxvb3IobWF4V2lkdGggLyBhdmcpIC0gNTsKICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCBlbmQpICsgJy4uLic7CiAgICAgICAgICAgIHNlbGYuYWRkTW91c2VFdmVudHModGV4dCk7CiAgICAgICAgICAgIHJldHVybiB0ZXh0LnRleHQoc3RyKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGV4dC50ZXh0KCk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkTW91c2VFdmVudHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE1vdXNlRXZlbnRzKHRhcmdldCkgewogICAgICBpZiAodGhpcy50b29sdGlwKSB7CiAgICAgICAgcmV0dXJuIHRhcmdldC5jYWxsKHRoaXMudG9vbHRpcC5yZW5kZXIoKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJkcmF3IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkcmF3KHdpZHRoLCBoZWlnaHQpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdGlvbikgewogICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBkaXYgPSBfZC5kZWZhdWx0LnNlbGVjdCh0aGlzKTsKCiAgICAgICAgICB2YXIgZGF0YVR5cGUgPSB0aGlzLnBhcmVudE5vZGUuX19kYXRhX18ucm93cyA/ICdyb3dzJyA6ICdjb2x1bW5zJzsKICAgICAgICAgIHZhciBzaXplID0gZGF0YVR5cGUgPT09ICdyb3dzJyA/IGhlaWdodCA6IHdpZHRoOwogICAgICAgICAgdmFyIHR4dEh0T2Zmc2V0ID0gMTE7CiAgICAgICAgICBzZWxmLnZhbGlkYXRlV2lkdGhhbmRIZWlnaHQod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICBkaXYuYXBwZW5kKCdzdmcnKS5hdHRyKCdmb2N1c2FibGUnLCAnZmFsc2UnKS5hdHRyKCd3aWR0aCcsIHdpZHRoKS5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpLmFwcGVuZCgndGV4dCcpLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSAncm93cycpIHsKICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdHh0SHRPZmZzZXQgKyAnLCcgKyBoZWlnaHQgLyAyICsgJylyb3RhdGUoMjcwKSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyB3aWR0aCAvIDIgKyAnLCcgKyB0eHRIdE9mZnNldCArICcpJzsKICAgICAgICAgIH0pLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpLnRleHQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgICAgcmV0dXJuIGQubGFiZWw7CiAgICAgICAgICB9KTsgLy8gdHJ1bmNhdGUgbG9uZyBjaGFydCB0aXRsZXMKCiAgICAgICAgICBkaXYuc2VsZWN0QWxsKCd0ZXh0JykuY2FsbChzZWxmLnRydW5jYXRlKHNpemUpKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBDaGFydFRpdGxlOwp9KF9lcnJvcl9oYW5kbGVyLkVycm9ySGFuZGxlcik7CgpleHBvcnRzLkNoYXJ0VGl0bGUgPSBDaGFydFRpdGxlOw=="},null]}