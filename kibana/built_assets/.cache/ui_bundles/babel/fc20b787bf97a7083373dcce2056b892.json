{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/connected_components/layer_panel/join_editor/resources/join_expression.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/connected_components/layer_panel/join_editor/resources/join_expression.js","mtime":1589249552408},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkpvaW5FeHByZXNzaW9uID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9zaW5nbGVfZmllbGRfc2VsZWN0ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9zaW5nbGVfZmllbGRfc2VsZWN0Iik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9pbmRleF9wYXR0ZXJuX3V0aWwgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9pbmRleF9wYXR0ZXJuX3V0aWwiKTsKCnZhciBfa2liYW5hX3NlcnZpY2VzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4va2liYW5hX3NlcnZpY2VzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgSm9pbkV4cHJlc3Npb24gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEpvaW5FeHByZXNzaW9uLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSm9pbkV4cHJlc3Npb24oKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpvaW5FeHByZXNzaW9uKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKEpvaW5FeHByZXNzaW9uKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGlzUG9wb3Zlck9wZW46IGZhbHNlCiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfdG9nZ2xlUG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpc1BvcG92ZXJPcGVuOiAhcHJldlN0YXRlLmlzUG9wb3Zlck9wZW4KICAgICAgICB9OwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9jbG9zZVBvcG92ZXIiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9vblJpZ2h0U291cmNlQ2hhbmdlIiwKICAgIC8qI19fUFVSRV9fKi8KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGluZGV4UGF0dGVybklkKSB7CiAgICAgICAgdmFyIGluZGV4UGF0dGVybjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfa2liYW5hX3NlcnZpY2VzLmdldEluZGV4UGF0dGVyblNlcnZpY2UpKCkuZ2V0KGluZGV4UGF0dGVybklkKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vblJpZ2h0U291cmNlQ2hhbmdlKHsKICAgICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IGluZGV4UGF0dGVybklkLAogICAgICAgICAgICAgICAgICBpbmRleFBhdHRlcm5UaXRsZTogaW5kZXhQYXR0ZXJuLnRpdGxlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgN11dKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9vbkxlZnRGaWVsZENoYW5nZSIsIGZ1bmN0aW9uIChzZWxlY3RlZEZpZWxkcykgewogICAgICBfdGhpcy5wcm9wcy5vbkxlZnRGaWVsZENoYW5nZShfbG9kYXNoLmRlZmF1bHQuZ2V0KHNlbGVjdGVkRmllbGRzLCAnWzBdLnZhbHVlLm5hbWUnLCBudWxsKSk7CiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSm9pbkV4cHJlc3Npb24sIFt7CiAgICBrZXk6ICJfcmVuZGVyTGVmdEZpZWxkU2VsZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyTGVmdEZpZWxkU2VsZWN0KCkgewogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgbGVmdFZhbHVlID0gX3RoaXMkcHJvcHMubGVmdFZhbHVlLAogICAgICAgICAgbGVmdEZpZWxkcyA9IF90aGlzJHByb3BzLmxlZnRGaWVsZHM7CgogICAgICBpZiAoIWxlZnRGaWVsZHMpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIG9wdGlvbnMgPSBsZWZ0RmllbGRzLm1hcChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdmFsdWU6IGZpZWxkLAogICAgICAgICAgbGFiZWw6IGZpZWxkLmxhYmVsCiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIHZhciBsZWZ0RmllbGRPcHRpb247CgogICAgICBpZiAobGVmdFZhbHVlKSB7CiAgICAgICAgbGVmdEZpZWxkT3B0aW9uID0gb3B0aW9ucy5maW5kKGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICAgIHZhciBmaWVsZCA9IG9wdGlvbi52YWx1ZTsKICAgICAgICAgIHJldHVybiBmaWVsZC5uYW1lID09PSBsZWZ0VmFsdWU7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciBzZWxlY3RlZE9wdGlvbnMgPSBsZWZ0RmllbGRPcHRpb24gPyBbbGVmdEZpZWxkT3B0aW9uXSA6IFtdOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5sZWZ0RmllbGRMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVmdCBmaWVsZCcKICAgICAgICB9KSwKICAgICAgICBoZWxwVGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5sZWZ0U291cmNlTGFiZWxIZWxwVGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVmdCBzb3VyY2UgZmllbGQgdGhhdCBjb250YWlucyB0aGUgc2hhcmVkIGtleS4nCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgcGxhY2Vob2xkZXI6IGdldFNlbGVjdEZpZWxkUGxhY2Vob2xkZXIoKSwKICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHRydWUsCiAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlLAogICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsCiAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiBzZWxlY3RlZE9wdGlvbnMsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMuX29uTGVmdEZpZWxkQ2hhbmdlCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcmVuZGVyUmlnaHRTb3VyY2VTZWxlY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXJSaWdodFNvdXJjZVNlbGVjdCgpIHsKICAgICAgaWYgKCF0aGlzLnByb3BzLmxlZnRWYWx1ZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgSW5kZXhQYXR0ZXJuU2VsZWN0ID0gKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0SW5kZXhQYXR0ZXJuU2VsZWN0Q29tcG9uZW50KSgpOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5yaWdodFNvdXJjZUxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSaWdodCBzb3VyY2UnCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJbmRleFBhdHRlcm5TZWxlY3QsIHsKICAgICAgICBwbGFjZWhvbGRlcjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5zZWxlY3RJbmRleFBhdHRlcm5QbGFjZWhvbGRlcicsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VsZWN0IGluZGV4IHBhdHRlcm4nCiAgICAgICAgfSksCiAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IHRoaXMucHJvcHMucmlnaHRTb3VyY2VJbmRleFBhdHRlcm5JZCwKICAgICAgICBvbkNoYW5nZTogdGhpcy5fb25SaWdodFNvdXJjZUNoYW5nZSwKICAgICAgICBpc0NsZWFyYWJsZTogZmFsc2UKICAgICAgfSkpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9yZW5kZXJSaWdodEZpZWxkU2VsZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyUmlnaHRGaWVsZFNlbGVjdCgpIHsKICAgICAgaWYgKCF0aGlzLnByb3BzLnJpZ2h0RmllbGRzIHx8ICF0aGlzLnByb3BzLmxlZnRWYWx1ZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5yaWdodEZpZWxkTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JpZ2h0IGZpZWxkJwogICAgICAgIH0pLAogICAgICAgIGhlbHBUZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLnJpZ2h0U291cmNlTGFiZWxIZWxwVGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmlnaHQgc291cmNlIGZpZWxkIHRoYXQgY29udGFpbnMgdGhlIHNoYXJlZCBrZXkuJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NpbmdsZV9maWVsZF9zZWxlY3QuU2luZ2xlRmllbGRTZWxlY3QsIHsKICAgICAgICBwbGFjZWhvbGRlcjogZ2V0U2VsZWN0RmllbGRQbGFjZWhvbGRlcigpLAogICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJpZ2h0VmFsdWUsCiAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25SaWdodEZpZWxkQ2hhbmdlLAogICAgICAgIGZpZWxkczogKDAsIF9pbmRleF9wYXR0ZXJuX3V0aWwuZ2V0VGVybXNGaWVsZHMpKHRoaXMucHJvcHMucmlnaHRGaWVsZHMpLAogICAgICAgIGlzQ2xlYXJhYmxlOiBmYWxzZQogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldEV4cHJlc3Npb25WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEV4cHJlc3Npb25WYWx1ZSgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBsZWZ0U291cmNlTmFtZSA9IF90aGlzJHByb3BzMi5sZWZ0U291cmNlTmFtZSwKICAgICAgICAgIGxlZnRWYWx1ZSA9IF90aGlzJHByb3BzMi5sZWZ0VmFsdWUsCiAgICAgICAgICByaWdodFNvdXJjZU5hbWUgPSBfdGhpcyRwcm9wczIucmlnaHRTb3VyY2VOYW1lLAogICAgICAgICAgcmlnaHRWYWx1ZSA9IF90aGlzJHByb3BzMi5yaWdodFZhbHVlOwoKICAgICAgaWYgKGxlZnRTb3VyY2VOYW1lICYmIGxlZnRWYWx1ZSAmJiByaWdodFNvdXJjZU5hbWUgJiYgcmlnaHRWYWx1ZSkgewogICAgICAgIHJldHVybiAiIi5jb25jYXQobGVmdFNvdXJjZU5hbWUsICI6IikuY29uY2F0KGxlZnRWYWx1ZSwgIiB3aXRoICIpLmNvbmNhdChyaWdodFNvdXJjZU5hbWUsICI6IikuY29uY2F0KHJpZ2h0VmFsdWUpOwogICAgICB9CgogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5zZWxlY3RQbGFjZWhvbGRlcicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJy0tIHNlbGVjdCAtLScKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBsZWZ0U291cmNlTmFtZSA9IHRoaXMucHJvcHMubGVmdFNvdXJjZU5hbWU7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgICAgIGlkOiAiam9pblBvcG92ZXIiLAogICAgICAgIGlzT3BlbjogdGhpcy5zdGF0ZS5pc1BvcG92ZXJPcGVuLAogICAgICAgIGNsb3NlUG9wb3ZlcjogdGhpcy5fY2xvc2VQb3BvdmVyLAogICAgICAgIG93bkZvY3VzOiB0cnVlLAogICAgICAgIGluaXRpYWxGb2N1czogImJvZHkiCiAgICAgICAgLyogYXZvaWQgaW5pdGlhbEZvY3VzIG9uIENvbWJvYm94ICovCiAgICAgICAgLAogICAgICAgIHdpdGhUaXRsZTogdHJ1ZSwKICAgICAgICBhbmNob3JQb3NpdGlvbjogImxlZnRDZW50ZXIiLAogICAgICAgIGJ1dHRvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUV4cHJlc3Npb24sIHsKICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuX3RvZ2dsZVBvcG92ZXIsCiAgICAgICAgICBkZXNjcmlwdGlvbjogIkpvaW4iLAogICAgICAgICAgdXBwZXJjYXNlOiBmYWxzZSwKICAgICAgICAgIHZhbHVlOiB0aGlzLl9nZXRFeHByZXNzaW9uVmFsdWUoKQogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBzdHlsZTogewogICAgICAgICAgd2lkdGg6IDMwMAogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBvcG92ZXJUaXRsZSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInhwYWNrLm1hcHMubGF5ZXJQYW5lbC5qb2luRXhwcmVzc2lvbi5qb2luUG9wb3ZlclRpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkpvaW4iCiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1IZWxwVGV4dCwgewogICAgICAgIGNsYXNzTmFtZTogIm1hcEpvaW5FeHByZXNzaW9uSGVscFRleHQiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5tYXBzLmxheWVyUGFuZWwuam9pbkV4cHJlc3Npb24uaGVscFRleHQiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ29uZmlndXJlIHRoZSBzaGFyZWQga2V5LiIKICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLmxlZnRTb3VyY2VMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVmdCBzb3VyY2UnCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiBbewogICAgICAgICAgdmFsdWU6IGxlZnRTb3VyY2VOYW1lLAogICAgICAgICAgbGFiZWw6IGxlZnRTb3VyY2VOYW1lCiAgICAgICAgfV0sCiAgICAgICAgaXNEaXNhYmxlZDogdHJ1ZQogICAgICB9KSksIHRoaXMuX3JlbmRlckxlZnRGaWVsZFNlbGVjdCgpLCB0aGlzLl9yZW5kZXJSaWdodFNvdXJjZVNlbGVjdCgpLCB0aGlzLl9yZW5kZXJSaWdodEZpZWxkU2VsZWN0KCkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBKb2luRXhwcmVzc2lvbjsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuSm9pbkV4cHJlc3Npb24gPSBKb2luRXhwcmVzc2lvbjsKSm9pbkV4cHJlc3Npb24ucHJvcFR5cGVzID0gewogIC8vIExlZnQgc291cmNlIHByb3BzIChzdGF0aWMgLSBjYW4gbm90IGNoYW5nZSkKICBsZWZ0U291cmNlTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICAvLyBMZWZ0IGZpZWxkIHByb3BzCiAgbGVmdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIGxlZnRGaWVsZHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7CiAgICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogICAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkCiAgfSkpLAogIG9uTGVmdEZpZWxkQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIC8vIFJpZ2h0IHNvdXJjZSBwcm9wcwogIHJpZ2h0U291cmNlSW5kZXhQYXR0ZXJuSWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsCiAgcmlnaHRTb3VyY2VOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIG9uUmlnaHRTb3VyY2VDaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgLy8gUmlnaHQgZmllbGQgcHJvcHMKICByaWdodFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHJpZ2h0RmllbGRzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXksCiAgb25SaWdodEZpZWxkQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkCn07CgpmdW5jdGlvbiBnZXRTZWxlY3RGaWVsZFBsYWNlaG9sZGVyKCkgewogIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5sYXllclBhbmVsLmpvaW5FeHByZXNzaW9uLnNlbGVjdEZpZWxkUGxhY2Vob2xkZXInLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ1NlbGVjdCBmaWVsZCcKICB9KTsKfQ=="},null]}