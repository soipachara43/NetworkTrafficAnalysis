{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/home/public/application/components/home.js","dependencies":[{"path":"src/plugins/home/public/application/components/home.js","mtime":1589249550843},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkhvbWUgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfc3lub3BzaXMgPSByZXF1aXJlKCIuL3N5bm9wc2lzIik7Cgp2YXIgX2FkZF9kYXRhID0gcmVxdWlyZSgiLi9hZGRfZGF0YSIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfd2VsY29tZSA9IHJlcXVpcmUoIi4vd2VsY29tZSIpOwoKdmFyIF9raWJhbmFfc2VydmljZXMgPSByZXF1aXJlKCIuLi9raWJhbmFfc2VydmljZXMiKTsKCnZhciBfc2VydmljZXMgPSByZXF1aXJlKCIuLi8uLi9zZXJ2aWNlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgS0VZX0VOQUJMRV9XRUxDT01FID0gJ2hvbWU6d2VsY29tZTpzaG93JzsKCnZhciBIb21lID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhIb21lLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSG9tZShwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb21lKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihIb21lKS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZmV0Y2hJc05ld0tpYmFuYUluc3RhbmNlIiwKICAgIC8qI19fUFVSRV9fKi8KICAgIF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAvLyBTZXQgYSBtYXgtdGltZSBvbiB0aGlzIHF1ZXJ5IHNvIHdlIGRvbid0IGhhbmcgdGhlIHBhZ2UgdG9vIGxvbmcuLi4KICAgICAgICAgICAgICAvLyBXb3JzdCBjYXNlLCB3ZSBkb24ndCBzaG93IHRoZSB3ZWxjb21lIHNjcmVlbiB3aGVuIHdlIHNob3VsZC4KICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc0xvYWRpbmcpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICAgIGlzV2VsY29tZUVuYWJsZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmZpbmQoewogICAgICAgICAgICAgICAgdHlwZTogJ2luZGV4LXBhdHRlcm4nLAogICAgICAgICAgICAgICAgZmllbGRzOiBbJ3RpdGxlJ10sCiAgICAgICAgICAgICAgICBzZWFyY2g6ICIqIiwKICAgICAgICAgICAgICAgIHNlYXJjaF9maWVsZHM6IFsndGl0bGUnXSwKICAgICAgICAgICAgICAgIHBlclBhZ2U6IDEKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXNwID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgX3RoaXMuZW5kTG9hZGluZyh7CiAgICAgICAgICAgICAgICBpc05ld0tpYmFuYUluc3RhbmNlOiByZXNwLnRvdGFsID09PSAwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgICAvLyBBbiBlcnJvciBoZXJlIGlzIHJlbGF0aXZlbHkgdW5pbXBvcnRhbnQsIGFzIGl0IG9ubHkgbWVhbnMgd2UgZG9uJ3QgcHJvdmlkZQogICAgICAgICAgICAgIC8vIHNvbWUgVUkgbmljZXRpZXMuCiAgICAgICAgICAgICAgX3RoaXMuZW5kTG9hZGluZygpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA4XV0pOwogICAgfSkpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJlbmRMb2FkaW5nIiwgZnVuY3Rpb24gKCkgewogICAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHsKICAgICAgICBfdGhpcy5zZXRTdGF0ZShfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZQogICAgICAgIH0pKTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic2tpcFdlbGNvbWUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnByb3BzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKEtFWV9FTkFCTEVfV0VMQ09NRSwgJ2ZhbHNlJyk7CgogICAgICBfdGhpcy5faXNNb3VudGVkICYmIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1dlbGNvbWVFbmFibGVkOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbmRlckRpcmVjdG9yaWVzIiwgZnVuY3Rpb24gKGNhdGVnb3J5KSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLAogICAgICAgICAgYWRkQmFzZVBhdGggPSBfdGhpcyRwcm9wcy5hZGRCYXNlUGF0aCwKICAgICAgICAgIGRpcmVjdG9yaWVzID0gX3RoaXMkcHJvcHMuZGlyZWN0b3JpZXM7CiAgICAgIHJldHVybiBkaXJlY3Rvcmllcy5maWx0ZXIoZnVuY3Rpb24gKGRpcmVjdG9yeSkgewogICAgICAgIHJldHVybiBkaXJlY3Rvcnkuc2hvd09uSG9tZVBhZ2UgJiYgZGlyZWN0b3J5LmNhdGVnb3J5ID09PSBjYXRlZ29yeTsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChkaXJlY3RvcnkpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBjbGFzc05hbWU6ICJob21Ib21lX19zeW5vcHNpc0l0ZW0iLAogICAgICAgICAga2V5OiBkaXJlY3RvcnkuaWQKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zeW5vcHNpcy5TeW5vcHNpcywgewogICAgICAgICAgZGVzY3JpcHRpb246IGRpcmVjdG9yeS5kZXNjcmlwdGlvbiwKICAgICAgICAgIGljb25UeXBlOiBkaXJlY3RvcnkuaWNvbiwKICAgICAgICAgIHRpdGxlOiBkaXJlY3RvcnkudGl0bGUsCiAgICAgICAgICB1cmw6IGFkZEJhc2VQYXRoKGRpcmVjdG9yeS5wYXRoKQogICAgICAgIH0pKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICB2YXIgaXNXZWxjb21lRW5hYmxlZCA9ICEoKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0U2VydmljZXMpKCkuaG9tZUNvbmZpZy5kaXNhYmxlV2VsY29tZVNjcmVlbiB8fCBwcm9wcy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShLRVlfRU5BQkxFX1dFTENPTUUpID09PSAnZmFsc2UnKTsKICAgIF90aGlzLnN0YXRlID0gewogICAgICAvLyBJZiB3ZWxjb21lIGlzIGVuYWJsZWQsIHdlIHdhaXQgZm9yIGxvYWRpbmcgdG8gY29tcGxldGUKICAgICAgLy8gYmVmb3JlIHJlbmRlcmluZy4gVGhpcyBwcmV2ZW50cyBhbiBhbm5veWluZyBmbGlja2VyaW5nCiAgICAgIC8vIGVmZmVjdCB3aGVyZSBob21lIHJlbmRlcnMsIGFuZCB0aGVuIGEgZmV3IG1zIGFmdGVyLCB0aGUKICAgICAgLy8gd2VsY29tZSBzY3JlZW4gZmFkZXMgaW4uCiAgICAgIGlzTG9hZGluZzogaXNXZWxjb21lRW5hYmxlZCwKICAgICAgaXNOZXdLaWJhbmFJbnN0YW5jZTogZmFsc2UsCiAgICAgIGlzV2VsY29tZUVuYWJsZWQ6IGlzV2VsY29tZUVuYWJsZWQKICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSG9tZSwgW3sKICAgIGtleTogImNvbXBvbmVudFdpbGxVbm1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsKICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlOwogICAgICB0aGlzLmZldGNoSXNOZXdLaWJhbmFJbnN0YW5jZSgpOwoKICAgICAgdmFyIGhvbWVUaXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdob21lLmJyZWFkY3J1bWJzLmhvbWVUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0hvbWUnCiAgICAgIH0pOwoKICAgICAgKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0U2VydmljZXMpKCkuY2hyb21lLnNldEJyZWFkY3J1bWJzKFt7CiAgICAgICAgdGV4dDogaG9tZVRpdGxlCiAgICAgIH1dKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJOb3JtYWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlck5vcm1hbCgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsCiAgICAgICAgICBhcG1VaUVuYWJsZWQgPSBfdGhpcyRwcm9wczIuYXBtVWlFbmFibGVkLAogICAgICAgICAgbWxFbmFibGVkID0gX3RoaXMkcHJvcHMyLm1sRW5hYmxlZDsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlLCB7CiAgICAgICAgcmVzdHJpY3RXaWR0aDogMTIwMCwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaG9tZUFwcCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VCb2R5LCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZXVpLWRpc3BsYXlCbG9jayIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNjcmVlblJlYWRlck9ubHksIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgxIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImhvbWUud2VsY29tZUhvbWVQYWdlSGVhZGVyIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIktpYmFuYSBob21lIgogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hZGRfZGF0YS5BZGREYXRhLCB7CiAgICAgICAgYXBtVWlFbmFibGVkOiBhcG1VaUVuYWJsZWQsCiAgICAgICAgbWxFbmFibGVkOiBtbEVuYWJsZWQsCiAgICAgICAgaXNOZXdLaWJhbmFJbnN0YW5jZTogdGhpcy5zdGF0ZS5pc05ld0tpYmFuYUluc3RhbmNlCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgc2l6ZTogImwiCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgewogICAgICAgIHBhZGRpbmdTaXplOiAibCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImhvbWUuZGlyZWN0b3JpZXMudmlzdWFsaXplLm5hbWVUaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJWaXN1YWxpemUgYW5kIEV4cGxvcmUgRGF0YSIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcmlkLCB7CiAgICAgICAgY29sdW1uczogMiwKICAgICAgICBndXR0ZXJTaXplOiAicyIKICAgICAgfSwgdGhpcy5yZW5kZXJEaXJlY3Rvcmllcyhfc2VydmljZXMuRmVhdHVyZUNhdGFsb2d1ZUNhdGVnb3J5LkRBVEEpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgewogICAgICAgIHBhZGRpbmdTaXplOiAibCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImhvbWUuZGlyZWN0b3JpZXMubWFuYWdlLm5hbWVUaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJNYW5hZ2UgYW5kIEFkbWluaXN0ZXIgdGhlIEVsYXN0aWMgU3RhY2siCiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JpZCwgewogICAgICAgIGNvbHVtbnM6IDIKICAgICAgfSwgdGhpcy5yZW5kZXJEaXJlY3Rvcmllcyhfc2VydmljZXMuRmVhdHVyZUNhdGFsb2d1ZUNhdGVnb3J5LkFETUlOKSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibCIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBqdXN0aWZ5Q29udGVudDogImNlbnRlciIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UsCiAgICAgICAgY2xhc3NOYW1lOiAiZXVpLXRleHRDZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgICAgc2l6ZTogInMiLAogICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJob21lLmRpcmVjdG9yaWVzLm5vdEZvdW5kLmRlc2NyaXB0aW9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkRpZG5cdTIwMTl0IGZpbmQgd2hhdCB5b3Ugd2VyZSBsb29raW5nIGZvcj8iCiAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICBocmVmOiAiIy9ob21lL2ZlYXR1cmVfZGlyZWN0b3J5IgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiaG9tZS5kaXJlY3Rvcmllcy5ub3RGb3VuZC52aWV3RnVsbEJ1dHRvbkxhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlZpZXcgZnVsbCBkaXJlY3Rvcnkgb2YgS2liYW5hIHBsdWdpbnMiCiAgICAgIH0pKSkpKSk7CiAgICB9IC8vIEZvciBub3csIGxvYWRpbmcgaXMganVzdCBhbiBlbXB0eSBwYWdlLCBhcyB3ZSdsbCBzaG93IHNvbWV0aGluZwogICAgLy8gaW4gMjUwbXMsIG5vIG1hdHRlciB3aGF0LCBhbmQgYSBibGFuayBwYWdlIHByZXZlbnRzIGFuIG9kZCBmbGlja2VyIGVmZmVjdC4KCiAgfSwgewogICAga2V5OiAicmVuZGVyTG9hZGluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTG9hZGluZygpIHsKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlcldlbGNvbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcldlbGNvbWUoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF93ZWxjb21lLldlbGNvbWUsIHsKICAgICAgICBvblNraXA6IHRoaXMuc2tpcFdlbGNvbWUsCiAgICAgICAgdXJsQmFzZVBhdGg6IHRoaXMucHJvcHMudXJsQmFzZVBhdGgsCiAgICAgICAgdGVsZW1ldHJ5OiB0aGlzLnByb3BzLnRlbGVtZXRyeQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGlzTG9hZGluZyA9IF90aGlzJHN0YXRlLmlzTG9hZGluZywKICAgICAgICAgIGlzV2VsY29tZUVuYWJsZWQgPSBfdGhpcyRzdGF0ZS5pc1dlbGNvbWVFbmFibGVkLAogICAgICAgICAgaXNOZXdLaWJhbmFJbnN0YW5jZSA9IF90aGlzJHN0YXRlLmlzTmV3S2liYW5hSW5zdGFuY2U7CgogICAgICBpZiAoaXNXZWxjb21lRW5hYmxlZCkgewogICAgICAgIGlmIChpc0xvYWRpbmcpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckxvYWRpbmcoKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc05ld0tpYmFuYUluc3RhbmNlKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJXZWxjb21lKCk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5yZW5kZXJOb3JtYWwoKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBIb21lOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKZXhwb3J0cy5Ib21lID0gSG9tZTsKSG9tZS5wcm9wVHlwZXMgPSB7CiAgYWRkQmFzZVBhdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgZGlyZWN0b3JpZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7CiAgICBpZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogICAgdGl0bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCwKICAgIGRlc2NyaXB0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsCiAgICBpY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsCiAgICBwYXRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsCiAgICBzaG93T25Ib21lUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCwKICAgIGNhdGVnb3J5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQKICB9KSksCiAgYXBtVWlFbmFibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLAogIGZpbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgbG9jYWxTdG9yYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgdXJsQmFzZVBhdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCwKICBtbEVuYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsCiAgdGVsZW1ldHJ5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoewogICAgdGVsZW1ldHJ5U2VydmljZTogX3Byb3BUeXBlcy5kZWZhdWx0LmFueSwKICAgIHRlbGVtZXRyeU5vdGlmaWNhdGlvbnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnkKICB9KQp9Ow=="},null]}