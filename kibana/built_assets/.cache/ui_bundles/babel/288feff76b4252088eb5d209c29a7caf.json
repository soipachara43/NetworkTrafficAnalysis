{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/lib/aeroelastic/geometry.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/lib/aeroelastic/geometry.js","mtime":1589249552055},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmxhbmRtYXJrUG9pbnQgPSBleHBvcnRzLnNoYXBlc0F0ID0gZXhwb3J0cy5pbnNpZGVBQUJCID0gdm9pZCAwOwoKdmFyIF9tYXRyaXggPSByZXF1aXJlKCIuL21hdHJpeCIpOwoKdmFyIF9tYXRyaXgyZCA9IHJlcXVpcmUoIi4vbWF0cml4MmQiKTsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKLyoqCiAqIFB1cmUgY2FsY3VsYXRpb25zIHdpdGggZ2VvbWV0cnkgYXdhcmVuZXNzIC0gYSBzZXQgb2YgcmVjdGFuZ2xlcyB3aXRoIGtub3duIHNpemUgKGEsIGIpIGFuZCBwcm9qZWN0aW9uICh0cmFuc2Zvcm0gbWF0cml4KQogKi8KdmFyIGNvcm5lclNjcmVlblBvc2l0aW9ucyA9IGZ1bmN0aW9uIGNvcm5lclNjcmVlblBvc2l0aW9ucyh0cmFuc2Zvcm1NYXRyaXgsIGEsIGIpIHsKICByZXR1cm4gKC8vIGZvciB1bmtub3duIHBlcmYgZ2FpbiwgdGhpcyBjb3VsZCBiZSBjYWNoZWQgcGVyIHNoYXBlCiAgICBbX21hdHJpeC5UT1BfTEVGVCwgX21hdHJpeC5UT1BfUklHSFQsIF9tYXRyaXguQk9UVE9NX1JJR0hULCBfbWF0cml4LkJPVFRPTV9MRUZUXS5tYXAoZnVuY3Rpb24gKGNvcm5lcikgewogICAgICByZXR1cm4gKDAsIF9tYXRyaXgubXZNdWx0aXBseSkodHJhbnNmb3JtTWF0cml4LCAoMCwgX21hdHJpeC5jb21wb25lbnRQcm9kdWN0KShjb3JuZXIsIFthLCBiLCAwLCAxXSkpOwogICAgfSkKICApOwp9OwoKdmFyIGluc2lkZUFBQkIgPSBmdW5jdGlvbiBpbnNpZGVBQUJCKF9yZWYpIHsKICB2YXIgeCA9IF9yZWYueCwKICAgICAgeSA9IF9yZWYueSwKICAgICAgYSA9IF9yZWYuYSwKICAgICAgYiA9IF9yZWYuYjsKICByZXR1cm4gZnVuY3Rpb24gKHRyYW5zZm9ybU1hdHJpeCwgYWEsIGJiKSB7CiAgICB2YXIgY29ybmVycyA9IGNvcm5lclNjcmVlblBvc2l0aW9ucyh0cmFuc2Zvcm1NYXRyaXgsIGFhLCBiYik7CiAgICByZXR1cm4gY29ybmVycy5ldmVyeShmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgdmFyIF9yZWYzID0gX3NsaWNlZFRvQXJyYXkoX3JlZjIsIDIpLAogICAgICAgICAgeHggPSBfcmVmM1swXSwKICAgICAgICAgIHl5ID0gX3JlZjNbMV07CgogICAgICB2YXIgcmVzdWx0ID0geCAtIGEgPD0geHggJiYgeHggPD0geCArIGEgJiYgeSAtIGIgPD0geXkgJiYgeXkgPD0geSArIGI7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9KTsKICB9Owp9OwovKioKICoKICogYSAqIHgwICsgYiAqIHgxID0geAogKiBhICogeTAgKyBiICogeTEgPSB5CiAqCiAqIGEsIGIgPSA/CiAqCiAqIGIgPSAoeSAtIGEgKiB5MCkgLyB5MQogKgogKiBhICogeDAgKyBiICogeDEgPSB4CiAqCiAqIGEgKiB4MCArICh5IC0gYSAqIHkwKSAvIHkxICogeDEgPSB4CiAqCiAqIGEgKiB4MCArIHkgLyB5MSAqIHgxIC0gYSAqIHkwIC8geTEgKiB4MSA9IHgKICoKICogYSAqIHgwIC0gYSAqIHkwIC8geTEgKiB4MSA9IHggLSB5IC8geTEgKiB4MQogKgogKiBhICogKHgwIC0geTAgLyB5MSAqIHgxKSA9IHggLSB5IC8geTEgKiB4MQogKgogKiBhID0gKHggLSB5IC8geTEgKiB4MSkgLyAoeDAgLSB5MCAvIHkxICogeDEpCiAqIGIgPSAoeSAtIGEgKiB5MCkgLyB5MQogKgogKi8KCgpleHBvcnRzLmluc2lkZUFBQkIgPSBpbnNpZGVBQUJCOwoKdmFyIHBsYW5lVHVwbGUgPSBmdW5jdGlvbiBwbGFuZVR1cGxlKHRyYW5zZm9ybU1hdHJpeCwgeCwgeSkgewogIC8vIGZvciB1bmtub3duIHBlcmYgZ2FpbiwgdGhpcyBjb3VsZCBiZSBjYWNoZWQgcGVyIHNoYXBlCiAgdmFyIGNlbnRlclBvaW50ID0gKDAsIF9tYXRyaXgubm9ybWFsaXplKSgoMCwgX21hdHJpeC5tdk11bHRpcGx5KSh0cmFuc2Zvcm1NYXRyaXgsIF9tYXRyaXguT1JJR0lOKSk7CiAgdmFyIHJpZ2h0UG9pbnQgPSAoMCwgX21hdHJpeC5ub3JtYWxpemUpKCgwLCBfbWF0cml4Lm12TXVsdGlwbHkpKHRyYW5zZm9ybU1hdHJpeCwgX21hdHJpeC5SSUdIVCkpOwogIHZhciB1cFBvaW50ID0gKDAsIF9tYXRyaXgubm9ybWFsaXplKSgoMCwgX21hdHJpeC5tdk11bHRpcGx5KSh0cmFuc2Zvcm1NYXRyaXgsIF9tYXRyaXguVVApKTsKICB2YXIgeDAgPSByaWdodFBvaW50WzBdIC0gY2VudGVyUG9pbnRbMF07CiAgdmFyIHkwID0gcmlnaHRQb2ludFsxXSAtIGNlbnRlclBvaW50WzFdOwogIHZhciB4MSA9IHVwUG9pbnRbMF0gLSBjZW50ZXJQb2ludFswXTsKICB2YXIgeTEgPSB1cFBvaW50WzFdIC0gY2VudGVyUG9pbnRbMV07CiAgdmFyIHJpZ2h0U2xvcGUgPSB5MSA/IHJpZ2h0UG9pbnRbMl0gLSBjZW50ZXJQb2ludFsyXSA6IDA7IC8vIGhhbmRsZSBkZWdlbmVyYXRlIGNhc2U6IHkxID09PSAwIChpbmZpbml0ZSBzbG9wZSkKCiAgdmFyIHVwU2xvcGUgPSB5MSA/IHVwUG9pbnRbMl0gLSBjZW50ZXJQb2ludFsyXSA6IDA7IC8vIGhhbmRsZSBkZWdlbmVyYXRlIGNhc2U6IHkxID09PSAwIChpbmZpbml0ZSBzbG9wZSkKCiAgdmFyIGludmVyc2VQcm9qZWN0aW9uID0gKDAsIF9tYXRyaXguaW52ZXJ0KSh0cmFuc2Zvcm1NYXRyaXgpOwogIHZhciBBMSA9IDEgLyAoeDAgLSB5MCAvIHkxICogeDEpOwogIHZhciBBMiA9IC0oQTEgKiB4MSAvIHkxKTsKICB2YXIgQTAgPSAtQTEgKiBjZW50ZXJQb2ludFswXSAtIEEyICogY2VudGVyUG9pbnRbMV07CiAgdmFyIGludlkxID0gLTEgLyB5MTsKICB2YXIgejAgPSBjZW50ZXJQb2ludFsyXSArIHJpZ2h0U2xvcGUgKiBBMCArIHVwU2xvcGUgKiBpbnZZMSAqIChjZW50ZXJQb2ludFsxXSArIEEwICogeTApOwogIHZhciB6eCA9IEExICogKHJpZ2h0U2xvcGUgKyB1cFNsb3BlICogeTAgKiBpbnZZMSk7CiAgdmFyIHp5ID0gLXVwU2xvcGUgKiBpbnZZMSArIEEyICogKHJpZ2h0U2xvcGUgKyB1cFNsb3BlICogeTAgKiBpbnZZMSk7CiAgdmFyIHBsYW5lVmVjdG9yID0geTEgPT09IDAgPyBbeCwgeSwgY2VudGVyUG9pbnRbMl0sIDFdIDogW3p4LCB6eSwgejBdOwogIHJldHVybiB7CiAgICBpbnZlcnNlUHJvamVjdGlvbjogaW52ZXJzZVByb2plY3Rpb24sCiAgICBwbGFuZVZlY3RvcjogcGxhbmVWZWN0b3IKICB9Owp9OwoKdmFyIHJlY3RhbmdsZUF0UG9pbnQgPSBmdW5jdGlvbiByZWN0YW5nbGVBdFBvaW50KF9yZWY0LCB4LCB5KSB7CiAgdmFyIHRyYW5zZm9ybU1hdHJpeCA9IF9yZWY0LnRyYW5zZm9ybU1hdHJpeCwKICAgICAgYSA9IF9yZWY0LmEsCiAgICAgIGIgPSBfcmVmNC5iOwoKICB2YXIgX3BsYW5lVHVwbGUgPSBwbGFuZVR1cGxlKHRyYW5zZm9ybU1hdHJpeCwgeCwgeSksCiAgICAgIGludmVyc2VQcm9qZWN0aW9uID0gX3BsYW5lVHVwbGUuaW52ZXJzZVByb2plY3Rpb24sCiAgICAgIHBsYW5lVmVjdG9yID0gX3BsYW5lVHVwbGUucGxhbmVWZWN0b3I7IC8vIERldGVybWluZSB6IChkZXB0aCkgYnkgY29tcG9zaW5nIHRoZSB4LCB5IHZlY3RvciBvdXQgb2YgbG9jYWwgdW5pdCB4IGFuZCB1bml0IHkgdmVjdG9yczsgYnkga25vd2luZyB0aGUKICAvLyBzY2FsYXIgbXVsdGlwbGllcnMgZm9yIHRoZSB1bml0IHggYW5kIHVuaXQgeSB2ZWN0b3JzLCB3ZSBjYW4gZGV0ZXJtaW5lIHogZnJvbSB0aGVpciByZXNwZWN0aXZlICdzbG9wZScgKGdyYWRpZW50KQoKCiAgdmFyIHNjcmVlbk5vcm1hbFZlY3RvciA9IFt4LCB5LCAxXTsKICB2YXIgeiA9ICgwLCBfbWF0cml4MmQuZG90UHJvZHVjdCkocGxhbmVWZWN0b3IsIHNjcmVlbk5vcm1hbFZlY3Rvcik7IC8vIFdlIGdvIGZ1bGwgdGlsdCB3aXRoIHRoZSBpbnZlcnNlIHRyYW5zZm9ybSBhcHByb2FjaCBiZWNhdXNlIHRoYXQncyBnZW5lcmFsIGVub3VnaCB0byBoYW5kbGUgYW55IG5vbi1wYXRob2xvZ2ljYWwKICAvLyBjb21wb3NpdGlvbiBvZiB0cmFuc2Zvcm1zLiBFZy4gdGhpcyBpcyBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpZGVhOiBodHRwczovL21hdGguc3RhY2tleGNoYW5nZS5jb20vYS8xNjg1MzE1CiAgLy8gSG1tIG1heWJlIHdlIHNob3VsZCByZXVzZSB0aGUgYWJvdmUgcmlnaHQgYW5kIHVwIHVuaXQgdmVjdG9ycyB0byBlc3RhYmxpc2ggd2hldGhlciB3ZSdyZSB3aXRoaW4gdGhlIChhLCBiKSAncmFkaXVzJwogIC8vIHJhdGhlciB0aGFuIHVzaW5nIG1hdHJpeCBpbnZlcnNpb24uIEJvdW5kIHRvIGJlIGNoZWFwZXIuCgogIHZhciBpbnRlcnNlY3Rpb24gPSAoMCwgX21hdHJpeC5ub3JtYWxpemUpKCgwLCBfbWF0cml4Lm12TXVsdGlwbHkpKGludmVyc2VQcm9qZWN0aW9uLCBbeCwgeSwgeiwgMV0pKTsKCiAgdmFyIF9pbnRlcnNlY3Rpb24gPSBfc2xpY2VkVG9BcnJheShpbnRlcnNlY3Rpb24sIDIpLAogICAgICBzeCA9IF9pbnRlcnNlY3Rpb25bMF0sCiAgICAgIHN5ID0gX2ludGVyc2VjdGlvblsxXTsKCiAgdmFyIGluc2lkZSA9IE1hdGguYWJzKHN4KSA8PSBhICYmIE1hdGguYWJzKHN5KSA8PSBiOyAvLyB6IGlzIG5lZWRlZCBkb3duc3RyZWFtLCB0byB0ZWxsIHdoaWNoIG9uZSBpcyB0aGUgY2xvc2VzdCBzaGFwZSBoaXQgYnkgYW4geCwgeSByYXkgKHNoYXBlcyBjYW4gYmUgdGlsdGVkIGluIHopCiAgLy8gaXQgbG9va3Mgd2VpcmQgdG8gZXZlbiByZXR1cm4gaXRlbXMgd2hlcmUgaW5zaWRlID09PSBmYWxzZSwgYnV0IGl0IGNvdWxkIGJlIHVzZWZ1bCBmb3IgaG90c3BvdHMgb3V0c2lkZSB0aGUgcmVjdGFuZ2xlCgogIHJldHVybiB7CiAgICB6OiB6LAogICAgaW50ZXJzZWN0aW9uOiBpbnRlcnNlY3Rpb24sCiAgICBpbnNpZGU6IGluc2lkZQogIH07Cn07IC8vIHNldCBvZiBzaGFwZXMgdW5kZXIgYSBzcGVjaWZpYyBwb2ludAoKCnZhciBzaGFwZXNBdFBvaW50ID0gZnVuY3Rpb24gc2hhcGVzQXRQb2ludChzaGFwZXMsIHgsIHkpIHsKICByZXR1cm4gc2hhcGVzLm1hcChmdW5jdGlvbiAoc2hhcGUsIGluZGV4KSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmVjdGFuZ2xlQXRQb2ludChzaGFwZSwgeCwgeSksIHsKICAgICAgc2hhcGU6IHNoYXBlLAogICAgICBpbmRleDogaW5kZXgKICAgIH0pOwogIH0pOwp9OyAvLyBaLW9yZGVyIHRoZSBwb3NzaWJseSBzZXZlcmFsIHNoYXBlcyB1bmRlciB0aGUgc2FtZSBwb2ludC4KLy8gU2luY2UgQ1NTIFggcG9pbnRzIHRvIHRoZSByaWdodCwgWSB0byB0aGUgYm90dG9tIChub3QgdGhlIHRvcCEpIGFuZCBaIHRvd2FyZCB0aGUgdmlld2VyLCBpdCdzIGEgbGVmdC1oYW5kZWQgY29vcmRpbmF0ZQovLyBzeXN0ZW0uIFlldCBhbm90aGVyIHdvcmRpbmcgaXMgdGhhdCBYIGFuZCBaIHBvaW50IHRvd2FyZCB0aGUgZXhwZWN0ZWQgZGlyZWN0aW9ucyAocmlnaHQsIGFuZCB0b3dhcmRzIHRoZSB2aWV3ZXIsCi8vIHJlc3BlY3RpdmVseSksIGJ1dCBZIGlzIHBvaW50aW5nIHRvd2FyZCB0aGUgYm90dG9tIChTb3V0aCkuIEl0J3MgY2FsbGVkIGxlZnQtaGFuZGVkIGJlY2F1c2Ugd2UgY2FuIHBvc2l0aW9uIHRoZSB0aHVtYiAoWCksCi8vIGluZGV4IChZKSBhbmQgbWlkZGxlIGZpbmdlciAoWikgb24gdGhlIGxlZnQgaGFuZCBzdWNoIHRoYXQgdGhleSdyZSBhbGwgcGVycGVuZGljdWxhciB0byBvbmUgYW5vdGhlciwgYW5kIHBvaW50IHRvIHRoZQovLyBwb3NpdGl2ZSBkaXJlY3Rpb24uCi8vCi8vIElmIGl0IHdlcmUgYSByaWdodCBoYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0sIEFORCBZIHN0aWxsIHBvaW50ZWQgZG93biwgdGhlbiBaIHNob3VsZCBpbmNyZWFzZSBhd2F5IGZyb20gdGhlCi8vIHZpZXdlci4gQnV0IHRoYXQncyBub3QgdGhlIGNhc2UuIFNvIHdlIG1heGltaXplIHRoZSBaIHZhbHVlIHRvIHRlbGwgd2hhdCdzIG9uIHRvcC4KCgp2YXIgc2hhcGVzQXQgPSBmdW5jdGlvbiBzaGFwZXNBdChzaGFwZXMsIF9yZWY1KSB7CiAgdmFyIHggPSBfcmVmNS54LAogICAgICB5ID0gX3JlZjUueTsKICByZXR1cm4gc2hhcGVzQXRQb2ludChzaGFwZXMsIHgsIHkpLmZpbHRlcihmdW5jdGlvbiAoc2hhcGUpIHsKICAgIHJldHVybiBzaGFwZS5pbnNpZGU7CiAgfSkuc29ydChmdW5jdGlvbiAoc2hhcGUxLCBzaGFwZTIpIHsKICAgIHJldHVybiBzaGFwZTIueiAtIHNoYXBlMS56IHx8IHNoYXBlMi5pbmRleCAtIHNoYXBlMS5pbmRleDsKICB9KSAvLyBzdGFibGUgc29ydDogRE9NIGluc2VydGlvbiBvcmRlciEhIQogIC5tYXAoZnVuY3Rpb24gKHNoYXBlKSB7CiAgICByZXR1cm4gc2hhcGUuc2hhcGU7CiAgfSk7Cn07IC8vIGRlY3JlYXNpbmcgb3JkZXIsIGllLiBmcm9tIGZyb250IChjbG9zZXN0IHRvIHZpZXdlcikgdG8gYmFjawoKCmV4cG9ydHMuc2hhcGVzQXQgPSBzaGFwZXNBdDsKCnZhciBnZXRFeHRyZW11bSA9IGZ1bmN0aW9uIGdldEV4dHJlbXVtKHRyYW5zZm9ybU1hdHJpeCwgYSwgYikgewogIHJldHVybiAoMCwgX21hdHJpeC5ub3JtYWxpemUpKCgwLCBfbWF0cml4Lm12TXVsdGlwbHkpKHRyYW5zZm9ybU1hdHJpeCwgW2EsIGIsIDAsIDFdKSk7Cn07Cgp2YXIgbGFuZG1hcmtQb2ludCA9IGZ1bmN0aW9uIGxhbmRtYXJrUG9pbnQoYSwgYiwgdHJhbnNmb3JtTWF0cml4LCBrLCBsKSB7CiAgcmV0dXJuIGdldEV4dHJlbXVtKHRyYW5zZm9ybU1hdHJpeCwgayAqIGEsIGwgKiBiKTsKfTsKCmV4cG9ydHMubGFuZG1hcmtQb2ludCA9IGxhbmRtYXJrUG9pbnQ7"},null]}