{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/common/es_query/kuery/functions/geo_polygon.js","dependencies":[{"path":"src/plugins/data/common/es_query/kuery/functions/geo_polygon.js","mtime":1589249550567},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmJ1aWxkTm9kZVBhcmFtcyA9IGJ1aWxkTm9kZVBhcmFtczsKZXhwb3J0cy50b0VsYXN0aWNzZWFyY2hRdWVyeSA9IHRvRWxhc3RpY3NlYXJjaFF1ZXJ5OwoKdmFyIF9ub2RlX3R5cGVzID0gcmVxdWlyZSgiLi4vbm9kZV90eXBlcyIpOwoKdmFyIGFzdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4uL2FzdCIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQovKgogKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IKICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQKICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlcgogKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heQogKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KICogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiAqIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCgpmdW5jdGlvbiBidWlsZE5vZGVQYXJhbXMoZmllbGROYW1lLCBwb2ludHMpIHsKICB2YXIgZmllbGROYW1lQXJnID0gX25vZGVfdHlwZXMubm9kZVR5cGVzLmxpdGVyYWwuYnVpbGROb2RlKGZpZWxkTmFtZSk7CgogIHZhciBhcmdzID0gcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgIHZhciBsYXRMb24gPSAiIi5jb25jYXQocG9pbnQubGF0LCAiLCAiKS5jb25jYXQocG9pbnQubG9uKTsKICAgIHJldHVybiBfbm9kZV90eXBlcy5ub2RlVHlwZXMubGl0ZXJhbC5idWlsZE5vZGUobGF0TG9uKTsKICB9KTsKICByZXR1cm4gewogICAgYXJndW1lbnRzOiBbZmllbGROYW1lQXJnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKQogIH07Cn0KCmZ1bmN0aW9uIHRvRWxhc3RpY3NlYXJjaFF1ZXJ5KG5vZGUsIGluZGV4UGF0dGVybikgewogIHZhciBfZ2VvX3BvbHlnb247CgogIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9OwogIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTsKCiAgdmFyIF9yZWY7CgogIHZhciBfbm9kZSRhcmd1bWVudHMgPSBfdG9BcnJheShub2RlLmFyZ3VtZW50cyksCiAgICAgIGZpZWxkTmFtZUFyZyA9IF9ub2RlJGFyZ3VtZW50c1swXSwKICAgICAgcG9pbnRzID0gX25vZGUkYXJndW1lbnRzLnNsaWNlKDEpOwoKICB2YXIgZnVsbEZpZWxkTmFtZUFyZyA9IF9vYmplY3RTcHJlYWQoe30sIGZpZWxkTmFtZUFyZywgewogICAgdmFsdWU6IChjb250ZXh0ID09PSBudWxsIHx8IGNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRleHQubmVzdGVkKSA/ICIiLmNvbmNhdChjb250ZXh0Lm5lc3RlZC5wYXRoLCAiLiIpLmNvbmNhdChmaWVsZE5hbWVBcmcudmFsdWUpIDogZmllbGROYW1lQXJnLnZhbHVlCiAgfSk7CgogIHZhciBmaWVsZE5hbWUgPSBfbm9kZV90eXBlcy5ub2RlVHlwZXMubGl0ZXJhbC50b0VsYXN0aWNzZWFyY2hRdWVyeShmdWxsRmllbGROYW1lQXJnKTsKCiAgdmFyIGZpZWxkTGlzdCA9IChfcmVmID0gaW5kZXhQYXR0ZXJuID09PSBudWxsIHx8IGluZGV4UGF0dGVybiA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5kZXhQYXR0ZXJuLmZpZWxkcykgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IFtdOwogIHZhciBmaWVsZCA9IGZpZWxkTGlzdC5maW5kKGZ1bmN0aW9uIChmbGQpIHsKICAgIHJldHVybiBmbGQubmFtZSA9PT0gZmllbGROYW1lOwogIH0pOwogIHZhciBxdWVyeVBhcmFtcyA9IHsKICAgIHBvaW50czogcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHsKICAgICAgcmV0dXJuIGFzdC50b0VsYXN0aWNzZWFyY2hRdWVyeShwb2ludCwgaW5kZXhQYXR0ZXJuLCBjb25maWcsIGNvbnRleHQpOwogICAgfSkKICB9OwoKICBpZiAoZmllbGQgPT09IG51bGwgfHwgZmllbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkLnNjcmlwdGVkKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkdlbyBwb2x5Z29uIHF1ZXJ5IGRvZXMgbm90IHN1cHBvcnQgc2NyaXB0ZWQgZmllbGRzIik7CiAgfQoKICByZXR1cm4gewogICAgZ2VvX3BvbHlnb246IChfZ2VvX3BvbHlnb24gPSB7fSwgX2RlZmluZVByb3BlcnR5KF9nZW9fcG9seWdvbiwgZmllbGROYW1lLCBxdWVyeVBhcmFtcyksIF9kZWZpbmVQcm9wZXJ0eShfZ2VvX3BvbHlnb24sICJpZ25vcmVfdW5tYXBwZWQiLCB0cnVlKSwgX2dlb19wb2x5Z29uKQogIH07Cn0="},null]}