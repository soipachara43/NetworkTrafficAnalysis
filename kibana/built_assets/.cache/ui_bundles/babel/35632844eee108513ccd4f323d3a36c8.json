{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/sections/home/follower_indices_list/components/follower_indices_table/follower_indices_table.js","dependencies":[{"path":"x-pack/legacy/plugins/cross_cluster_replication/public/np_ready/app/sections/home/follower_indices_list/components/follower_indices_table/follower_indices_table.js","mtime":1589249552200},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkZvbGxvd2VySW5kaWNlc1RhYmxlID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb25zdGFudHMiKTsKCnZhciBfY29tcG9uZW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMiKTsKCnZhciBfcm91dGluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvcm91dGluZyIpKTsKCnZhciBfdHJhY2tfdWlfbWV0cmljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vc2VydmljZXMvdHJhY2tfdWlfbWV0cmljIik7Cgp2YXIgX2NvbnRleHRfbWVudSA9IHJlcXVpcmUoIi4uL2NvbnRleHRfbWVudSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgRm9sbG93ZXJJbmRpY2VzVGFibGUgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkgewogIF9pbmhlcml0cyhGb2xsb3dlckluZGljZXNUYWJsZSwgX1B1cmVDb21wb25lbnQpOwoKICBmdW5jdGlvbiBGb2xsb3dlckluZGljZXNUYWJsZSgpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9sbG93ZXJJbmRpY2VzVGFibGUpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoRm9sbG93ZXJJbmRpY2VzVGFibGUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHsKICAgICAgc2VsZWN0ZWRJdGVtczogW10KICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uU2VhcmNoIiwgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIHF1ZXJ5ID0gX3JlZi5xdWVyeTsKICAgICAgdmFyIHRleHQgPSBxdWVyeS50ZXh0OwogICAgICB2YXIgbm9ybWFsaXplZFNlYXJjaFRleHQgPSB0ZXh0LnRvTG93ZXJDYXNlKCk7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgcXVlcnlUZXh0OiBub3JtYWxpemVkU2VhcmNoVGV4dAogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImVkaXRGb2xsb3dlckluZGV4IiwgZnVuY3Rpb24gKGlkKSB7CiAgICAgIHZhciB1cmkgPSBfcm91dGluZy5kZWZhdWx0LmdldEZvbGxvd2VySW5kZXhQYXRoKGlkLCAnL2VkaXQnLCBmYWxzZSk7CgogICAgICBfcm91dGluZy5kZWZhdWx0Lm5hdmlnYXRlKHVyaSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnZXRGaWx0ZXJlZEluZGljZXMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBmb2xsb3dlckluZGljZXMgPSBfdGhpcy5wcm9wcy5mb2xsb3dlckluZGljZXM7CiAgICAgIHZhciBxdWVyeVRleHQgPSBfdGhpcy5zdGF0ZS5xdWVyeVRleHQ7CgogICAgICBpZiAocXVlcnlUZXh0KSB7CiAgICAgICAgcmV0dXJuIGZvbGxvd2VySW5kaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGZvbGxvd2VySW5kZXgpIHsKICAgICAgICAgIHZhciBuYW1lID0gZm9sbG93ZXJJbmRleC5uYW1lLAogICAgICAgICAgICAgIHJlbW90ZUNsdXN0ZXIgPSBmb2xsb3dlckluZGV4LnJlbW90ZUNsdXN0ZXIsCiAgICAgICAgICAgICAgbGVhZGVySW5kZXggPSBmb2xsb3dlckluZGV4LmxlYWRlckluZGV4OwogICAgICAgICAgdmFyIGluTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeVRleHQpOwogICAgICAgICAgdmFyIGluUmVtb3RlQ2x1c3RlciA9IHJlbW90ZUNsdXN0ZXIudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeVRleHQpOwogICAgICAgICAgdmFyIGluTGVhZGVySW5kZXggPSBsZWFkZXJJbmRleC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5VGV4dCk7CiAgICAgICAgICByZXR1cm4gaW5OYW1lIHx8IGluUmVtb3RlQ2x1c3RlciB8fCBpbkxlYWRlckluZGV4OwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gZm9sbG93ZXJJbmRpY2VzLnNsaWNlKDApOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyTG9hZGluZyIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGFwaVN0YXR1c0RlbGV0ZSA9IF90aGlzLnByb3BzLmFwaVN0YXR1c0RlbGV0ZTsKCiAgICAgIGlmIChhcGlTdGF0dXNEZWxldGUgPT09IF9jb25zdGFudHMuQVBJX1NUQVRVUy5ERUxFVElORykgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpT3ZlcmxheU1hc2ssIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nS2liYW5hLCB7CiAgICAgICAgICBzaXplOiAieGwiCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhGb2xsb3dlckluZGljZXNUYWJsZSwgW3sKICAgIGtleTogImdldFRhYmxlQ29sdW1ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFibGVDb2x1bW5zKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBzZWxlY3RGb2xsb3dlckluZGV4ID0gdGhpcy5wcm9wcy5zZWxlY3RGb2xsb3dlckluZGV4OwogICAgICB2YXIgYWN0aW9ucyA9IFsKICAgICAgLyogUGF1c2Ugb3IgcmVzdW1lIGZvbGxvd2VyIGluZGV4ICovCiAgICAgIHsKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihmb2xsb3dlckluZGV4KSB7CiAgICAgICAgICB2YXIgbmFtZSA9IGZvbGxvd2VySW5kZXgubmFtZSwKICAgICAgICAgICAgICBpc1BhdXNlZCA9IGZvbGxvd2VySW5kZXguaXNQYXVzZWQ7CiAgICAgICAgICB2YXIgbGFiZWwgPSBpc1BhdXNlZCA/IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4TGlzdC50YWJsZS5hY3Rpb25SZXN1bWVEZXNjcmlwdGlvbicsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSZXN1bWUgcmVwbGljYXRpb24nCiAgICAgICAgICB9KSA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4TGlzdC50YWJsZS5hY3Rpb25QYXVzZURlc2NyaXB0aW9uJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1BhdXNlIHJlcGxpY2F0aW9uJwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gaXNQYXVzZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkZvbGxvd2VySW5kZXhSZXN1bWVQcm92aWRlciwgbnVsbCwgZnVuY3Rpb24gKHJlc3VtZUZvbGxvd2VySW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7CiAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bWVGb2xsb3dlckluZGV4KG5hbWUpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInJlc3VtZUJ1dHRvbiIKICAgICAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6IGxhYmVsLAogICAgICAgICAgICAgIHR5cGU6ICJwbGF5IiwKICAgICAgICAgICAgICBjbGFzc05hbWU6ICJldWlDb250ZXh0TWVudV9faWNvbiIKICAgICAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBsYWJlbCkpOwogICAgICAgICAgfSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkZvbGxvd2VySW5kZXhQYXVzZVByb3ZpZGVyLCBudWxsLCBmdW5jdGlvbiAocGF1c2VGb2xsb3dlckluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGF1c2VGb2xsb3dlckluZGV4KGZvbGxvd2VySW5kZXgpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInBhdXNlQnV0dG9uIgogICAgICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSWNvbiwgewogICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogbGFiZWwsCiAgICAgICAgICAgICAgdHlwZTogInBhdXNlIiwKICAgICAgICAgICAgICBjbGFzc05hbWU6ICJldWlDb250ZXh0TWVudV9faWNvbiIKICAgICAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBsYWJlbCkpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LAogICAgICAvKiBFZGl0IGZvbGxvd2VyIGluZGV4ICovCiAgICAgIHsKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmMikgewogICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lOwoKICAgICAgICAgIHZhciBsYWJlbCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4TGlzdC50YWJsZS5hY3Rpb25FZGl0RGVzY3JpcHRpb24nLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRWRpdCBmb2xsb3dlciBpbmRleCcKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZWRpdEZvbGxvd2VySW5kZXgobmFtZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJlZGl0QnV0dG9uIgogICAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICAgICAgImFyaWEtbGFiZWwiOiBsYWJlbCwKICAgICAgICAgICAgdHlwZTogInBlbmNpbCIsCiAgICAgICAgICAgIGNsYXNzTmFtZTogImV1aUNvbnRleHRNZW51X19pY29uIgogICAgICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBsYWJlbCkpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgLyogVW5mb2xsb3cgbGVhZGVyIGluZGV4ICovCiAgICAgIHsKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihfcmVmMykgewogICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lOwoKICAgICAgICAgIHZhciBsYWJlbCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4TGlzdC50YWJsZS5hY3Rpb25VbmZvbGxvd0Rlc2NyaXB0aW9uJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuZm9sbG93IGxlYWRlciBpbmRleCcKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21wb25lbnRzLkZvbGxvd2VySW5kZXhVbmZvbGxvd1Byb3ZpZGVyLCBudWxsLCBmdW5jdGlvbiAodW5mb2xsb3dMZWFkZXJJbmRleCkgewogICAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHVuZm9sbG93TGVhZGVySW5kZXgobmFtZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidW5mb2xsb3dCdXR0b24iCiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJY29uLCB7CiAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiBsYWJlbCwKICAgICAgICAgICAgICB0eXBlOiAiaW5kZXhGbHVzaCIsCiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiZXVpQ29udGV4dE1lbnVfX2ljb24iCiAgICAgICAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgbGFiZWwpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfV07CiAgICAgIHJldHVybiBbewogICAgICAgIGZpZWxkOiAnbmFtZScsCiAgICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmZvbGxvd2VySW5kZXhMaXN0LnRhYmxlLm5hbWVDb2x1bW5UaXRsZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTmFtZScKICAgICAgICB9KSwKICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB0cnVuY2F0ZVRleHQ6IGZhbHNlLAogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKG5hbWUpIHsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgICgwLCBfdHJhY2tfdWlfbWV0cmljLnRyYWNrVWlNZXRyaWMpKF90cmFja191aV9tZXRyaWMuTUVUUklDX1RZUEUuQ0xJQ0ssIF9jb25zdGFudHMuVUlNX0ZPTExPV0VSX0lOREVYX1NIT1dfREVUQUlMU19DTElDSyk7CiAgICAgICAgICAgICAgc2VsZWN0Rm9sbG93ZXJJbmRleChuYW1lKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImZvbGxvd2VySW5kZXhMaW5rIgogICAgICAgICAgfSwgbmFtZSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgZmllbGQ6ICdpc1BhdXNlZCcsCiAgICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmNyb3NzQ2x1c3RlclJlcGxpY2F0aW9uLmZvbGxvd2VySW5kZXhMaXN0LnRhYmxlLnN0YXR1c0NvbHVtblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTdGF0dXMnCiAgICAgICAgfSksCiAgICAgICAgdHJ1bmNhdGVUZXh0OiB0cnVlLAogICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGlzUGF1c2VkKSB7CiAgICAgICAgICByZXR1cm4gaXNQYXVzZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSGVhbHRoLCB7CiAgICAgICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleExpc3QudGFibGUuc3RhdHVzQ29sdW1uLnBhdXNlZExhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJQYXVzZWQiCiAgICAgICAgICB9KSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSGVhbHRoLCB7CiAgICAgICAgICAgIGNvbG9yOiAic3VjY2VzcyIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAieHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleExpc3QudGFibGUuc3RhdHVzQ29sdW1uLmFjdGl2ZUxhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBY3RpdmUiCiAgICAgICAgICB9KSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgZmllbGQ6ICdyZW1vdGVDbHVzdGVyJywKICAgICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleExpc3QudGFibGUuY2x1c3RlckNvbHVtblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSZW1vdGUgY2x1c3RlcicKICAgICAgICB9KSwKICAgICAgICB0cnVuY2F0ZVRleHQ6IHRydWUsCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnbGVhZGVySW5kZXgnLAogICAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5jcm9zc0NsdXN0ZXJSZXBsaWNhdGlvbi5mb2xsb3dlckluZGV4TGlzdC50YWJsZS5sZWFkZXJJbmRleENvbHVtblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMZWFkZXIgaW5kZXgnCiAgICAgICAgfSksCiAgICAgICAgdHJ1bmNhdGVUZXh0OiB0cnVlLAogICAgICAgIHNvcnRhYmxlOiB0cnVlCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suY3Jvc3NDbHVzdGVyUmVwbGljYXRpb24uZm9sbG93ZXJJbmRleExpc3QudGFibGUuYWN0aW9uc0NvbHVtblRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBY3Rpb25zJwogICAgICAgIH0pLAogICAgICAgIGFjdGlvbnM6IGFjdGlvbnMsCiAgICAgICAgd2lkdGg6ICcxMDBweCcKICAgICAgfV07CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHNlbGVjdGVkSXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkSXRlbXM7CiAgICAgIHZhciBzb3J0aW5nID0gewogICAgICAgIHNvcnQ6IHsKICAgICAgICAgIGZpZWxkOiAnbmFtZScsCiAgICAgICAgICBkaXJlY3Rpb246ICdhc2MnCiAgICAgICAgfQogICAgICB9OwogICAgICB2YXIgcGFnaW5hdGlvbiA9IHsKICAgICAgICBpbml0aWFsUGFnZVNpemU6IDIwLAogICAgICAgIHBhZ2VTaXplT3B0aW9uczogWzEwLCAyMCwgNTBdCiAgICAgIH07CiAgICAgIHZhciBzZWxlY3Rpb24gPSB7CiAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2U6IGZ1bmN0aW9uIG9uU2VsZWN0aW9uQ2hhbmdlKHNlbGVjdGVkSXRlbXMpIHsKICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U3RhdGUoewogICAgICAgICAgICBzZWxlY3RlZEl0ZW1zOiBzZWxlY3RlZEl0ZW1zCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHZhciBzZWFyY2ggPSB7CiAgICAgICAgdG9vbHNMZWZ0OiBzZWxlY3RlZEl0ZW1zLmxlbmd0aCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbnRleHRfbWVudS5Db250ZXh0TWVudSwgewogICAgICAgICAgZm9sbG93ZXJJbmRpY2VzOiBzZWxlY3RlZEl0ZW1zLAogICAgICAgICAgdGVzdFN1Ymo6ICJjb250ZXh0TWVudUJ1dHRvbiIKICAgICAgICB9KSA6IHVuZGVmaW5lZCwKICAgICAgICBvbkNoYW5nZTogdGhpcy5vblNlYXJjaCwKICAgICAgICBib3g6IHsKICAgICAgICAgIGluY3JlbWVudGFsOiB0cnVlCiAgICAgICAgfQogICAgICB9OwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJbk1lbW9yeVRhYmxlLCB7CiAgICAgICAgaXRlbXM6IHRoaXMuZ2V0RmlsdGVyZWRJbmRpY2VzKCksCiAgICAgICAgaXRlbUlkOiAibmFtZSIsCiAgICAgICAgY29sdW1uczogdGhpcy5nZXRUYWJsZUNvbHVtbnMoKSwKICAgICAgICBzZWFyY2g6IHNlYXJjaCwKICAgICAgICBwYWdpbmF0aW9uOiBwYWdpbmF0aW9uLAogICAgICAgIHNvcnRpbmc6IHNvcnRpbmcsCiAgICAgICAgc2VsZWN0aW9uOiBzZWxlY3Rpb24sCiAgICAgICAgaXNTZWxlY3RhYmxlOiB0cnVlLAogICAgICAgIHJvd1Byb3BzOiBmdW5jdGlvbiByb3dQcm9wcygpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdyb3cnCiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgY2VsbFByb3BzOiBmdW5jdGlvbiBjZWxsUHJvcHMoaXRlbSwgY29sdW1uKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAiY2VsbC0iLmNvbmNhdChjb2x1bW4uZmllbGQpCiAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImZvbGxvd2VySW5kZXhMaXN0VGFibGUiCiAgICAgIH0pLCB0aGlzLnJlbmRlckxvYWRpbmcoKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9sbG93ZXJJbmRpY2VzVGFibGU7Cn0oX3JlYWN0LlB1cmVDb21wb25lbnQpOwoKZXhwb3J0cy5Gb2xsb3dlckluZGljZXNUYWJsZSA9IEZvbGxvd2VySW5kaWNlc1RhYmxlOwoKX2RlZmluZVByb3BlcnR5KEZvbGxvd2VySW5kaWNlc1RhYmxlLCAicHJvcFR5cGVzIiwgewogIGZvbGxvd2VySW5kaWNlczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LAogIHNlbGVjdEZvbGxvd2VySW5kZXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKfSk7"},null]}