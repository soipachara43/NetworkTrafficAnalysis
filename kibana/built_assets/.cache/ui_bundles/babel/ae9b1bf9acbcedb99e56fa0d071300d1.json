{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/inspector/public/views/requests/components/request_selector.js","dependencies":[{"path":"src/plugins/inspector/public/views/requests/components/request_selector.js","mtime":1589249550923},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUmVxdWVzdFNlbGVjdG9yID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9hZGFwdGVycyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbW1vbi9hZGFwdGVycyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsKICB9OwogIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7Cn0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgewogIGlmIChzZWxmID09PSB2b2lkIDApIHsKICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7CiAgfQoKICByZXR1cm4gc2VsZjsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgby5fX3Byb3RvX18gPSBwOwogICAgcmV0dXJuIG87CiAgfTsKCiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBSZXF1ZXN0U2VsZWN0b3IgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFJlcXVlc3RTZWxlY3RvciwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFJlcXVlc3RTZWxlY3RvcigpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVxdWVzdFNlbGVjdG9yKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFJlcXVlc3RTZWxlY3RvcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidG9nZ2xlUG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpc1BvcG92ZXJPcGVuOiAhcHJldlN0YXRlLmlzUG9wb3Zlck9wZW4KICAgICAgICB9OwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNsb3NlUG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGlzUG9wb3Zlck9wZW46IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyUmVxdWVzdERyb3Bkb3duSXRlbSIsIGZ1bmN0aW9uIChyZXF1ZXN0LCBpbmRleCkgewogICAgICB2YXIgaGFzRmFpbGVkID0gcmVxdWVzdC5zdGF0dXMgPT09IF9hZGFwdGVycy5SZXF1ZXN0U3RhdHVzLkVSUk9SOwogICAgICB2YXIgaW5Qcm9ncmVzcyA9IHJlcXVlc3Quc3RhdHVzID09PSBfYWRhcHRlcnMuUmVxdWVzdFN0YXR1cy5QRU5ESU5HOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51SXRlbSwgewogICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgaWNvbjogcmVxdWVzdCA9PT0gX3RoaXMucHJvcHMuc2VsZWN0ZWRSZXF1ZXN0ID8gJ2NoZWNrJyA6ICdlbXB0eScsCiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgIF90aGlzLnByb3BzLm9uUmVxdWVzdENoYW5nZWQocmVxdWVzdCk7CgogICAgICAgICAgX3RoaXMuY2xvc2VQb3BvdmVyKCk7CiAgICAgICAgfSwKICAgICAgICB0b29sVGlwQ29udGVudDogcmVxdWVzdC5kZXNjcmlwdGlvbiwKICAgICAgICB0b29sVGlwUG9zaXRpb246ICJsZWZ0IiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5zcGVjdG9yUmVxdWVzdENob29zZXIiLmNvbmNhdChyZXF1ZXN0Lm5hbWUpCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0Q29sb3IsIHsKICAgICAgICBjb2xvcjogaGFzRmFpbGVkID8gJ2RhbmdlcicgOiAnZGVmYXVsdCcKICAgICAgfSwgcmVxdWVzdC5uYW1lLCBoYXNGYWlsZWQgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImluc3BlY3Rvci5yZXF1ZXN0cy5mYWlsZWRMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICIgKGZhaWxlZCkiCiAgICAgIH0pLCBpblByb2dyZXNzICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgICAgIHNpemU6ICJzIiwKICAgICAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdpbnNwZWN0b3IucmVxdWVzdHMucmVxdWVzdEluUHJvZ3Jlc3NBcmlhTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlcXVlc3QgaW4gcHJvZ3Jlc3MnCiAgICAgICAgfSksCiAgICAgICAgY2xhc3NOYW1lOiAiaW5zUmVxdWVzdFNlbGVjdG9yX19tZW51U3Bpbm5lciIKICAgICAgfSkpKTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhSZXF1ZXN0U2VsZWN0b3IsIFt7CiAgICBrZXk6ICJyZW5kZXJSZXF1ZXN0RHJvcGRvd24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclJlcXVlc3REcm9wZG93bigpIHsKICAgICAgdmFyIGJ1dHRvbiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgICAgIGljb25UeXBlOiAiYXJyb3dEb3duIiwKICAgICAgICBpY29uU2lkZTogInJpZ2h0IiwKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgb25DbGljazogdGhpcy50b2dnbGVQb3BvdmVyLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbnNwZWN0b3JSZXF1ZXN0Q2hvb3NlciIKICAgICAgfSwgdGhpcy5wcm9wcy5zZWxlY3RlZFJlcXVlc3QubmFtZSk7CgogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBvcG92ZXIsIHsKICAgICAgICBpZDogImluc3BlY3RvclJlcXVlc3RDaG9vc2VyIiwKICAgICAgICBidXR0b246IGJ1dHRvbiwKICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuaXNQb3BvdmVyT3BlbiwKICAgICAgICBjbG9zZVBvcG92ZXI6IHRoaXMuY2xvc2VQb3BvdmVyLAogICAgICAgIHBhbmVsUGFkZGluZ1NpemU6ICJub25lIiwKICAgICAgICBhbmNob3JQb3NpdGlvbjogImRvd25MZWZ0IiwKICAgICAgICByZXBvc2l0aW9uT25TY3JvbGw6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51UGFuZWwsIHsKICAgICAgICBpdGVtczogdGhpcy5wcm9wcy5yZXF1ZXN0cy5tYXAodGhpcy5yZW5kZXJSZXF1ZXN0RHJvcGRvd25JdGVtKSwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5zcGVjdG9yUmVxdWVzdENob29zZXJNZW51UGFuZWwiCiAgICAgIH0pKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIHNlbGVjdGVkUmVxdWVzdCA9IF90aGlzJHByb3BzLnNlbGVjdGVkUmVxdWVzdCwKICAgICAgICAgIHJlcXVlc3RzID0gX3RoaXMkcHJvcHMucmVxdWVzdHM7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIsCiAgICAgICAgZ3V0dGVyU2l6ZTogInhzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzdHJvbmciLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiaW5zcGVjdG9yLnJlcXVlc3RzLnJlcXVlc3RMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSZXF1ZXN0OiIKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogdHJ1ZQogICAgICB9LCByZXF1ZXN0cy5sZW5ndGggPD0gMSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiaW5zUmVxdWVzdFNlbGVjdG9yX19zaW5nbGVSZXF1ZXN0IiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5zcGVjdG9yUmVxdWVzdE5hbWUiCiAgICAgIH0sIHNlbGVjdGVkUmVxdWVzdC5uYW1lKSwgcmVxdWVzdHMubGVuZ3RoID4gMSAmJiB0aGlzLnJlbmRlclJlcXVlc3REcm9wZG93bigpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgc2VsZWN0ZWRSZXF1ZXN0LnN0YXR1cyAhPT0gX2FkYXB0ZXJzLlJlcXVlc3RTdGF0dXMuUEVORElORyAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAgIHBvc2l0aW9uOiAibGVmdCIsCiAgICAgICAgdGl0bGU6IHNlbGVjdGVkUmVxdWVzdC5zdGF0dXMgPT09IF9hZGFwdGVycy5SZXF1ZXN0U3RhdHVzLk9LID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiaW5zcGVjdG9yLnJlcXVlc3RzLnJlcXVlc3RTdWNjZWVkZWRUb29sdGlwVGl0bGUiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJSZXF1ZXN0IHN1Y2NlZWRlZCIKICAgICAgICB9KSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImluc3BlY3Rvci5yZXF1ZXN0cy5yZXF1ZXN0RmFpbGVkVG9vbHRpcFRpdGxlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVxdWVzdCBmYWlsZWQiCiAgICAgICAgfSksCiAgICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiaW5zcGVjdG9yLnJlcXVlc3RzLnJlcXVlc3RUb29sdGlwRGVzY3JpcHRpb24iLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaGUgdG90YWwgdGltZSB0aGUgcmVxdWVzdCB0b29rLiIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQmFkZ2UsIHsKICAgICAgICBjb2xvcjogc2VsZWN0ZWRSZXF1ZXN0LnN0YXR1cyA9PT0gX2FkYXB0ZXJzLlJlcXVlc3RTdGF0dXMuT0sgPyAnc2Vjb25kYXJ5JyA6ICdkYW5nZXInLAogICAgICAgIGljb25UeXBlOiBzZWxlY3RlZFJlcXVlc3Quc3RhdHVzID09PSBfYWRhcHRlcnMuUmVxdWVzdFN0YXR1cy5PSyA/ICdjaGVjaycgOiAnY3Jvc3MnCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJpbnNwZWN0b3IucmVxdWVzdHMucmVxdWVzdFRpbWVMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJ7cmVxdWVzdFRpbWV9bXMiLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgcmVxdWVzdFRpbWU6IHNlbGVjdGVkUmVxdWVzdC50aW1lCiAgICAgICAgfQogICAgICB9KSkpLCBzZWxlY3RlZFJlcXVlc3Quc3RhdHVzID09PSBfYWRhcHRlcnMuUmVxdWVzdFN0YXR1cy5QRU5ESU5HICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgICAgIHNpemU6ICJtIiwKICAgICAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdpbnNwZWN0b3IucmVxdWVzdHMucmVxdWVzdEluUHJvZ3Jlc3NBcmlhTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlcXVlc3QgaW4gcHJvZ3Jlc3MnCiAgICAgICAgfSkKICAgICAgfSkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBSZXF1ZXN0U2VsZWN0b3I7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLlJlcXVlc3RTZWxlY3RvciA9IFJlcXVlc3RTZWxlY3RvcjsKCl9kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0U2VsZWN0b3IsICJwcm9wVHlwZXMiLCB7CiAgcmVxdWVzdHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheS5pc1JlcXVpcmVkLAogIHNlbGVjdGVkUmVxdWVzdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLAogIG9uUmVxdWVzdENoYW5nZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jCn0pOw=="},null]}