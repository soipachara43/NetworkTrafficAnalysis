{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/timeline/insert_timeline_popover/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/timeline/insert_timeline_popover/index.js","mtime":1589249553196},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluc2VydFRpbWVsaW5lUG9wb3ZlciA9IGV4cG9ydHMuSW5zZXJ0VGltZWxpbmVQb3BvdmVyQ29tcG9uZW50ID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3RSb3V0ZXJEb20gPSByZXF1aXJlKCJyZWFjdC1yb3V0ZXItZG9tIik7Cgp2YXIgX3JlYWN0UmVkdXggPSByZXF1aXJlKCJyZWFjdC1yZWR1eCIpOwoKdmFyIF9zZWxlY3RhYmxlX3RpbWVsaW5lID0gcmVxdWlyZSgiLi4vc2VsZWN0YWJsZV90aW1lbGluZSIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuLi90cmFuc2xhdGlvbnMiKSk7Cgp2YXIgX3RpbWVsaW5lID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RvcmUvdGltZWxpbmUiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgSW5zZXJ0VGltZWxpbmVQb3BvdmVyQ29tcG9uZW50ID0gZnVuY3Rpb24gSW5zZXJ0VGltZWxpbmVQb3BvdmVyQ29tcG9uZW50KF9yZWYpIHsKICB2YXIgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCwKICAgICAgX3JlZiRoaWRlVW50aXRsZWQgPSBfcmVmLmhpZGVVbnRpdGxlZCwKICAgICAgaGlkZVVudGl0bGVkID0gX3JlZiRoaWRlVW50aXRsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRoaWRlVW50aXRsZWQsCiAgICAgIG9uVGltZWxpbmVDaGFuZ2UgPSBfcmVmLm9uVGltZWxpbmVDaGFuZ2U7CiAgdmFyIGRpc3BhdGNoID0gKDAsIF9yZWFjdFJlZHV4LnVzZURpc3BhdGNoKSgpOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaXNQb3BvdmVyT3BlbiA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldElzUG9wb3Zlck9wZW4gPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZUxvY2F0aW9uID0gKDAsIF9yZWFjdFJvdXRlckRvbS51c2VMb2NhdGlvbikoKSwKICAgICAgc3RhdGUgPSBfdXNlTG9jYXRpb24uc3RhdGU7CgogIHZhciBfdXNlU3RhdGUzID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoc3RhdGUgIT09IG51bGwgJiYgc3RhdGUgIT09IHZvaWQgMCA/IHN0YXRlIDogbnVsbCksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgcm91dGVyU3RhdGUgPSBfdXNlU3RhdGU0WzBdLAogICAgICBzZXRSb3V0ZXJTdGF0ZSA9IF91c2VTdGF0ZTRbMV07CgogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAocm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUuaW5zZXJ0VGltZWxpbmUpIHsKICAgICAgZGlzcGF0Y2goX3RpbWVsaW5lLnRpbWVsaW5lQWN0aW9ucy5zaG93VGltZWxpbmUoewogICAgICAgIGlkOiByb3V0ZXJTdGF0ZS5pbnNlcnRUaW1lbGluZS50aW1lbGluZUlkLAogICAgICAgIHNob3c6IGZhbHNlCiAgICAgIH0pKTsKICAgICAgb25UaW1lbGluZUNoYW5nZShyb3V0ZXJTdGF0ZS5pbnNlcnRUaW1lbGluZS50aW1lbGluZVRpdGxlLCByb3V0ZXJTdGF0ZS5pbnNlcnRUaW1lbGluZS50aW1lbGluZVNhdmVkT2JqZWN0SWQpOwogICAgICBzZXRSb3V0ZXJTdGF0ZShudWxsKTsKICAgIH0KICB9LCBbcm91dGVyU3RhdGVdKTsKICB2YXIgaGFuZGxlQ2xvc2VQb3BvdmVyID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKCkgewogICAgc2V0SXNQb3BvdmVyT3BlbihmYWxzZSk7CiAgfSwgW10pOwogIHZhciBoYW5kbGVPcGVuUG9wb3ZlciA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICgpIHsKICAgIHNldElzUG9wb3Zlck9wZW4odHJ1ZSk7CiAgfSwgW10pOwogIHZhciBpbnNlcnRUaW1lbGluZUJ1dHRvbiA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAgIHBvc2l0aW9uOiAidG9wIiwKICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIGkxOG4uSU5TRVJUX1RJTUVMSU5FKQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgImFyaWEtbGFiZWwiOiBpMThuLklOU0VSVF9USU1FTElORSwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogImluc2VydC10aW1lbGluZS1idXR0b24iLAogICAgICBpY29uVHlwZTogInRpbWVsaW5lIiwKICAgICAgaXNEaXNhYmxlZDogaXNEaXNhYmxlZCwKICAgICAgb25DbGljazogaGFuZGxlT3BlblBvcG92ZXIKICAgIH0pKTsKICB9LCBbaGFuZGxlT3BlblBvcG92ZXIsIGlzRGlzYWJsZWRdKTsKICB2YXIgaGFuZGxlR2V0U2VsZWN0YWJsZU9wdGlvbnMgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciB0aW1lbGluZXMgPSBfcmVmMi50aW1lbGluZXM7CiAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KHRpbWVsaW5lcy5tYXAoZnVuY3Rpb24gKHQsIGluZGV4KSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGVzY3JpcHRpb246IHQuZGVzY3JpcHRpb24sCiAgICAgICAgZmF2b3JpdGU6IHQuZmF2b3JpdGUsCiAgICAgICAgbGFiZWw6IHQudGl0bGUsCiAgICAgICAgaWQ6IHQuc2F2ZWRPYmplY3RJZCwKICAgICAgICBrZXk6ICIiLmNvbmNhdCh0LnRpdGxlLCAiLSIpLmNvbmNhdChpbmRleCksCiAgICAgICAgdGl0bGU6IHQudGl0bGUsCiAgICAgICAgY2hlY2tlZDogdW5kZWZpbmVkCiAgICAgIH07CiAgICB9KSk7CiAgfSwgW10pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgImRhdGEtdGVzdC1zdWJqIjogImluc2VydC10aW1lbGluZS1wb3BvdmVyIiwKICAgIGlkOiAic2VhcmNoVGltZWxpbmVQb3BvdmVyIiwKICAgIGJ1dHRvbjogaW5zZXJ0VGltZWxpbmVCdXR0b24sCiAgICBpc09wZW46IGlzUG9wb3Zlck9wZW4sCiAgICBjbG9zZVBvcG92ZXI6IGhhbmRsZUNsb3NlUG9wb3ZlcgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NlbGVjdGFibGVfdGltZWxpbmUuU2VsZWN0YWJsZVRpbWVsaW5lLCB7CiAgICBoaWRlVW50aXRsZWQ6IGhpZGVVbnRpdGxlZCwKICAgIGdldFNlbGVjdGFibGVPcHRpb25zOiBoYW5kbGVHZXRTZWxlY3RhYmxlT3B0aW9ucywKICAgIG9uQ2xvc2VQb3BvdmVyOiBoYW5kbGVDbG9zZVBvcG92ZXIsCiAgICBvblRpbWVsaW5lQ2hhbmdlOiBvblRpbWVsaW5lQ2hhbmdlCiAgfSkpOwp9OwoKZXhwb3J0cy5JbnNlcnRUaW1lbGluZVBvcG92ZXJDb21wb25lbnQgPSBJbnNlcnRUaW1lbGluZVBvcG92ZXJDb21wb25lbnQ7CnZhciBJbnNlcnRUaW1lbGluZVBvcG92ZXIgPSAoMCwgX3JlYWN0Lm1lbW8pKEluc2VydFRpbWVsaW5lUG9wb3ZlckNvbXBvbmVudCk7CmV4cG9ydHMuSW5zZXJ0VGltZWxpbmVQb3BvdmVyID0gSW5zZXJ0VGltZWxpbmVQb3BvdmVyOw=="},null]}