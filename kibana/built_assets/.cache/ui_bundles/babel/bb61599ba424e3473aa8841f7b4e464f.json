{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/lens/public/indexpattern_datasource/dimension_panel/popover_editor.js","dependencies":[{"path":"x-pack/legacy/plugins/lens/public/indexpattern_datasource/dimension_panel/popover_editor.js","mtime":1589249552316},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBvcG92ZXJFZGl0b3IgPSBQb3BvdmVyRWRpdG9yOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiY2xhc3NuYW1lcyIpKTsKCnZhciBfb3BlcmF0aW9ucyA9IHJlcXVpcmUoIi4uL29wZXJhdGlvbnMiKTsKCnZhciBfc3RhdGVfaGVscGVycyA9IHJlcXVpcmUoIi4uL3N0YXRlX2hlbHBlcnMiKTsKCnZhciBfZmllbGRfc2VsZWN0ID0gcmVxdWlyZSgiLi9maWVsZF9zZWxlY3QiKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCIuLi91dGlscyIpOwoKdmFyIF9idWNrZXRfbmVzdGluZ19lZGl0b3IgPSByZXF1aXJlKCIuL2J1Y2tldF9uZXN0aW5nX2VkaXRvciIpOwoKdmFyIF9sZW5zX3VpX3RlbGVtZXRyeSA9IHJlcXVpcmUoIi4uLy4uL2xlbnNfdWlfdGVsZW1ldHJ5Iik7Cgp2YXIgX2Zvcm1hdF9zZWxlY3RvciA9IHJlcXVpcmUoIi4vZm9ybWF0X3NlbGVjdG9yIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCnZhciBvcGVyYXRpb25QYW5lbHMgPSAoMCwgX29wZXJhdGlvbnMuZ2V0T3BlcmF0aW9uRGlzcGxheSkoKTsKCmZ1bmN0aW9uIGFzT3BlcmF0aW9uT3B0aW9ucyhvcGVyYXRpb25UeXBlcywgY29tcGF0aWJsZVdpdGhDdXJyZW50RmllbGQpIHsKICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5KG9wZXJhdGlvblR5cGVzKS5zb3J0KGZ1bmN0aW9uIChvcFR5cGUxLCBvcFR5cGUyKSB7CiAgICByZXR1cm4gb3BlcmF0aW9uUGFuZWxzW29wVHlwZTFdLmRpc3BsYXlOYW1lLmxvY2FsZUNvbXBhcmUob3BlcmF0aW9uUGFuZWxzW29wVHlwZTJdLmRpc3BsYXlOYW1lKTsKICB9KS5tYXAoZnVuY3Rpb24gKG9wZXJhdGlvblR5cGUpIHsKICAgIHJldHVybiB7CiAgICAgIG9wZXJhdGlvblR5cGU6IG9wZXJhdGlvblR5cGUsCiAgICAgIGNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkOiBjb21wYXRpYmxlV2l0aEN1cnJlbnRGaWVsZAogICAgfTsKICB9KTsKfQoKZnVuY3Rpb24gUG9wb3ZlckVkaXRvcihwcm9wcykgewogIHZhciBzZWxlY3RlZENvbHVtbiA9IHByb3BzLnNlbGVjdGVkQ29sdW1uLAogICAgICBvcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXggPSBwcm9wcy5vcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXgsCiAgICAgIHN0YXRlID0gcHJvcHMuc3RhdGUsCiAgICAgIGNvbHVtbklkID0gcHJvcHMuY29sdW1uSWQsCiAgICAgIHNldFN0YXRlID0gcHJvcHMuc2V0U3RhdGUsCiAgICAgIGxheWVySWQgPSBwcm9wcy5sYXllcklkLAogICAgICBjdXJyZW50SW5kZXhQYXR0ZXJuID0gcHJvcHMuY3VycmVudEluZGV4UGF0dGVybiwKICAgICAgaGlkZUdyb3VwaW5nID0gcHJvcHMuaGlkZUdyb3VwaW5nOwogIHZhciBvcGVyYXRpb25CeUZpZWxkID0gb3BlcmF0aW9uRmllbGRTdXBwb3J0TWF0cml4Lm9wZXJhdGlvbkJ5RmllbGQsCiAgICAgIGZpZWxkQnlPcGVyYXRpb24gPSBvcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXguZmllbGRCeU9wZXJhdGlvbjsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKG51bGwpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0SW52YWxpZE9wZXJhdGlvblR5cGUgPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgUGFyYW1FZGl0b3IgPSBzZWxlY3RlZENvbHVtbiAmJiBfb3BlcmF0aW9ucy5vcGVyYXRpb25EZWZpbml0aW9uTWFwW3NlbGVjdGVkQ29sdW1uLm9wZXJhdGlvblR5cGVdLnBhcmFtRWRpdG9yOwogIHZhciBmaWVsZE1hcCA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgdmFyIGZpZWxkcyA9IHt9OwogICAgY3VycmVudEluZGV4UGF0dGVybi5maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgZmllbGRzW2ZpZWxkLm5hbWVdID0gZmllbGQ7CiAgICB9KTsKICAgIHJldHVybiBmaWVsZHM7CiAgfSwgW2N1cnJlbnRJbmRleFBhdHRlcm5dKTsKCiAgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uVHlwZXMoKSB7CiAgICB2YXIgcG9zc2libGVPcGVyYXRpb25UeXBlcyA9IE9iamVjdC5rZXlzKGZpZWxkQnlPcGVyYXRpb24pOwogICAgdmFyIHZhbGlkT3BlcmF0aW9uVHlwZXMgPSBbXTsKCiAgICBpZiAoIXNlbGVjdGVkQ29sdW1uKSB7CiAgICAgIHZhbGlkT3BlcmF0aW9uVHlwZXMucHVzaC5hcHBseSh2YWxpZE9wZXJhdGlvblR5cGVzLCBfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LmtleXMoZmllbGRCeU9wZXJhdGlvbikpKTsKICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5oYXNGaWVsZCkoc2VsZWN0ZWRDb2x1bW4pICYmIG9wZXJhdGlvbkJ5RmllbGRbc2VsZWN0ZWRDb2x1bW4uc291cmNlRmllbGRdKSB7CiAgICAgIHZhbGlkT3BlcmF0aW9uVHlwZXMucHVzaC5hcHBseSh2YWxpZE9wZXJhdGlvblR5cGVzLCBfdG9Db25zdW1hYmxlQXJyYXkob3BlcmF0aW9uQnlGaWVsZFtzZWxlY3RlZENvbHVtbi5zb3VyY2VGaWVsZF0pKTsKICAgIH0KCiAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LnVuaXEoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhc09wZXJhdGlvbk9wdGlvbnModmFsaWRPcGVyYXRpb25UeXBlcywgdHJ1ZSkpLCBfdG9Db25zdW1hYmxlQXJyYXkoYXNPcGVyYXRpb25PcHRpb25zKHBvc3NpYmxlT3BlcmF0aW9uVHlwZXMsIGZhbHNlKSkpLCAnb3BlcmF0aW9uVHlwZScpOwogIH0KCiAgZnVuY3Rpb24gZ2V0U2lkZU5hdkl0ZW1zKCkgewogICAgcmV0dXJuIFt7CiAgICAgIG5hbWU6ICcnLAogICAgICBpZDogJzAnLAogICAgICBpdGVtczogZ2V0T3BlcmF0aW9uVHlwZXMoKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgb3BlcmF0aW9uVHlwZSA9IF9yZWYub3BlcmF0aW9uVHlwZSwKICAgICAgICAgICAgY29tcGF0aWJsZVdpdGhDdXJyZW50RmllbGQgPSBfcmVmLmNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBvcGVyYXRpb25QYW5lbHNbb3BlcmF0aW9uVHlwZV0uZGlzcGxheU5hbWUsCiAgICAgICAgICBpZDogb3BlcmF0aW9uVHlwZSwKICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKCdsbnNJbmRleFBhdHRlcm5EaW1lbnNpb25FZGl0b3JfX29wZXJhdGlvbicsIHsKICAgICAgICAgICAgJ2xuc0luZGV4UGF0dGVybkRpbWVuc2lvbkVkaXRvcl9fb3BlcmF0aW9uLS1zZWxlY3RlZCc6IEJvb2xlYW4oaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlID09PSBvcGVyYXRpb25UeXBlIHx8ICFpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUgJiYgc2VsZWN0ZWRDb2x1bW4gJiYgc2VsZWN0ZWRDb2x1bW4ub3BlcmF0aW9uVHlwZSA9PT0gb3BlcmF0aW9uVHlwZSksCiAgICAgICAgICAgICdsbnNJbmRleFBhdHRlcm5EaW1lbnNpb25FZGl0b3JfX29wZXJhdGlvbi0taW5jb21wYXRpYmxlJzogIWNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkCiAgICAgICAgICB9KSwKICAgICAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICJsbnMtaW5kZXhQYXR0ZXJuRGltZW5zaW9uIi5jb25jYXQoY29tcGF0aWJsZVdpdGhDdXJyZW50RmllbGQgPyAnJyA6ICdJbmNvbXBhdGlibGUnLCAiLSIpLmNvbmNhdChvcGVyYXRpb25UeXBlKSwKICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgIGlmICghc2VsZWN0ZWRDb2x1bW4gfHwgIWNvbXBhdGlibGVXaXRoQ3VycmVudEZpZWxkKSB7CiAgICAgICAgICAgICAgdmFyIHBvc3NpYmxlRmllbGRzID0gZmllbGRCeU9wZXJhdGlvbltvcGVyYXRpb25UeXBlXSB8fCBbXTsKCiAgICAgICAgICAgICAgaWYgKHBvc3NpYmxlRmllbGRzLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgc2V0U3RhdGUoKDAsIF9zdGF0ZV9oZWxwZXJzLmNoYW5nZUNvbHVtbikoewogICAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgICAgICAgICAgIGxheWVySWQ6IGxheWVySWQsCiAgICAgICAgICAgICAgICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgICAgICAgICAgICAgICAgbmV3Q29sdW1uOiAoMCwgX29wZXJhdGlvbnMuYnVpbGRDb2x1bW4pKHsKICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdGF0ZS5sYXllcnNbcHJvcHMubGF5ZXJJZF0uY29sdW1ucywKICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRQcmlvcml0eTogcHJvcHMuc3VnZ2VzdGVkUHJpb3JpdHksCiAgICAgICAgICAgICAgICAgICAgbGF5ZXJJZDogcHJvcHMubGF5ZXJJZCwKICAgICAgICAgICAgICAgICAgICBvcDogb3BlcmF0aW9uVHlwZSwKICAgICAgICAgICAgICAgICAgICBpbmRleFBhdHRlcm46IGN1cnJlbnRJbmRleFBhdHRlcm4sCiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTWFwW3Bvc3NpYmxlRmllbGRzWzBdXSwKICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbHVtbjogc2VsZWN0ZWRDb2x1bW4KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2V0SW52YWxpZE9wZXJhdGlvblR5cGUob3BlcmF0aW9uVHlwZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAoMCwgX2xlbnNfdWlfdGVsZW1ldHJ5LnRyYWNrVWlFdmVudCkoImluZGV4cGF0dGVybl9kaW1lbnNpb25fb3BlcmF0aW9uXyIuY29uY2F0KG9wZXJhdGlvblR5cGUpKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUpIHsKICAgICAgICAgICAgICBzZXRJbnZhbGlkT3BlcmF0aW9uVHlwZShudWxsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNlbGVjdGVkQ29sdW1uLm9wZXJhdGlvblR5cGUgPT09IG9wZXJhdGlvblR5cGUpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBuZXdDb2x1bW4gPSAoMCwgX29wZXJhdGlvbnMuYnVpbGRDb2x1bW4pKHsKICAgICAgICAgICAgICBjb2x1bW5zOiBwcm9wcy5zdGF0ZS5sYXllcnNbcHJvcHMubGF5ZXJJZF0uY29sdW1ucywKICAgICAgICAgICAgICBzdWdnZXN0ZWRQcmlvcml0eTogcHJvcHMuc3VnZ2VzdGVkUHJpb3JpdHksCiAgICAgICAgICAgICAgbGF5ZXJJZDogcHJvcHMubGF5ZXJJZCwKICAgICAgICAgICAgICBvcDogb3BlcmF0aW9uVHlwZSwKICAgICAgICAgICAgICBpbmRleFBhdHRlcm46IGN1cnJlbnRJbmRleFBhdHRlcm4sCiAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkTWFwW3NlbGVjdGVkQ29sdW1uLnNvdXJjZUZpZWxkXSwKICAgICAgICAgICAgICBwcmV2aW91c0NvbHVtbjogc2VsZWN0ZWRDb2x1bW4KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICgwLCBfbGVuc191aV90ZWxlbWV0cnkudHJhY2tVaUV2ZW50KSgiaW5kZXhwYXR0ZXJuX2RpbWVuc2lvbl9vcGVyYXRpb25fZnJvbV8iLmNvbmNhdChzZWxlY3RlZENvbHVtbi5vcGVyYXRpb25UeXBlLCAiX3RvXyIpLmNvbmNhdChvcGVyYXRpb25UeXBlKSk7CiAgICAgICAgICAgIHNldFN0YXRlKCgwLCBfc3RhdGVfaGVscGVycy5jaGFuZ2VDb2x1bW4pKHsKICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgICAgICAgbGF5ZXJJZDogbGF5ZXJJZCwKICAgICAgICAgICAgICBjb2x1bW5JZDogY29sdW1uSWQsCiAgICAgICAgICAgICAgbmV3Q29sdW1uOiBuZXdDb2x1bW4KICAgICAgICAgICAgfSkpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH0pCiAgICB9XTsKICB9CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICBpZDogY29sdW1uSWQsCiAgICBjbGFzc05hbWU6ICJsbnNJbmRleFBhdHRlcm5EaW1lbnNpb25FZGl0b3IiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgZ3V0dGVyU2l6ZTogInMiLAogICAgZGlyZWN0aW9uOiAiY29sdW1uIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmllbGRfc2VsZWN0LkZpZWxkU2VsZWN0LCB7CiAgICBjdXJyZW50SW5kZXhQYXR0ZXJuOiBjdXJyZW50SW5kZXhQYXR0ZXJuLAogICAgZXhpc3RpbmdGaWVsZHM6IHN0YXRlLmV4aXN0aW5nRmllbGRzLAogICAgc2hvd0VtcHR5RmllbGRzOiBzdGF0ZS5zaG93RW1wdHlGaWVsZHMsCiAgICBmaWVsZE1hcDogZmllbGRNYXAsCiAgICBvcGVyYXRpb25GaWVsZFN1cHBvcnRNYXRyaXg6IG9wZXJhdGlvbkZpZWxkU3VwcG9ydE1hdHJpeCwKICAgIHNlbGVjdGVkQ29sdW1uT3BlcmF0aW9uVHlwZTogc2VsZWN0ZWRDb2x1bW4gJiYgc2VsZWN0ZWRDb2x1bW4ub3BlcmF0aW9uVHlwZSwKICAgIHNlbGVjdGVkQ29sdW1uU291cmNlRmllbGQ6IHNlbGVjdGVkQ29sdW1uICYmICgwLCBfdXRpbHMuaGFzRmllbGQpKHNlbGVjdGVkQ29sdW1uKSA/IHNlbGVjdGVkQ29sdW1uLnNvdXJjZUZpZWxkIDogdW5kZWZpbmVkLAogICAgaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlOiBpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUsCiAgICBvbkRlbGV0ZUNvbHVtbjogZnVuY3Rpb24gb25EZWxldGVDb2x1bW4oKSB7CiAgICAgIHNldFN0YXRlKCgwLCBfc3RhdGVfaGVscGVycy5kZWxldGVDb2x1bW4pKHsKICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgbGF5ZXJJZDogbGF5ZXJJZCwKICAgICAgICBjb2x1bW5JZDogY29sdW1uSWQKICAgICAgfSkpOwogICAgfSwKICAgIG9uQ2hvb3NlOiBmdW5jdGlvbiBvbkNob29zZShjaG9pY2UpIHsKICAgICAgdmFyIGNvbHVtbjsKCiAgICAgIGlmICghaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlICYmIHNlbGVjdGVkQ29sdW1uICYmICdmaWVsZCcgaW4gY2hvaWNlICYmIGNob2ljZS5vcGVyYXRpb25UeXBlID09PSBzZWxlY3RlZENvbHVtbi5vcGVyYXRpb25UeXBlKSB7CiAgICAgICAgLy8gSWYgd2UganVzdCBjaGFuZ2VkIHRoZSBmaWVsZCBhcmUgbm90IGluIGFuIGVycm9yIHN0YXRlIGFuZCB0aGUgb3BlcmF0aW9uIGRpZG4ndCBjaGFuZ2UsCiAgICAgICAgLy8gd2UgdXNlIHRoZSBvcGVyYXRpb25zIG9uRmllbGRDaGFuZ2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSB0aGUgbmV3IGNvbHVtbi4KICAgICAgICBjb2x1bW4gPSAoMCwgX29wZXJhdGlvbnMuY2hhbmdlRmllbGQpKHNlbGVjdGVkQ29sdW1uLCBjdXJyZW50SW5kZXhQYXR0ZXJuLCBmaWVsZE1hcFtjaG9pY2UuZmllbGRdKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBPdGhlcndpc2Ugd2UnbGwgdXNlIHRoZSBidWlsZENvbHVtbiBtZXRob2QgdG8gY2FsY3VsYXRlIGEgbmV3IGNvbHVtbgogICAgICAgIHZhciBjb21wYXRpYmxlT3BlcmF0aW9ucyA9ICdmaWVsZCcgaW4gY2hvaWNlICYmIG9wZXJhdGlvbkZpZWxkU3VwcG9ydE1hdHJpeC5vcGVyYXRpb25CeUZpZWxkW2Nob2ljZS5maWVsZF0gfHwgW107CiAgICAgICAgdmFyIG9wZXJhdGlvbjsKCiAgICAgICAgaWYgKGNvbXBhdGlibGVPcGVyYXRpb25zLmxlbmd0aCA+IDApIHsKICAgICAgICAgIG9wZXJhdGlvbiA9IGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSAmJiBjb21wYXRpYmxlT3BlcmF0aW9ucy5pbmNsdWRlcyhpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUpID8gaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlIDogY29tcGF0aWJsZU9wZXJhdGlvbnNbMF07CiAgICAgICAgfSBlbHNlIGlmICgnZmllbGQnIGluIGNob2ljZSkgewogICAgICAgICAgb3BlcmF0aW9uID0gY2hvaWNlLm9wZXJhdGlvblR5cGU7CiAgICAgICAgfQoKICAgICAgICBjb2x1bW4gPSAoMCwgX29wZXJhdGlvbnMuYnVpbGRDb2x1bW4pKHsKICAgICAgICAgIGNvbHVtbnM6IHByb3BzLnN0YXRlLmxheWVyc1twcm9wcy5sYXllcklkXS5jb2x1bW5zLAogICAgICAgICAgZmllbGQ6IGZpZWxkTWFwW2Nob2ljZS5maWVsZF0sCiAgICAgICAgICBpbmRleFBhdHRlcm46IGN1cnJlbnRJbmRleFBhdHRlcm4sCiAgICAgICAgICBsYXllcklkOiBwcm9wcy5sYXllcklkLAogICAgICAgICAgc3VnZ2VzdGVkUHJpb3JpdHk6IHByb3BzLnN1Z2dlc3RlZFByaW9yaXR5LAogICAgICAgICAgb3A6IG9wZXJhdGlvbiwKICAgICAgICAgIHByZXZpb3VzQ29sdW1uOiBzZWxlY3RlZENvbHVtbgogICAgICAgIH0pOwogICAgICB9CgogICAgICBzZXRTdGF0ZSgoMCwgX3N0YXRlX2hlbHBlcnMuY2hhbmdlQ29sdW1uKSh7CiAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgIGxheWVySWQ6IGxheWVySWQsCiAgICAgICAgY29sdW1uSWQ6IGNvbHVtbklkLAogICAgICAgIG5ld0NvbHVtbjogY29sdW1uLAogICAgICAgIGtlZXBQYXJhbXM6IGZhbHNlCiAgICAgIH0pKTsKICAgICAgc2V0SW52YWxpZE9wZXJhdGlvblR5cGUobnVsbCk7CiAgICB9CiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGd1dHRlclNpemU6ICJzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogbnVsbCwKICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKCdsbnNJbmRleFBhdHRlcm5EaW1lbnNpb25FZGl0b3JfX2xlZnQnKQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTaWRlTmF2LCB7CiAgICBpdGVtczogZ2V0U2lkZU5hdkl0ZW1zKCkKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogdHJ1ZSwKICAgIGNsYXNzTmFtZTogImxuc0luZGV4UGF0dGVybkRpbWVuc2lvbkVkaXRvcl9fcmlnaHQiCiAgfSwgaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlICYmIHNlbGVjdGVkQ29sdW1uICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5kZXhQYXR0ZXJuLWludmFsaWQtb3BlcmF0aW9uIiwKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uaW52YWxpZE9wZXJhdGlvbkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvIHVzZSB0aGlzIGZ1bmN0aW9uLCBzZWxlY3QgYSBkaWZmZXJlbnQgZmllbGQuJwogICAgfSksCiAgICBjb2xvcjogIndhcm5pbmciLAogICAgc2l6ZTogInMiLAogICAgaWNvblR5cGU6ICJzb3J0VXAiCiAgfSksIGluY29tcGF0aWJsZVNlbGVjdGVkT3BlcmF0aW9uVHlwZSAmJiAhc2VsZWN0ZWRDb2x1bW4gJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNhbGxPdXQsIHsKICAgIHNpemU6ICJzIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJpbmRleFBhdHRlcm4tZmllbGRsZXNzLW9wZXJhdGlvbiIsCiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmxlbnMuaW5kZXhQYXR0ZXJuLmZpZWxkbGVzc09wZXJhdGlvbkxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RvIHVzZSB0aGlzIGZ1bmN0aW9uLCBzZWxlY3QgYSBmaWVsZC4nCiAgICB9KSwKICAgIGljb25UeXBlOiAic29ydFVwIgogIH0pLCAhaW5jb21wYXRpYmxlU2VsZWN0ZWRPcGVyYXRpb25UeXBlICYmIFBhcmFtRWRpdG9yICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUGFyYW1FZGl0b3IsIHsKICAgIHN0YXRlOiBzdGF0ZSwKICAgIHNldFN0YXRlOiBzZXRTdGF0ZSwKICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgIGN1cnJlbnRDb2x1bW46IHN0YXRlLmxheWVyc1tsYXllcklkXS5jb2x1bW5zW2NvbHVtbklkXSwKICAgIHN0b3JhZ2U6IHByb3BzLnN0b3JhZ2UsCiAgICB1aVNldHRpbmdzOiBwcm9wcy51aVNldHRpbmdzLAogICAgc2F2ZWRPYmplY3RzQ2xpZW50OiBwcm9wcy5zYXZlZE9iamVjdHNDbGllbnQsCiAgICBsYXllcklkOiBsYXllcklkLAogICAgaHR0cDogcHJvcHMuaHR0cCwKICAgIGRhdGVSYW5nZTogcHJvcHMuZGF0ZVJhbmdlLAogICAgZGF0YTogcHJvcHMuZGF0YQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSksICFpbmNvbXBhdGlibGVTZWxlY3RlZE9wZXJhdGlvblR5cGUgJiYgc2VsZWN0ZWRDb2x1bW4gJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subGVucy5pbmRleFBhdHRlcm4uY29sdW1uTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGFiZWwnLAogICAgICBkZXNjcmlwdGlvbjogJ0xhYmVsIG9mIGEgY29sdW1uIG9mIGRhdGEnCiAgICB9KSwKICAgIGRpc3BsYXk6ICJyb3dDb21wcmVzc2VkIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgIGNvbXByZXNzZWQ6IHRydWUsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaW5kZXhQYXR0ZXJuLWxhYmVsLWVkaXQiLAogICAgdmFsdWU6IHNlbGVjdGVkQ29sdW1uLmxhYmVsLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgc2V0U3RhdGUoKDAsIF9zdGF0ZV9oZWxwZXJzLmNoYW5nZUNvbHVtbikoewogICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICBsYXllcklkOiBsYXllcklkLAogICAgICAgIGNvbHVtbklkOiBjb2x1bW5JZCwKICAgICAgICBuZXdDb2x1bW46IF9vYmplY3RTcHJlYWQoe30sIHNlbGVjdGVkQ29sdW1uLCB7CiAgICAgICAgICBsYWJlbDogZS50YXJnZXQudmFsdWUKICAgICAgICB9KQogICAgICB9KSk7CiAgICB9CiAgfSkpLCAhaGlkZUdyb3VwaW5nICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2J1Y2tldF9uZXN0aW5nX2VkaXRvci5CdWNrZXROZXN0aW5nRWRpdG9yLCB7CiAgICBsYXllcjogc3RhdGUubGF5ZXJzW3Byb3BzLmxheWVySWRdLAogICAgY29sdW1uSWQ6IHByb3BzLmNvbHVtbklkLAogICAgc2V0Q29sdW1uczogZnVuY3Rpb24gc2V0Q29sdW1ucyhjb2x1bW5PcmRlcikgewogICAgICBzZXRTdGF0ZShfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGxheWVyczogX29iamVjdFNwcmVhZCh7fSwgc3RhdGUubGF5ZXJzLCBfZGVmaW5lUHJvcGVydHkoe30sIHByb3BzLmxheWVySWQsIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLmxheWVyc1twcm9wcy5sYXllcklkXSwgewogICAgICAgICAgY29sdW1uT3JkZXI6IGNvbHVtbk9yZGVyCiAgICAgICAgfSkpKQogICAgICB9KSk7CiAgICB9CiAgfSksIHNlbGVjdGVkQ29sdW1uICYmIHNlbGVjdGVkQ29sdW1uLmRhdGFUeXBlID09PSAnbnVtYmVyJyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Zvcm1hdF9zZWxlY3Rvci5Gb3JtYXRTZWxlY3RvciwgewogICAgc2VsZWN0ZWRDb2x1bW46IHNlbGVjdGVkQ29sdW1uLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKG5ld0Zvcm1hdCkgewogICAgICBzZXRTdGF0ZSgoMCwgX3N0YXRlX2hlbHBlcnMudXBkYXRlQ29sdW1uUGFyYW0pKHsKICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgbGF5ZXJJZDogbGF5ZXJJZCwKICAgICAgICBjdXJyZW50Q29sdW1uOiBzZWxlY3RlZENvbHVtbiwKICAgICAgICBwYXJhbU5hbWU6ICdmb3JtYXQnLAogICAgICAgIHZhbHVlOiBuZXdGb3JtYXQKICAgICAgfSkpOwogICAgfQogIH0pIDogbnVsbCkpKSkpOwp9"},null]}