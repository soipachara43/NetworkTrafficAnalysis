{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/events/last_event_time/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/events/last_event_time/index.js","mtime":1589249553236},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZUxhc3RFdmVudFRpbWVRdWVyeSA9IHVzZUxhc3RFdmVudFRpbWVRdWVyeTsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJyZWFjdCIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2tpYmFuYSA9IHJlcXVpcmUoIi4uLy4uLy4uL2xpYi9raWJhbmEiKTsKCnZhciBfbGFzdF9ldmVudF90aW1lID0gcmVxdWlyZSgiLi9sYXN0X2V2ZW50X3RpbWUuZ3FsX3F1ZXJ5Iik7Cgp2YXIgX2Fwb2xsb19jb250ZXh0ID0gcmVxdWlyZSgiLi4vLi4vLi4vdXRpbHMvYXBvbGxvX2NvbnRleHQiKTsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIHVzZUxhc3RFdmVudFRpbWVRdWVyeShpbmRleEtleSwgZGV0YWlscywgc291cmNlSWQpIHsKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgbG9hZGluZyA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHVwZGF0ZUxvYWRpbmcgPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKG51bGwpLAogICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksCiAgICAgIGxhc3RTZWVuID0gX3VzZVN0YXRlNFswXSwKICAgICAgdXBkYXRlTGFzdFNlZW4gPSBfdXNlU3RhdGU0WzFdOwoKICB2YXIgX3VzZVN0YXRlNSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKG51bGwpLAogICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksCiAgICAgIGVycm9yTWVzc2FnZSA9IF91c2VTdGF0ZTZbMF0sCiAgICAgIHVwZGF0ZUVycm9yTWVzc2FnZSA9IF91c2VTdGF0ZTZbMV07CgogIHZhciBfdXNlU3RhdGU3ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkobnVsbCksCiAgICAgIF91c2VTdGF0ZTggPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU3LCAyKSwKICAgICAgY3VycmVudEluZGV4S2V5ID0gX3VzZVN0YXRlOFswXSwKICAgICAgdXBkYXRlQ3VycmVudEluZGV4S2V5ID0gX3VzZVN0YXRlOFsxXTsKCiAgdmFyIF91c2VVaVNldHRpbmckID0gKDAsIF9raWJhbmEudXNlVWlTZXR0aW5nJCkoX2NvbnN0YW50cy5ERUZBVUxUX0lOREVYX0tFWSksCiAgICAgIF91c2VVaVNldHRpbmckMiA9IF9zbGljZWRUb0FycmF5KF91c2VVaVNldHRpbmckLCAxKSwKICAgICAgZGVmYXVsdEluZGV4ID0gX3VzZVVpU2V0dGluZyQyWzBdOwoKICB2YXIgYXBvbGxvQ2xpZW50ID0gKDAsIF9hcG9sbG9fY29udGV4dC51c2VBcG9sbG9DbGllbnQpKCk7CgogIGZ1bmN0aW9uIGZldGNoTGFzdEV2ZW50VGltZShfeCkgewogICAgcmV0dXJuIF9mZXRjaExhc3RFdmVudFRpbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIGZ1bmN0aW9uIF9mZXRjaExhc3RFdmVudFRpbWUoKSB7CiAgICBfZmV0Y2hMYXN0RXZlbnRUaW1lID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNpZ25hbCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdXBkYXRlTG9hZGluZyh0cnVlKTsKCiAgICAgICAgICAgICAgaWYgKGFwb2xsb0NsaWVudCkgewogICAgICAgICAgICAgICAgYXBvbGxvQ2xpZW50LnF1ZXJ5KHsKICAgICAgICAgICAgICAgICAgcXVlcnk6IF9sYXN0X2V2ZW50X3RpbWUuTGFzdEV2ZW50VGltZUdxbFF1ZXJ5LAogICAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogJ2NhY2hlLWZpcnN0JywKICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICAgICAgc291cmNlSWQ6IHNvdXJjZUlkLAogICAgICAgICAgICAgICAgICAgIGluZGV4S2V5OiBpbmRleEtleSwKICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBkZXRhaWxzLAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRJbmRleDogZGVmYXVsdEluZGV4CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHsKICAgICAgICAgICAgICAgICAgICBmZXRjaE9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgdXBkYXRlTG9hZGluZyhmYWxzZSk7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZUxhc3RTZWVuKCgwLCBfZnAuZ2V0KSgnZGF0YS5zb3VyY2UuTGFzdEV2ZW50VGltZS5sYXN0U2VlbicsIHJlc3VsdCkpOwogICAgICAgICAgICAgICAgICB1cGRhdGVFcnJvck1lc3NhZ2UobnVsbCk7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZUN1cnJlbnRJbmRleEtleShjdXJyZW50SW5kZXhLZXkpOwogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgIHVwZGF0ZUxvYWRpbmcoZmFsc2UpOwogICAgICAgICAgICAgICAgICB1cGRhdGVMYXN0U2VlbihudWxsKTsKICAgICAgICAgICAgICAgICAgdXBkYXRlRXJyb3JNZXNzYWdlKGVycm9yLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKTsKICAgIHJldHVybiBfZmV0Y2hMYXN0RXZlbnRUaW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgdmFyIGFib3J0Q3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTsKICAgIHZhciBzaWduYWwgPSBhYm9ydEN0cmwuc2lnbmFsOwogICAgZmV0Y2hMYXN0RXZlbnRUaW1lKHNpZ25hbCk7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gYWJvcnRDdHJsLmFib3J0KCk7CiAgICB9OwogIH0sIFthcG9sbG9DbGllbnQsIGluZGV4S2V5LCBkZXRhaWxzLmhvc3ROYW1lLCBkZXRhaWxzLmlwXSk7CiAgcmV0dXJuIHsKICAgIGxhc3RTZWVuOiBsYXN0U2VlbiwKICAgIGxvYWRpbmc6IGxvYWRpbmcsCiAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZQogIH07Cn0="},null]}