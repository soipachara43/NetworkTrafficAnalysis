{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/uptime/public/components/functional/kuery_bar/typeahead/suggestions.js","dependencies":[{"path":"x-pack/legacy/plugins/uptime/public/components/functional/kuery_bar/typeahead/suggestions.js","mtime":1589249553608},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}