{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/vector/components/color/dynamic_color_form.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/vector/components/color/dynamic_color_form.js","mtime":1589249552472},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkR5bmFtaWNDb2xvckZvcm0gPSBEeW5hbWljQ29sb3JGb3JtOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZmllbGRfc2VsZWN0ID0gcmVxdWlyZSgiLi4vZmllbGRfc2VsZWN0Iik7Cgp2YXIgX2NvbG9yX21hcF9zZWxlY3QgPSByZXF1aXJlKCIuL2NvbG9yX21hcF9zZWxlY3QiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfY29sb3JfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb2xvcl91dGlscyIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIER5bmFtaWNDb2xvckZvcm0oX3JlZikgewogIHZhciBmaWVsZHMgPSBfcmVmLmZpZWxkcywKICAgICAgb25EeW5hbWljU3R5bGVDaGFuZ2UgPSBfcmVmLm9uRHluYW1pY1N0eWxlQ2hhbmdlLAogICAgICBzdGF0aWNEeW5hbWljU2VsZWN0ID0gX3JlZi5zdGF0aWNEeW5hbWljU2VsZWN0LAogICAgICBzdHlsZVByb3BlcnR5ID0gX3JlZi5zdHlsZVByb3BlcnR5OwogIHZhciBzdHlsZU9wdGlvbnMgPSBzdHlsZVByb3BlcnR5LmdldE9wdGlvbnMoKTsKCiAgdmFyIG9uQ29sb3JNYXBTZWxlY3QgPSBmdW5jdGlvbiBvbkNvbG9yTWFwU2VsZWN0KF9yZWYyKSB7CiAgICB2YXIgY29sb3IgPSBfcmVmMi5jb2xvciwKICAgICAgICBjdXN0b21Db2xvck1hcCA9IF9yZWYyLmN1c3RvbUNvbG9yTWFwLAogICAgICAgIHR5cGUgPSBfcmVmMi50eXBlLAogICAgICAgIHVzZUN1c3RvbUNvbG9yTWFwID0gX3JlZjIudXNlQ3VzdG9tQ29sb3JNYXA7CgogICAgdmFyIG5ld0NvbG9yT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe30sIHN0eWxlT3B0aW9ucywgewogICAgICB0eXBlOiB0eXBlCiAgICB9KTsKCiAgICBpZiAodHlwZSA9PT0gX2NvbnN0YW50cy5DT0xPUl9NQVBfVFlQRS5PUkRJTkFMKSB7CiAgICAgIG5ld0NvbG9yT3B0aW9ucy51c2VDdXN0b21Db2xvclJhbXAgPSB1c2VDdXN0b21Db2xvck1hcDsKCiAgICAgIGlmIChjdXN0b21Db2xvck1hcCkgewogICAgICAgIG5ld0NvbG9yT3B0aW9ucy5jdXN0b21Db2xvclJhbXAgPSBjdXN0b21Db2xvck1hcDsKICAgICAgfQoKICAgICAgaWYgKGNvbG9yKSB7CiAgICAgICAgbmV3Q29sb3JPcHRpb25zLmNvbG9yID0gY29sb3I7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIG5ld0NvbG9yT3B0aW9ucy51c2VDdXN0b21Db2xvclBhbGV0dGUgPSB1c2VDdXN0b21Db2xvck1hcDsKCiAgICAgIGlmIChjdXN0b21Db2xvck1hcCkgewogICAgICAgIG5ld0NvbG9yT3B0aW9ucy5jdXN0b21Db2xvclBhbGV0dGUgPSBjdXN0b21Db2xvck1hcDsKICAgICAgfQoKICAgICAgaWYgKGNvbG9yKSB7CiAgICAgICAgbmV3Q29sb3JPcHRpb25zLmNvbG9yQ2F0ZWdvcnkgPSBjb2xvcjsKICAgICAgfQogICAgfQoKICAgIG9uRHluYW1pY1N0eWxlQ2hhbmdlKHN0eWxlUHJvcGVydHkuZ2V0U3R5bGVOYW1lKCksIG5ld0NvbG9yT3B0aW9ucyk7CiAgfTsKCiAgdmFyIG9uRmllbGRDaGFuZ2UgPQogIC8qI19fUFVSRV9fKi8KICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZjQpIHsKICAgICAgdmFyIGZpZWxkLCBuYW1lLCBvcmlnaW4sIGZpZWxkVHlwZSwgZGVmYXVsdENvbG9yTWFwVHlwZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGZpZWxkID0gX3JlZjQuZmllbGQ7CiAgICAgICAgICAgICAgbmFtZSA9IGZpZWxkLm5hbWUsIG9yaWdpbiA9IGZpZWxkLm9yaWdpbiwgZmllbGRUeXBlID0gZmllbGQudHlwZTsKICAgICAgICAgICAgICBkZWZhdWx0Q29sb3JNYXBUeXBlID0gX2NvbnN0YW50cy5DQVRFR09SSUNBTF9EQVRBX1RZUEVTLmluY2x1ZGVzKGZpZWxkVHlwZSkgPyBfY29uc3RhbnRzLkNPTE9SX01BUF9UWVBFLkNBVEVHT1JJQ0FMIDogX2NvbnN0YW50cy5DT0xPUl9NQVBfVFlQRS5PUkRJTkFMOwogICAgICAgICAgICAgIG9uRHluYW1pY1N0eWxlQ2hhbmdlKHN0eWxlUHJvcGVydHkuZ2V0U3R5bGVOYW1lKCksIF9vYmplY3RTcHJlYWQoe30sIHN0eWxlT3B0aW9ucywgewogICAgICAgICAgICAgICAgZmllbGQ6IHsKICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICAgICAgb3JpZ2luOiBvcmlnaW4KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0eXBlOiBkZWZhdWx0Q29sb3JNYXBUeXBlCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gb25GaWVsZENoYW5nZShfeCkgewogICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgb25Db2xvck1hcFR5cGVDaGFuZ2UgPQogIC8qI19fUFVSRV9fKi8KICBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGUpIHsKICAgICAgdmFyIGNvbG9yTWFwVHlwZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb2xvck1hcFR5cGUgPSBlLnRhcmdldC52YWx1ZTsKICAgICAgICAgICAgICBvbkR5bmFtaWNTdHlsZUNoYW5nZShzdHlsZVByb3BlcnR5LmdldFN0eWxlTmFtZSgpLCBfb2JqZWN0U3ByZWFkKHt9LCBzdHlsZU9wdGlvbnMsIHsKICAgICAgICAgICAgICAgIHR5cGU6IGNvbG9yTWFwVHlwZQogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gb25Db2xvck1hcFR5cGVDaGFuZ2UoX3gyKSB7CiAgICAgIHJldHVybiBfcmVmNS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHZhciBnZXRGaWVsZCA9IGZ1bmN0aW9uIGdldEZpZWxkKCkgewogICAgdmFyIGZpZWxkTmFtZSA9IHN0eWxlUHJvcGVydHkuZ2V0RmllbGROYW1lKCk7CgogICAgaWYgKCFmaWVsZE5hbWUpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgcmV0dXJuIGZpZWxkcy5maW5kKGZ1bmN0aW9uIChmaWVsZCkgewogICAgICByZXR1cm4gZmllbGQubmFtZSA9PT0gZmllbGROYW1lOwogICAgfSk7CiAgfTsKCiAgdmFyIHJlbmRlckNvbG9yTWFwU2VsZWN0ID0gZnVuY3Rpb24gcmVuZGVyQ29sb3JNYXBTZWxlY3QoKSB7CiAgICB2YXIgZmllbGQgPSBnZXRGaWVsZCgpOwoKICAgIGlmICghZmllbGQpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIHNob3dDb2xvck1hcFR5cGVUb2dnbGUgPSAhX2NvbnN0YW50cy5DQVRFR09SSUNBTF9EQVRBX1RZUEVTLmluY2x1ZGVzKGZpZWxkLnR5cGUpOwoKICAgIGlmIChzdHlsZVByb3BlcnR5LmlzT3JkaW5hbCgpKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb2xvcl9tYXBfc2VsZWN0LkNvbG9yTWFwU2VsZWN0LCB7CiAgICAgICAgY29sb3JNYXBPcHRpb25zOiBfY29sb3JfdXRpbHMuQ09MT1JfR1JBRElFTlRTLAogICAgICAgIGN1c3RvbU9wdGlvbkxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subWFwcy5zdHlsZS5jdXN0b21Db2xvclJhbXBMYWJlbCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3VzdG9tIGNvbG9yIHJhbXAnCiAgICAgICAgfSksCiAgICAgICAgb25DaGFuZ2U6IG9uQ29sb3JNYXBTZWxlY3QsCiAgICAgICAgb25Db2xvck1hcFR5cGVDaGFuZ2U6IG9uQ29sb3JNYXBUeXBlQ2hhbmdlLAogICAgICAgIGNvbG9yTWFwVHlwZTogX2NvbnN0YW50cy5DT0xPUl9NQVBfVFlQRS5PUkRJTkFMLAogICAgICAgIGNvbG9yOiBzdHlsZU9wdGlvbnMuY29sb3IsCiAgICAgICAgY3VzdG9tQ29sb3JNYXA6IHN0eWxlT3B0aW9ucy5jdXN0b21Db2xvclJhbXAsCiAgICAgICAgdXNlQ3VzdG9tQ29sb3JNYXA6IF9sb2Rhc2guZGVmYXVsdC5nZXQoc3R5bGVPcHRpb25zLCAndXNlQ3VzdG9tQ29sb3JSYW1wJywgZmFsc2UpLAogICAgICAgIHN0eWxlUHJvcGVydHk6IHN0eWxlUHJvcGVydHksCiAgICAgICAgc2hvd0NvbG9yTWFwVHlwZVRvZ2dsZTogc2hvd0NvbG9yTWFwVHlwZVRvZ2dsZQogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoc3R5bGVQcm9wZXJ0eS5pc0NhdGVnb3JpY2FsKCkpIHsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbG9yX21hcF9zZWxlY3QuQ29sb3JNYXBTZWxlY3QsIHsKICAgICAgICBjb2xvck1hcE9wdGlvbnM6IF9jb2xvcl91dGlscy5DT0xPUl9QQUxFVFRFUywKICAgICAgICBjdXN0b21PcHRpb25MYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMuc3R5bGUuY3VzdG9tQ29sb3JQYWxldHRlTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0N1c3RvbSBjb2xvciBwYWxldHRlJwogICAgICAgIH0pLAogICAgICAgIG9uQ29sb3JNYXBUeXBlQ2hhbmdlOiBvbkNvbG9yTWFwVHlwZUNoYW5nZSwKICAgICAgICBvbkNoYW5nZTogb25Db2xvck1hcFNlbGVjdCwKICAgICAgICBjb2xvck1hcFR5cGU6IF9jb25zdGFudHMuQ09MT1JfTUFQX1RZUEUuQ0FURUdPUklDQUwsCiAgICAgICAgY29sb3I6IHN0eWxlT3B0aW9ucy5jb2xvckNhdGVnb3J5LAogICAgICAgIGN1c3RvbUNvbG9yTWFwOiBzdHlsZU9wdGlvbnMuY3VzdG9tQ29sb3JQYWxldHRlLAogICAgICAgIHVzZUN1c3RvbUNvbG9yTWFwOiBfbG9kYXNoLmRlZmF1bHQuZ2V0KHN0eWxlT3B0aW9ucywgJ3VzZUN1c3RvbUNvbG9yUGFsZXR0ZScsIGZhbHNlKSwKICAgICAgICBzdHlsZVByb3BlcnR5OiBzdHlsZVByb3BlcnR5LAogICAgICAgIHNob3dDb2xvck1hcFR5cGVUb2dnbGU6IHNob3dDb2xvck1hcFR5cGVUb2dnbGUKICAgICAgfSk7CiAgICB9CiAgfTsKCiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBndXR0ZXJTaXplOiAieHMiLAogICAganVzdGlmeUNvbnRlbnQ6ICJmbGV4RW5kIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogZmFsc2UsCiAgICBjbGFzc05hbWU6ICJtYXBTdHlsZVNldHRpbmdzX19maXhlZEJveCIKICB9LCBzdGF0aWNEeW5hbWljU2VsZWN0KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9maWVsZF9zZWxlY3QuRmllbGRTZWxlY3QsIHsKICAgIGZpZWxkczogZmllbGRzLAogICAgc2VsZWN0ZWRGaWVsZE5hbWU6IHN0eWxlUHJvcGVydHkuZ2V0RmllbGROYW1lKCksCiAgICBvbkNoYW5nZTogb25GaWVsZENoYW5nZSwKICAgIGNvbXByZXNzZWQ6IHRydWUKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAicyIKICB9KSwgcmVuZGVyQ29sb3JNYXBTZWxlY3QoKSk7Cn0="},null]}