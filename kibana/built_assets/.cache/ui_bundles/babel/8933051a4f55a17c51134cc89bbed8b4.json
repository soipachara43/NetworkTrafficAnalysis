{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/containers/logs/log_analysis/log_analysis_cleanup.js","dependencies":[{"path":"x-pack/plugins/infra/public/containers/logs/log_analysis/log_analysis_cleanup.js","mtime":1589249554273},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNsZWFuVXBKb2JzQW5kRGF0YWZlZWRzID0gdm9pZCAwOwoKdmFyIF9sb2dfYW5hbHlzaXMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vbG9nX2FuYWx5c2lzIik7Cgp2YXIgX21sX2NsZWFudXAgPSByZXF1aXJlKCIuL2FwaS9tbF9jbGVhbnVwIik7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9Cgp2YXIgY2xlYW5VcEpvYnNBbmREYXRhZmVlZHMgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNwYWNlSWQsIHNvdXJjZUlkLCBqb2JUeXBlcykgewogICAgdmFyIF9lcnIkcmVzOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gKDAsIF9tbF9jbGVhbnVwLmNhbGxTdG9wRGF0YWZlZWRzKShzcGFjZUlkLCBzb3VyY2VJZCwgam9iVHlwZXMpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICBpZiAoISgoX2NvbnRleHQudDAgPT09IG51bGwgfHwgX2NvbnRleHQudDAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZXJyJHJlcyA9IF9jb250ZXh0LnQwLnJlcykgPT09IG51bGwgfHwgX2VyciRyZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lcnIkcmVzLnN0YXR1cykgIT09IDQwNCkpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhyb3cgX2NvbnRleHQudDA7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgIHJldHVybiBkZWxldGVKb2JzKHNwYWNlSWQsIHNvdXJjZUlkLCBqb2JUeXBlcyk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDVdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gY2xlYW5VcEpvYnNBbmREYXRhZmVlZHMoX3gsIF94MiwgX3gzKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmV4cG9ydHMuY2xlYW5VcEpvYnNBbmREYXRhZmVlZHMgPSBjbGVhblVwSm9ic0FuZERhdGFmZWVkczsKCnZhciBkZWxldGVKb2JzID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHNwYWNlSWQsIHNvdXJjZUlkLCBqb2JUeXBlcykgewogICAgdmFyIGRlbGV0ZUpvYnNSZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuICgwLCBfbWxfY2xlYW51cC5jYWxsRGVsZXRlSm9icykoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGVzKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGRlbGV0ZUpvYnNSZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiB3YWl0VW50aWxKb2JzQXJlRGVsZXRlZChzcGFjZUlkLCBzb3VyY2VJZCwgam9iVHlwZXMpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGRlbGV0ZUpvYnNSZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gZGVsZXRlSm9icyhfeDQsIF94NSwgX3g2KSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgd2FpdFVudGlsSm9ic0FyZURlbGV0ZWQgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGVzKSB7CiAgICB2YXIgbW9kdWxlSm9iSWRzLCBfcmVmNCwgam9iSWRzQmVpbmdEZWxldGVkLCBuZWVkVG9XYWl0OwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIG1vZHVsZUpvYklkcyA9IGpvYlR5cGVzLm1hcChmdW5jdGlvbiAoam9iVHlwZSkgewogICAgICAgICAgICAgIHJldHVybiAoMCwgX2xvZ19hbmFseXNpcy5nZXRKb2JJZCkoc3BhY2VJZCwgc291cmNlSWQsIGpvYlR5cGUpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGlmICghdHJ1ZSkgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuICgwLCBfbWxfY2xlYW51cC5jYWxsR2V0Sm9iRGVsZXRpb25UYXNrcykoKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIF9yZWY0ID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgIGpvYklkc0JlaW5nRGVsZXRlZCA9IF9yZWY0LmpvYklkczsKICAgICAgICAgICAgbmVlZFRvV2FpdCA9IGpvYklkc0JlaW5nRGVsZXRlZC5zb21lKGZ1bmN0aW9uIChqb2JJZCkgewogICAgICAgICAgICAgIHJldHVybiBtb2R1bGVKb2JJZHMuaW5jbHVkZXMoam9iSWQpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghbmVlZFRvV2FpdCkgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTA7CiAgICAgICAgICAgIHJldHVybiB0aW1lb3V0KDEwMDApOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0cnVlKTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiB3YWl0VW50aWxKb2JzQXJlRGVsZXRlZChfeDcsIF94OCwgX3g5KSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgdGltZW91dCA9IGZ1bmN0aW9uIHRpbWVvdXQobXMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcykgewogICAgcmV0dXJuIHNldFRpbWVvdXQocmVzLCBtcyk7CiAgfSk7Cn07"},null]}