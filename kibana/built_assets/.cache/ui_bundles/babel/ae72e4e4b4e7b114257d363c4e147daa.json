{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/case/configure/api.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/case/configure/api.js","mtime":1589249553220},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnBhdGNoQ2FzZUNvbmZpZ3VyZSA9IGV4cG9ydHMucG9zdENhc2VDb25maWd1cmUgPSBleHBvcnRzLmdldENhc2VDb25maWd1cmUgPSBleHBvcnRzLmZldGNoQ29ubmVjdG9ycyA9IHZvaWQgMDsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfa2liYW5hID0gcmVxdWlyZSgiLi4vLi4vLi4vbGliL2tpYmFuYSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi9jb25zdGFudHMiKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCIuLi91dGlscyIpOwoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKdmFyIGZldGNoQ29ubmVjdG9ycyA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZjIpIHsKICAgIHZhciBzaWduYWwsIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzaWduYWwgPSBfcmVmMi5zaWduYWw7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gX2tpYmFuYS5LaWJhbmFTZXJ2aWNlcy5nZXQoKS5odHRwLmZldGNoKCIiLmNvbmNhdChfY29uc3RhbnRzLkNBU0VTX0NPTkZJR1VSRV9VUkwsICIvY29ubmVjdG9ycy9fZmluZCIpLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgICBzaWduYWw6IHNpZ25hbAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBmZXRjaENvbm5lY3RvcnMoX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5mZXRjaENvbm5lY3RvcnMgPSBmZXRjaENvbm5lY3RvcnM7Cgp2YXIgZ2V0Q2FzZUNvbmZpZ3VyZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfcmVmNCkgewogICAgdmFyIHNpZ25hbCwgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBzaWduYWwgPSBfcmVmNC5zaWduYWw7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIF9raWJhbmEuS2liYW5hU2VydmljZXMuZ2V0KCkuaHR0cC5mZXRjaChfY29uc3RhbnRzLkNBU0VTX0NPTkZJR1VSRV9VUkwsIHsKICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICAgIHNpZ25hbDogc2lnbmFsCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsICEoMCwgX2ZwLmlzRW1wdHkpKHJlc3BvbnNlKSA/ICgwLCBfdXRpbHMuY29udmVydFRvQ2FtZWxDYXNlKSgoMCwgX3V0aWxzLmRlY29kZUNhc2VDb25maWd1cmVSZXNwb25zZSkocmVzcG9uc2UpKSA6IG51bGwpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGdldENhc2VDb25maWd1cmUoX3gyKSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CgpleHBvcnRzLmdldENhc2VDb25maWd1cmUgPSBnZXRDYXNlQ29uZmlndXJlOwoKdmFyIHBvc3RDYXNlQ29uZmlndXJlID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWY1ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGNhc2VDb25maWd1cmF0aW9uLCBzaWduYWwpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIF9raWJhbmEuS2liYW5hU2VydmljZXMuZ2V0KCkuaHR0cC5mZXRjaChfY29uc3RhbnRzLkNBU0VTX0NPTkZJR1VSRV9VUkwsIHsKICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjYXNlQ29uZmlndXJhdGlvbiksCiAgICAgICAgICAgICAgc2lnbmFsOiBzaWduYWwKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgKDAsIF91dGlscy5jb252ZXJ0VG9DYW1lbENhc2UpKCgwLCBfdXRpbHMuZGVjb2RlQ2FzZUNvbmZpZ3VyZVJlc3BvbnNlKShyZXNwb25zZSkpKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBwb3N0Q2FzZUNvbmZpZ3VyZShfeDMsIF94NCkgewogICAgcmV0dXJuIF9yZWY1LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5wb3N0Q2FzZUNvbmZpZ3VyZSA9IHBvc3RDYXNlQ29uZmlndXJlOwoKdmFyIHBhdGNoQ2FzZUNvbmZpZ3VyZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNiA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChjYXNlQ29uZmlndXJhdGlvbiwgc2lnbmFsKSB7CiAgICB2YXIgcmVzcG9uc2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBfa2liYW5hLktpYmFuYVNlcnZpY2VzLmdldCgpLmh0dHAuZmV0Y2goX2NvbnN0YW50cy5DQVNFU19DT05GSUdVUkVfVVJMLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLAogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNhc2VDb25maWd1cmF0aW9uKSwKICAgICAgICAgICAgICBzaWduYWw6IHNpZ25hbAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCAoMCwgX3V0aWxzLmNvbnZlcnRUb0NhbWVsQ2FzZSkoKDAsIF91dGlscy5kZWNvZGVDYXNlQ29uZmlndXJlUmVzcG9uc2UpKHJlc3BvbnNlKSkpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoQ2FzZUNvbmZpZ3VyZShfeDUsIF94NikgewogICAgcmV0dXJuIF9yZWY2LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5wYXRjaENhc2VDb25maWd1cmUgPSBwYXRjaENhc2VDb25maWd1cmU7"},null]}