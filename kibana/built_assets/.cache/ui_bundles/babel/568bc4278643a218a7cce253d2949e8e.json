{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_vislib/public/components/options/heatmap/index.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_vislib/public/components/options/heatmap/index.js","mtime":1589249550102},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkhlYXRtYXBPcHRpb25zID0gSGVhdG1hcE9wdGlvbnM7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9jb21tb24gPSByZXF1aXJlKCIuLi8uLi9jb21tb24iKTsKCnZhciBfbGFiZWxzX3BhbmVsID0gcmVxdWlyZSgiLi9sYWJlbHNfcGFuZWwiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIEhlYXRtYXBPcHRpb25zKHByb3BzKSB7CiAgdmFyIHN0YXRlUGFyYW1zID0gcHJvcHMuc3RhdGVQYXJhbXMsCiAgICAgIHZpcyA9IHByb3BzLnZpcywKICAgICAgdWlTdGF0ZSA9IHByb3BzLnVpU3RhdGUsCiAgICAgIHNldFZhbHVlID0gcHJvcHMuc2V0VmFsdWUsCiAgICAgIHNldFZhbGlkaXR5ID0gcHJvcHMuc2V0VmFsaWRpdHksCiAgICAgIHNldFRvdWNoZWQgPSBwcm9wcy5zZXRUb3VjaGVkOwoKICB2YXIgX3N0YXRlUGFyYW1zJHZhbHVlQXhlID0gX3NsaWNlZFRvQXJyYXkoc3RhdGVQYXJhbXMudmFsdWVBeGVzLCAxKSwKICAgICAgdmFsdWVBeGlzID0gX3N0YXRlUGFyYW1zJHZhbHVlQXhlWzBdOwoKICB2YXIgaXNDb2xvcnNOdW1iZXJJbnZhbGlkID0gc3RhdGVQYXJhbXMuY29sb3JzTnVtYmVyIDwgMiB8fCBzdGF0ZVBhcmFtcy5jb2xvcnNOdW1iZXIgPiAxMDsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIGlzQ29sb3JSYW5nZXNWYWxpZCA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldElzQ29sb3JSYW5nZXNWYWxpZCA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBzZXRWYWx1ZUF4aXNTY2FsZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChwYXJhbU5hbWUsIHZhbHVlKSB7CiAgICByZXR1cm4gc2V0VmFsdWUoJ3ZhbHVlQXhlcycsIFtfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZUF4aXMsIHsKICAgICAgc2NhbGU6IF9vYmplY3RTcHJlYWQoe30sIHZhbHVlQXhpcy5zY2FsZSwgX2RlZmluZVByb3BlcnR5KHt9LCBwYXJhbU5hbWUsIHZhbHVlKSkKICAgIH0pXSk7CiAgfSwgW3ZhbHVlQXhpcywgc2V0VmFsdWVdKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgc2V0VmFsaWRpdHkoc3RhdGVQYXJhbXMuc2V0Q29sb3JSYW5nZSA/IGlzQ29sb3JSYW5nZXNWYWxpZCA6ICFpc0NvbG9yc051bWJlckludmFsaWQpOwogIH0sIFtzdGF0ZVBhcmFtcy5zZXRDb2xvclJhbmdlLCBpc0NvbG9yUmFuZ2VzVmFsaWQsIGlzQ29sb3JzTnVtYmVySW52YWxpZCwgc2V0VmFsaWRpdHldKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCB7CiAgICBwYWRkaW5nU2l6ZTogInMiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICBzaXplOiAieHMiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgaWQ6ICJ2aXNUeXBlVmlzbGliLmVkaXRvcnMuaGVhdG1hcC5iYXNpY1NldHRpbmdzVGl0bGUiLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJCYXNpYyBzZXR0aW5ncyIKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAicyIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkJhc2ljT3B0aW9ucywgcHJvcHMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU3dpdGNoT3B0aW9uLCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWaXNsaWIuZWRpdG9ycy5oZWF0bWFwLmhpZ2hsaWdodExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0hpZ2hsaWdodCByYW5nZScKICAgIH0pLAogICAgcGFyYW1OYW1lOiAiZW5hYmxlSG92ZXIiLAogICAgdmFsdWU6IHN0YXRlUGFyYW1zLmVuYWJsZUhvdmVyLAogICAgc2V0VmFsdWU6IHNldFZhbHVlLAogICAgdG9vbHRpcDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWaXNsaWIuZWRpdG9ycy5oZWF0bWFwLmhpZ2hsaWdodExhYmVsVG9vbHRpcCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdIaWdobGlnaHQgaG92ZXJlZCByYW5nZSBpbiB0aGUgY2hhcnQgYW5kIGNvcnJlc3BvbmRpbmcgbGFiZWwgaW4gdGhlIGxlZ2VuZC4nCiAgICB9KQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgewogICAgcGFkZGluZ1NpemU6ICJzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgc2l6ZTogInhzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgzIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAidmlzVHlwZVZpc2xpYi5lZGl0b3JzLmhlYXRtYXAuaGVhdG1hcFNldHRpbmdzVGl0bGUiLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJIZWF0bWFwIHNldHRpbmdzIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQ29sb3JTY2hlbWFPcHRpb25zLCB7CiAgICBjb2xvclNjaGVtYTogc3RhdGVQYXJhbXMuY29sb3JTY2hlbWEsCiAgICBjb2xvclNjaGVtYXM6IHZpcy50eXBlLmVkaXRvckNvbmZpZy5jb2xsZWN0aW9ucy5jb2xvclNjaGVtYXMsCiAgICBpbnZlcnRDb2xvcnM6IHN0YXRlUGFyYW1zLmludmVydENvbG9ycywKICAgIHVpU3RhdGU6IHVpU3RhdGUsCiAgICBzZXRWYWx1ZTogc2V0VmFsdWUKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5TZWxlY3RPcHRpb24sIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgndmlzVHlwZVZpc2xpYi5jb250cm9scy5oZWF0bWFwT3B0aW9ucy5jb2xvclNjYWxlTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ29sb3Igc2NhbGUnCiAgICB9KSwKICAgIG9wdGlvbnM6IHZpcy50eXBlLmVkaXRvckNvbmZpZy5jb2xsZWN0aW9ucy5zY2FsZXMsCiAgICBwYXJhbU5hbWU6ICJ0eXBlIiwKICAgIHZhbHVlOiB2YWx1ZUF4aXMuc2NhbGUudHlwZSwKICAgIHNldFZhbHVlOiBzZXRWYWx1ZUF4aXNTY2FsZQogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU3dpdGNoT3B0aW9uLCB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWaXNsaWIuY29udHJvbHMuaGVhdG1hcE9wdGlvbnMuc2NhbGVUb0RhdGFCb3VuZHNMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTY2FsZSB0byBkYXRhIGJvdW5kcycKICAgIH0pLAogICAgcGFyYW1OYW1lOiAiZGVmYXVsdFlFeHRlbnRzIiwKICAgIHZhbHVlOiB2YWx1ZUF4aXMuc2NhbGUuZGVmYXVsdFlFeHRlbnRzLAogICAgc2V0VmFsdWU6IHNldFZhbHVlQXhpc1NjYWxlCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2l0Y2hPcHRpb24sIHsKICAgIGRpc2FibGVkOiBzdGF0ZVBhcmFtcy5zZXRDb2xvclJhbmdlLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVmlzbGliLmNvbnRyb2xzLmhlYXRtYXBPcHRpb25zLnBlcmNlbnRhZ2VNb2RlTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUGVyY2VudGFnZSBtb2RlJwogICAgfSksCiAgICBwYXJhbU5hbWU6ICJwZXJjZW50YWdlTW9kZSIsCiAgICB2YWx1ZTogc3RhdGVQYXJhbXMuc2V0Q29sb3JSYW5nZSA/IGZhbHNlIDogc3RhdGVQYXJhbXMucGVyY2VudGFnZU1vZGUsCiAgICBzZXRWYWx1ZTogc2V0VmFsdWUKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogInMiCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5OdW1iZXJJbnB1dE9wdGlvbiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogImhlYXRtYXBDb2xvcnNOdW1iZXIiLAogICAgZGlzYWJsZWQ6IHN0YXRlUGFyYW1zLnNldENvbG9yUmFuZ2UsCiAgICBpc0ludmFsaWQ6IGlzQ29sb3JzTnVtYmVySW52YWxpZCwKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgndmlzVHlwZVZpc2xpYi5jb250cm9scy5oZWF0bWFwT3B0aW9ucy5jb2xvcnNOdW1iZXJMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdOdW1iZXIgb2YgY29sb3JzJwogICAgfSksCiAgICBtYXg6IDEwLAogICAgbWluOiAyLAogICAgcGFyYW1OYW1lOiAiY29sb3JzTnVtYmVyIiwKICAgIHZhbHVlOiBzdGF0ZVBhcmFtcy5jb2xvcnNOdW1iZXIsCiAgICBzZXRWYWx1ZTogc2V0VmFsdWUKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLlN3aXRjaE9wdGlvbiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogImhlYXRtYXBVc2VDdXN0b21SYW5nZXMiLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVmlzbGliLmNvbnRyb2xzLmhlYXRtYXBPcHRpb25zLnVzZUN1c3RvbVJhbmdlc0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1VzZSBjdXN0b20gcmFuZ2VzJwogICAgfSksCiAgICBwYXJhbU5hbWU6ICJzZXRDb2xvclJhbmdlIiwKICAgIHZhbHVlOiBzdGF0ZVBhcmFtcy5zZXRDb2xvclJhbmdlLAogICAgc2V0VmFsdWU6IHNldFZhbHVlCiAgfSksIHN0YXRlUGFyYW1zLnNldENvbG9yUmFuZ2UgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkNvbG9yUmFuZ2VzLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaGVhdG1hcENvbG9yUmFuZ2UiLAogICAgY29sb3JzUmFuZ2U6IHN0YXRlUGFyYW1zLmNvbG9yc1JhbmdlLAogICAgc2V0VmFsdWU6IHNldFZhbHVlLAogICAgc2V0VG91Y2hlZDogc2V0VG91Y2hlZCwKICAgIHNldFZhbGlkaXR5OiBzZXRJc0NvbG9yUmFuZ2VzVmFsaWQKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYWJlbHNfcGFuZWwuTGFiZWxzUGFuZWwsIHsKICAgIHZhbHVlQXhpczogdmFsdWVBeGlzLAogICAgc2V0VmFsdWU6IHNldFZhbHVlCiAgfSkpOwp9"},null]}