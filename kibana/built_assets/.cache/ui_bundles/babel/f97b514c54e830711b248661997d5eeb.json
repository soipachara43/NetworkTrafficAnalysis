{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/i18n/components.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/i18n/components.js","mtime":1589249551887},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentStrings = void 0;

var _i18n = require("@kbn/i18n");

var _constants = require("./constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */


var ComponentStrings = {
  AddEmbeddableFlyout: {
    getNoItemsText: function getNoItemsText() {
      return _i18n.i18n.translate('xpack.canvas.embedObject.noMatchingObjectsMessage', {
        defaultMessage: 'No matching objects found.'
      });
    },
    getTitleText: function getTitleText() {
      return _i18n.i18n.translate('xpack.canvas.embedObject.titleText', {
        defaultMessage: 'Embed Object'
      });
    }
  },
  AdvancedFilter: {
    getApplyButtonLabel: function getApplyButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.renderer.advancedFilter.applyButtonLabel', {
        defaultMessage: 'Apply',
        description: 'This refers to applying the filter to the Canvas workpad'
      });
    },
    getInputPlaceholder: function getInputPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.renderer.advancedFilter.inputPlaceholder', {
        defaultMessage: 'Enter filter expression'
      });
    }
  },
  App: {
    getLoadErrorMessage: function getLoadErrorMessage(error) {
      return _i18n.i18n.translate('xpack.canvas.app.loadErrorMessage', {
        defaultMessage: 'Message: {error}',
        values: {
          error: error
        }
      });
    },
    getLoadErrorTitle: function getLoadErrorTitle() {
      return _i18n.i18n.translate('xpack.canvas.app.loadErrorTitle', {
        defaultMessage: 'Canvas failed to load'
      });
    },
    getLoadingMessage: function getLoadingMessage() {
      return _i18n.i18n.translate('xpack.canvas.app.loadingMessage', {
        defaultMessage: 'Canvas is loading'
      });
    }
  },
  ArgAddPopover: {
    getAddAriaLabel: function getAddAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.argAddPopover.addAriaLabel', {
        defaultMessage: 'Add argument'
      });
    }
  },
  ArgFormAdvancedFailure: {
    getApplyButtonLabel: function getApplyButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.argFormAdvancedFailure.applyButtonLabel', {
        defaultMessage: 'Apply'
      });
    },
    getResetButtonLabel: function getResetButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.argFormAdvancedFailure.resetButtonLabel', {
        defaultMessage: 'Reset'
      });
    },
    getRowErrorMessage: function getRowErrorMessage() {
      return _i18n.i18n.translate('xpack.canvas.argFormAdvancedFailure.rowErrorMessage', {
        defaultMessage: 'Invalid Expression'
      });
    }
  },
  ArgFormArgSimpleForm: {
    getRemoveAriaLabel: function getRemoveAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.argFormArgSimpleForm.removeAriaLabel', {
        defaultMessage: 'Remove'
      });
    },
    getRequiredTooltip: function getRequiredTooltip() {
      return _i18n.i18n.translate('xpack.canvas.argFormArgSimpleForm.requiredTooltip', {
        defaultMessage: 'This argument is required, you should specify a value.'
      });
    }
  },
  ArgFormPendingArgValue: {
    getLoadingMessage: function getLoadingMessage() {
      return _i18n.i18n.translate('xpack.canvas.argFormPendingArgValue.loadingMessage', {
        defaultMessage: 'Loading'
      });
    }
  },
  ArgFormSimpleFailure: {
    getFailureTooltip: function getFailureTooltip() {
      return _i18n.i18n.translate('xpack.canvas.argFormSimpleFailure.failureTooltip', {
        defaultMessage: 'The interface for this argument could not parse the value, so a fallback input is being used'
      });
    }
  },
  Asset: {
    getCopyAssetTooltip: function getCopyAssetTooltip() {
      return _i18n.i18n.translate('xpack.canvas.asset.copyAssetTooltip', {
        defaultMessage: 'Copy id to clipboard'
      });
    },
    getCreateImageTooltip: function getCreateImageTooltip() {
      return _i18n.i18n.translate('xpack.canvas.asset.createImageTooltip', {
        defaultMessage: 'Create image element'
      });
    },
    getDeleteAssetTooltip: function getDeleteAssetTooltip() {
      return _i18n.i18n.translate('xpack.canvas.asset.deleteAssetTooltip', {
        defaultMessage: 'Delete'
      });
    },
    getDownloadAssetTooltip: function getDownloadAssetTooltip() {
      return _i18n.i18n.translate('xpack.canvas.asset.downloadAssetTooltip', {
        defaultMessage: 'Download'
      });
    },
    getThumbnailAltText: function getThumbnailAltText() {
      return _i18n.i18n.translate('xpack.canvas.asset.thumbnailAltText', {
        defaultMessage: 'Asset thumbnail'
      });
    }
  },
  AssetManager: {
    getButtonLabel: function getButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.assetManager.manageButtonLabel', {
        defaultMessage: 'Manage assets'
      });
    },
    getConfirmModalButtonLabel: function getConfirmModalButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.assetManager.confirmModalButtonLabel', {
        defaultMessage: 'Remove'
      });
    },
    getConfirmModalMessageText: function getConfirmModalMessageText() {
      return _i18n.i18n.translate('xpack.canvas.assetManager.confirmModalDetail', {
        defaultMessage: 'Are you sure you want to remove this asset?'
      });
    },
    getConfirmModalTitle: function getConfirmModalTitle() {
      return _i18n.i18n.translate('xpack.canvas.assetManager.confirmModalTitle', {
        defaultMessage: 'Remove Asset'
      });
    }
  },
  AssetModal: {
    getDescription: function getDescription() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.modalDescription', {
        defaultMessage: 'Below are the image assets in this workpad. Any assets that are currently in use cannot be determined at this time. To reclaim space, delete assets.'
      });
    },
    getEmptyAssetsDescription: function getEmptyAssetsDescription() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.emptyAssetsDescription', {
        defaultMessage: 'Import your assets to get started'
      });
    },
    getFilePickerPromptText: function getFilePickerPromptText() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.filePickerPromptText', {
        defaultMessage: 'Select or drag and drop images'
      });
    },
    getLoadingText: function getLoadingText() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.loadingText', {
        defaultMessage: 'Uploading images'
      });
    },
    getModalCloseButtonLabel: function getModalCloseButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.modalCloseButtonLabel', {
        defaultMessage: 'Close'
      });
    },
    getModalTitle: function getModalTitle() {
      return _i18n.i18n.translate('xpack.canvas.assetModal.modalTitle', {
        defaultMessage: 'Manage workpad assets'
      });
    },
    getSpaceUsedText: function getSpaceUsedText(percentageUsed) {
      return _i18n.i18n.translate('xpack.canvas.assetModal.spacedUsedText', {
        defaultMessage: '{percentageUsed}% space used',
        values: {
          percentageUsed: percentageUsed
        }
      });
    }
  },
  AssetPicker: {
    getAssetAltText: function getAssetAltText() {
      return _i18n.i18n.translate('xpack.canvas.assetpicker.assetAltText', {
        defaultMessage: 'Asset thumbnail'
      });
    }
  },
  ColorManager: {
    getAddAriaLabel: function getAddAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.colorManager.addAriaLabel', {
        defaultMessage: 'Add Color'
      });
    },
    getCodePlaceholder: function getCodePlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.colorManager.codePlaceholder', {
        defaultMessage: 'Color code'
      });
    },
    getRemoveAriaLabel: function getRemoveAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.colorManager.removeAriaLabel', {
        defaultMessage: 'Remove Color'
      });
    }
  },
  CustomElementModal: {
    getCancelButtonLabel: function getCancelButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.cancelButtonLabel', {
        defaultMessage: 'Cancel'
      });
    },
    getCharactersRemainingDescription: function getCharactersRemainingDescription(numberOfRemainingCharacter) {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.remainingCharactersDescription', {
        defaultMessage: '{numberOfRemainingCharacter} characters remaining',
        values: {
          numberOfRemainingCharacter: numberOfRemainingCharacter
        }
      });
    },
    getDescriptionInputLabel: function getDescriptionInputLabel() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.descriptionInputLabel', {
        defaultMessage: 'Description'
      });
    },
    getElementPreviewTitle: function getElementPreviewTitle() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.elementPreviewTitle', {
        defaultMessage: 'Element preview'
      });
    },
    getImageFilePickerPlaceholder: function getImageFilePickerPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.imageFilePickerPlaceholder', {
        defaultMessage: 'Select or drag and drop an image'
      });
    },
    getImageInputDescription: function getImageInputDescription() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.imageInputDescription', {
        defaultMessage: 'Take a screenshot of your element and upload it here. This can also be done after saving.'
      });
    },
    getImageInputLabel: function getImageInputLabel() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.imageInputLabel', {
        defaultMessage: 'Thumbnail image'
      });
    },
    getNameInputLabel: function getNameInputLabel() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.nameInputLabel', {
        defaultMessage: 'Name'
      });
    },
    getSaveButtonLabel: function getSaveButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.customElementModal.saveButtonLabel', {
        defaultMessage: 'Save'
      });
    }
  },
  DatasourceDatasourceComponent: {
    getChangeButtonLabel: function getChangeButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourceComponent.changeButtonLabel', {
        defaultMessage: 'Change element data source'
      });
    },
    getPreviewButtonLabel: function getPreviewButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourceComponent.previewButtonLabel', {
        defaultMessage: 'Preview data'
      });
    },
    getSaveButtonLabel: function getSaveButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourceComponent.saveButtonLabel', {
        defaultMessage: 'Save'
      });
    }
  },
  DatasourceDatasourcePreview: {
    getEmptyFirstLineDescription: function getEmptyFirstLineDescription() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourcePreview.emptyFirstLineDescription', {
        defaultMessage: "We couldn't find any documents matching your search criteria."
      });
    },
    getEmptySecondLineDescription: function getEmptySecondLineDescription() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourcePreview.emptySecondLineDescription', {
        defaultMessage: 'Check your datasource settings and try again.'
      });
    },
    getEmptyTitle: function getEmptyTitle() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourcePreview.emptyTitle', {
        defaultMessage: 'No documents found'
      });
    },
    getModalTitle: function getModalTitle() {
      return _i18n.i18n.translate('xpack.canvas.datasourceDatasourcePreview.modalTitle', {
        defaultMessage: 'Datasource preview'
      });
    }
  },
  DatasourceNoDatasource: {
    getPanelDescription: function getPanelDescription() {
      return _i18n.i18n.translate('xpack.canvas.datasourceNoDatasource.panelDescription', {
        defaultMessage: "This element does not have an attached data source. This is usually because the element is an image or other static asset. If that's not the case you might want to check your expression to make sure it is not malformed."
      });
    },
    getPanelTitle: function getPanelTitle() {
      return _i18n.i18n.translate('xpack.canvas.datasourceNoDatasource.panelTitle', {
        defaultMessage: 'No data source present'
      });
    }
  },
  DropdownFilter: {
    getMatchAllOptionLabel: function getMatchAllOptionLabel() {
      return _i18n.i18n.translate('xpack.canvas.renderer.dropdownFilter.matchAllOptionLabel', {
        defaultMessage: 'ANY',
        description: 'The dropdown filter option to match any value in the field.'
      });
    }
  },
  ElementConfig: {
    getFailedLabel: function getFailedLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementConfig.failedLabel', {
        defaultMessage: 'Failed',
        description: 'The label for the total number of elements in a workpad that have thrown an error or failed to load'
      });
    },
    getLoadedLabel: function getLoadedLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementConfig.loadedLabel', {
        defaultMessage: 'Loaded',
        description: 'The label for the number of elements in a workpad that have loaded'
      });
    },
    getProgressLabel: function getProgressLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementConfig.progressLabel', {
        defaultMessage: 'Progress',
        description: 'The label for the percentage of elements that have finished loading'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.elementConfig.title', {
        defaultMessage: 'Element status',
        description: '"Elements" refers to the individual text, images, or visualizations that you can add to a Canvas workpad'
      });
    },
    getTotalLabel: function getTotalLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementConfig.totalLabel', {
        defaultMessage: 'Total',
        description: 'The label for the total number of elements in a workpad'
      });
    }
  },
  ElementControls: {
    getEditTooltip: function getEditTooltip() {
      return _i18n.i18n.translate('xpack.canvas.elementControls.editToolTip', {
        defaultMessage: 'Edit'
      });
    },
    getEditAriaLabel: function getEditAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementControls.editAriaLabel', {
        defaultMessage: 'Edit element'
      });
    },
    getDeleteTooltip: function getDeleteTooltip() {
      return _i18n.i18n.translate('xpack.canvas.elementControls.deleteToolTip', {
        defaultMessage: 'Delete'
      });
    },
    getDeleteAriaLabel: function getDeleteAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementControls.deleteAriaLabel', {
        defaultMessage: 'Delete element'
      });
    }
  },
  ElementSettings: {
    getDataTabLabel: function getDataTabLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementSettings.dataTabLabel', {
        defaultMessage: 'Data',
        description: 'This tab contains the settings for the data (i.e. Elasticsearch query) used as ' + 'the source for a Canvas element'
      });
    },
    getDisplayTabLabel: function getDisplayTabLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementSettings.displayTabLabel', {
        defaultMessage: 'Display',
        description: 'This tab contains the settings for how data is displayed in a Canvas element'
      });
    }
  },
  ElementTypes: {
    getEditElementTitle: function getEditElementTitle() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.editElementTitle', {
        defaultMessage: 'Edit element'
      });
    },
    getDeleteElementTitle: function getDeleteElementTitle(elementName) {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.deleteElementTitle', {
        defaultMessage: "Delete element '{elementName}'?",
        values: {
          elementName: elementName
        }
      });
    },
    getDeleteElementDescription: function getDeleteElementDescription() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.deleteElementDescription', {
        defaultMessage: 'Are you sure you want to delete this element?'
      });
    },
    getCancelButtonLabel: function getCancelButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.cancelButtonLabel', {
        defaultMessage: 'Cancel'
      });
    },
    getDeleteButtonLabel: function getDeleteButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.deleteButtonLabel', {
        defaultMessage: 'Delete'
      });
    },
    getAddNewElementTitle: function getAddNewElementTitle() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.addNewElementTitle', {
        defaultMessage: 'Add new elements'
      });
    },
    getAddNewElementDescription: function getAddNewElementDescription() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.addNewElementDescription', {
        defaultMessage: 'Group and save workpad elements to create new elements'
      });
    },
    getFindElementPlaceholder: function getFindElementPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.findElementPlaceholder', {
        defaultMessage: 'Find element'
      });
    },
    getElementsTitle: function getElementsTitle() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.elementsTitle', {
        defaultMessage: 'Elements',
        description: 'Title for the "Elements" tab when adding a new element'
      });
    },
    getMyElementsTitle: function getMyElementsTitle() {
      return _i18n.i18n.translate('xpack.canvas.elementTypes.myElementsTitle', {
        defaultMessage: 'My elements',
        description: 'Title for the "My elements" tab when adding a new element'
      });
    }
  },
  Error: {
    getDescription: function getDescription() {
      return _i18n.i18n.translate('xpack.canvas.errorComponent.description', {
        defaultMessage: 'Expression failed with the message:'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.errorComponent.title', {
        defaultMessage: 'Whoops! Expression failed'
      });
    }
  },
  Expression: {
    getCancelButtonLabel: function getCancelButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expression.cancelButtonLabel', {
        defaultMessage: 'Cancel'
      });
    },
    getCloseButtonLabel: function getCloseButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expression.closeButtonLabel', {
        defaultMessage: 'Close'
      });
    },
    getLearnLinkText: function getLearnLinkText() {
      return _i18n.i18n.translate('xpack.canvas.expression.learnLinkText', {
        defaultMessage: 'Learn expression syntax'
      });
    },
    getMaximizeButtonLabel: function getMaximizeButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expression.maximizeButtonLabel', {
        defaultMessage: 'Maximize editor'
      });
    },
    getMinimizeButtonLabel: function getMinimizeButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expression.minimizeButtonLabel', {
        defaultMessage: 'Minimize Editor'
      });
    },
    getRunButtonLabel: function getRunButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expression.runButtonLabel', {
        defaultMessage: 'Run'
      });
    },
    getRunTooltip: function getRunTooltip() {
      return _i18n.i18n.translate('xpack.canvas.expression.runTooltip', {
        defaultMessage: 'Run the expression'
      });
    }
  },
  ExpressionElementNotSelected: {
    getCloseButtonLabel: function getCloseButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.expressionElementNotSelected.closeButtonLabel', {
        defaultMessage: 'Close'
      });
    },
    getSelectDescription: function getSelectDescription() {
      return _i18n.i18n.translate('xpack.canvas.expressionElementNotSelected.selectDescription', {
        defaultMessage: 'Select an element to show expression input'
      });
    }
  },
  ExpressionInput: {
    getArgReferenceAliasesDetail: function getArgReferenceAliasesDetail(aliases) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.argReferenceAliasesDetail', {
        defaultMessage: '{BOLD_MD_TOKEN}Aliases{BOLD_MD_TOKEN}: {aliases}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          aliases: aliases
        }
      });
    },
    getArgReferenceDefaultDetail: function getArgReferenceDefaultDetail(defaultVal) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.argReferenceDefaultDetail', {
        defaultMessage: '{BOLD_MD_TOKEN}Default{BOLD_MD_TOKEN}: {defaultVal}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          defaultVal: defaultVal
        }
      });
    },
    getArgReferenceRequiredDetail: function getArgReferenceRequiredDetail(required) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.argReferenceRequiredDetail', {
        defaultMessage: '{BOLD_MD_TOKEN}Required{BOLD_MD_TOKEN}: {required}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          required: required
        }
      });
    },
    getArgReferenceTypesDetail: function getArgReferenceTypesDetail(types) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.argReferenceTypesDetail', {
        defaultMessage: '{BOLD_MD_TOKEN}Types{BOLD_MD_TOKEN}: {types}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          types: types
        }
      });
    },
    getFunctionReferenceAcceptsDetail: function getFunctionReferenceAcceptsDetail(acceptTypes) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.functionReferenceAccepts', {
        defaultMessage: '{BOLD_MD_TOKEN}Accepts{BOLD_MD_TOKEN}: {acceptTypes}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          acceptTypes: acceptTypes
        }
      });
    },
    getFunctionReferenceReturnsDetail: function getFunctionReferenceReturnsDetail(returnType) {
      return _i18n.i18n.translate('xpack.canvas.expressionInput.functionReferenceReturns', {
        defaultMessage: '{BOLD_MD_TOKEN}Returns{BOLD_MD_TOKEN}: {returnType}',
        values: {
          BOLD_MD_TOKEN: _constants.BOLD_MD_TOKEN,
          returnType: returnType
        }
      });
    }
  },
  FunctionFormContextError: {
    getContextErrorMessage: function getContextErrorMessage(errorMessage) {
      return _i18n.i18n.translate('xpack.canvas.functionForm.contextError', {
        defaultMessage: 'ERROR: {errorMessage}',
        values: {
          errorMessage: errorMessage
        }
      });
    }
  },
  FunctionFormFunctionUnknown: {
    getUnknownArgumentTypeErrorMessage: function getUnknownArgumentTypeErrorMessage(expressionType) {
      return _i18n.i18n.translate('xpack.canvas.functionForm.functionUnknown.unknownArgumentTypeError', {
        defaultMessage: 'Unknown expression type "{expressionType}"',
        values: {
          expressionType: expressionType
        }
      });
    }
  },
  GroupSettings: {
    getSaveGroupDescription: function getSaveGroupDescription() {
      return _i18n.i18n.translate('xpack.canvas.groupSettings.saveGroupDescription', {
        defaultMessage: 'Save this group as a new element to re-use it throughout your workpad.'
      });
    },
    getUngroupDescription: function getUngroupDescription() {
      return _i18n.i18n.translate('xpack.canvas.groupSettings.ungroupDescription', {
        defaultMessage: 'Ungroup ({uKey}) to edit individual element settings.',
        values: {
          uKey: 'U'
        }
      });
    }
  },
  HelpMenu: {
    getDocumentationLinkLabel: function getDocumentationLinkLabel() {
      return _i18n.i18n.translate('xpack.canvas.helpMenu.documentationLinkLabel', {
        defaultMessage: '{CANVAS} documentation',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getHelpMenuDescription: function getHelpMenuDescription() {
      return _i18n.i18n.translate('xpack.canvas.helpMenu.description', {
        defaultMessage: 'For {CANVAS} specific information',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getKeyboardShortcutsLinkLabel: function getKeyboardShortcutsLinkLabel() {
      return _i18n.i18n.translate('xpack.canvas.helpMenu.keyboardShortcutsLinkLabel', {
        defaultMessage: 'Keyboard shortcuts'
      });
    }
  },
  KeyboardShortcutsDoc: {
    getFlyoutCloseButtonAriaLabel: function getFlyoutCloseButtonAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.keyboardShortcutsDoc.flyout.closeButtonAriaLabel', {
        defaultMessage: 'Closes keyboard shortcuts reference'
      });
    },
    getShortcutSeparator: function getShortcutSeparator() {
      return _i18n.i18n.translate('xpack.canvas.keyboardShortcutsDoc.shortcutListSeparator', {
        defaultMessage: 'or',
        description: 'Separates which keyboard shortcuts can be used for a single action. Example: "{shortcut1} or {shortcut2} or {shortcut3}"'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.keyboardShortcutsDoc.flyoutHeaderTitle', {
        defaultMessage: 'Keyboard shortcuts'
      });
    }
  },
  Link: {
    getErrorMessage: function getErrorMessage(message) {
      return _i18n.i18n.translate('xpack.canvas.link.errorMessage', {
        defaultMessage: 'LINK ERROR: {message}',
        values: {
          message: message
        }
      });
    }
  },
  MultiElementSettings: {
    getMultipleElementsActionsDescription: function getMultipleElementsActionsDescription() {
      return _i18n.i18n.translate('xpack.canvas.groupSettings.multipleElementsActionsDescription', {
        defaultMessage: 'Deselect these elements to edit their individual settings, press ({gKey}) to group them, or save this selection as a new ' + 'element to re-use it throughout your workpad.',
        values: {
          gKey: 'G'
        }
      });
    },
    getMultipleElementsDescription: function getMultipleElementsDescription() {
      return _i18n.i18n.translate('xpack.canvas.groupSettings.multipleElementsDescription', {
        defaultMessage: 'Multiple elements are currently selected.'
      });
    }
  },
  PageConfig: {
    getBackgroundColorDescription: function getBackgroundColorDescription() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.backgroundColorDescription', {
        defaultMessage: 'Accepts HEX, RGB or HTML color names'
      });
    },
    getBackgroundColorLabel: function getBackgroundColorLabel() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.backgroundColorLabel', {
        defaultMessage: 'Background'
      });
    },
    getNoTransitionDropDownOptionLabel: function getNoTransitionDropDownOptionLabel() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.transitions.noneDropDownOptionLabel', {
        defaultMessage: 'None',
        description: 'This is the option the user should choose if they do not want any page transition (i.e. fade in, fade out, etc) to ' + 'be applied to the current page.'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.title', {
        defaultMessage: 'Page styles'
      });
    },
    getTransitionLabel: function getTransitionLabel() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.transitionLabel', {
        defaultMessage: 'Transition',
        description: 'This refers to the transition effect, such as fade in or rotate,  applied to a page in presentation mode.'
      });
    },
    getTransitionPreviewLabel: function getTransitionPreviewLabel() {
      return _i18n.i18n.translate('xpack.canvas.pageConfig.transitionPreviewLabel', {
        defaultMessage: 'Preview',
        description: 'This is the label for a preview of the transition effect selected.'
      });
    }
  },
  PageManager: {
    getPageNumberAriaLabel: function getPageNumberAriaLabel(pageNumber) {
      return _i18n.i18n.translate('xpack.canvas.pageManager.pageNumberAriaLabel', {
        defaultMessage: 'Load page number {pageNumber}',
        values: {
          pageNumber: pageNumber
        }
      });
    }
  },
  PagePreviewPageControls: {
    getClonePageAriaLabel: function getClonePageAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.pagePreviewPageControls.clonePageAriaLabel', {
        defaultMessage: 'Clone page'
      });
    },
    getClonePageTooltip: function getClonePageTooltip() {
      return _i18n.i18n.translate('xpack.canvas.pagePreviewPageControls.clonePageTooltip', {
        defaultMessage: 'Clone'
      });
    },
    getDeletePageAriaLabel: function getDeletePageAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.pagePreviewPageControls.deletePageAriaLabel', {
        defaultMessage: 'Delete page'
      });
    },
    getDeletePageTooltip: function getDeletePageTooltip() {
      return _i18n.i18n.translate('xpack.canvas.pagePreviewPageControls.deletePageTooltip', {
        defaultMessage: 'Delete'
      });
    }
  },
  ShareWebsiteFlyout: {
    getRuntimeStepTitle: function getRuntimeStepTitle() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.downloadRuntimeTitle', {
        defaultMessage: 'Download runtime'
      });
    },
    getSnippentsStepTitle: function getSnippentsStepTitle() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.addSnippetsTitle', {
        defaultMessage: 'Add snippets to website'
      });
    },
    getStepsDescription: function getStepsDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.description', {
        defaultMessage: 'Follow these steps to share a static version of this workpad on an external website. It will be a visual snapshot of the current workpad, and will not have access to live data.'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.flyoutTitle', {
        defaultMessage: 'Share on a website'
      });
    },
    getUnsupportedRendererWarning: function getUnsupportedRendererWarning() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.unsupportedRendererWarning', {
        defaultMessage: 'This workpad contains render functions that are not supported by the {CANVAS} Shareable Workpad Runtime. These elements will not be rendered:',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getWorkpadStepTitle: function getWorkpadStepTitle() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.downloadWorkpadTitle', {
        defaultMessage: 'Download workpad'
      });
    }
  },
  ShareWebsiteRuntimeStep: {
    getDownloadLabel: function getDownloadLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.runtimeStep.downloadLabel', {
        defaultMessage: 'Download runtime'
      });
    },
    getStepDescription: function getStepDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.runtimeStep.description', {
        defaultMessage: 'In order to render a Shareable Workpad, you also need to include the {CANVAS} Shareable Workpad Runtime. You can skip this step if the runtime is already included on your website.',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    }
  },
  ShareWebsiteSnippetsStep: {
    getAutoplayParameterDescription: function getAutoplayParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.autoplayParameterDescription', {
        defaultMessage: 'Should the runtime automatically move through the pages of the workpad?'
      });
    },
    getCallRuntimeLabel: function getCallRuntimeLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.callRuntimeLabel', {
        defaultMessage: 'Call Runtime'
      });
    },
    getHeightParameterDescription: function getHeightParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.heightParameterDescription', {
        defaultMessage: 'The height of the Workpad. Defaults to the Workpad height.'
      });
    },
    getIncludeRuntimeLabel: function getIncludeRuntimeLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.includeRuntimeLabel', {
        defaultMessage: 'Include Runtime'
      });
    },
    getIntervalParameterDescription: function getIntervalParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.intervalParameterDescription', {
        defaultMessage: 'The interval upon which the pages will advance in time format, (e.g. {twoSeconds}, {oneMinute})',
        values: {
          twoSeconds: '2s',
          oneMinute: '1m'
        }
      });
    },
    getPageParameterDescription: function getPageParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.pageParameterDescription', {
        defaultMessage: 'The page to display. Defaults to the page specified by the Workpad.'
      });
    },
    getParametersDescription: function getParametersDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.parametersDescription', {
        defaultMessage: 'There are a number of inline parameters to configure the Shareable Workpad.'
      });
    },
    getParametersTitle: function getParametersTitle() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.parametersLabel', {
        defaultMessage: 'Parameters'
      });
    },
    getPlaceholderLabel: function getPlaceholderLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.placeholderLabel', {
        defaultMessage: 'Placeholder'
      });
    },
    getRequiredLabel: function getRequiredLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.requiredLabel', {
        defaultMessage: 'required'
      });
    },
    getShareableParameterDescription: function getShareableParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.shareableParameterDescription', {
        defaultMessage: 'The type of shareable. In this case, a {CANVAS} Workpad.',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getSnippetsStepDescription: function getSnippetsStepDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.description', {
        defaultMessage: 'The Workpad is placed within the {HTML} of the site by using an {HTML} placeholder. Parameters for the runtime are included inline. See the full list of parameters below. You can include more than one workpad on the page.',
        values: {
          HTML: _constants.HTML
        }
      });
    },
    getToolbarParameterDescription: function getToolbarParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.toolbarParameterDescription', {
        defaultMessage: 'Should the toolbar be hidden?'
      });
    },
    getUrlParameterDescription: function getUrlParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.urlParameterDescription', {
        defaultMessage: 'The {URL} of the Shareable Workpad {JSON} file.',
        values: {
          URL: _constants.URL,
          JSON: _constants.JSON
        }
      });
    },
    getWidthParameterDescription: function getWidthParameterDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.snippetsStep.widthParameterDescription', {
        defaultMessage: 'The width of the Workpad. Defaults to the Workpad width.'
      });
    }
  },
  ShareWebsiteWorkpadStep: {
    getDownloadLabel: function getDownloadLabel() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.workpadStep.downloadLabel', {
        defaultMessage: 'Download workpad'
      });
    },
    getStepDescription: function getStepDescription() {
      return _i18n.i18n.translate('xpack.canvas.shareWebsiteFlyout.workpadStep.description', {
        defaultMessage: 'The workpad will be exported as a single {JSON} file for sharing in another site.',
        values: {
          JSON: _constants.JSON
        }
      });
    }
  },
  SidebarContent: {
    getGroupedElementSidebarTitle: function getGroupedElementSidebarTitle() {
      return _i18n.i18n.translate('xpack.canvas.sidebarContent.groupedElementSidebarTitle', {
        defaultMessage: 'Grouped element',
        description: 'The title displayed when a grouped element is selected. "elements" refer to the different visualizations, images, ' + 'text, etc that can be added in a Canvas workpad. These elements can be grouped into a larger "grouped element" ' + 'that contains multiple individual elements.'
      });
    },
    getMultiElementSidebarTitle: function getMultiElementSidebarTitle() {
      return _i18n.i18n.translate('xpack.canvas.sidebarContent.multiElementSidebarTitle', {
        defaultMessage: 'Multiple elements',
        description: 'The title displayed when multiple elements are selected. "elements" refer to the different visualizations, images, ' + 'text, etc that can be added in a Canvas workpad.'
      });
    },
    getSingleElementSidebarTitle: function getSingleElementSidebarTitle() {
      return _i18n.i18n.translate('xpack.canvas.sidebarContent.singleElementSidebarTitle', {
        defaultMessage: 'Selected element',
        description: 'The title displayed when a single element are selected. "element" refer to the different visualizations, images, ' + 'text, etc that can be added in a Canvas workpad.'
      });
    }
  },
  SidebarHeader: {
    getAlignmentMenuItemLabel: function getAlignmentMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.alignmentMenuItemLabel', {
        defaultMessage: 'Alignment',
        description: 'This refers to the vertical (i.e. left, center, right) and horizontal (i.e. top, middle, bottom) ' + 'alignment options of the selected elements'
      });
    },
    getBottomAlignMenuItemLabel: function getBottomAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.bottomAlignMenuItemLabel', {
        defaultMessage: 'Bottom'
      });
    },
    getBringForwardAriaLabel: function getBringForwardAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.bringForwardArialLabel', {
        defaultMessage: 'Move element up one layer'
      });
    },
    getBringToFrontAriaLabel: function getBringToFrontAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.bringToFrontArialLabel', {
        defaultMessage: 'Move element to top layer'
      });
    },
    getCenterAlignMenuItemLabel: function getCenterAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.centerAlignMenuItemLabel', {
        defaultMessage: 'Center',
        description: 'This refers to alignment centered horizontally.'
      });
    },
    getContextMenuTitle: function getContextMenuTitle() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.contextMenuAriaLabel', {
        defaultMessage: 'Element options'
      });
    },
    getCreateElementModalTitle: function getCreateElementModalTitle() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.createElementModalTitle', {
        defaultMessage: 'Create new element'
      });
    },
    getDistributionMenuItemLabel: function getDistributionMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.distributionMenutItemLabel', {
        defaultMessage: 'Distribution',
        description: 'This refers to the options to evenly spacing the selected elements horizontall or vertically.'
      });
    },
    getGroupMenuItemLabel: function getGroupMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.groupMenuItemLabel', {
        defaultMessage: 'Group',
        description: 'This refers to grouping multiple selected elements.'
      });
    },
    getHorizontalDistributionMenuItemLabel: function getHorizontalDistributionMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.horizontalDistributionMenutItemLabel', {
        defaultMessage: 'Horizontal'
      });
    },
    getLeftAlignMenuItemLabel: function getLeftAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.leftAlignMenuItemLabel', {
        defaultMessage: 'Left'
      });
    },
    getMiddleAlignMenuItemLabel: function getMiddleAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.middleAlignMenuItemLabel', {
        defaultMessage: 'Middle',
        description: 'This refers to alignment centered vertically.'
      });
    },
    getOrderMenuItemLabel: function getOrderMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.orderMenuItemLabel', {
        defaultMessage: 'Order',
        description: 'Refers to the order of the elements displayed on the page from front to back'
      });
    },
    getRightAlignMenuItemLabel: function getRightAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.rightAlignMenuItemLabel', {
        defaultMessage: 'Right'
      });
    },
    getSaveElementMenuItemLabel: function getSaveElementMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.savedElementMenuItemLabel', {
        defaultMessage: 'Save as new element'
      });
    },
    getSendBackwardAriaLabel: function getSendBackwardAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.sendBackwardArialLabel', {
        defaultMessage: 'Move element down one layer'
      });
    },
    getSendToBackAriaLabel: function getSendToBackAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.sendToBackArialLabel', {
        defaultMessage: 'Move element to bottom layer'
      });
    },
    getTopAlignMenuItemLabel: function getTopAlignMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.topAlignMenuItemLabel', {
        defaultMessage: 'Top'
      });
    },
    getUngroupMenuItemLabel: function getUngroupMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.ungroupMenuItemLabel', {
        defaultMessage: 'Ungroup',
        description: 'This refers to ungrouping a grouped element'
      });
    },
    getVerticalDistributionMenuItemLabel: function getVerticalDistributionMenuItemLabel() {
      return _i18n.i18n.translate('xpack.canvas.sidebarHeader.verticalDistributionMenutItemLabel', {
        defaultMessage: 'Vertical'
      });
    }
  },
  TextStylePicker: {
    getAlignCenterOption: function getAlignCenterOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.alignCenterOption', {
        defaultMessage: 'Align center'
      });
    },
    getAlignLeftOption: function getAlignLeftOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.alignLeftOption', {
        defaultMessage: 'Align left'
      });
    },
    getAlignRightOption: function getAlignRightOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.alignRightOption', {
        defaultMessage: 'Align right'
      });
    },
    getStyleBoldOption: function getStyleBoldOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.styleBoldOption', {
        defaultMessage: 'Bold'
      });
    },
    getStyleItalicOption: function getStyleItalicOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.styleItalicOption', {
        defaultMessage: 'Italic'
      });
    },
    getStyleUnderlineOption: function getStyleUnderlineOption() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.styleUnderlineOption', {
        defaultMessage: 'Underline'
      });
    },
    getFontColorLabel: function getFontColorLabel() {
      return _i18n.i18n.translate('xpack.canvas.textStylePicker.fontColorLabel', {
        defaultMessage: 'Font Color'
      });
    }
  },
  TimePicker: {
    getApplyButtonLabel: function getApplyButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.timePicker.applyButtonLabel', {
        defaultMessage: 'Apply'
      });
    }
  },
  Toolbar: {
    getEditorButtonLabel: function getEditorButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.toolbar.editorButtonLabel', {
        defaultMessage: 'Expression editor'
      });
    },
    getNextPageAriaLabel: function getNextPageAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.toolbar.nextPageAriaLabel', {
        defaultMessage: 'Next Page'
      });
    },
    getPageButtonLabel: function getPageButtonLabel(pageNum, totalPages) {
      return _i18n.i18n.translate('xpack.canvas.toolbar.pageButtonLabel', {
        defaultMessage: 'Page {pageNum}{rest}',
        values: {
          pageNum: pageNum,
          rest: totalPages > 1 ? " of ".concat(totalPages) : ''
        }
      });
    },
    getPreviousPageAriaLabel: function getPreviousPageAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.toolbar.previousPageAriaLabel', {
        defaultMessage: 'Previous Page'
      });
    },
    getWorkpadManagerCloseButtonLabel: function getWorkpadManagerCloseButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.toolbar.workpadManagerCloseButtonLabel', {
        defaultMessage: 'Close'
      });
    }
  },
  ToolbarTray: {
    getCloseTrayAriaLabel: function getCloseTrayAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.toolbarTray.closeTrayAriaLabel', {
        defaultMessage: 'Close tray'
      });
    }
  },
  WorkpadConfig: {
    getApplyStylesheetButtonLabel: function getApplyStylesheetButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.applyStylesheetButtonLabel', {
        defaultMessage: "Apply stylesheet",
        description: '"stylesheet" refers to the collection of CSS style rules entered by the user.'
      });
    },
    getFlipDimensionAriaLabel: function getFlipDimensionAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.swapDimensionsAriaLabel', {
        defaultMessage: "Swap the page's width and height"
      });
    },
    getFlipDimensionTooltip: function getFlipDimensionTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.swapDimensionsTooltip', {
        defaultMessage: 'Swap the width and height'
      });
    },
    getGlobalCSSLabel: function getGlobalCSSLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.globalCSSLabel', {
        defaultMessage: "Global CSS overrides"
      });
    },
    getGlobalCSSTooltip: function getGlobalCSSTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.globalCSSTooltip', {
        defaultMessage: "Apply styles to all pages in this workpad"
      });
    },
    getNameLabel: function getNameLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.nameLabel', {
        defaultMessage: 'Name'
      });
    },
    getPageHeightLabel: function getPageHeightLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.heightLabel', {
        defaultMessage: 'Height'
      });
    },
    getPageSizeBadgeAriaLabel: function getPageSizeBadgeAriaLabel(sizeName) {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.pageSizeBadgeAriaLabel', {
        defaultMessage: "Preset page size: {sizeName}",
        values: {
          sizeName: sizeName
        }
      });
    },
    getPageSizeBadgeOnClickAriaLabel: function getPageSizeBadgeOnClickAriaLabel(sizeName) {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.pageSizeBadgeOnClickAriaLabel', {
        defaultMessage: "Set page size to {sizeName}",
        values: {
          sizeName: sizeName
        }
      });
    },
    getPageWidthLabel: function getPageWidthLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.widthLabel', {
        defaultMessage: 'Width'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.title', {
        defaultMessage: 'Workpad settings'
      });
    },
    getUSLetterButtonLabel: function getUSLetterButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.USLetterButtonLabel', {
        defaultMessage: 'US Letter',
        description: 'This is referring to the dimensions of U.S. standard letter paper.'
      });
    },
    getBackgroundColorLabel: function getBackgroundColorLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadConfig.backgroundColorLabel', {
        defaultMessage: 'Background color'
      });
    }
  },
  WorkpadCreate: {
    getWorkpadCreateButtonLabel: function getWorkpadCreateButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadCreate.createButtonLabel', {
        defaultMessage: 'Create workpad'
      });
    }
  },
  WorkpadHeader: {
    getAddElementButtonLabel: function getAddElementButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.addElementButtonLabel', {
        defaultMessage: 'Add element'
      });
    },
    getAddElementModalCloseButtonLabel: function getAddElementModalCloseButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.addElementModalCloseButtonLabel', {
        defaultMessage: 'Close'
      });
    },
    getEmbedObjectButtonLabel: function getEmbedObjectButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.embedObjectButtonLabel', {
        defaultMessage: 'Embed object'
      });
    },
    getFullScreenButtonAriaLabel: function getFullScreenButtonAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.fullscreenButtonAriaLabel', {
        defaultMessage: 'View fullscreen'
      });
    },
    getFullScreenTooltip: function getFullScreenTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.fullscreenTooltip', {
        defaultMessage: 'Enter fullscreen mode'
      });
    },
    getHideEditControlTooltip: function getHideEditControlTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.hideEditControlTooltip', {
        defaultMessage: 'Hide editing controls'
      });
    },
    getNoWritePermissionTooltipText: function getNoWritePermissionTooltipText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.noWritePermissionTooltip', {
        defaultMessage: "You don't have permission to edit this workpad"
      });
    },
    getShowEditControlTooltip: function getShowEditControlTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeader.showEditControlTooltip', {
        defaultMessage: 'Show editing controls'
      });
    }
  },
  WorkpadHeaderAutoRefreshControls: {
    getDisableTooltip: function getDisableTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderAutoRefreshControls.disableTooltip', {
        defaultMessage: 'Disable auto-refresh'
      });
    },
    getIntervalFormLabelText: function getIntervalFormLabelText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderAutoRefreshControls.intervalFormLabel', {
        defaultMessage: 'Change auto-refresh interval'
      });
    },
    getRefreshListDurationManualText: function getRefreshListDurationManualText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderAutoRefreshControls.refreshListDurationManualText', {
        defaultMessage: 'Manually'
      });
    },
    getRefreshListTitle: function getRefreshListTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderAutoRefreshControls.refreshListTitle', {
        defaultMessage: 'Refresh elements'
      });
    }
  },
  WorkpadHeaderControlSettings: {
    getTooltip: function getTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderControlSettings.settingsTooltip', {
        defaultMessage: 'Control settings'
      });
    }
  },
  WorkpadHeaderCustomInterval: {
    getButtonLabel: function getButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderCustomInterval.confirmButtonLabel', {
        defaultMessage: 'Set'
      });
    },
    getFormDescription: function getFormDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderCustomInterval.formDescription', {
        defaultMessage: 'Use shorthand notation, like {secondsExample}, {minutesExample}, or {hoursExample}',
        values: {
          secondsExample: '30s',
          minutesExample: '10m',
          hoursExample: '1h'
        }
      });
    },
    getFormLabel: function getFormLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderCustomInterval.formLabel', {
        defaultMessage: 'Set a custom interval'
      });
    }
  },
  WorkpadHeaderKioskControls: {
    getCycleFormLabel: function getCycleFormLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderKioskControl.cycleFormLabel', {
        defaultMessage: 'Change cycling interval'
      });
    },
    getCycleToggleSwitch: function getCycleToggleSwitch() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderKioskControl.cycleToggleSwitch', {
        defaultMessage: 'Cycle slides automatically'
      });
    },
    getTitle: function getTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderKioskControl.controlTitle', {
        defaultMessage: 'Cycle fullscreen pages'
      });
    }
  },
  WorkpadHeaderRefreshControlSettings: {
    getRefreshAriaLabel: function getRefreshAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderRefreshControlSettings.refreshAriaLabel', {
        defaultMessage: 'Refresh Elements'
      });
    },
    getRefreshTooltip: function getRefreshTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderRefreshControlSettings.refreshTooltip', {
        defaultMessage: 'Refresh data'
      });
    }
  },
  WorkpadHeaderWorkpadExport: {
    getCopyPDFMessage: function getCopyPDFMessage() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.copyPDFMessage', {
        defaultMessage: 'The {PDF} generation {URL} was copied to your clipboard.',
        values: {
          PDF: _constants.PDF,
          URL: _constants.URL
        }
      });
    },
    getCopyReportingConfigMessage: function getCopyReportingConfigMessage() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.copyReportingConfigMessage', {
        defaultMessage: 'Copied reporting configuration to clipboard'
      });
    },
    getCopyShareConfigMessage: function getCopyShareConfigMessage() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.copyShareConfigMessage', {
        defaultMessage: 'Copied share markup to clipboard'
      });
    },
    getExportPDFErrorTitle: function getExportPDFErrorTitle(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.exportPDFErrorMessage', {
        defaultMessage: "Failed to create {PDF} for '{workpadName}'",
        values: {
          PDF: _constants.PDF,
          workpadName: workpadName
        }
      });
    },
    getExportPDFMessage: function getExportPDFMessage() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.exportPDFMessage', {
        defaultMessage: 'Exporting {PDF}. You can track the progress in Management.',
        values: {
          PDF: _constants.PDF
        }
      });
    },
    getExportPDFTitle: function getExportPDFTitle(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.exportPDFTitle', {
        defaultMessage: "{PDF} export of workpad '{workpadName}'",
        values: {
          PDF: _constants.PDF,
          workpadName: workpadName
        }
      });
    },
    getPDFPanelCopyAriaLabel: function getPDFPanelCopyAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.pdfPanelCopyAriaLabel', {
        defaultMessage: 'Alternatively, you can generate a {PDF} from a script or with Watcher by using this {URL}. Press Enter to copy the {URL} to clipboard.',
        values: {
          PDF: _constants.PDF,
          URL: _constants.URL
        }
      });
    },
    getPDFPanelCopyButtonLabel: function getPDFPanelCopyButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.pdfPanelCopyButtonLabel', {
        defaultMessage: 'Copy {POST} {URL}',
        values: {
          POST: _constants.POST,
          URL: _constants.URL
        }
      });
    },
    getPDFPanelCopyDescription: function getPDFPanelCopyDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.pdfPanelCopyDescription', {
        defaultMessage: 'Alternatively, copy this {POST} {URL} to call generation from outside {KIBANA} or from Watcher.',
        values: {
          POST: _constants.POST,
          KIBANA: _constants.KIBANA,
          URL: _constants.URL
        }
      });
    },
    getPDFPanelGenerateButtonLabel: function getPDFPanelGenerateButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.pdfPanelGenerateButtonLabel', {
        defaultMessage: 'Generate {PDF}',
        values: {
          PDF: _constants.PDF
        }
      });
    },
    getPDFPanelGenerateDescription: function getPDFPanelGenerateDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.pdfPanelGenerateDescription', {
        defaultMessage: '{PDF}s can take a minute or two to generate based on the size of your workpad.',
        values: {
          PDF: _constants.PDF
        }
      });
    },
    getShareableZipErrorTitle: function getShareableZipErrorTitle(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.shareWebsiteErrorTitle', {
        defaultMessage: "Failed to create {ZIP} file for '{workpadName}'. The workpad may be too large. You'll need to download the files separately.",
        values: {
          ZIP: _constants.ZIP,
          workpadName: workpadName
        }
      });
    },
    getShareDownloadJSONTitle: function getShareDownloadJSONTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.shareDownloadJSONTitle', {
        defaultMessage: 'Download as {JSON}',
        values: {
          JSON: _constants.JSON
        }
      });
    },
    getShareDownloadPDFTitle: function getShareDownloadPDFTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.shareDownloadPDFTitle', {
        defaultMessage: '{PDF} reports',
        values: {
          PDF: _constants.PDF
        }
      });
    },
    getShareWebsiteTitle: function getShareWebsiteTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.shareWebsiteTitle', {
        defaultMessage: 'Share on a website'
      });
    },
    getShareWorkpadMessage: function getShareWorkpadMessage() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.shareWorkpadMessage', {
        defaultMessage: 'Share this workpad'
      });
    },
    getUnknownExportErrorMessage: function getUnknownExportErrorMessage(type) {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadExport.unknownExportErrorMessage', {
        defaultMessage: 'Unknown export type: {type}',
        values: {
          type: type
        }
      });
    }
  },
  WorkpadHeaderWorkpadZoom: {
    getZoomControlsAriaLabel: function getZoomControlsAriaLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomControlsAriaLabel', {
        defaultMessage: 'Zoom controls'
      });
    },
    getZoomControlsTooltip: function getZoomControlsTooltip() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomControlsTooltip', {
        defaultMessage: 'Zoom controls'
      });
    },
    getZoomFitToWindowText: function getZoomFitToWindowText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomFitToWindowText', {
        defaultMessage: 'Fit to window'
      });
    },
    getZoomInText: function getZoomInText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomInText', {
        defaultMessage: 'Zoom in'
      });
    },
    getZoomOutText: function getZoomOutText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomOutText', {
        defaultMessage: 'Zoom out'
      });
    },
    getZoomPanelTitle: function getZoomPanelTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomPanelTitle', {
        defaultMessage: 'Zoom'
      });
    },
    getZoomPercentage: function getZoomPercentage(scale) {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomResetText', {
        defaultMessage: '{scalePercentage}%',
        values: {
          scalePercentage: scale * 100
        }
      });
    },
    getZoomResetText: function getZoomResetText() {
      return _i18n.i18n.translate('xpack.canvas.workpadHeaderWorkpadZoom.zoomPrecentageValue', {
        defaultMessage: 'Reset'
      });
    }
  },
  WorkpadLoader: {
    getClonedWorkpadName: function getClonedWorkpadName(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.clonedWorkpadName', {
        defaultMessage: 'Copy of {workpadName}',
        values: {
          workpadName: workpadName
        },
        description: 'This suffix is added to the end of the name of a cloned workpad to indicate that this ' + 'new workpad is a copy of the original workpad. Example: "Copy of Sales Pitch"'
      });
    },
    getCloneToolTip: function getCloneToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.cloneTooltip', {
        defaultMessage: 'Clone workpad'
      });
    },
    getCreateWorkpadLoadingDescription: function getCreateWorkpadLoadingDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.createWorkpadLoadingDescription', {
        defaultMessage: 'Creating workpad...',
        description: 'This message appears while the user is waiting for a new workpad to be created'
      });
    },
    getDeleteButtonAriaLabel: function getDeleteButtonAriaLabel(numberOfWorkpads) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteButtonAriaLabel', {
        defaultMessage: 'Delete {numberOfWorkpads} workpads',
        values: {
          numberOfWorkpads: numberOfWorkpads
        }
      });
    },
    getDeleteButtonLabel: function getDeleteButtonLabel(numberOfWorkpads) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteButtonLabel', {
        defaultMessage: 'Delete ({numberOfWorkpads})',
        values: {
          numberOfWorkpads: numberOfWorkpads
        }
      });
    },
    getDeleteModalConfirmButtonLabel: function getDeleteModalConfirmButtonLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteModalConfirmButtonLabel', {
        defaultMessage: 'Delete'
      });
    },
    getDeleteModalDescription: function getDeleteModalDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteModalDescription', {
        defaultMessage: "You can't recover deleted workpads."
      });
    },
    getDeleteMultipleWorkpadModalTitle: function getDeleteMultipleWorkpadModalTitle(numberOfWorkpads) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteMultipleWorkpadsModalTitle', {
        defaultMessage: 'Delete {numberOfWorkpads} workpads?',
        values: {
          numberOfWorkpads: numberOfWorkpads
        }
      });
    },
    getDeleteSingleWorkpadModalTitle: function getDeleteSingleWorkpadModalTitle(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.deleteSingleWorkpadModalTitle', {
        defaultMessage: "Delete workpad '{workpadName}'?",
        values: {
          workpadName: workpadName
        }
      });
    },
    getEmptyPromptGettingStartedDescription: function getEmptyPromptGettingStartedDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.emptyPromptGettingStartedDescription', {
        defaultMessage: 'Create a new workpad, start from a template, or import a workpad {JSON} file by dropping it here.',
        values: {
          JSON: _constants.JSON
        }
      });
    },
    getEmptyPromptNewUserDescription: function getEmptyPromptNewUserDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.emptyPromptNewUserDescription', {
        defaultMessage: 'New to {CANVAS}?',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getEmptyPromptTitle: function getEmptyPromptTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.emptyPromptTitle', {
        defaultMessage: 'Add your first workpad'
      });
    },
    getExportButtonAriaLabel: function getExportButtonAriaLabel(numberOfWorkpads) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.exportButtonAriaLabel', {
        defaultMessage: 'Export {numberOfWorkpads} workpads',
        values: {
          numberOfWorkpads: numberOfWorkpads
        }
      });
    },
    getExportButtonLabel: function getExportButtonLabel(numberOfWorkpads) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.exportButtonLabel', {
        defaultMessage: 'Export ({numberOfWorkpads})',
        values: {
          numberOfWorkpads: numberOfWorkpads
        }
      });
    },
    getExportToolTip: function getExportToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.exportTooltip', {
        defaultMessage: 'Export workpad'
      });
    },
    getFetchLoadingDescription: function getFetchLoadingDescription() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.fetchLoadingDescription', {
        defaultMessage: 'Fetching workpads...',
        description: 'This message appears while the user is waiting for their list of workpads to load'
      });
    },
    getFilePickerPlaceholder: function getFilePickerPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.filePickerPlaceholder', {
        defaultMessage: 'Import workpad {JSON} file',
        values: {
          JSON: _constants.JSON
        }
      });
    },
    getLoadWorkpadArialLabel: function getLoadWorkpadArialLabel(workpadName) {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.loadWorkpadArialLabel', {
        defaultMessage: "Load workpad '{workpadName}'",
        values: {
          workpadName: workpadName
        }
      });
    },
    getNoPermissionToCloneToolTip: function getNoPermissionToCloneToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.noPermissionToCloneToolTip', {
        defaultMessage: "You don't have permission to clone workpads"
      });
    },
    getNoPermissionToCreateToolTip: function getNoPermissionToCreateToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.noPermissionToCreateToolTip', {
        defaultMessage: "You don't have permission to create workpads"
      });
    },
    getNoPermissionToDeleteToolTip: function getNoPermissionToDeleteToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.noPermissionToDeleteToolTip', {
        defaultMessage: "You don't have permission to delete workpads"
      });
    },
    getNoPermissionToUploadToolTip: function getNoPermissionToUploadToolTip() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.noPermissionToUploadToolTip', {
        defaultMessage: "You don't have permission to upload workpads"
      });
    },
    getSampleDataLinkLabel: function getSampleDataLinkLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.sampleDataLinkLabel', {
        defaultMessage: 'Add your first workpad'
      });
    },
    getTableCreatedColumnTitle: function getTableCreatedColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.table.createdColumnTitle', {
        defaultMessage: 'Created',
        description: 'This column in the table contains the date/time the workpad was created.'
      });
    },
    getTableNameColumnTitle: function getTableNameColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.table.nameColumnTitle', {
        defaultMessage: 'Workpad name'
      });
    },
    getTableUpdatedColumnTitle: function getTableUpdatedColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadLoader.table.updatedColumnTitle', {
        defaultMessage: 'Updated',
        description: 'This column in the table contains the date/time the workpad was last updated.'
      });
    }
  },
  WorkpadManager: {
    getModalTitle: function getModalTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadManager.modalTitle', {
        defaultMessage: '{CANVAS} workpads',
        values: {
          CANVAS: _constants.CANVAS
        }
      });
    },
    getMyWorkpadsTabLabel: function getMyWorkpadsTabLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadManager.myWorkpadsTabLabel', {
        defaultMessage: 'My workpads'
      });
    },
    getWorkpadTemplatesTabLabel: function getWorkpadTemplatesTabLabel() {
      return _i18n.i18n.translate('xpack.canvas.workpadManager.workpadTemplatesTabLabel', {
        defaultMessage: 'Templates',
        description: 'The label for the tab that displays a list of designed workpad templates.'
      });
    }
  },
  WorkpadSearch: {
    getWorkpadSearchPlaceholder: function getWorkpadSearchPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.workpadSearch.searchPlaceholder', {
        defaultMessage: 'Find workpad'
      });
    }
  },
  WorkpadTemplates: {
    getCloneTemplateLinkAriaLabel: function getCloneTemplateLinkAriaLabel(templateName) {
      return _i18n.i18n.translate('xpack.canvas.workpadTemplate.cloneTemplateLinkAriaLabel', {
        defaultMessage: "Clone workpad template '{templateName}'",
        values: {
          templateName: templateName
        }
      });
    },
    getTableDescriptionColumnTitle: function getTableDescriptionColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadTemplates.table.descriptionColumnTitle', {
        defaultMessage: 'Description'
      });
    },
    getTableNameColumnTitle: function getTableNameColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadTemplates.table.nameColumnTitle', {
        defaultMessage: 'Template name'
      });
    },
    getTableTagsColumnTitle: function getTableTagsColumnTitle() {
      return _i18n.i18n.translate('xpack.canvas.workpadTemplates.table.tagsColumnTitle', {
        defaultMessage: 'Tags',
        description: 'This column contains relevant tags that indicate what type of template ' + 'is displayed. For example: "report", "presentation", etc.'
      });
    },
    getTemplateSearchPlaceholder: function getTemplateSearchPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.workpadTemplate.searchPlaceholder', {
        defaultMessage: 'Find template'
      });
    }
  }
};
exports.ComponentStrings = ComponentStrings;"},null]}