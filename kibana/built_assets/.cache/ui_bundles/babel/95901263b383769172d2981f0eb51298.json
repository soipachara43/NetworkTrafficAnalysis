{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/hosts/details/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/hosts/details/index.js","mtime":1589249553328},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkhvc3REZXRhaWxzID0gZXhwb3J0cy5tYWtlTWFwU3RhdGVUb1Byb3BzID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX3JlYWN0U3RpY2t5ID0gcmVxdWlyZSgicmVhY3Qtc3RpY2t5Iik7Cgp2YXIgX2ZpbHRlcnNfZ2xvYmFsID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9maWx0ZXJzX2dsb2JhbCIpOwoKdmFyIF9oZWFkZXJfcGFnZSA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvaGVhZGVyX3BhZ2UiKTsKCnZhciBfbGFzdF9ldmVudF90aW1lID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9sYXN0X2V2ZW50X3RpbWUiKTsKCnZhciBfYW5vbWFseV90YWJsZV9wcm92aWRlciA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvbWwvYW5vbWFseS9hbm9tYWx5X3RhYmxlX3Byb3ZpZGVyIik7Cgp2YXIgX2hvc3RfdG9fY3JpdGVyaWEgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL21sL2NyaXRlcmlhL2hvc3RfdG9fY3JpdGVyaWEiKTsKCnZhciBfaGFzX21sX3VzZXJfcGVybWlzc2lvbnMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL21sL3Blcm1pc3Npb25zL2hhc19tbF91c2VyX3Blcm1pc3Npb25zIik7Cgp2YXIgX3VzZV9tbF9jYXBhYmlsaXRpZXMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL21sX3BvcG92ZXIvaG9va3MvdXNlX21sX2NhcGFiaWxpdGllcyIpOwoKdmFyIF9zY29yZV9pbnRlcnZhbF90b19kYXRldGltZSA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvbWwvc2NvcmUvc2NvcmVfaW50ZXJ2YWxfdG9fZGF0ZXRpbWUiKTsKCnZhciBfbmF2aWdhdGlvbiA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvbmF2aWdhdGlvbiIpOwoKdmFyIF9ob3N0cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvcGFnZS9ob3N0cyIpOwoKdmFyIF9ob3N0X292ZXJ2aWV3ID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9wYWdlL2hvc3RzL2hvc3Rfb3ZlcnZpZXciKTsKCnZhciBfbWFuYWdlX3F1ZXJ5ID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9wYWdlL21hbmFnZV9xdWVyeSIpOwoKdmFyIF9zZWFyY2hfYmFyID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9zZWFyY2hfYmFyIik7Cgp2YXIgX3dyYXBwZXJfcGFnZSA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvd3JhcHBlcl9wYWdlIik7Cgp2YXIgX292ZXJ2aWV3ID0gcmVxdWlyZSgiLi4vLi4vLi4vY29udGFpbmVycy9ob3N0cy9vdmVydmlldyIpOwoKdmFyIF9rcGlfaG9zdF9kZXRhaWxzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29udGFpbmVycy9rcGlfaG9zdF9kZXRhaWxzIik7Cgp2YXIgX3NvdXJjZSA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbnRhaW5lcnMvc291cmNlIik7Cgp2YXIgX3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vZ3JhcGhxbC90eXBlcyIpOwoKdmFyIF9raWJhbmEgPSByZXF1aXJlKCIuLi8uLi8uLi9saWIva2liYW5hIik7Cgp2YXIgX2tldXJ5ID0gcmVxdWlyZSgiLi4vLi4vLi4vbGliL2tldXJ5Iik7Cgp2YXIgX3N0b3JlID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RvcmUiKTsKCnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoIi4uLy4uLy4uL3N0b3JlL2hvc3RzL2FjdGlvbnMiKTsKCnZhciBfYWN0aW9uczIgPSByZXF1aXJlKCIuLi8uLi8uLi9zdG9yZS9pbnB1dHMvYWN0aW9ucyIpOwoKdmFyIF9zcHlfcm91dGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vdXRpbHMvcm91dGUvc3B5X3JvdXRlcyIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF9ob3N0c19lbXB0eV9wYWdlID0gcmVxdWlyZSgiLi4vaG9zdHNfZW1wdHlfcGFnZSIpOwoKdmFyIF9kZXRhaWxzX3RhYnMgPSByZXF1aXJlKCIuL2RldGFpbHNfdGFicyIpOwoKdmFyIF9uYXZfdGFicyA9IHJlcXVpcmUoIi4vbmF2X3RhYnMiKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCIuL3V0aWxzIik7Cgp2YXIgX2hlbHBlcnMgPSByZXF1aXJlKCIuL2hlbHBlcnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9Cgp2YXIgSG9zdE92ZXJ2aWV3TWFuYWdlID0gKDAsIF9tYW5hZ2VfcXVlcnkubWFuYWdlUXVlcnkpKF9ob3N0X292ZXJ2aWV3Lkhvc3RPdmVydmlldyk7CnZhciBLcGlIb3N0RGV0YWlsc01hbmFnZSA9ICgwLCBfbWFuYWdlX3F1ZXJ5Lm1hbmFnZVF1ZXJ5KShfaG9zdHMuS3BpSG9zdHNDb21wb25lbnQpOwoKdmFyIEhvc3REZXRhaWxzQ29tcG9uZW50ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhmdW5jdGlvbiAoX3JlZikgewogIHZhciBmaWx0ZXJzID0gX3JlZi5maWx0ZXJzLAogICAgICBmcm9tID0gX3JlZi5mcm9tLAogICAgICBpc0luaXRpYWxpemluZyA9IF9yZWYuaXNJbml0aWFsaXppbmcsCiAgICAgIHF1ZXJ5ID0gX3JlZi5xdWVyeSwKICAgICAgc2V0QWJzb2x1dGVSYW5nZURhdGVQaWNrZXIgPSBfcmVmLnNldEFic29sdXRlUmFuZ2VEYXRlUGlja2VyLAogICAgICBzZXRIb3N0RGV0YWlsc1RhYmxlc0FjdGl2ZVBhZ2VUb1plcm8gPSBfcmVmLnNldEhvc3REZXRhaWxzVGFibGVzQWN0aXZlUGFnZVRvWmVybywKICAgICAgc2V0UXVlcnkgPSBfcmVmLnNldFF1ZXJ5LAogICAgICB0byA9IF9yZWYudG8sCiAgICAgIGRldGFpbE5hbWUgPSBfcmVmLmRldGFpbE5hbWUsCiAgICAgIGRlbGV0ZVF1ZXJ5ID0gX3JlZi5kZWxldGVRdWVyeSwKICAgICAgaG9zdERldGFpbHNQYWdlUGF0aCA9IF9yZWYuaG9zdERldGFpbHNQYWdlUGF0aDsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgc2V0SG9zdERldGFpbHNUYWJsZXNBY3RpdmVQYWdlVG9aZXJvKCk7CiAgfSwgW3NldEhvc3REZXRhaWxzVGFibGVzQWN0aXZlUGFnZVRvWmVybywgZGV0YWlsTmFtZV0pOwogIHZhciBjYXBhYmlsaXRpZXMgPSAoMCwgX3VzZV9tbF9jYXBhYmlsaXRpZXMudXNlTWxDYXBhYmlsaXRpZXMpKCk7CiAgdmFyIGtpYmFuYSA9ICgwLCBfa2liYW5hLnVzZUtpYmFuYSkoKTsKICB2YXIgaG9zdERldGFpbHNQYWdlRmlsdGVycyA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICgwLCBfaGVscGVycy5nZXRIb3N0RGV0YWlsc1BhZ2VGaWx0ZXJzKShkZXRhaWxOYW1lKTsKICB9LCBbZGV0YWlsTmFtZV0pOwoKICB2YXIgZ2V0RmlsdGVycyA9IGZ1bmN0aW9uIGdldEZpbHRlcnMoKSB7CiAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShob3N0RGV0YWlsc1BhZ2VGaWx0ZXJzKSwgX3RvQ29uc3VtYWJsZUFycmF5KGZpbHRlcnMpKTsKICB9OwoKICB2YXIgbmFycm93RGF0ZVJhbmdlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKG1pbiwgbWF4KSB7CiAgICBzZXRBYnNvbHV0ZVJhbmdlRGF0ZVBpY2tlcih7CiAgICAgIGlkOiAnZ2xvYmFsJywKICAgICAgZnJvbTogbWluLAogICAgICB0bzogbWF4CiAgICB9KTsKICB9LCBbc2V0QWJzb2x1dGVSYW5nZURhdGVQaWNrZXJdKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc291cmNlLldpdGhTb3VyY2UsIHsKICAgIHNvdXJjZUlkOiAiZGVmYXVsdCIKICB9LCBmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciBpbmRpY2VzRXhpc3QgPSBfcmVmMi5pbmRpY2VzRXhpc3QsCiAgICAgICAgaW5kZXhQYXR0ZXJuID0gX3JlZjIuaW5kZXhQYXR0ZXJuOwogICAgdmFyIGZpbHRlclF1ZXJ5ID0gKDAsIF9rZXVyeS5jb252ZXJ0VG9CdWlsZEVzUXVlcnkpKHsKICAgICAgY29uZmlnOiBfcHVibGljLmVzUXVlcnkuZ2V0RXNRdWVyeUNvbmZpZyhraWJhbmEuc2VydmljZXMudWlTZXR0aW5ncyksCiAgICAgIGluZGV4UGF0dGVybjogaW5kZXhQYXR0ZXJuLAogICAgICBxdWVyaWVzOiBbcXVlcnldLAogICAgICBmaWx0ZXJzOiBnZXRGaWx0ZXJzKCkKICAgIH0pOwogICAgcmV0dXJuICgwLCBfc291cmNlLmluZGljZXNFeGlzdE9yRGF0YVRlbXBvcmFyaWx5VW5hdmFpbGFibGUpKGluZGljZXNFeGlzdCkgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFN0aWNreS5TdGlja3lDb250YWluZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpbHRlcnNfZ2xvYmFsLkZpbHRlcnNHbG9iYWwsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NlYXJjaF9iYXIuU2llbVNlYXJjaEJhciwgewogICAgICBpbmRleFBhdHRlcm46IGluZGV4UGF0dGVybiwKICAgICAgaWQ6ICJnbG9iYWwiCiAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3dyYXBwZXJfcGFnZS5XcmFwcGVyUGFnZSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaGVhZGVyX3BhZ2UuSGVhZGVyUGFnZSwgewogICAgICBib3JkZXI6IHRydWUsCiAgICAgIHN1YnRpdGxlOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYXN0X2V2ZW50X3RpbWUuTGFzdEV2ZW50VGltZSwgewogICAgICAgIGluZGV4S2V5OiBfdHlwZXMuTGFzdEV2ZW50SW5kZXhLZXkuaG9zdERldGFpbHMsCiAgICAgICAgaG9zdE5hbWU6IGRldGFpbE5hbWUKICAgICAgfSksCiAgICAgIHRpdGxlOiBkZXRhaWxOYW1lCiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfb3ZlcnZpZXcuSG9zdE92ZXJ2aWV3QnlOYW1lUXVlcnksIHsKICAgICAgc291cmNlSWQ6ICJkZWZhdWx0IiwKICAgICAgaG9zdE5hbWU6IGRldGFpbE5hbWUsCiAgICAgIHNraXA6IGlzSW5pdGlhbGl6aW5nLAogICAgICBzdGFydERhdGU6IGZyb20sCiAgICAgIGVuZERhdGU6IHRvCiAgICB9LCBmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgdmFyIGhvc3RPdmVydmlldyA9IF9yZWYzLmhvc3RPdmVydmlldywKICAgICAgICAgIGxvYWRpbmcgPSBfcmVmMy5sb2FkaW5nLAogICAgICAgICAgaWQgPSBfcmVmMy5pZCwKICAgICAgICAgIGluc3BlY3QgPSBfcmVmMy5pbnNwZWN0LAogICAgICAgICAgcmVmZXRjaCA9IF9yZWYzLnJlZmV0Y2g7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hbm9tYWx5X3RhYmxlX3Byb3ZpZGVyLkFub21hbHlUYWJsZVByb3ZpZGVyLCB7CiAgICAgICAgY3JpdGVyaWFGaWVsZHM6ICgwLCBfaG9zdF90b19jcml0ZXJpYS5ob3N0VG9Dcml0ZXJpYSkoaG9zdE92ZXJ2aWV3KSwKICAgICAgICBzdGFydERhdGU6IGZyb20sCiAgICAgICAgZW5kRGF0ZTogdG8sCiAgICAgICAgc2tpcDogaXNJbml0aWFsaXppbmcKICAgICAgfSwgZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgICAgdmFyIGlzTG9hZGluZ0Fub21hbGllc0RhdGEgPSBfcmVmNC5pc0xvYWRpbmdBbm9tYWxpZXNEYXRhLAogICAgICAgICAgICBhbm9tYWxpZXNEYXRhID0gX3JlZjQuYW5vbWFsaWVzRGF0YTsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChIb3N0T3ZlcnZpZXdNYW5hZ2UsIHsKICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgIGluc3BlY3Q6IGluc3BlY3QsCiAgICAgICAgICByZWZldGNoOiByZWZldGNoLAogICAgICAgICAgc2V0UXVlcnk6IHNldFF1ZXJ5LAogICAgICAgICAgZGF0YTogaG9zdE92ZXJ2aWV3LAogICAgICAgICAgYW5vbWFsaWVzRGF0YTogYW5vbWFsaWVzRGF0YSwKICAgICAgICAgIGlzTG9hZGluZ0Fub21hbGllc0RhdGE6IGlzTG9hZGluZ0Fub21hbGllc0RhdGEsCiAgICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLAogICAgICAgICAgc3RhcnREYXRlOiBmcm9tLAogICAgICAgICAgZW5kRGF0ZTogdG8sCiAgICAgICAgICBuYXJyb3dEYXRlUmFuZ2U6IGZ1bmN0aW9uIG5hcnJvd0RhdGVSYW5nZShzY29yZSwgaW50ZXJ2YWwpIHsKICAgICAgICAgICAgdmFyIGZyb21UbyA9ICgwLCBfc2NvcmVfaW50ZXJ2YWxfdG9fZGF0ZXRpbWUuc2NvcmVJbnRlcnZhbFRvRGF0ZVRpbWUpKHNjb3JlLCBpbnRlcnZhbCk7CiAgICAgICAgICAgIHNldEFic29sdXRlUmFuZ2VEYXRlUGlja2VyKHsKICAgICAgICAgICAgICBpZDogJ2dsb2JhbCcsCiAgICAgICAgICAgICAgZnJvbTogZnJvbVRvLmZyb20sCiAgICAgICAgICAgICAgdG86IGZyb21Uby50bwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUhvcml6b250YWxSdWxlLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfa3BpX2hvc3RfZGV0YWlscy5LcGlIb3N0RGV0YWlsc1F1ZXJ5LCB7CiAgICAgIHNvdXJjZUlkOiAiZGVmYXVsdCIsCiAgICAgIGZpbHRlclF1ZXJ5OiBmaWx0ZXJRdWVyeSwKICAgICAgc2tpcDogaXNJbml0aWFsaXppbmcsCiAgICAgIHN0YXJ0RGF0ZTogZnJvbSwKICAgICAgZW5kRGF0ZTogdG8KICAgIH0sIGZ1bmN0aW9uIChfcmVmNSkgewogICAgICB2YXIga3BpSG9zdERldGFpbHMgPSBfcmVmNS5rcGlIb3N0RGV0YWlscywKICAgICAgICAgIGlkID0gX3JlZjUuaWQsCiAgICAgICAgICBpbnNwZWN0ID0gX3JlZjUuaW5zcGVjdCwKICAgICAgICAgIGxvYWRpbmcgPSBfcmVmNS5sb2FkaW5nLAogICAgICAgICAgcmVmZXRjaCA9IF9yZWY1LnJlZmV0Y2g7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEtwaUhvc3REZXRhaWxzTWFuYWdlLCB7CiAgICAgICAgZGF0YToga3BpSG9zdERldGFpbHMsCiAgICAgICAgZnJvbTogZnJvbSwKICAgICAgICBpZDogaWQsCiAgICAgICAgaW5zcGVjdDogaW5zcGVjdCwKICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLAogICAgICAgIHJlZmV0Y2g6IHJlZmV0Y2gsCiAgICAgICAgc2V0UXVlcnk6IHNldFF1ZXJ5LAogICAgICAgIHRvOiB0bywKICAgICAgICBuYXJyb3dEYXRlUmFuZ2U6IG5hcnJvd0RhdGVSYW5nZQogICAgICB9KTsKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbmF2aWdhdGlvbi5TaWVtTmF2aWdhdGlvbiwgewogICAgICBuYXZUYWJzOiAoMCwgX25hdl90YWJzLm5hdlRhYnNIb3N0RGV0YWlscykoZGV0YWlsTmFtZSwgKDAsIF9oYXNfbWxfdXNlcl9wZXJtaXNzaW9ucy5oYXNNbFVzZXJQZXJtaXNzaW9ucykoY2FwYWJpbGl0aWVzKSkKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZGV0YWlsc190YWJzLkhvc3REZXRhaWxzVGFicywgewogICAgICBpc0luaXRpYWxpemluZzogaXNJbml0aWFsaXppbmcsCiAgICAgIGRlbGV0ZVF1ZXJ5OiBkZWxldGVRdWVyeSwKICAgICAgcGFnZUZpbHRlcnM6IGhvc3REZXRhaWxzUGFnZUZpbHRlcnMsCiAgICAgIHRvOiB0bywKICAgICAgZnJvbTogZnJvbSwKICAgICAgZGV0YWlsTmFtZTogZGV0YWlsTmFtZSwKICAgICAgdHlwZTogX3V0aWxzLnR5cGUsCiAgICAgIHNldFF1ZXJ5OiBzZXRRdWVyeSwKICAgICAgZmlsdGVyUXVlcnk6IGZpbHRlclF1ZXJ5LAogICAgICBob3N0RGV0YWlsc1BhZ2VQYXRoOiBob3N0RGV0YWlsc1BhZ2VQYXRoLAogICAgICBpbmRleFBhdHRlcm46IGluZGV4UGF0dGVybiwKICAgICAgc2V0QWJzb2x1dGVSYW5nZURhdGVQaWNrZXI6IHNldEFic29sdXRlUmFuZ2VEYXRlUGlja2VyCiAgICB9KSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfd3JhcHBlcl9wYWdlLldyYXBwZXJQYWdlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9oZWFkZXJfcGFnZS5IZWFkZXJQYWdlLCB7CiAgICAgIGJvcmRlcjogdHJ1ZSwKICAgICAgdGl0bGU6IGRldGFpbE5hbWUKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ob3N0c19lbXB0eV9wYWdlLkhvc3RzRW1wdHlQYWdlLCBudWxsKSk7CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NweV9yb3V0ZXMuU3B5Um91dGUsIG51bGwpKTsKfSk7CgpIb3N0RGV0YWlsc0NvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdIb3N0RGV0YWlsc0NvbXBvbmVudCc7Cgp2YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7CiAgdmFyIGdldEdsb2JhbFF1ZXJ5U2VsZWN0b3IgPSBfc3RvcmUuaW5wdXRzU2VsZWN0b3JzLmdsb2JhbFF1ZXJ5U2VsZWN0b3IoKTsKCiAgdmFyIGdldEdsb2JhbEZpbHRlcnNRdWVyeVNlbGVjdG9yID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nbG9iYWxGaWx0ZXJzUXVlcnlTZWxlY3RvcigpOwoKICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gewogICAgICBxdWVyeTogZ2V0R2xvYmFsUXVlcnlTZWxlY3RvcihzdGF0ZSksCiAgICAgIGZpbHRlcnM6IGdldEdsb2JhbEZpbHRlcnNRdWVyeVNlbGVjdG9yKHN0YXRlKQogICAgfTsKICB9Owp9OwoKZXhwb3J0cy5tYWtlTWFwU3RhdGVUb1Byb3BzID0gbWFrZU1hcFN0YXRlVG9Qcm9wczsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IHsKICBzZXRBYnNvbHV0ZVJhbmdlRGF0ZVBpY2tlcjogX2FjdGlvbnMyLnNldEFic29sdXRlUmFuZ2VEYXRlUGlja2VyLAogIHNldEhvc3REZXRhaWxzVGFibGVzQWN0aXZlUGFnZVRvWmVybzogX2FjdGlvbnMuc2V0SG9zdERldGFpbHNUYWJsZXNBY3RpdmVQYWdlVG9aZXJvCn07CnZhciBjb25uZWN0b3IgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFrZU1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKTsKdmFyIEhvc3REZXRhaWxzID0gY29ubmVjdG9yKEhvc3REZXRhaWxzQ29tcG9uZW50KTsKZXhwb3J0cy5Ib3N0RGV0YWlscyA9IEhvc3REZXRhaWxzOw=="},null]}