{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/components/page_manager/page_manager.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/components/page_manager/page_manager.js","mtime":1589249551983},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBhZ2VNYW5hZ2VyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdEJlYXV0aWZ1bERuZCA9IHJlcXVpcmUoInJlYWN0LWJlYXV0aWZ1bC1kbmQiKTsKCnZhciBfc3R5bGVJdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgic3R5bGUtaXQiKSk7Cgp2YXIgX2NvbmZpcm1fbW9kYWwgPSByZXF1aXJlKCIuLi9jb25maXJtX21vZGFsIik7Cgp2YXIgX2xpbmsgPSByZXF1aXJlKCIuLi9saW5rIik7Cgp2YXIgX3BhZ2VfcHJldmlldyA9IHJlcXVpcmUoIi4uL3BhZ2VfcHJldmlldyIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiLi4vLi4vLi4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIHN0cmluZ3MgPSBfaTE4bi5Db21wb25lbnRTdHJpbmdzLlBhZ2VNYW5hZ2VyOwoKdmFyIFBhZ2VNYW5hZ2VyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoUGFnZU1hbmFnZXIsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gUGFnZU1hbmFnZXIoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VNYW5hZ2VyKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFBhZ2VNYW5hZ2VyKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIHNob3dUcmF5UG9wOiB0cnVlCiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzY3JvbGxUb0FjdGl2ZVBhZ2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5hY3RpdmVQYWdlUmVmICYmIF90aGlzLnBhZ2VMaXN0UmVmKSB7CiAgICAgICAgLy8gbm90IGFsbCB0YXJnZXQgYnJvd3NlcnMgc3VwcG9ydCBlbGVtZW50LnNjcm9sbFRvCiAgICAgICAgLy8gVE9ETzogcmVwbGFjZSB0aGlzIHdpdGggc29tZXRoaW5nIG1vcmUgY3Jvc3MtYnJvd3NlciwgbWF5YmUgc2Nyb2xsSW50b1ZpZXcKICAgICAgICBpZiAoIV90aGlzLnBhZ2VMaXN0UmVmLnNjcm9sbFRvKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFnZU9mZnNldCA9IF90aGlzLmFjdGl2ZVBhZ2VSZWYub2Zmc2V0TGVmdDsKCiAgICAgICAgdmFyIF90aGlzJGFjdGl2ZVBhZ2VSZWYkZyA9IF90aGlzLmFjdGl2ZVBhZ2VSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCiAgICAgICAgICAgIHBhZ2VMZWZ0ID0gX3RoaXMkYWN0aXZlUGFnZVJlZiRnLmxlZnQsCiAgICAgICAgICAgIHBhZ2VSaWdodCA9IF90aGlzJGFjdGl2ZVBhZ2VSZWYkZy5yaWdodCwKICAgICAgICAgICAgcGFnZVdpZHRoID0gX3RoaXMkYWN0aXZlUGFnZVJlZiRnLndpZHRoOwoKICAgICAgICB2YXIgX3RoaXMkcGFnZUxpc3RSZWYkZ2V0ID0gX3RoaXMucGFnZUxpc3RSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCiAgICAgICAgICAgIGxpc3RMZWZ0ID0gX3RoaXMkcGFnZUxpc3RSZWYkZ2V0LmxlZnQsCiAgICAgICAgICAgIGxpc3RSaWdodCA9IF90aGlzJHBhZ2VMaXN0UmVmJGdldC5yaWdodCwKICAgICAgICAgICAgbGlzdFdpZHRoID0gX3RoaXMkcGFnZUxpc3RSZWYkZ2V0LndpZHRoOwoKICAgICAgICBpZiAocGFnZUxlZnQgPCBsaXN0TGVmdCkgewogICAgICAgICAgX3RoaXMucGFnZUxpc3RSZWYuc2Nyb2xsVG8oewogICAgICAgICAgICBsZWZ0OiBwYWdlT2Zmc2V0LAogICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhZ2VSaWdodCA+IGxpc3RSaWdodCkgewogICAgICAgICAgX3RoaXMucGFnZUxpc3RSZWYuc2Nyb2xsVG8oewogICAgICAgICAgICBsZWZ0OiBwYWdlT2Zmc2V0IC0gbGlzdFdpZHRoICsgcGFnZVdpZHRoLAogICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY29uZmlybURlbGV0ZSIsIGZ1bmN0aW9uIChwYWdlSWQpIHsKICAgICAgX3RoaXMuX2lzTW91bnRlZCAmJiBfdGhpcy5wcm9wcy5zZXREZWxldGVJZChwYWdlSWQpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVzZXREZWxldGUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5faXNNb3VudGVkICYmIF90aGlzLnByb3BzLnNldERlbGV0ZUlkKG51bGwpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZG9EZWxldGUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLAogICAgICAgICAgcHJldmlvdXNQYWdlID0gX3RoaXMkcHJvcHMucHJldmlvdXNQYWdlLAogICAgICAgICAgcmVtb3ZlUGFnZSA9IF90aGlzJHByb3BzLnJlbW92ZVBhZ2UsCiAgICAgICAgICBkZWxldGVJZCA9IF90aGlzJHByb3BzLmRlbGV0ZUlkLAogICAgICAgICAgc2VsZWN0ZWRQYWdlID0gX3RoaXMkcHJvcHMuc2VsZWN0ZWRQYWdlOwoKICAgICAgX3RoaXMucmVzZXREZWxldGUoKTsKCiAgICAgIGlmIChkZWxldGVJZCA9PT0gc2VsZWN0ZWRQYWdlKSB7CiAgICAgICAgcHJldmlvdXNQYWdlKCk7CiAgICAgIH0KCiAgICAgIHJlbW92ZVBhZ2UoZGVsZXRlSWQpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25EcmFnRW5kIiwgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIHBhZ2VJZCA9IF9yZWYuZHJhZ2dhYmxlSWQsCiAgICAgICAgICBzb3VyY2UgPSBfcmVmLnNvdXJjZSwKICAgICAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbjsKCiAgICAgIC8vIGRyb3BwZWQgb3V0c2lkZSB0aGUgbGlzdAogICAgICBpZiAoIWRlc3RpbmF0aW9uKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcG9zaXRpb24gPSBkZXN0aW5hdGlvbi5pbmRleCAtIHNvdXJjZS5pbmRleDsKCiAgICAgIF90aGlzLnByb3BzLm1vdmVQYWdlKHBhZ2VJZCwgcG9zaXRpb24pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyUGFnZSIsIGZ1bmN0aW9uIChwYWdlLCBpKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcywKICAgICAgICAgIGlzV3JpdGVhYmxlID0gX3RoaXMkcHJvcHMyLmlzV3JpdGVhYmxlLAogICAgICAgICAgc2VsZWN0ZWRQYWdlID0gX3RoaXMkcHJvcHMyLnNlbGVjdGVkUGFnZSwKICAgICAgICAgIHdvcmtwYWRJZCA9IF90aGlzJHByb3BzMi53b3JrcGFkSWQsCiAgICAgICAgICBtb3ZlUGFnZSA9IF90aGlzJHByb3BzMi5tb3ZlUGFnZSwKICAgICAgICAgIGR1cGxpY2F0ZVBhZ2UgPSBfdGhpcyRwcm9wczIuZHVwbGljYXRlUGFnZSwKICAgICAgICAgIHdvcmtwYWRDU1MgPSBfdGhpcyRwcm9wczIud29ya3BhZENTUzsKICAgICAgdmFyIHBhZ2VOdW1iZXIgPSBpICsgMTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0QmVhdXRpZnVsRG5kLkRyYWdnYWJsZSwgewogICAgICAgIGtleTogcGFnZS5pZCwKICAgICAgICBkcmFnZ2FibGVJZDogcGFnZS5pZCwKICAgICAgICBpbmRleDogaSwKICAgICAgICBpc0RyYWdEaXNhYmxlZDogIWlzV3JpdGVhYmxlCiAgICAgIH0sIGZ1bmN0aW9uIChwcm92aWRlZCkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBfZXh0ZW5kcyh7CiAgICAgICAgICBrZXk6IHBhZ2UuaWQsCiAgICAgICAgICBjbGFzc05hbWU6ICJjYW52YXNQYWdlTWFuYWdlcl9fcGFnZSAiLmNvbmNhdChwYWdlLmlkID09PSBzZWxlY3RlZFBhZ2UgPyAnY2FudmFzUGFnZU1hbmFnZXJfX3BhZ2UtaXNBY3RpdmUnIDogJycpLAogICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWwpIHsKICAgICAgICAgICAgaWYgKHBhZ2UuaWQgPT09IHNlbGVjdGVkUGFnZSkgewogICAgICAgICAgICAgIF90aGlzLmFjdGl2ZVBhZ2VSZWYgPSBlbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcHJvdmlkZWQuaW5uZXJSZWYoZWwpOwogICAgICAgICAgfQogICAgICAgIH0sIHByb3ZpZGVkLmRyYWdnYWJsZVByb3BzLCBwcm92aWRlZC5kcmFnSGFuZGxlUHJvcHMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICBndXR0ZXJTaXplOiAicyIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICAgIHNpemU6ICJ4cyIsCiAgICAgICAgICBjbGFzc05hbWU6ICJjYW52YXNQYWdlTWFuYWdlcl9fcGFnZU51bWJlciIKICAgICAgICB9LCBwYWdlTnVtYmVyKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9saW5rLkxpbmssIHsKICAgICAgICAgIG5hbWU6ICJsb2FkV29ya3BhZCIsCiAgICAgICAgICBwYXJhbXM6IHsKICAgICAgICAgICAgaWQ6IHdvcmtwYWRJZCwKICAgICAgICAgICAgcGFnZTogcGFnZU51bWJlcgogICAgICAgICAgfSwKICAgICAgICAgICJhcmlhLWxhYmVsIjogc3RyaW5ncy5nZXRQYWdlTnVtYmVyQXJpYUxhYmVsKHBhZ2VOdW1iZXIpCiAgICAgICAgfSwgX3N0eWxlSXQuZGVmYXVsdC5pdCh3b3JrcGFkQ1NTLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wYWdlX3ByZXZpZXcuUGFnZVByZXZpZXcsIHsKICAgICAgICAgIGlzV3JpdGVhYmxlOiBpc1dyaXRlYWJsZSwKICAgICAgICAgIHBhZ2U6IHBhZ2UsCiAgICAgICAgICBoZWlnaHQ6IDEwMCwKICAgICAgICAgIHBhZ2VOdW1iZXI6IHBhZ2VOdW1iZXIsCiAgICAgICAgICBtb3ZlUGFnZTogbW92ZVBhZ2UsCiAgICAgICAgICBzZWxlY3RlZFBhZ2U6IHNlbGVjdGVkUGFnZSwKICAgICAgICAgIGR1cGxpY2F0ZVBhZ2U6IGR1cGxpY2F0ZVBhZ2UsCiAgICAgICAgICBjb25maXJtRGVsZXRlOiBfdGhpcy5jb25maXJtRGVsZXRlCiAgICAgICAgfSkpKSkpKSk7CiAgICAgIH0pOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBhZ2VNYW5hZ2VyLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIC8vIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLCB0byBwcmV2ZW50IHJvZ3VlIHNldFN0YXRlIGNhbGxzCiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7IC8vIGdpdmVzIHRoZSB0cmF5IHBvcCBhbmltYXRpb24gdGltZSB0byBmaW5pc2gKCiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5zY3JvbGxUb0FjdGl2ZVBhZ2UoKTsKCiAgICAgICAgX3RoaXMyLl9pc01vdW50ZWQgJiYgX3RoaXMyLnNldFN0YXRlKHsKICAgICAgICAgIHNob3dUcmF5UG9wOiBmYWxzZQogICAgICAgIH0pOwogICAgICB9LCAxMDAwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnREaWRVcGRhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHsKICAgICAgLy8gc2Nyb2xscyB0byB0aGUgYWN0aXZlIHBhZ2Ugb24gdGhlIG5leHQgdGljaywgb3RoZXJ3aXNlIG5ldyBwYWdlcyBkb24ndCBzY3JvbGwgY29tcGxldGVseSBpbnRvIHZpZXcKICAgICAgaWYgKHByZXZQcm9wcy5zZWxlY3RlZFBhZ2UgIT09IHRoaXMucHJvcHMuc2VsZWN0ZWRQYWdlKSB7CiAgICAgICAgc2V0VGltZW91dCh0aGlzLnNjcm9sbFRvQWN0aXZlUGFnZSwgMCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnRXaWxsVW5tb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLAogICAgICAgICAgcGFnZXMgPSBfdGhpcyRwcm9wczMucGFnZXMsCiAgICAgICAgICBhZGRQYWdlID0gX3RoaXMkcHJvcHMzLmFkZFBhZ2UsCiAgICAgICAgICBkZWxldGVJZCA9IF90aGlzJHByb3BzMy5kZWxldGVJZCwKICAgICAgICAgIGlzV3JpdGVhYmxlID0gX3RoaXMkcHJvcHMzLmlzV3JpdGVhYmxlOwogICAgICB2YXIgc2hvd1RyYXlQb3AgPSB0aGlzLnN0YXRlLnNob3dUcmF5UG9wOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBndXR0ZXJTaXplOiAibm9uZSIsCiAgICAgICAgY2xhc3NOYW1lOiAiY2FudmFzUGFnZU1hbmFnZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGNsYXNzTmFtZTogImNhbnZhc1BhZ2VNYW5hZ2VyX19wYWdlcyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RCZWF1dGlmdWxEbmQuRHJhZ0Ryb3BDb250ZXh0LCB7CiAgICAgICAgb25EcmFnRW5kOiB0aGlzLm9uRHJhZ0VuZAogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEJlYXV0aWZ1bERuZC5Ecm9wcGFibGUsIHsKICAgICAgICBkcm9wcGFibGVJZDogImRyb3BwYWJsZS1wYWdlLW1hbmFnZXIiLAogICAgICAgIGRpcmVjdGlvbjogImhvcml6b250YWwiCiAgICAgIH0sIGZ1bmN0aW9uIChwcm92aWRlZCkgewogICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBfZXh0ZW5kcyh7CiAgICAgICAgICBjbGFzc05hbWU6ICJjYW52YXNQYWdlTWFuYWdlcl9fcGFnZUxpc3QgIi5jb25jYXQoc2hvd1RyYXlQb3AgPyAnY2FudmFzUGFnZU1hbmFnZXItLXRyYXlQb3AnIDogJycpLAogICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWwpIHsKICAgICAgICAgICAgX3RoaXMzLnBhZ2VMaXN0UmVmID0gZWw7CiAgICAgICAgICAgIHByb3ZpZGVkLmlubmVyUmVmKGVsKTsKICAgICAgICAgIH0KICAgICAgICB9LCBwcm92aWRlZC5kcm9wcGFibGVQcm9wcyksIHBhZ2VzLm1hcChfdGhpczMucmVuZGVyUGFnZSksIHByb3ZpZGVkLnBsYWNlaG9sZGVyKTsKICAgICAgfSkpKSwgaXNXcml0ZWFibGUgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBhbmNob3JDbGFzc05hbWU6ICJjYW52YXNQYWdlTWFuYWdlcl9fYWRkUGFnZVRpcCIsCiAgICAgICAgY29udGVudDogIkFkZCBhIG5ldyBwYWdlIHRvIHRoaXMgd29ya3BhZCIsCiAgICAgICAgcG9zaXRpb246ICJsZWZ0IgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7CiAgICAgICAgb25DbGljazogYWRkUGFnZSwKICAgICAgICBjbGFzc05hbWU6ICJjYW52YXNQYWdlTWFuYWdlcl9fYWRkUGFnZSIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgICAgICBjb2xvcjogImdob3N0IiwKICAgICAgICB0eXBlOiAicGx1c0luQ2lyY2xlIiwKICAgICAgICBzaXplOiAibCIKICAgICAgfSkpKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb25maXJtX21vZGFsLkNvbmZpcm1Nb2RhbCwgewogICAgICAgIGlzT3BlbjogZGVsZXRlSWQgIT0gbnVsbCwKICAgICAgICB0aXRsZTogIlJlbW92ZSBQYWdlIiwKICAgICAgICBtZXNzYWdlOiAiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIHBhZ2U/IiwKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIlJlbW92ZSIsCiAgICAgICAgb25Db25maXJtOiB0aGlzLmRvRGVsZXRlLAogICAgICAgIG9uQ2FuY2VsOiB0aGlzLnJlc2V0RGVsZXRlCiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQYWdlTWFuYWdlcjsKfShfcmVhY3QuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTsKCmV4cG9ydHMuUGFnZU1hbmFnZXIgPSBQYWdlTWFuYWdlcjsKCl9kZWZpbmVQcm9wZXJ0eShQYWdlTWFuYWdlciwgInByb3BUeXBlcyIsIHsKICBpc1dyaXRlYWJsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCwKICBwYWdlczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LmlzUmVxdWlyZWQsCiAgd29ya3BhZElkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsCiAgYWRkUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBtb3ZlUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBwcmV2aW91c1BhZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgZHVwbGljYXRlUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICByZW1vdmVQYWdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIHNlbGVjdGVkUGFnZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBkZWxldGVJZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBzZXREZWxldGVJZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICB3b3JrcGFkQ1NTOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nCn0pOw=="},null]}