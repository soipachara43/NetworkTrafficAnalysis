{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/charts/areachart.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/charts/areachart.js","mtime":1589249552900},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFyZWFDaGFydCA9IGV4cG9ydHMuQXJlYUNoYXJ0Q29tcG9uZW50ID0gZXhwb3J0cy5BcmVhQ2hhcnRCYXNlID0gZXhwb3J0cy5BcmVhQ2hhcnRCYXNlQ29tcG9uZW50ID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2NoYXJ0cyA9IHJlcXVpcmUoIkBlbGFzdGljL2NoYXJ0cyIpOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoIi4uL3V0aWxzIik7Cgp2YXIgX2NoYXJ0X3BsYWNlX2hvbGRlciA9IHJlcXVpcmUoIi4vY2hhcnRfcGxhY2VfaG9sZGVyIik7Cgp2YXIgX2tpYmFuYSA9IHJlcXVpcmUoIi4uLy4uL2xpYi9raWJhbmEiKTsKCnZhciBfY29tbW9uID0gcmVxdWlyZSgiLi9jb21tb24iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwoKICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7CgogIHZhciBrZXksIGk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgewogICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOwogICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOwogICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgewogIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OwogIHZhciB0YXJnZXQgPSB7fTsKICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7CiAgdmFyIGtleSwgaTsKCiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsKICAgIGtleSA9IHNvdXJjZUtleXNbaV07CiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOwogICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICB9CgogIHJldHVybiB0YXJnZXQ7Cn0gLy8gY3VzdG9tIHNlcmllcyBzdHlsZXM6IGh0dHBzOi8vZWxhLnN0L2FyZWFjaGFydC1zdHlsaW5nCgoKdmFyIGdldFNlcmllc0xpbmVTdHlsZSA9IGZ1bmN0aW9uIGdldFNlcmllc0xpbmVTdHlsZSgpIHsKICByZXR1cm4gewogICAgYXJlYTogewogICAgICBvcGFjaXR5OiAwLjA0LAogICAgICB2aXNpYmxlOiB0cnVlCiAgICB9LAogICAgbGluZTogewogICAgICBzdHJva2VXaWR0aDogMSwKICAgICAgdmlzaWJsZTogdHJ1ZQogICAgfSwKICAgIHBvaW50OiB7CiAgICAgIHZpc2libGU6IGZhbHNlLAogICAgICByYWRpdXM6IDAuMiwKICAgICAgc3Ryb2tlV2lkdGg6IDEsCiAgICAgIG9wYWNpdHk6IDEKICAgIH0KICB9Owp9OwoKdmFyIGNoZWNrSWZBbGxUaGVEYXRhSW5UaGVTZXJpZXNBcmVWYWxpZCA9IGZ1bmN0aW9uIGNoZWNrSWZBbGxUaGVEYXRhSW5UaGVTZXJpZXNBcmVWYWxpZChzZXJpZXMpIHsKICByZXR1cm4gISEoMCwgX2ZwLmdldCkoJ3ZhbHVlLmxlbmd0aCcsIHNlcmllcykgJiYgKDAsIF9mcC5nZXQpKCd2YWx1ZScsIHNlcmllcykuZXZlcnkoZnVuY3Rpb24gKF9yZWYpIHsKICAgIHZhciB4ID0gX3JlZi54LAogICAgICAgIHkgPSBfcmVmLnk7CiAgICByZXR1cm4gISgwLCBfZnAuaXNOdWxsKSh4KSAmJiAoMCwgX2ZwLmlzTnVtYmVyKSh5KSAmJiB5ID4gMDsKICB9KTsKfTsKCnZhciBjaGVja0lmQW55VmFsaWRTZXJpZXNFeGlzdCA9IGZ1bmN0aW9uIGNoZWNrSWZBbnlWYWxpZFNlcmllc0V4aXN0KGRhdGEpIHsKICByZXR1cm4gQXJyYXkuaXNBcnJheShkYXRhKSAmJiBkYXRhLnNvbWUoY2hlY2tJZkFsbFRoZURhdGFJblRoZVNlcmllc0FyZVZhbGlkKTsKfTsgLy8gaHR0cHM6Ly9lbGEuc3QvbXVsdGktYXJlYXNlcmllcwoKCnZhciBBcmVhQ2hhcnRCYXNlQ29tcG9uZW50ID0gZnVuY3Rpb24gQXJlYUNoYXJ0QmFzZUNvbXBvbmVudChfcmVmMikgewogIHZhciBkYXRhID0gX3JlZjIuZGF0YSwKICAgICAgY2hhcnRDb25maWdzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbImRhdGEiXSk7CgogIHZhciB0aGVtZSA9ICgwLCBfY29tbW9uLnVzZVRoZW1lKSgpOwogIHZhciB0aW1lWm9uZSA9ICgwLCBfa2liYW5hLnVzZVRpbWVab25lKSgpOwogIHZhciB4VGlja0Zvcm1hdHRlciA9ICgwLCBfZnAuZ2V0KSgnY29uZmlncy5heGlzLnhUaWNrRm9ybWF0dGVyJywgY2hhcnRDb25maWdzKTsKICB2YXIgeVRpY2tGb3JtYXR0ZXIgPSAoMCwgX2ZwLmdldCkoJ2NvbmZpZ3MuYXhpcy55VGlja0Zvcm1hdHRlcicsIGNoYXJ0Q29uZmlncyk7CiAgdmFyIHhBeGlzSWQgPSAiZ3JvdXAtIi5jb25jYXQoZGF0YVswXS5rZXksICIteCIpOwogIHZhciB5QXhpc0lkID0gImdyb3VwLSIuY29uY2F0KGRhdGFbMF0ua2V5LCAiLXkiKTsKCiAgdmFyIHNldHRpbmdzID0gX29iamVjdFNwcmVhZCh7fSwgX2NvbW1vbi5jaGFydERlZmF1bHRTZXR0aW5ncywgewogICAgdGhlbWU6IHRoZW1lCiAgfSwgKDAsIF9mcC5nZXQpKCdjb25maWdzLnNldHRpbmdzJywgY2hhcnRDb25maWdzKSk7CgogIHJldHVybiBjaGFydENvbmZpZ3Mud2lkdGggJiYgY2hhcnRDb25maWdzLmhlaWdodCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgIHN0eWxlOiB7CiAgICAgIGhlaWdodDogY2hhcnRDb25maWdzLmhlaWdodCwKICAgICAgd2lkdGg6IGNoYXJ0Q29uZmlncy53aWR0aCwKICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScKICAgIH0KICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaGFydHMuQ2hhcnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5TZXR0aW5ncywgc2V0dGluZ3MpLCBkYXRhLm1hcChmdW5jdGlvbiAoc2VyaWVzKSB7CiAgICB2YXIgc2VyaWVzS2V5ID0gc2VyaWVzLmtleTsKICAgIHJldHVybiBjaGVja0lmQWxsVGhlRGF0YUluVGhlU2VyaWVzQXJlVmFsaWQoc2VyaWVzKSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5BcmVhU2VyaWVzLCB7CiAgICAgIGlkOiBzZXJpZXNLZXksCiAgICAgIGtleTogc2VyaWVzS2V5LAogICAgICBuYW1lOiBzZXJpZXMua2V5LnJlcGxhY2UoJ0hpc3RvZ3JhbScsICcnKSwKICAgICAgZGF0YTogc2VyaWVzLnZhbHVlIHx8IFtdLAogICAgICB4U2NhbGVUeXBlOiAoMCwgX2ZwLmdldE9yKShfY2hhcnRzLlNjYWxlVHlwZS5MaW5lYXIsICdjb25maWdzLnNlcmllcy54U2NhbGVUeXBlJywgY2hhcnRDb25maWdzKSwKICAgICAgeVNjYWxlVHlwZTogKDAsIF9mcC5nZXRPcikoX2NoYXJ0cy5TY2FsZVR5cGUuTGluZWFyLCAnY29uZmlncy5zZXJpZXMueVNjYWxlVHlwZScsIGNoYXJ0Q29uZmlncyksCiAgICAgIHRpbWVab25lOiB0aW1lWm9uZSwKICAgICAgeEFjY2Vzc29yOiAieCIsCiAgICAgIHlBY2Nlc3NvcnM6IFsneSddLAogICAgICBhcmVhU2VyaWVzU3R5bGU6IGdldFNlcmllc0xpbmVTdHlsZSgpLAogICAgICBjb2xvcjogc2VyaWVzLmNvbG9yID8gc2VyaWVzLmNvbG9yIDogdW5kZWZpbmVkCiAgICB9KSA6IG51bGw7CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NoYXJ0cy5BeGlzLCB7CiAgICBpZDogeEF4aXNJZCwKICAgIHBvc2l0aW9uOiBfY2hhcnRzLlBvc2l0aW9uLkJvdHRvbSwKICAgIHNob3dPdmVybGFwcGluZ1RpY2tzOiBmYWxzZSwKICAgIHRpY2tGb3JtYXQ6IHhUaWNrRm9ybWF0dGVyLAogICAgdGlja1NpemU6IDAKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRzLkF4aXMsIHsKICAgIGlkOiB5QXhpc0lkLAogICAgcG9zaXRpb246IF9jaGFydHMuUG9zaXRpb24uTGVmdCwKICAgIHRpY2tTaXplOiAwLAogICAgdGlja0Zvcm1hdDogeVRpY2tGb3JtYXR0ZXIKICB9KSkpIDogbnVsbDsKfTsKCmV4cG9ydHMuQXJlYUNoYXJ0QmFzZUNvbXBvbmVudCA9IEFyZWFDaGFydEJhc2VDb21wb25lbnQ7CkFyZWFDaGFydEJhc2VDb21wb25lbnQuZGlzcGxheU5hbWUgPSAnQXJlYUNoYXJ0QmFzZUNvbXBvbmVudCc7Cgp2YXIgQXJlYUNoYXJ0QmFzZSA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oQXJlYUNoYXJ0QmFzZUNvbXBvbmVudCk7CgpleHBvcnRzLkFyZWFDaGFydEJhc2UgPSBBcmVhQ2hhcnRCYXNlOwpBcmVhQ2hhcnRCYXNlLmRpc3BsYXlOYW1lID0gJ0FyZWFDaGFydEJhc2UnOwoKdmFyIEFyZWFDaGFydENvbXBvbmVudCA9IGZ1bmN0aW9uIEFyZWFDaGFydENvbXBvbmVudChfcmVmMykgewogIHZhciBhcmVhQ2hhcnQgPSBfcmVmMy5hcmVhQ2hhcnQsCiAgICAgIGNvbmZpZ3MgPSBfcmVmMy5jb25maWdzOwoKICB2YXIgX3VzZVRocm90dGxlZFJlc2l6ZU9iID0gKDAsIF91dGlscy51c2VUaHJvdHRsZWRSZXNpemVPYnNlcnZlcikoKSwKICAgICAgbWVhc3VyZVJlZiA9IF91c2VUaHJvdHRsZWRSZXNpemVPYi5yZWYsCiAgICAgIHdpZHRoID0gX3VzZVRocm90dGxlZFJlc2l6ZU9iLndpZHRoLAogICAgICBoZWlnaHQgPSBfdXNlVGhyb3R0bGVkUmVzaXplT2IuaGVpZ2h0OwoKICB2YXIgY3VzdG9tSGVpZ2h0ID0gKDAsIF9mcC5nZXQpKCdjdXN0b21IZWlnaHQnLCBjb25maWdzKTsKICB2YXIgY3VzdG9tV2lkdGggPSAoMCwgX2ZwLmdldCkoJ2N1c3RvbVdpZHRoJywgY29uZmlncyk7CiAgdmFyIGNoYXJ0SGVpZ2h0ID0gKDAsIF9jb21tb24uZ2V0Q2hhcnRIZWlnaHQpKGN1c3RvbUhlaWdodCwgaGVpZ2h0KTsKICB2YXIgY2hhcnRXaWR0aCA9ICgwLCBfY29tbW9uLmdldENoYXJ0V2lkdGgpKGN1c3RvbVdpZHRoLCB3aWR0aCk7CiAgcmV0dXJuIGNoZWNrSWZBbnlWYWxpZFNlcmllc0V4aXN0KGFyZWFDaGFydCkgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uV3JhcHBlZEJ5QXV0b1NpemVyLCB7CiAgICByZWY6IG1lYXN1cmVSZWYsCiAgICBoZWlnaHQ6IGNoYXJ0SGVpZ2h0CiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChBcmVhQ2hhcnRCYXNlLCB7CiAgICBkYXRhOiBhcmVhQ2hhcnQsCiAgICBoZWlnaHQ6IGNoYXJ0SGVpZ2h0LAogICAgd2lkdGg6IGNoYXJ0V2lkdGgsCiAgICBjb25maWdzOiBjb25maWdzCiAgfSkpIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hhcnRfcGxhY2VfaG9sZGVyLkNoYXJ0UGxhY2VIb2xkZXIsIHsKICAgIGhlaWdodDogY2hhcnRIZWlnaHQsCiAgICB3aWR0aDogY2hhcnRXaWR0aCwKICAgIGRhdGE6IGFyZWFDaGFydAogIH0pOwp9OwoKZXhwb3J0cy5BcmVhQ2hhcnRDb21wb25lbnQgPSBBcmVhQ2hhcnRDb21wb25lbnQ7Cgp2YXIgQXJlYUNoYXJ0ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhBcmVhQ2hhcnRDb21wb25lbnQpOwoKZXhwb3J0cy5BcmVhQ2hhcnQgPSBBcmVhQ2hhcnQ7"},null]}