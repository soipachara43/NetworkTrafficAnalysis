{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/source_destination/network.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/source_destination/network.js","mtime":1589249553128},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk5ldHdvcmsgPSB2b2lkIDA7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3N0eWxlZENvbXBvbmVudHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInN0eWxlZC1jb21wb25lbnRzIikpOwoKdmFyIF9kaXJlY3Rpb24gPSByZXF1aXJlKCIuLi9kaXJlY3Rpb24iKTsKCnZhciBfZHJhZ2dhYmxlcyA9IHJlcXVpcmUoIi4uL2RyYWdnYWJsZXMiKTsKCnZhciBpMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi90cmFuc2xhdGlvbnMiKSk7Cgp2YXIgX2ZpZWxkX25hbWVzID0gcmVxdWlyZSgiLi9maWVsZF9uYW1lcyIpOwoKdmFyIF9mb3JtYXR0ZWRfYnl0ZXMgPSByZXF1aXJlKCIuLi9mb3JtYXR0ZWRfYnl0ZXMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQovKgogKiBDb3B5cmlnaHQgRWxhc3RpY3NlYXJjaCBCLlYuIGFuZC9vciBsaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lCiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBMaWNlbnNlZCB1bmRlciB0aGUgRWxhc3RpYyBMaWNlbnNlOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIEVsYXN0aWMgTGljZW5zZS4KICovCgoKdmFyIEV1aUZsZXhJdGVtTWFyZ2luUmlnaHQgPSAoMCwgX3N0eWxlZENvbXBvbmVudHMuZGVmYXVsdCkoX2V1aS5FdWlGbGV4SXRlbSkud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJFdWlGbGV4SXRlbU1hcmdpblJpZ2h0IiwKICBjb21wb25lbnRJZDogInNjLTFodTNyMWUtMCIKfSkoWyJtYXJnaW4tcmlnaHQ6M3B4OyJdKTsKRXVpRmxleEl0ZW1NYXJnaW5SaWdodC5kaXNwbGF5TmFtZSA9ICdFdWlGbGV4SXRlbU1hcmdpblJpZ2h0JzsKdmFyIFN0YXRzID0gKDAsIF9zdHlsZWRDb21wb25lbnRzLmRlZmF1bHQpKF9ldWkuRXVpVGV4dCkud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJTdGF0cyIsCiAgY29tcG9uZW50SWQ6ICJzYy0xaHUzcjFlLTEiCn0pKFsibWFyZ2luOjAgNXB4OyJdKTsKU3RhdHMuZGlzcGxheU5hbWUgPSAnU3RhdHMnOwovKioKICogUmVuZGVycyBhIHJvdyBvZiBkcmFnZ2FibGUgYmFkZ2VzIGNvbnRhaW5pbmcgZmllbGRzIGZyb20gdGhlCiAqIGBOZXR3b3JrYCBjYXRlZ29yeSBvZiBmaWVsZHMKICovCgp2YXIgTmV0d29yayA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgYnl0ZXMgPSBfcmVmLmJ5dGVzLAogICAgICBjb21tdW5pdHlJZCA9IF9yZWYuY29tbXVuaXR5SWQsCiAgICAgIGNvbnRleHRJZCA9IF9yZWYuY29udGV4dElkLAogICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbiwKICAgICAgZXZlbnRJZCA9IF9yZWYuZXZlbnRJZCwKICAgICAgcGFja2V0cyA9IF9yZWYucGFja2V0cywKICAgICAgcHJvdG9jb2wgPSBfcmVmLnByb3RvY29sLAogICAgICB0cmFuc3BvcnQgPSBfcmVmLnRyYW5zcG9ydDsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgYWxpZ25JdGVtczogImNlbnRlciIsCiAgICBqdXN0aWZ5Q29udGVudDogImNlbnRlciIsCiAgICBndXR0ZXJTaXplOiAibm9uZSIKICB9LCBkaXJlY3Rpb24gIT0gbnVsbCA/ICgwLCBfZnAudW5pcSkoZGlyZWN0aW9uKS5tYXAoZnVuY3Rpb24gKGRpcikgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXVpRmxleEl0ZW1NYXJnaW5SaWdodCwgewogICAgICBncm93OiBmYWxzZSwKICAgICAga2V5OiBkaXIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2RpcmVjdGlvbi5EaXJlY3Rpb25CYWRnZSwgewogICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCwKICAgICAgZXZlbnRJZDogZXZlbnRJZCwKICAgICAgZGlyZWN0aW9uOiBkaXIKICAgIH0pKTsKICB9KSA6IG51bGwsIHByb3RvY29sICE9IG51bGwgPyAoMCwgX2ZwLnVuaXEpKHByb3RvY29sKS5tYXAoZnVuY3Rpb24gKHByb3RvKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFdWlGbGV4SXRlbU1hcmdpblJpZ2h0LCB7CiAgICAgIGdyb3c6IGZhbHNlLAogICAgICBrZXk6IHByb3RvCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kcmFnZ2FibGVzLkRyYWdnYWJsZUJhZGdlLCB7CiAgICAgIGNvbnRleHRJZDogY29udGV4dElkLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAibmV0d29yay1wcm90b2NvbCIsCiAgICAgIGV2ZW50SWQ6IGV2ZW50SWQsCiAgICAgIGZpZWxkOiBfZmllbGRfbmFtZXMuTkVUV09SS19QUk9UT0NPTF9GSUVMRF9OQU1FLAogICAgICB2YWx1ZTogcHJvdG8KICAgIH0pKTsKICB9KSA6IG51bGwsIGJ5dGVzICE9IG51bGwgPyAoMCwgX2ZwLnVuaXEpKGJ5dGVzKS5tYXAoZnVuY3Rpb24gKGIpIHsKICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKGIpKSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXVpRmxleEl0ZW1NYXJnaW5SaWdodCwgewogICAgICBncm93OiBmYWxzZSwKICAgICAga2V5OiBiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kcmFnZ2FibGVzLkRlZmF1bHREcmFnZ2FibGUsIHsKICAgICAgZmllbGQ6IF9maWVsZF9uYW1lcy5ORVRXT1JLX0JZVEVTX0ZJRUxEX05BTUUsCiAgICAgIGlkOiAibmV0d29yay1kZWZhdWx0LWRyYWdnYWJsZS0iLmNvbmNhdChjb250ZXh0SWQsICItIikuY29uY2F0KGV2ZW50SWQsICItIikuY29uY2F0KF9maWVsZF9uYW1lcy5ORVRXT1JLX0JZVEVTX0ZJRUxEX05BTUUsICItIikuY29uY2F0KGIpLAogICAgICB2YWx1ZTogYgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdGF0cywgewogICAgICBzaXplOiAieHMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAibmV0d29yay1ieXRlcyIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Zvcm1hdHRlZF9ieXRlcy5QcmVmZXJlbmNlRm9ybWF0dGVkQnl0ZXMsIHsKICAgICAgdmFsdWU6IGIKICAgIH0pKSkpKSA6IG51bGw7CiAgfSkgOiBudWxsLCBwYWNrZXRzICE9IG51bGwgPyAoMCwgX2ZwLnVuaXEpKHBhY2tldHMpLm1hcChmdW5jdGlvbiAocCkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXVpRmxleEl0ZW1NYXJnaW5SaWdodCwgewogICAgICBncm93OiBmYWxzZSwKICAgICAga2V5OiBwCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9kcmFnZ2FibGVzLkRlZmF1bHREcmFnZ2FibGUsIHsKICAgICAgZmllbGQ6IF9maWVsZF9uYW1lcy5ORVRXT1JLX1BBQ0tFVFNfRklFTERfTkFNRSwKICAgICAgaWQ6ICJuZXR3b3JrLWRlZmF1bHQtZHJhZ2dhYmxlLSIuY29uY2F0KGNvbnRleHRJZCwgIi0iKS5jb25jYXQoZXZlbnRJZCwgIi0iKS5jb25jYXQoX2ZpZWxkX25hbWVzLk5FVFdPUktfUEFDS0VUU19GSUVMRF9OQU1FLCAiLSIpLmNvbmNhdChwKSwKICAgICAgdmFsdWU6IHAKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU3RhdHMsIHsKICAgICAgc2l6ZTogInhzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIm5ldHdvcmstcGFja2V0cyIKICAgIH0sICIiLmNvbmNhdChwLCAiICIpLmNvbmNhdChpMThuLlBBQ0tFVFMpKSkpKTsKICB9KSA6IG51bGwsIHRyYW5zcG9ydCAhPSBudWxsID8gKDAsIF9mcC51bmlxKSh0cmFuc3BvcnQpLm1hcChmdW5jdGlvbiAodHJhbnMpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEV1aUZsZXhJdGVtTWFyZ2luUmlnaHQsIHsKICAgICAgZ3JvdzogZmFsc2UsCiAgICAgIGtleTogdHJhbnMKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2RyYWdnYWJsZXMuRHJhZ2dhYmxlQmFkZ2UsIHsKICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJuZXR3b3JrLXRyYW5zcG9ydCIsCiAgICAgIGV2ZW50SWQ6IGV2ZW50SWQsCiAgICAgIGZpZWxkOiBfZmllbGRfbmFtZXMuTkVUV09SS19UUkFOU1BPUlRfRklFTERfTkFNRSwKICAgICAgdmFsdWU6IHRyYW5zCiAgICB9KSk7CiAgfSkgOiBudWxsLCBjb21tdW5pdHlJZCAhPSBudWxsID8gKDAsIF9mcC51bmlxKShjb21tdW5pdHlJZCkubWFwKGZ1bmN0aW9uICh0cmFucykgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICBncm93OiBmYWxzZSwKICAgICAga2V5OiB0cmFucwogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZHJhZ2dhYmxlcy5EcmFnZ2FibGVCYWRnZSwgewogICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIm5ldHdvcmstY29tbXVuaXR5LWlkIiwKICAgICAgZXZlbnRJZDogZXZlbnRJZCwKICAgICAgZmllbGQ6IF9maWVsZF9uYW1lcy5ORVRXT1JLX0NPTU1VTklUWV9JRF9GSUVMRF9OQU1FLAogICAgICB2YWx1ZTogdHJhbnMKICAgIH0pKTsKICB9KSA6IG51bGwpOwp9KTsKCmV4cG9ydHMuTmV0d29yayA9IE5ldHdvcms7Ck5ldHdvcmsuZGlzcGxheU5hbWUgPSAnTmV0d29yayc7"},null]}