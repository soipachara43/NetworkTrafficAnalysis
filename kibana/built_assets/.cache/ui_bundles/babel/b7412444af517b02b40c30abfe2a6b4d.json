{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/timeline/body/actions/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/timeline/body/actions/index.js","mtime":1589249553140},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFjdGlvbnMgPSB2b2lkIDA7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3BpbiA9IHJlcXVpcmUoIi4uLy4uLy4uL3BpbiIpOwoKdmFyIF9oZWxwZXJzID0gcmVxdWlyZSgiLi4vLi4vcHJvcGVydGllcy9oZWxwZXJzIik7Cgp2YXIgX3N0eWxlcyA9IHJlcXVpcmUoIi4uLy4uL3N0eWxlcyIpOwoKdmFyIF9oZWxwZXJzMiA9IHJlcXVpcmUoIi4uL2hlbHBlcnMiKTsKCnZhciBpMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgZW1wdHlOb3RlcyA9IFtdOwoKdmFyIEFjdGlvbnMgPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIGFjdGlvbnNDb2x1bW5XaWR0aCA9IF9yZWYuYWN0aW9uc0NvbHVtbldpZHRoLAogICAgICBhZGRpdGlvbmFsQWN0aW9ucyA9IF9yZWYuYWRkaXRpb25hbEFjdGlvbnMsCiAgICAgIGFzc29jaWF0ZU5vdGUgPSBfcmVmLmFzc29jaWF0ZU5vdGUsCiAgICAgIGNoZWNrZWQgPSBfcmVmLmNoZWNrZWQsCiAgICAgIGV4cGFuZGVkID0gX3JlZi5leHBhbmRlZCwKICAgICAgZXZlbnRJZCA9IF9yZWYuZXZlbnRJZCwKICAgICAgZXZlbnRJc1Bpbm5lZCA9IF9yZWYuZXZlbnRJc1Bpbm5lZCwKICAgICAgZ2V0Tm90ZXNCeUlkcyA9IF9yZWYuZ2V0Tm90ZXNCeUlkcywKICAgICAgX3JlZiRpc0V2ZW50Vmlld2VyID0gX3JlZi5pc0V2ZW50Vmlld2VyLAogICAgICBpc0V2ZW50Vmlld2VyID0gX3JlZiRpc0V2ZW50Vmlld2VyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNFdmVudFZpZXdlciwKICAgICAgX3JlZiRsb2FkaW5nID0gX3JlZi5sb2FkaW5nLAogICAgICBsb2FkaW5nID0gX3JlZiRsb2FkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkbG9hZGluZywKICAgICAgbG9hZGluZ0V2ZW50SWRzID0gX3JlZi5sb2FkaW5nRXZlbnRJZHMsCiAgICAgIG5vdGVJZHMgPSBfcmVmLm5vdGVJZHMsCiAgICAgIG9uRXZlbnRUb2dnbGVkID0gX3JlZi5vbkV2ZW50VG9nZ2xlZCwKICAgICAgb25QaW5DbGlja2VkID0gX3JlZi5vblBpbkNsaWNrZWQsCiAgICAgIG9uUm93U2VsZWN0ZWQgPSBfcmVmLm9uUm93U2VsZWN0ZWQsCiAgICAgIHNob3dDaGVja2JveGVzID0gX3JlZi5zaG93Q2hlY2tib3hlcywKICAgICAgc2hvd05vdGVzID0gX3JlZi5zaG93Tm90ZXMsCiAgICAgIHRvZ2dsZVNob3dOb3RlcyA9IF9yZWYudG9nZ2xlU2hvd05vdGVzLAogICAgICB1cGRhdGVOb3RlID0gX3JlZi51cGRhdGVOb3RlOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuRXZlbnRzVGRHcm91cEFjdGlvbnMsIHsKICAgIGFjdGlvbnNDb2x1bW5XaWR0aDogYWN0aW9uc0NvbHVtbldpZHRoLAogICAgImRhdGEtdGVzdC1zdWJqIjogImV2ZW50LWFjdGlvbnMtY29udGFpbmVyIgogIH0sIHNob3dDaGVja2JveGVzICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlcy5FdmVudHNUZCwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInNlbGVjdC1ldmVudC1jb250YWluZXIiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3R5bGVzLkV2ZW50c1RkQ29udGVudCwgewogICAgdGV4dEFsaWduOiAiY2VudGVyIgogIH0sIGxvYWRpbmdFdmVudElkcy5pbmNsdWRlcyhldmVudElkKSA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgc2l6ZTogIm0iLAogICAgImRhdGEtdGVzdC1zdWJqIjogImV2ZW50LWxvYWRlciIKICB9KSA6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDaGVja2JveCwgewogICAgImRhdGEtdGVzdC1zdWJqIjogInNlbGVjdC1ldmVudCIsCiAgICBpZDogZXZlbnRJZCwKICAgIGNoZWNrZWQ6IGNoZWNrZWQsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZXZlbnQpIHsKICAgICAgb25Sb3dTZWxlY3RlZCh7CiAgICAgICAgZXZlbnRJZHM6IFtldmVudElkXSwKICAgICAgICBpc1NlbGVjdGVkOiBldmVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWQKICAgICAgfSk7CiAgICB9CiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgYWRkaXRpb25hbEFjdGlvbnMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuRXZlbnRzVGQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlcy5FdmVudHNUZENvbnRlbnQsIHsKICAgIHRleHRBbGlnbjogImNlbnRlciIKICB9LCBsb2FkaW5nICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlcy5FdmVudHNMb2FkaW5nLCBudWxsKSwgIWxvYWRpbmcgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICJhcmlhLWxhYmVsIjogZXhwYW5kZWQgPyBpMThuLkNPTExBUFNFIDogaTE4bi5FWFBBTkQsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZXhwYW5kLWV2ZW50IiwKICAgIGljb25UeXBlOiBleHBhbmRlZCA/ICdhcnJvd0Rvd24nIDogJ2Fycm93UmlnaHQnLAogICAgaWQ6IGV2ZW50SWQsCiAgICBvbkNsaWNrOiBvbkV2ZW50VG9nZ2xlZAogIH0pKSksICFpc0V2ZW50Vmlld2VyICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0eWxlcy5FdmVudHNUZCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3R5bGVzLkV2ZW50c1RkQ29udGVudCwgewogICAgdGV4dEFsaWduOiAiY2VudGVyIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAidGltZWxpbmUtYWN0aW9uLXBpbi10b29sLXRpcCIsCiAgICBjb250ZW50OiAoMCwgX2hlbHBlcnMyLmdldFBpblRvb2x0aXApKHsKICAgICAgaXNQaW5uZWQ6IGV2ZW50SXNQaW5uZWQsCiAgICAgIGV2ZW50SGFzTm90ZXM6ICgwLCBfaGVscGVyczIuZXZlbnRIYXNOb3Rlcykobm90ZUlkcykKICAgIH0pCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcGluLlBpbiwgewogICAgYWxsb3dVbnBpbm5pbmc6ICEoMCwgX2hlbHBlcnMyLmV2ZW50SGFzTm90ZXMpKG5vdGVJZHMpLAogICAgImRhdGEtdGVzdC1zdWJqIjogInBpbi1ldmVudCIsCiAgICBvbkNsaWNrOiBvblBpbkNsaWNrZWQsCiAgICBwaW5uZWQ6IGV2ZW50SXNQaW5uZWQKICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3R5bGVzLkV2ZW50c1RkLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdHlsZXMuRXZlbnRzVGRDb250ZW50LCB7CiAgICB0ZXh0QWxpZ246ICJjZW50ZXIiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaGVscGVycy5Ob3Rlc0J1dHRvbiwgewogICAgYW5pbWF0ZTogZmFsc2UsCiAgICBhc3NvY2lhdGVOb3RlOiBhc3NvY2lhdGVOb3RlLAogICAgImRhdGEtdGVzdC1zdWJqIjogImFkZC1ub3RlIiwKICAgIGdldE5vdGVzQnlJZHM6IGdldE5vdGVzQnlJZHMsCiAgICBub3RlSWRzOiBub3RlSWRzIHx8IGVtcHR5Tm90ZXMsCiAgICBzaG93Tm90ZXM6IHNob3dOb3RlcywKICAgIHNpemU6ICJzIiwKICAgIHRvZ2dsZVNob3dOb3RlczogdG9nZ2xlU2hvd05vdGVzLAogICAgdG9vbFRpcDogaTE4bi5OT1RFU19UT09MVElQLAogICAgdXBkYXRlTm90ZTogdXBkYXRlTm90ZQogIH0pKSkpKTsKfSwgZnVuY3Rpb24gKG5leHRQcm9wcywgcHJldlByb3BzKSB7CiAgcmV0dXJuIHByZXZQcm9wcy5hY3Rpb25zQ29sdW1uV2lkdGggPT09IG5leHRQcm9wcy5hY3Rpb25zQ29sdW1uV2lkdGggJiYgcHJldlByb3BzLmNoZWNrZWQgPT09IG5leHRQcm9wcy5jaGVja2VkICYmIHByZXZQcm9wcy5leHBhbmRlZCA9PT0gbmV4dFByb3BzLmV4cGFuZGVkICYmIHByZXZQcm9wcy5ldmVudElkID09PSBuZXh0UHJvcHMuZXZlbnRJZCAmJiBwcmV2UHJvcHMuZXZlbnRJc1Bpbm5lZCA9PT0gbmV4dFByb3BzLmV2ZW50SXNQaW5uZWQgJiYgcHJldlByb3BzLmxvYWRpbmcgPT09IG5leHRQcm9wcy5sb2FkaW5nICYmIHByZXZQcm9wcy5sb2FkaW5nRXZlbnRJZHMgPT09IG5leHRQcm9wcy5sb2FkaW5nRXZlbnRJZHMgJiYgcHJldlByb3BzLm5vdGVJZHMgPT09IG5leHRQcm9wcy5ub3RlSWRzICYmIHByZXZQcm9wcy5vblJvd1NlbGVjdGVkID09PSBuZXh0UHJvcHMub25Sb3dTZWxlY3RlZCAmJiBwcmV2UHJvcHMuc2hvd0NoZWNrYm94ZXMgPT09IG5leHRQcm9wcy5zaG93Q2hlY2tib3hlcyAmJiBwcmV2UHJvcHMuc2hvd05vdGVzID09PSBuZXh0UHJvcHMuc2hvd05vdGVzOwp9KTsKCmV4cG9ydHMuQWN0aW9ucyA9IEFjdGlvbnM7CkFjdGlvbnMuZGlzcGxheU5hbWUgPSAnQWN0aW9ucyc7"},null]}