{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/actions/map_actions.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/actions/map_actions.js","mtime":1589249552384},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  cancelAllInFlightRequests: true,
  setMapInitError: true,
  trackCurrentLayerState: true,
  rollbackToTrackedLayerStateForSelectedLayer: true,
  removeTrackedLayerStateForSelectedLayer: true,
  replaceLayerList: true,
  cloneLayer: true,
  addLayer: true,
  addLayerWithoutDataSync: true,
  cleanTooltipStateForLayer: true,
  setLayerVisibility: true,
  toggleLayerVisible: true,
  setSelectedLayer: true,
  removeTransientLayer: true,
  setTransientLayer: true,
  clearTransientLayerStateAndCloseFlyout: true,
  updateLayerOrder: true,
  mapReady: true,
  mapDestroyed: true,
  mapExtentChanged: true,
  closeOnClickTooltip: true,
  openOnClickTooltip: true,
  closeOnHoverTooltip: true,
  openOnHoverTooltip: true,
  setMouseCoordinates: true,
  clearMouseCoordinates: true,
  disableScrollZoom: true,
  fitToLayerExtent: true,
  setGotoWithBounds: true,
  setGotoWithCenter: true,
  clearGoto: true,
  startDataLoad: true,
  updateSourceDataRequest: true,
  endDataLoad: true,
  onDataLoadError: true,
  updateSourceProp: true,
  syncDataForLayer: true,
  updateLayerLabel: true,
  updateLayerMinZoom: true,
  updateLayerMaxZoom: true,
  updateLayerAlpha: true,
  setLayerQuery: true,
  removeSelectedLayer: true,
  removeLayer: true,
  setQuery: true,
  setRefreshConfig: true,
  triggerRefreshTimer: true,
  clearMissingStyleProperties: true,
  updateLayerStyle: true,
  updateStyleMeta: true,
  updateLayerStyleForSelectedLayer: true,
  setJoinsForLayer: true,
  updateDrawState: true,
  disableInteractive: true,
  disableTooltipControl: true,
  hideToolbarOverlay: true,
  hideLayerControl: true,
  hideViewControl: true,
  setHiddenLayers: true
};
exports.cancelAllInFlightRequests = cancelAllInFlightRequests;
exports.setMapInitError = setMapInitError;
exports.trackCurrentLayerState = trackCurrentLayerState;
exports.rollbackToTrackedLayerStateForSelectedLayer = rollbackToTrackedLayerStateForSelectedLayer;
exports.removeTrackedLayerStateForSelectedLayer = removeTrackedLayerStateForSelectedLayer;
exports.replaceLayerList = replaceLayerList;
exports.cloneLayer = cloneLayer;
exports.addLayer = addLayer;
exports.addLayerWithoutDataSync = addLayerWithoutDataSync;
exports.cleanTooltipStateForLayer = cleanTooltipStateForLayer;
exports.setLayerVisibility = setLayerVisibility;
exports.toggleLayerVisible = toggleLayerVisible;
exports.setSelectedLayer = setSelectedLayer;
exports.removeTransientLayer = removeTransientLayer;
exports.setTransientLayer = setTransientLayer;
exports.clearTransientLayerStateAndCloseFlyout = clearTransientLayerStateAndCloseFlyout;
exports.updateLayerOrder = updateLayerOrder;
exports.mapReady = mapReady;
exports.mapDestroyed = mapDestroyed;
exports.mapExtentChanged = mapExtentChanged;
exports.closeOnClickTooltip = closeOnClickTooltip;
exports.openOnClickTooltip = openOnClickTooltip;
exports.closeOnHoverTooltip = closeOnHoverTooltip;
exports.openOnHoverTooltip = openOnHoverTooltip;
exports.setMouseCoordinates = setMouseCoordinates;
exports.clearMouseCoordinates = clearMouseCoordinates;
exports.disableScrollZoom = disableScrollZoom;
exports.fitToLayerExtent = fitToLayerExtent;
exports.setGotoWithBounds = setGotoWithBounds;
exports.setGotoWithCenter = setGotoWithCenter;
exports.clearGoto = clearGoto;
exports.startDataLoad = startDataLoad;
exports.updateSourceDataRequest = updateSourceDataRequest;
exports.endDataLoad = endDataLoad;
exports.onDataLoadError = onDataLoadError;
exports.updateSourceProp = updateSourceProp;
exports.syncDataForLayer = syncDataForLayer;
exports.updateLayerLabel = updateLayerLabel;
exports.updateLayerMinZoom = updateLayerMinZoom;
exports.updateLayerMaxZoom = updateLayerMaxZoom;
exports.updateLayerAlpha = updateLayerAlpha;
exports.setLayerQuery = setLayerQuery;
exports.removeSelectedLayer = removeSelectedLayer;
exports.removeLayer = removeLayer;
exports.setQuery = setQuery;
exports.setRefreshConfig = setRefreshConfig;
exports.triggerRefreshTimer = triggerRefreshTimer;
exports.clearMissingStyleProperties = clearMissingStyleProperties;
exports.updateLayerStyle = updateLayerStyle;
exports.updateStyleMeta = updateStyleMeta;
exports.updateLayerStyleForSelectedLayer = updateLayerStyleForSelectedLayer;
exports.setJoinsForLayer = setJoinsForLayer;
exports.updateDrawState = updateDrawState;
exports.disableInteractive = disableInteractive;
exports.disableTooltipControl = disableTooltipControl;
exports.hideToolbarOverlay = hideToolbarOverlay;
exports.hideLayerControl = hideLayerControl;
exports.hideViewControl = hideViewControl;
exports.setHiddenLayers = setHiddenLayers;

var _lodash = _interopRequireDefault(require("lodash"));

var _turf = _interopRequireDefault(require("turf"));

var _booleanContains = _interopRequireDefault(require("@turf/boolean-contains"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _map_selectors = require("../selectors/map_selectors");

var _ui = require("../../../../../plugins/maps/public/reducers/ui");

var _non_serializable_instances = require("../../../../../plugins/maps/public/reducers/non_serializable_instances");

var _ui_actions = require("../actions/ui_actions");

var _constants = require("../../common/constants");

var _map_actions = require("../../../../../plugins/maps/public/actions/map_actions");

Object.keys(_map_actions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _map_actions[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getLayerLoadingCallbacks(dispatch, getState, layerId) {
  return {
    startLoading: function startLoading(dataId, requestToken, meta) {
      return dispatch(startDataLoad(layerId, dataId, requestToken, meta));
    },
    stopLoading: function stopLoading(dataId, requestToken, data, meta) {
      return dispatch(endDataLoad(layerId, dataId, requestToken, data, meta));
    },
    onLoadError: function onLoadError(dataId, requestToken, errorMessage) {
      return dispatch(onDataLoadError(layerId, dataId, requestToken, errorMessage));
    },
    updateSourceData: function updateSourceData(newData) {
      dispatch(updateSourceDataRequest(layerId, newData));
    },
    isRequestStillActive: function isRequestStillActive(dataId, requestToken) {
      var dataRequest = (0, _map_selectors.getDataRequestDescriptor)(getState(), layerId, dataId);

      if (!dataRequest) {
        return false;
      }

      return dataRequest.dataRequestToken === requestToken;
    },
    registerCancelCallback: function registerCancelCallback(requestToken, callback) {
      return dispatch((0, _non_serializable_instances.registerCancelCallback)(requestToken, callback));
    }
  };
}

function getLayerById(layerId, state) {
  return (0, _map_selectors.getLayerList)(state).find(function (layer) {
    return layerId === layer.getId();
  });
}

function syncDataForAllLayers(_x, _x2, _x3) {
  return _syncDataForAllLayers.apply(this, arguments);
}

function _syncDataForAllLayers() {
  _syncDataForAllLayers = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee20(dispatch, getState, dataFilters) {
    var state, layerList, syncs;
    return regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            state = getState();
            layerList = (0, _map_selectors.getLayerList)(state);
            syncs = layerList.map(function (layer) {
              var loadingFunctions = getLayerLoadingCallbacks(dispatch, getState, layer.getId());
              return layer.syncData(_objectSpread({}, loadingFunctions, {
                dataFilters: dataFilters
              }));
            });
            _context20.next = 5;
            return Promise.all(syncs);

          case 5:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));
  return _syncDataForAllLayers.apply(this, arguments);
}

function cancelAllInFlightRequests() {
  return function (dispatch, getState) {
    (0, _map_selectors.getLayerList)(getState()).forEach(function (layer) {
      layer.getInFlightRequestTokens().forEach(function (requestToken) {
        dispatch((0, _non_serializable_instances.cancelRequest)(requestToken));
      });
    });
  };
}

function setMapInitError(errorMessage) {
  return {
    type: _map_actions.SET_MAP_INIT_ERROR,
    errorMessage: errorMessage
  };
}

function trackCurrentLayerState(layerId) {
  return {
    type: _map_actions.TRACK_CURRENT_LAYER_STATE,
    layerId: layerId
  };
}

function rollbackToTrackedLayerStateForSelectedLayer() {
  return (
    /*#__PURE__*/
    function () {
      var _ref = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(dispatch, getState) {
        var layerId;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                layerId = (0, _map_selectors.getSelectedLayerId)(getState());
                _context.next = 3;
                return dispatch({
                  type: _map_actions.ROLLBACK_TO_TRACKED_LAYER_STATE,
                  layerId: layerId
                });

              case 3:
                // Ensure updateStyleMeta is triggered
                // syncDataForLayer may not trigger endDataLoad if no re-fetch is required
                dispatch(updateStyleMeta(layerId));
                dispatch(syncDataForLayer(layerId));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x4, _x5) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

function removeTrackedLayerStateForSelectedLayer() {
  return function (dispatch, getState) {
    var layerId = (0, _map_selectors.getSelectedLayerId)(getState());
    dispatch({
      type: _map_actions.REMOVE_TRACKED_LAYER_STATE,
      layerId: layerId
    });
  };
}

function replaceLayerList(newLayerList) {
  return function (dispatch, getState) {
    (0, _map_selectors.getLayerListRaw)(getState()).forEach(function (_ref2) {
      var id = _ref2.id;
      dispatch(removeLayerFromLayerList(id));
    });
    newLayerList.forEach(function (layerDescriptor) {
      dispatch(addLayer(layerDescriptor));
    });
  };
}

function cloneLayer(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(dispatch, getState) {
        var layer, clonedDescriptor;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                layer = getLayerById(layerId, getState());

                if (layer) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return");

              case 3:
                _context2.next = 5;
                return layer.cloneDescriptor();

              case 5:
                clonedDescriptor = _context2.sent;
                dispatch(addLayer(clonedDescriptor));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x6, _x7) {
        return _ref3.apply(this, arguments);
      };
    }()
  );
}

function addLayer(layerDescriptor) {
  return function (dispatch, getState) {
    var isMapReady = (0, _map_selectors.getMapReady)(getState());

    if (!isMapReady) {
      dispatch({
        type: _map_actions.ADD_WAITING_FOR_MAP_READY_LAYER,
        layer: layerDescriptor
      });
      return;
    }

    dispatch({
      type: _map_actions.ADD_LAYER,
      layer: layerDescriptor
    });
    dispatch(syncDataForLayer(layerDescriptor.id));
  };
} // Do not use when rendering a map. Method exists to enable selectors for getLayerList when
// rendering is not needed.


function addLayerWithoutDataSync(layerDescriptor) {
  return {
    type: _map_actions.ADD_LAYER,
    layer: layerDescriptor
  };
}

function setLayerDataLoadErrorStatus(layerId, errorMessage) {
  return function (dispatch) {
    dispatch({
      type: _map_actions.SET_LAYER_ERROR_STATUS,
      isInErrorState: errorMessage !== null,
      layerId: layerId,
      errorMessage: errorMessage
    });
  };
}

function cleanTooltipStateForLayer(layerId) {
  var layerFeatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return function (dispatch, getState) {
    var featuresRemoved = false;
    var openTooltips = (0, _map_selectors.getOpenTooltips)(getState()).map(function (tooltipState) {
      var nextFeatures = tooltipState.features.filter(function (tooltipFeature) {
        if (tooltipFeature.layerId !== layerId) {
          // feature from another layer, keep it
          return true;
        } // Keep feature if it is still in layer


        return layerFeatures.some(function (layerFeature) {
          return layerFeature.properties[_constants.FEATURE_ID_PROPERTY_NAME] === tooltipFeature.id;
        });
      });

      if (tooltipState.features.length !== nextFeatures.length) {
        featuresRemoved = true;
      }

      return _objectSpread({}, tooltipState, {
        features: nextFeatures
      });
    }).filter(function (tooltipState) {
      return tooltipState.features.length > 0;
    });

    if (featuresRemoved) {
      dispatch({
        type: _map_actions.SET_OPEN_TOOLTIPS,
        openTooltips: openTooltips
      });
    }
  };
}

function setLayerVisibility(layerId, makeVisible) {
  return (
    /*#__PURE__*/
    function () {
      var _ref4 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(dispatch, getState) {
        var layer;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                //if the current-state is invisible, we also want to sync data
                //e.g. if a layer was invisible at start-up, it won't have any data loaded
                layer = getLayerById(layerId, getState()); // If the layer visibility is already what we want it to be, do nothing

                if (!(!layer || layer.isVisible() === makeVisible)) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return");

              case 3:
                if (!makeVisible) {
                  dispatch(cleanTooltipStateForLayer(layerId));
                }

                _context3.next = 6;
                return dispatch({
                  type: _map_actions.SET_LAYER_VISIBILITY,
                  layerId: layerId,
                  visibility: makeVisible
                });

              case 6:
                if (makeVisible) {
                  dispatch(syncDataForLayer(layerId));
                }

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x8, _x9) {
        return _ref4.apply(this, arguments);
      };
    }()
  );
}

function toggleLayerVisible(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref5 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(dispatch, getState) {
        var layer, makeVisible;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                layer = getLayerById(layerId, getState());

                if (layer) {
                  _context4.next = 3;
                  break;
                }

                return _context4.abrupt("return");

              case 3:
                makeVisible = !layer.isVisible();
                dispatch(setLayerVisibility(layerId, makeVisible));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x10, _x11) {
        return _ref5.apply(this, arguments);
      };
    }()
  );
}

function setSelectedLayer(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref6 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(dispatch, getState) {
        var oldSelectedLayer;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                oldSelectedLayer = (0, _map_selectors.getSelectedLayerId)(getState());

                if (!oldSelectedLayer) {
                  _context5.next = 4;
                  break;
                }

                _context5.next = 4;
                return dispatch(rollbackToTrackedLayerStateForSelectedLayer());

              case 4:
                if (layerId) {
                  dispatch(trackCurrentLayerState(layerId));
                }

                dispatch({
                  type: _map_actions.SET_SELECTED_LAYER,
                  selectedLayerId: layerId
                });

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x12, _x13) {
        return _ref6.apply(this, arguments);
      };
    }()
  );
}

function removeTransientLayer() {
  return (
    /*#__PURE__*/
    function () {
      var _ref7 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6(dispatch, getState) {
        var transientLayerId;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                transientLayerId = (0, _map_selectors.getTransientLayerId)(getState());

                if (!transientLayerId) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 4;
                return dispatch(removeLayerFromLayerList(transientLayerId));

              case 4:
                _context6.next = 6;
                return dispatch(setTransientLayer(null));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x14, _x15) {
        return _ref7.apply(this, arguments);
      };
    }()
  );
}

function setTransientLayer(layerId) {
  return {
    type: _map_actions.SET_TRANSIENT_LAYER,
    transientLayerId: layerId
  };
}

function clearTransientLayerStateAndCloseFlyout() {
  return (
    /*#__PURE__*/
    function () {
      var _ref8 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7(dispatch) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return dispatch((0, _ui_actions.updateFlyout)(_ui.FLYOUT_STATE.NONE));

              case 2:
                _context7.next = 4;
                return dispatch(setSelectedLayer(null));

              case 4:
                _context7.next = 6;
                return dispatch(removeTransientLayer());

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x16) {
        return _ref8.apply(this, arguments);
      };
    }()
  );
}

function updateLayerOrder(newLayerOrder) {
  return {
    type: _map_actions.UPDATE_LAYER_ORDER,
    newLayerOrder: newLayerOrder
  };
}

function mapReady() {
  return function (dispatch, getState) {
    dispatch({
      type: _map_actions.MAP_READY
    });
    (0, _map_selectors.getWaitingForMapReadyLayerListRaw)(getState()).forEach(function (layerDescriptor) {
      dispatch(addLayer(layerDescriptor));
    });
    dispatch({
      type: _map_actions.CLEAR_WAITING_FOR_MAP_READY_LAYER_LIST
    });
  };
}

function mapDestroyed() {
  return {
    type: _map_actions.MAP_DESTROYED
  };
}

function mapExtentChanged(newMapConstants) {
  return (
    /*#__PURE__*/
    function () {
      var _ref9 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8(dispatch, getState) {
        var state, dataFilters, extent, newZoom, buffer, currentZoom, doesBufferContainExtent, bufferGeometry, extentGeometry, scaleFactor, width, height, newDataFilters;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                state = getState();
                dataFilters = (0, _map_selectors.getDataFilters)(state);
                extent = newMapConstants.extent, newZoom = newMapConstants.zoom;
                buffer = dataFilters.buffer, currentZoom = dataFilters.zoom;

                if (extent) {
                  doesBufferContainExtent = false;

                  if (buffer) {
                    bufferGeometry = _turf.default.bboxPolygon([buffer.minLon, buffer.minLat, buffer.maxLon, buffer.maxLat]);
                    extentGeometry = _turf.default.bboxPolygon([extent.minLon, extent.minLat, extent.maxLon, extent.maxLat]);
                    doesBufferContainExtent = (0, _booleanContains.default)(bufferGeometry, extentGeometry);
                  }

                  if (!doesBufferContainExtent || currentZoom !== newZoom) {
                    scaleFactor = 0.5; // TODO put scale factor in store and fetch with selector

                    width = extent.maxLon - extent.minLon;
                    height = extent.maxLat - extent.minLat;
                    dataFilters.buffer = {
                      minLon: extent.minLon - width * scaleFactor,
                      minLat: extent.minLat - height * scaleFactor,
                      maxLon: extent.maxLon + width * scaleFactor,
                      maxLat: extent.maxLat + height * scaleFactor
                    };
                  }
                }

                dispatch({
                  type: _map_actions.MAP_EXTENT_CHANGED,
                  mapState: _objectSpread({}, dataFilters, {}, newMapConstants)
                });
                newDataFilters = _objectSpread({}, dataFilters, {}, newMapConstants);
                _context8.next = 9;
                return syncDataForAllLayers(dispatch, getState, newDataFilters);

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x17, _x18) {
        return _ref9.apply(this, arguments);
      };
    }()
  );
}

function closeOnClickTooltip(tooltipId) {
  return function (dispatch, getState) {
    dispatch({
      type: _map_actions.SET_OPEN_TOOLTIPS,
      openTooltips: (0, _map_selectors.getOpenTooltips)(getState()).filter(function (_ref10) {
        var id = _ref10.id;
        return tooltipId !== id;
      })
    });
  };
}

function openOnClickTooltip(tooltipState) {
  return function (dispatch, getState) {
    var openTooltips = (0, _map_selectors.getOpenTooltips)(getState()).filter(function (_ref11) {
      var features = _ref11.features,
          location = _ref11.location,
          isLocked = _ref11.isLocked;
      return isLocked && !_lodash.default.isEqual(location, tooltipState.location) && !_lodash.default.isEqual(features, tooltipState.features);
    });
    openTooltips.push(_objectSpread({}, tooltipState, {
      isLocked: true,
      id: (0, _v.default)()
    }));
    dispatch({
      type: _map_actions.SET_OPEN_TOOLTIPS,
      openTooltips: openTooltips
    });
  };
}

function closeOnHoverTooltip() {
  return function (dispatch, getState) {
    if ((0, _map_selectors.getOpenTooltips)(getState()).length) {
      dispatch({
        type: _map_actions.SET_OPEN_TOOLTIPS,
        openTooltips: []
      });
    }
  };
}

function openOnHoverTooltip(tooltipState) {
  return {
    type: _map_actions.SET_OPEN_TOOLTIPS,
    openTooltips: [_objectSpread({}, tooltipState, {
      isLocked: false,
      id: (0, _v.default)()
    })]
  };
}

function setMouseCoordinates(_ref12) {
  var lat = _ref12.lat,
      lon = _ref12.lon;
  var safeLon = lon;

  if (lon > 180) {
    var overlapWestOfDateLine = lon - 180;
    safeLon = -180 + overlapWestOfDateLine;
  } else if (lon < -180) {
    var overlapEastOfDateLine = Math.abs(lon) - 180;
    safeLon = 180 - overlapEastOfDateLine;
  }

  return {
    type: _map_actions.SET_MOUSE_COORDINATES,
    lat: lat,
    lon: safeLon
  };
}

function clearMouseCoordinates() {
  return {
    type: _map_actions.CLEAR_MOUSE_COORDINATES
  };
}

function disableScrollZoom() {
  return {
    type: _map_actions.SET_SCROLL_ZOOM,
    scrollZoom: false
  };
}

function fitToLayerExtent(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref13 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9(dispatch, getState) {
        var targetLayer, dataFilters, bounds;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                targetLayer = getLayerById(layerId, getState());

                if (!targetLayer) {
                  _context9.next = 9;
                  break;
                }

                dataFilters = (0, _map_selectors.getDataFilters)(getState());
                _context9.next = 5;
                return targetLayer.getBounds(dataFilters);

              case 5:
                bounds = _context9.sent;

                if (!bounds) {
                  _context9.next = 9;
                  break;
                }

                _context9.next = 9;
                return dispatch(setGotoWithBounds(bounds));

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x19, _x20) {
        return _ref13.apply(this, arguments);
      };
    }()
  );
}

function setGotoWithBounds(bounds) {
  return {
    type: _map_actions.SET_GOTO,
    bounds: bounds
  };
}

function setGotoWithCenter(_ref14) {
  var lat = _ref14.lat,
      lon = _ref14.lon,
      zoom = _ref14.zoom;
  return {
    type: _map_actions.SET_GOTO,
    center: {
      lat: lat,
      lon: lon,
      zoom: zoom
    }
  };
}

function clearGoto() {
  return {
    type: _map_actions.CLEAR_GOTO
  };
}

function startDataLoad(layerId, dataId, requestToken) {
  var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return function (dispatch, getState) {
    var layer = getLayerById(layerId, getState());

    if (layer) {
      dispatch((0, _non_serializable_instances.cancelRequest)(layer.getPrevRequestToken(dataId)));
    }

    var eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

    if (eventHandlers && eventHandlers.onDataLoad) {
      eventHandlers.onDataLoad({
        layerId: layerId,
        dataId: dataId
      });
    }

    dispatch({
      meta: meta,
      type: _map_actions.LAYER_DATA_LOAD_STARTED,
      layerId: layerId,
      dataId: dataId,
      requestToken: requestToken
    });
  };
}

function updateSourceDataRequest(layerId, newData) {
  return function (dispatch) {
    dispatch({
      type: _map_actions.UPDATE_SOURCE_DATA_REQUEST,
      dataId: _constants.SOURCE_DATA_ID_ORIGIN,
      layerId: layerId,
      newData: newData
    });
    dispatch(updateStyleMeta(layerId));
  };
}

function endDataLoad(layerId, dataId, requestToken, data, meta) {
  return (
    /*#__PURE__*/
    function () {
      var _ref15 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10(dispatch, getState) {
        var features, eventHandlers, layer, resultMeta;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                dispatch((0, _non_serializable_instances.unregisterCancelCallback)(requestToken));
                features = data && data.features ? data.features : [];
                eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

                if (eventHandlers && eventHandlers.onDataLoadEnd) {
                  layer = getLayerById(layerId, getState());
                  resultMeta = {};

                  if (layer && layer.getType() === _constants.LAYER_TYPE.VECTOR) {
                    resultMeta.featuresCount = features.length;
                  }

                  eventHandlers.onDataLoadEnd({
                    layerId: layerId,
                    dataId: dataId,
                    resultMeta: resultMeta
                  });
                }

                dispatch(cleanTooltipStateForLayer(layerId, features));
                dispatch({
                  type: _map_actions.LAYER_DATA_LOAD_ENDED,
                  layerId: layerId,
                  dataId: dataId,
                  data: data,
                  meta: meta,
                  requestToken: requestToken
                }); //Clear any data-load errors when there is a succesful data return.
                //Co this on end-data-load iso at start-data-load to avoid blipping the error status between true/false.
                //This avoids jitter in the warning icon of the TOC when the requests continues to return errors.

                dispatch(setLayerDataLoadErrorStatus(layerId, null));
                dispatch(updateStyleMeta(layerId));

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x21, _x22) {
        return _ref15.apply(this, arguments);
      };
    }()
  );
}

function onDataLoadError(layerId, dataId, requestToken, errorMessage) {
  return (
    /*#__PURE__*/
    function () {
      var _ref16 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11(dispatch, getState) {
        var eventHandlers;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                dispatch((0, _non_serializable_instances.unregisterCancelCallback)(requestToken));
                eventHandlers = (0, _non_serializable_instances.getEventHandlers)(getState());

                if (eventHandlers && eventHandlers.onDataLoadError) {
                  eventHandlers.onDataLoadError({
                    layerId: layerId,
                    dataId: dataId,
                    errorMessage: errorMessage
                  });
                }

                dispatch(cleanTooltipStateForLayer(layerId));
                dispatch({
                  type: _map_actions.LAYER_DATA_LOAD_ERROR,
                  data: null,
                  layerId: layerId,
                  dataId: dataId,
                  requestToken: requestToken
                });
                dispatch(setLayerDataLoadErrorStatus(layerId, errorMessage));

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x23, _x24) {
        return _ref16.apply(this, arguments);
      };
    }()
  );
}

function updateSourceProp(layerId, propName, value, newLayerType) {
  return (
    /*#__PURE__*/
    function () {
      var _ref17 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12(dispatch) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                dispatch({
                  type: _map_actions.UPDATE_SOURCE_PROP,
                  layerId: layerId,
                  propName: propName,
                  value: value,
                  newLayerType: newLayerType
                });
                _context12.next = 3;
                return dispatch(clearMissingStyleProperties(layerId));

              case 3:
                dispatch(syncDataForLayer(layerId));

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      return function (_x25) {
        return _ref17.apply(this, arguments);
      };
    }()
  );
}

function syncDataForLayer(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref18 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee13(dispatch, getState) {
        var targetLayer, dataFilters, loadingFunctions;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                targetLayer = getLayerById(layerId, getState());

                if (!targetLayer) {
                  _context13.next = 6;
                  break;
                }

                dataFilters = (0, _map_selectors.getDataFilters)(getState());
                loadingFunctions = getLayerLoadingCallbacks(dispatch, getState, layerId);
                _context13.next = 6;
                return targetLayer.syncData(_objectSpread({}, loadingFunctions, {
                  dataFilters: dataFilters
                }));

              case 6:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x26, _x27) {
        return _ref18.apply(this, arguments);
      };
    }()
  );
}

function updateLayerLabel(id, newLabel) {
  return {
    type: _map_actions.UPDATE_LAYER_PROP,
    id: id,
    propName: 'label',
    newValue: newLabel
  };
}

function updateLayerMinZoom(id, minZoom) {
  return {
    type: _map_actions.UPDATE_LAYER_PROP,
    id: id,
    propName: 'minZoom',
    newValue: minZoom
  };
}

function updateLayerMaxZoom(id, maxZoom) {
  return {
    type: _map_actions.UPDATE_LAYER_PROP,
    id: id,
    propName: 'maxZoom',
    newValue: maxZoom
  };
}

function updateLayerAlpha(id, alpha) {
  return {
    type: _map_actions.UPDATE_LAYER_PROP,
    id: id,
    propName: 'alpha',
    newValue: alpha
  };
}

function setLayerQuery(id, query) {
  return function (dispatch) {
    dispatch({
      type: _map_actions.UPDATE_LAYER_PROP,
      id: id,
      propName: 'query',
      newValue: query
    });
    dispatch(syncDataForLayer(id));
  };
}

function removeSelectedLayer() {
  return function (dispatch, getState) {
    var state = getState();
    var layerId = (0, _map_selectors.getSelectedLayerId)(state);
    dispatch(removeLayer(layerId));
  };
}

function removeLayer(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref19 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee14(dispatch, getState) {
        var state, selectedLayerId;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                state = getState();
                selectedLayerId = (0, _map_selectors.getSelectedLayerId)(state);

                if (!(layerId === selectedLayerId)) {
                  _context14.next = 6;
                  break;
                }

                dispatch((0, _ui_actions.updateFlyout)(_ui.FLYOUT_STATE.NONE));
                _context14.next = 6;
                return dispatch(setSelectedLayer(null));

              case 6:
                dispatch(removeLayerFromLayerList(layerId));

              case 7:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x28, _x29) {
        return _ref19.apply(this, arguments);
      };
    }()
  );
}

function removeLayerFromLayerList(layerId) {
  return function (dispatch, getState) {
    var layerGettingRemoved = getLayerById(layerId, getState());

    if (!layerGettingRemoved) {
      return;
    }

    layerGettingRemoved.getInFlightRequestTokens().forEach(function (requestToken) {
      dispatch((0, _non_serializable_instances.cancelRequest)(requestToken));
    });
    dispatch(cleanTooltipStateForLayer(layerId));
    layerGettingRemoved.destroy();
    dispatch({
      type: _map_actions.REMOVE_LAYER,
      id: layerId
    });
  };
}

function setQuery(_ref20) {
  var query = _ref20.query,
      timeFilters = _ref20.timeFilters,
      _ref20$filters = _ref20.filters,
      filters = _ref20$filters === void 0 ? [] : _ref20$filters,
      _ref20$refresh = _ref20.refresh,
      refresh = _ref20$refresh === void 0 ? false : _ref20$refresh;

  function generateQueryTimestamp() {
    return new Date().toISOString();
  }

  return (
    /*#__PURE__*/
    function () {
      var _ref21 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee15(dispatch, getState) {
        var prevQuery, prevTriggeredAt, dataFilters;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                prevQuery = (0, _map_selectors.getQuery)(getState());
                prevTriggeredAt = prevQuery && prevQuery.queryLastTriggeredAt ? prevQuery.queryLastTriggeredAt : generateQueryTimestamp();
                dispatch({
                  type: _map_actions.SET_QUERY,
                  timeFilters: timeFilters,
                  query: _objectSpread({}, query, {
                    // ensure query changes to trigger re-fetch when "Refresh" clicked
                    queryLastTriggeredAt: refresh ? generateQueryTimestamp() : prevTriggeredAt
                  }),
                  filters: filters
                });
                dataFilters = (0, _map_selectors.getDataFilters)(getState());
                _context15.next = 6;
                return syncDataForAllLayers(dispatch, getState, dataFilters);

              case 6:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15);
      }));

      return function (_x30, _x31) {
        return _ref21.apply(this, arguments);
      };
    }()
  );
}

function setRefreshConfig(_ref22) {
  var isPaused = _ref22.isPaused,
      interval = _ref22.interval;
  return {
    type: _map_actions.SET_REFRESH_CONFIG,
    isPaused: isPaused,
    interval: interval
  };
}

function triggerRefreshTimer() {
  return (
    /*#__PURE__*/
    function () {
      var _ref23 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee16(dispatch, getState) {
        var dataFilters;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                dispatch({
                  type: _map_actions.TRIGGER_REFRESH_TIMER
                });
                dataFilters = (0, _map_selectors.getDataFilters)(getState());
                _context16.next = 4;
                return syncDataForAllLayers(dispatch, getState, dataFilters);

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16);
      }));

      return function (_x32, _x33) {
        return _ref23.apply(this, arguments);
      };
    }()
  );
}

function clearMissingStyleProperties(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref24 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee17(dispatch, getState) {
        var targetLayer, style, nextFields, _style$getDescriptorW, hasChanges, nextStyleDescriptor;

        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                targetLayer = getLayerById(layerId, getState());

                if (targetLayer) {
                  _context17.next = 3;
                  break;
                }

                return _context17.abrupt("return");

              case 3:
                style = targetLayer.getCurrentStyle();

                if (style) {
                  _context17.next = 6;
                  break;
                }

                return _context17.abrupt("return");

              case 6:
                _context17.next = 8;
                return targetLayer.getFields();

              case 8:
                nextFields = _context17.sent;
                //take into account all fields, since labels can be driven by any field (source or join)
                _style$getDescriptorW = style.getDescriptorWithMissingStylePropsRemoved(nextFields), hasChanges = _style$getDescriptorW.hasChanges, nextStyleDescriptor = _style$getDescriptorW.nextStyleDescriptor;

                if (hasChanges) {
                  dispatch(updateLayerStyle(layerId, nextStyleDescriptor));
                }

              case 11:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17);
      }));

      return function (_x34, _x35) {
        return _ref24.apply(this, arguments);
      };
    }()
  );
}

function updateLayerStyle(layerId, styleDescriptor) {
  return function (dispatch) {
    dispatch({
      type: _map_actions.UPDATE_LAYER_STYLE,
      layerId: layerId,
      style: _objectSpread({}, styleDescriptor)
    }); // Ensure updateStyleMeta is triggered
    // syncDataForLayer may not trigger endDataLoad if no re-fetch is required

    dispatch(updateStyleMeta(layerId)); // Style update may require re-fetch, for example ES search may need to retrieve field used for dynamic styling

    dispatch(syncDataForLayer(layerId));
  };
}

function updateStyleMeta(layerId) {
  return (
    /*#__PURE__*/
    function () {
      var _ref25 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee18(dispatch, getState) {
        var layer, sourceDataRequest, style, styleMeta;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                layer = getLayerById(layerId, getState());

                if (layer) {
                  _context18.next = 3;
                  break;
                }

                return _context18.abrupt("return");

              case 3:
                sourceDataRequest = layer.getSourceDataRequest();
                style = layer.getCurrentStyle();

                if (!(!style || !sourceDataRequest)) {
                  _context18.next = 7;
                  break;
                }

                return _context18.abrupt("return");

              case 7:
                _context18.next = 9;
                return style.pluckStyleMetaFromSourceDataRequest(sourceDataRequest);

              case 9:
                styleMeta = _context18.sent;
                dispatch({
                  type: _map_actions.SET_LAYER_STYLE_META,
                  layerId: layerId,
                  styleMeta: styleMeta
                });

              case 11:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18);
      }));

      return function (_x36, _x37) {
        return _ref25.apply(this, arguments);
      };
    }()
  );
}

function updateLayerStyleForSelectedLayer(styleDescriptor) {
  return function (dispatch, getState) {
    var selectedLayerId = (0, _map_selectors.getSelectedLayerId)(getState());

    if (!selectedLayerId) {
      return;
    }

    dispatch(updateLayerStyle(selectedLayerId, styleDescriptor));
  };
}

function setJoinsForLayer(layer, joins) {
  return (
    /*#__PURE__*/
    function () {
      var _ref26 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee19(dispatch) {
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return dispatch({
                  type: _map_actions.SET_JOINS,
                  layer: layer,
                  joins: joins
                });

              case 2:
                _context19.next = 4;
                return dispatch(clearMissingStyleProperties(layer.getId()));

              case 4:
                dispatch(syncDataForLayer(layer.getId()));

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19);
      }));

      return function (_x38) {
        return _ref26.apply(this, arguments);
      };
    }()
  );
}

function updateDrawState(drawState) {
  return function (dispatch) {
    if (drawState !== null) {
      dispatch({
        type: _map_actions.SET_OPEN_TOOLTIPS,
        openTooltips: []
      }); // tooltips just get in the way
    }

    dispatch({
      type: _map_actions.UPDATE_DRAW_STATE,
      drawState: drawState
    });
  };
}

function disableInteractive() {
  return {
    type: _map_actions.SET_INTERACTIVE,
    disableInteractive: true
  };
}

function disableTooltipControl() {
  return {
    type: _map_actions.DISABLE_TOOLTIP_CONTROL,
    disableTooltipControl: true
  };
}

function hideToolbarOverlay() {
  return {
    type: _map_actions.HIDE_TOOLBAR_OVERLAY,
    hideToolbarOverlay: true
  };
}

function hideLayerControl() {
  return {
    type: _map_actions.HIDE_LAYER_CONTROL,
    hideLayerControl: true
  };
}

function hideViewControl() {
  return {
    type: _map_actions.HIDE_VIEW_CONTROL,
    hideViewControl: true
  };
}

function setHiddenLayers(hiddenLayerIds) {
  return function (dispatch, getState) {
    var isMapReady = (0, _map_selectors.getMapReady)(getState());

    if (!isMapReady) {
      dispatch({
        type: _map_actions.SET_WAITING_FOR_READY_HIDDEN_LAYERS,
        hiddenLayerIds: hiddenLayerIds
      });
    } else {
      (0, _map_selectors.getLayerListRaw)(getState()).forEach(function (layer) {
        return dispatch(setLayerVisibility(layer.id, !hiddenLayerIds.includes(layer.id)));
      });
    }
  };
}"},null]}