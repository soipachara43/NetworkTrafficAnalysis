{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/actions/select_range_action.js","dependencies":[{"path":"src/plugins/data/public/actions/select_range_action.js","mtime":1589249550595},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnNlbGVjdFJhbmdlQWN0aW9uID0gc2VsZWN0UmFuZ2VBY3Rpb247CmV4cG9ydHMuQUNUSU9OX1NFTEVDVF9SQU5HRSA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9wbHVnaW5zL3VpX2FjdGlvbnMvcHVibGljIik7Cgp2YXIgX2JydXNoX2V2ZW50ID0gcmVxdWlyZSgiLi9maWx0ZXJzL2JydXNoX2V2ZW50Iik7Cgp2YXIgXyA9IHJlcXVpcmUoIi4uIik7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9Cgp2YXIgQUNUSU9OX1NFTEVDVF9SQU5HRSA9ICdBQ1RJT05fU0VMRUNUX1JBTkdFJzsKZXhwb3J0cy5BQ1RJT05fU0VMRUNUX1JBTkdFID0gQUNUSU9OX1NFTEVDVF9SQU5HRTsKCmZ1bmN0aW9uIGlzQ29tcGF0aWJsZShfeCkgewogIHJldHVybiBfaXNDb21wYXRpYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9pc0NvbXBhdGlibGUoKSB7CiAgX2lzQ29tcGF0aWJsZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihjb250ZXh0KSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IEJvb2xlYW47CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuICgwLCBfYnJ1c2hfZXZlbnQub25CcnVzaEV2ZW50KShjb250ZXh0LmRhdGEpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgX2NvbnRleHQyLnQxID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCAoMCwgX2NvbnRleHQyLnQwKShfY29udGV4dDIudDEpKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gODsKICAgICAgICAgICAgX2NvbnRleHQyLnQyID0gX2NvbnRleHQyWyJjYXRjaCJdKDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDhdXSk7CiAgfSkpOwogIHJldHVybiBfaXNDb21wYXRpYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIHNlbGVjdFJhbmdlQWN0aW9uKGZpbHRlck1hbmFnZXIsIHRpbWVGaWx0ZXIpIHsKICByZXR1cm4gKDAsIF9wdWJsaWMuY3JlYXRlQWN0aW9uKSh7CiAgICB0eXBlOiBBQ1RJT05fU0VMRUNUX1JBTkdFLAogICAgaWQ6IEFDVElPTl9TRUxFQ1RfUkFOR0UsCiAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoKSB7CiAgICAgIHJldHVybiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnZGF0YS5maWx0ZXIuYXBwbHlGaWx0ZXJBY3Rpb25UaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FwcGx5IGZpbHRlciB0byBjdXJyZW50IHZpZXcnCiAgICAgIH0pOwogICAgfSwKICAgIGlzQ29tcGF0aWJsZTogaXNDb21wYXRpYmxlLAogICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2V4ZWN1dGUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKF9yZWYpIHsKICAgICAgICB2YXIgdGltZUZpZWxkTmFtZSwgZGF0YSwgZmlsdGVyLCBzZWxlY3RlZEZpbHRlcnMsIF9lc0ZpbHRlcnMkZXh0cmFjdFRpbSwgdGltZVJhbmdlRmlsdGVyLCByZXN0T2ZGaWx0ZXJzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aW1lRmllbGROYW1lID0gX3JlZi50aW1lRmllbGROYW1lLCBkYXRhID0gX3JlZi5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gaXNDb21wYXRpYmxlKHsKICAgICAgICAgICAgICAgICAgdGltZUZpZWxkTmFtZTogdGltZUZpZWxkTmFtZSwKICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmIChfY29udGV4dC5zZW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX3B1YmxpYy5JbmNvbXBhdGlibGVBY3Rpb25FcnJvcigpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2JydXNoX2V2ZW50Lm9uQnJ1c2hFdmVudCkoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGZpbHRlciA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKGZpbHRlcikgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgc2VsZWN0ZWRGaWx0ZXJzID0gXy5lc0ZpbHRlcnMubWFwQW5kRmxhdHRlbkZpbHRlcnMoW2ZpbHRlcl0pOwoKICAgICAgICAgICAgICAgIGlmICh0aW1lRmllbGROYW1lKSB7CiAgICAgICAgICAgICAgICAgIF9lc0ZpbHRlcnMkZXh0cmFjdFRpbSA9IF8uZXNGaWx0ZXJzLmV4dHJhY3RUaW1lRmlsdGVyKHRpbWVGaWVsZE5hbWUsIHNlbGVjdGVkRmlsdGVycyksIHRpbWVSYW5nZUZpbHRlciA9IF9lc0ZpbHRlcnMkZXh0cmFjdFRpbS50aW1lUmFuZ2VGaWx0ZXIsIHJlc3RPZkZpbHRlcnMgPSBfZXNGaWx0ZXJzJGV4dHJhY3RUaW0ucmVzdE9mRmlsdGVyczsKICAgICAgICAgICAgICAgICAgZmlsdGVyTWFuYWdlci5hZGRGaWx0ZXJzKHJlc3RPZkZpbHRlcnMpOwoKICAgICAgICAgICAgICAgICAgaWYgKHRpbWVSYW5nZUZpbHRlcikgewogICAgICAgICAgICAgICAgICAgIF8uZXNGaWx0ZXJzLmNoYW5nZVRpbWVGaWx0ZXIodGltZUZpbHRlciwgdGltZVJhbmdlRmlsdGVyKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZmlsdGVyTWFuYWdlci5hZGRGaWx0ZXJzKHNlbGVjdGVkRmlsdGVycyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZXhlY3V0ZShfeDIpIHsKICAgICAgICByZXR1cm4gX2V4ZWN1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGV4ZWN1dGU7CiAgICB9KCkKICB9KTsKfQ=="},null]}