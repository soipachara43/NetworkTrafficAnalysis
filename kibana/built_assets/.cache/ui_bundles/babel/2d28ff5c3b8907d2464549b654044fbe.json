{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/hosts/navigation/authentications_query_tab_body.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/hosts/navigation/authentications_query_tab_body.js","mtime":1589249553328},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkF1dGhlbnRpY2F0aW9uc1F1ZXJ5VGFiQm9keSA9IGV4cG9ydHMuYXV0aE1hdHJpeERhdGFNYXBwaW5nRmllbGRzID0gdm9pZCAwOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9hdXRoZW50aWNhdGlvbnNfdGFibGUgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21wb25lbnRzL3BhZ2UvaG9zdHMvYXV0aGVudGljYXRpb25zX3RhYmxlIik7Cgp2YXIgX21hbmFnZV9xdWVyeSA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbXBvbmVudHMvcGFnZS9tYW5hZ2VfcXVlcnkiKTsKCnZhciBfYXV0aGVudGljYXRpb25zID0gcmVxdWlyZSgiLi4vLi4vLi4vY29udGFpbmVycy9hdXRoZW50aWNhdGlvbnMiKTsKCnZhciBfaG9zdHMgPSByZXF1aXJlKCIuLi8uLi8uLi9zdG9yZS9ob3N0cyIpOwoKdmFyIF9tYXRyaXhfaGlzdG9ncmFtID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9tYXRyaXhfaGlzdG9ncmFtIik7Cgp2YXIgX3R5cGVzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9wYWdlL2hvc3RzL2twaV9ob3N0cy90eXBlcyIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuLi90cmFuc2xhdGlvbnMiKSk7Cgp2YXIgX3R5cGVzMiA9IHJlcXVpcmUoIi4uLy4uLy4uL2dyYXBocWwvdHlwZXMiKTsKCnZhciBfYXV0aE1hdHJpeERhdGFNYXBwaW4sIF9hdXRoU3RhY2tCeU9wdGlvbnMkZjsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7CiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9OwoKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBBdXRoZW50aWNhdGlvblRhYmxlTWFuYWdlID0gKDAsIF9tYW5hZ2VfcXVlcnkubWFuYWdlUXVlcnkpKF9hdXRoZW50aWNhdGlvbnNfdGFibGUuQXV0aGVudGljYXRpb25UYWJsZSk7CnZhciBJRCA9ICdhdXRoZW50aWNhdGlvbnNPdmVyVGltZVF1ZXJ5JzsKdmFyIGF1dGhTdGFja0J5T3B0aW9ucyA9IFt7CiAgdGV4dDogJ2V2ZW50Lm91dGNvbWUnLAogIHZhbHVlOiAnZXZlbnQub3V0Y29tZScKfV07CnZhciBERUZBVUxUX1NUQUNLX0JZID0gJ2V2ZW50Lm91dGNvbWUnOwp2YXIgQXV0aE1hdHJpeERhdGFHcm91cDsKCihmdW5jdGlvbiAoQXV0aE1hdHJpeERhdGFHcm91cCkgewogIEF1dGhNYXRyaXhEYXRhR3JvdXBbImF1dGhTdWNjZXNzIl0gPSAic3VjY2VzcyI7CiAgQXV0aE1hdHJpeERhdGFHcm91cFsiYXV0aEZhaWx1cmUiXSA9ICJmYWlsdXJlIjsKfSkoQXV0aE1hdHJpeERhdGFHcm91cCB8fCAoQXV0aE1hdHJpeERhdGFHcm91cCA9IHt9KSk7Cgp2YXIgYXV0aE1hdHJpeERhdGFNYXBwaW5nRmllbGRzID0gKF9hdXRoTWF0cml4RGF0YU1hcHBpbiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2F1dGhNYXRyaXhEYXRhTWFwcGluLCBBdXRoTWF0cml4RGF0YUdyb3VwLmF1dGhTdWNjZXNzLCB7CiAga2V5OiBBdXRoTWF0cml4RGF0YUdyb3VwLmF1dGhTdWNjZXNzLAogIHZhbHVlOiBudWxsLAogIGNvbG9yOiBfdHlwZXMuS3BpSG9zdHNDaGFydENvbG9ycy5hdXRoU3VjY2Vzcwp9KSwgX2RlZmluZVByb3BlcnR5KF9hdXRoTWF0cml4RGF0YU1hcHBpbiwgQXV0aE1hdHJpeERhdGFHcm91cC5hdXRoRmFpbHVyZSwgewogIGtleTogQXV0aE1hdHJpeERhdGFHcm91cC5hdXRoRmFpbHVyZSwKICB2YWx1ZTogbnVsbCwKICBjb2xvcjogX3R5cGVzLktwaUhvc3RzQ2hhcnRDb2xvcnMuYXV0aEZhaWx1cmUKfSksIF9hdXRoTWF0cml4RGF0YU1hcHBpbik7CmV4cG9ydHMuYXV0aE1hdHJpeERhdGFNYXBwaW5nRmllbGRzID0gYXV0aE1hdHJpeERhdGFNYXBwaW5nRmllbGRzOwp2YXIgaGlzdG9ncmFtQ29uZmlncyA9IHsKICBkZWZhdWx0U3RhY2tCeU9wdGlvbjogKF9hdXRoU3RhY2tCeU9wdGlvbnMkZiA9IGF1dGhTdGFja0J5T3B0aW9ucy5maW5kKGZ1bmN0aW9uIChvKSB7CiAgICByZXR1cm4gby50ZXh0ID09PSBERUZBVUxUX1NUQUNLX0JZOwogIH0pKSAhPT0gbnVsbCAmJiBfYXV0aFN0YWNrQnlPcHRpb25zJGYgIT09IHZvaWQgMCA/IF9hdXRoU3RhY2tCeU9wdGlvbnMkZiA6IGF1dGhTdGFja0J5T3B0aW9uc1swXSwKICBlcnJvck1lc3NhZ2U6IGkxOG4uRVJST1JfRkVUQ0hJTkdfQVVUSEVOVElDQVRJT05TX0RBVEEsCiAgaGlzdG9ncmFtVHlwZTogX3R5cGVzMi5IaXN0b2dyYW1UeXBlLmF1dGhlbnRpY2F0aW9ucywKICBtYXBwaW5nOiBhdXRoTWF0cml4RGF0YU1hcHBpbmdGaWVsZHMsCiAgc3RhY2tCeU9wdGlvbnM6IGF1dGhTdGFja0J5T3B0aW9ucywKICB0aXRsZTogaTE4bi5OQVZJR0FUSU9OX0FVVEhFTlRJQ0FUSU9OU19USVRMRQp9OwoKdmFyIEF1dGhlbnRpY2F0aW9uc1F1ZXJ5VGFiQm9keSA9IGZ1bmN0aW9uIEF1dGhlbnRpY2F0aW9uc1F1ZXJ5VGFiQm9keShfcmVmKSB7CiAgdmFyIGRlbGV0ZVF1ZXJ5ID0gX3JlZi5kZWxldGVRdWVyeSwKICAgICAgZW5kRGF0ZSA9IF9yZWYuZW5kRGF0ZSwKICAgICAgZmlsdGVyUXVlcnkgPSBfcmVmLmZpbHRlclF1ZXJ5LAogICAgICBza2lwID0gX3JlZi5za2lwLAogICAgICBzZXRRdWVyeSA9IF9yZWYuc2V0UXVlcnksCiAgICAgIHN0YXJ0RGF0ZSA9IF9yZWYuc3RhcnREYXRlLAogICAgICB0eXBlID0gX3JlZi50eXBlOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBpZiAoZGVsZXRlUXVlcnkpIHsKICAgICAgICBkZWxldGVRdWVyeSh7CiAgICAgICAgICBpZDogSUQKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKICB9LCBbZGVsZXRlUXVlcnldKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbWF0cml4X2hpc3RvZ3JhbS5NYXRyaXhIaXN0b2dyYW1Db250YWluZXIsIF9leHRlbmRzKHsKICAgIGVuZERhdGU6IGVuZERhdGUsCiAgICBmaWx0ZXJRdWVyeTogZmlsdGVyUXVlcnksCiAgICBpZDogSUQsCiAgICBzZXRRdWVyeTogc2V0UXVlcnksCiAgICBzb3VyY2VJZDogImRlZmF1bHQiLAogICAgc3RhcnREYXRlOiBzdGFydERhdGUsCiAgICB0eXBlOiBfaG9zdHMuaG9zdHNNb2RlbC5Ib3N0c1R5cGUucGFnZQogIH0sIGhpc3RvZ3JhbUNvbmZpZ3MpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfYXV0aGVudGljYXRpb25zLkF1dGhlbnRpY2F0aW9uc1F1ZXJ5LCB7CiAgICBlbmREYXRlOiBlbmREYXRlLAogICAgZmlsdGVyUXVlcnk6IGZpbHRlclF1ZXJ5LAogICAgc2tpcDogc2tpcCwKICAgIHNvdXJjZUlkOiAiZGVmYXVsdCIsCiAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSwKICAgIHR5cGU6IHR5cGUKICB9LCBmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciBhdXRoZW50aWNhdGlvbnMgPSBfcmVmMi5hdXRoZW50aWNhdGlvbnMsCiAgICAgICAgdG90YWxDb3VudCA9IF9yZWYyLnRvdGFsQ291bnQsCiAgICAgICAgbG9hZGluZyA9IF9yZWYyLmxvYWRpbmcsCiAgICAgICAgcGFnZUluZm8gPSBfcmVmMi5wYWdlSW5mbywKICAgICAgICBsb2FkUGFnZSA9IF9yZWYyLmxvYWRQYWdlLAogICAgICAgIGlkID0gX3JlZjIuaWQsCiAgICAgICAgaW5zcGVjdCA9IF9yZWYyLmluc3BlY3QsCiAgICAgICAgaXNJbnNwZWN0ZWQgPSBfcmVmMi5pc0luc3BlY3RlZCwKICAgICAgICByZWZldGNoID0gX3JlZjIucmVmZXRjaDsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEF1dGhlbnRpY2F0aW9uVGFibGVNYW5hZ2UsIHsKICAgICAgZGF0YTogYXV0aGVudGljYXRpb25zLAogICAgICBkZWxldGVRdWVyeTogZGVsZXRlUXVlcnksCiAgICAgIGZha2VUb3RhbENvdW50OiAoMCwgX2ZwLmdldE9yKSg1MCwgJ2Zha2VUb3RhbENvdW50JywgcGFnZUluZm8pLAogICAgICBpZDogaWQsCiAgICAgIGluc3BlY3Q6IGluc3BlY3QsCiAgICAgIGlzSW5zcGVjdDogaXNJbnNwZWN0ZWQsCiAgICAgIGxvYWRpbmc6IGxvYWRpbmcsCiAgICAgIGxvYWRQYWdlOiBsb2FkUGFnZSwKICAgICAgcmVmZXRjaDogcmVmZXRjaCwKICAgICAgc2hvd01vcmVQYWdlc0luZGljYXRvcjogKDAsIF9mcC5nZXRPcikoZmFsc2UsICdzaG93TW9yZVBhZ2VzSW5kaWNhdG9yJywgcGFnZUluZm8pLAogICAgICBzZXRRdWVyeTogc2V0UXVlcnksCiAgICAgIHRvdGFsQ291bnQ6IHRvdGFsQ291bnQsCiAgICAgIHR5cGU6IHR5cGUKICAgIH0pOwogIH0pKTsKfTsKCmV4cG9ydHMuQXV0aGVudGljYXRpb25zUXVlcnlUYWJCb2R5ID0gQXV0aGVudGljYXRpb25zUXVlcnlUYWJCb2R5OwpBdXRoZW50aWNhdGlvbnNRdWVyeVRhYkJvZHkuZGlzcGxheU5hbWUgPSAnQXV0aGVudGljYXRpb25zUXVlcnlUYWJCb2R5Jzs="},null]}