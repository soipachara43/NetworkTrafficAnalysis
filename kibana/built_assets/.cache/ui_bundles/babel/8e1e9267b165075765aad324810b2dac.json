{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/templates_form/templates_form.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/templates_form/templates_form.js","mtime":1589249554116},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRlbXBsYXRlc0Zvcm0gPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9zaGFyZWRfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uL3NoYXJlZF9pbXBvcnRzIik7Cgp2YXIgX21hcHBpbmdzX3N0YXRlID0gcmVxdWlyZSgiLi4vLi4vbWFwcGluZ3Nfc3RhdGUiKTsKCnZhciBfdGVtcGxhdGVzX2Zvcm1fc2NoZW1hID0gcmVxdWlyZSgiLi90ZW1wbGF0ZXNfZm9ybV9zY2hlbWEiKTsKCnZhciBfZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NlcnZpY2VzL2RvY3VtZW50YXRpb24iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBzdHJpbmdpZnlKc29uID0gZnVuY3Rpb24gc3RyaW5naWZ5SnNvbihqc29uKSB7CiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoanNvbikgPyBKU09OLnN0cmluZ2lmeShqc29uLCBudWxsLCAyKSA6ICdbXG5cbl0nOwp9OwoKdmFyIGZvcm1TZXJpYWxpemVyID0gZnVuY3Rpb24gZm9ybVNlcmlhbGl6ZXIoZm9ybURhdGEpIHsKICB2YXIgZHluYW1pY1RlbXBsYXRlcyA9IGZvcm1EYXRhLmR5bmFtaWNUZW1wbGF0ZXM7CiAgdmFyIHBhcnNlZFRlbXBsYXRlczsKCiAgdHJ5IHsKICAgIHBhcnNlZFRlbXBsYXRlcyA9IEpTT04ucGFyc2UoZHluYW1pY1RlbXBsYXRlcyk7CgogICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcnNlZFRlbXBsYXRlcykpIHsKICAgICAgLy8gVXNlciBwcm92aWRlZCBhbiBvYmplY3QsIGJ1dCB3ZSBuZWVkIGFuIGFycmF5IG9mIG9iamVjdHMKICAgICAgcGFyc2VkVGVtcGxhdGVzID0gW3BhcnNlZFRlbXBsYXRlc107CiAgICB9CiAgfSBjYXRjaCAoX3VudXNlZCkgewogICAgcGFyc2VkVGVtcGxhdGVzID0gW107CiAgfQoKICByZXR1cm4gewogICAgZHluYW1pY190ZW1wbGF0ZXM6IHBhcnNlZFRlbXBsYXRlcwogIH07Cn07Cgp2YXIgZm9ybURlc2VyaWFsaXplciA9IGZ1bmN0aW9uIGZvcm1EZXNlcmlhbGl6ZXIoZm9ybURhdGEpIHsKICB2YXIgZHluYW1pY190ZW1wbGF0ZXMgPSBmb3JtRGF0YS5keW5hbWljX3RlbXBsYXRlczsKICByZXR1cm4gewogICAgZHluYW1pY1RlbXBsYXRlczogc3RyaW5naWZ5SnNvbihkeW5hbWljX3RlbXBsYXRlcykKICB9Owp9OwoKdmFyIFRlbXBsYXRlc0Zvcm0gPSBfcmVhY3QuZGVmYXVsdC5tZW1vKGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIF9ldWlDb2RlRWRpdG9yUHJvcHM7CgogIHZhciBkZWZhdWx0VmFsdWUgPSBfcmVmLmRlZmF1bHRWYWx1ZTsKICB2YXIgZGlkTW91bnRSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikoZmFsc2UpOwoKICB2YXIgX3VzZUZvcm0gPSAoMCwgX3NoYXJlZF9pbXBvcnRzLnVzZUZvcm0pKHsKICAgIHNjaGVtYTogX3RlbXBsYXRlc19mb3JtX3NjaGVtYS50ZW1wbGF0ZXNGb3JtU2NoZW1hLAogICAgc2VyaWFsaXplcjogZm9ybVNlcmlhbGl6ZXIsCiAgICBkZXNlcmlhbGl6ZXI6IGZvcm1EZXNlcmlhbGl6ZXIsCiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZQogIH0pLAogICAgICBmb3JtID0gX3VzZUZvcm0uZm9ybTsKCiAgdmFyIGRpc3BhdGNoID0gKDAsIF9tYXBwaW5nc19zdGF0ZS51c2VEaXNwYXRjaCkoKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgdmFyIHN1YnNjcmlwdGlvbiA9IGZvcm0uc3Vic2NyaWJlKGZ1bmN0aW9uIChfcmVmMikgewogICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGEsCiAgICAgICAgICBpc1ZhbGlkID0gX3JlZjIuaXNWYWxpZCwKICAgICAgICAgIHZhbGlkYXRlID0gX3JlZjIudmFsaWRhdGU7CiAgICAgIGRpc3BhdGNoKHsKICAgICAgICB0eXBlOiAndGVtcGxhdGVzLnVwZGF0ZScsCiAgICAgICAgdmFsdWU6IHsKICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICBpc1ZhbGlkOiBpc1ZhbGlkLAogICAgICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlLAogICAgICAgICAgc3VibWl0Rm9ybTogZm9ybS5zdWJtaXQKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlOwogIH0sIFtmb3JtLCBkaXNwYXRjaF0pOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAoZGlkTW91bnRSZWYuY3VycmVudCkgewogICAgICAvLyBJZiB0aGUgZGVmYXVsdFZhbHVlIGhhcyBjaGFuZ2VkIChpdCBwcm9iYWJseSBtZWFucyB0aGF0IHdlIGhhdmUgbG9hZGVkIGEgbmV3IEpTT04pCiAgICAgIC8vIHdlIG5lZWQgdG8gcmVzZXQgdGhlIGZvcm0gdG8gdXBkYXRlIHRoZSBmaWVsZHMgdmFsdWVzLgogICAgICBmb3JtLnJlc2V0KHsKICAgICAgICByZXNldFZhbHVlczogdHJ1ZQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIEF2b2lkIHJlc2V0aW5nIHRoZSBmb3JtIG9uIGNvbXBvbmVudCBtb3VudC4KICAgICAgZGlkTW91bnRSZWYuY3VycmVudCA9IHRydWU7CiAgICB9CiAgfSwgW2RlZmF1bHRWYWx1ZV0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcwoKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgLy8gT24gdW5tb3VudCA9PiBzYXZlIGluIHRoZSBzdGF0ZSBhIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IGZvcm0gZGF0YS4KICAgICAgZGlzcGF0Y2goewogICAgICAgIHR5cGU6ICd0ZW1wbGF0ZXMuc2F2ZScKICAgICAgfSk7CiAgICB9OwogIH0sIFtkaXNwYXRjaF0pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiZHluYW1pY1RlbXBsYXRlcyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgc2l6ZTogInMiLAogICAgY29sb3I6ICJzdWJkdWVkIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBpZDogInhwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IuZHluYW1pY1RlbXBsYXRlc0Rlc2NyaXB0aW9uIiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiVXNlIGR5bmFtaWMgdGVtcGxhdGVzIHRvIGRlZmluZSBjdXN0b20gbWFwcGluZ3MgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBkeW5hbWljYWxseSBhZGRlZCBmaWVsZHMuIHtkb2NzTGlua30iLAogICAgdmFsdWVzOiB7CiAgICAgIGRvY3NMaW5rOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgIGhyZWY6IF9kb2N1bWVudGF0aW9uLmRvY3VtZW50YXRpb25TZXJ2aWNlLmdldER5bmFtaWNUZW1wbGF0ZXNMaW5rKCksCiAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICB9LCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5keW5hbWljVGVtcGxhdGVzRG9jdW1lbnRhdGlvbkxpbmsnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMZWFybiBtb3JlLicKICAgICAgfSkpCiAgICB9CiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuRm9ybSwgewogICAgZm9ybTogZm9ybSwKICAgIGlzSW52YWxpZDogZm9ybS5pc1N1Ym1pdHRlZCAmJiAhZm9ybS5pc1ZhbGlkLAogICAgZXJyb3I6IGZvcm0uZ2V0RXJyb3JzKCkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Vc2VGaWVsZCwgewogICAgcGF0aDogImR5bmFtaWNUZW1wbGF0ZXMiLAogICAgY29tcG9uZW50OiBfc2hhcmVkX2ltcG9ydHMuSnNvbkVkaXRvckZpZWxkLAogICAgY29tcG9uZW50UHJvcHM6IHsKICAgICAgZXVpQ29kZUVkaXRvclByb3BzOiAoX2V1aUNvZGVFZGl0b3JQcm9wcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2V1aUNvZGVFZGl0b3JQcm9wcywgJ2RhdGEtdGVzdC1zdWJqJywgJ2R5bmFtaWNUZW1wbGF0ZXNFZGl0b3InKSwgX2RlZmluZVByb3BlcnR5KF9ldWlDb2RlRWRpdG9yUHJvcHMsICJoZWlnaHQiLCAnNjAwcHgnKSwgX2RlZmluZVByb3BlcnR5KF9ldWlDb2RlRWRpdG9yUHJvcHMsICdhcmlhLWxhYmVsJywgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IuZHluYW1pY1RlbXBsYXRlc0VkaXRvckFyaWFMYWJlbCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0R5bmFtaWMgdGVtcGxhdGVzIGVkaXRvcicKICAgICAgfSkpLCBfZXVpQ29kZUVkaXRvclByb3BzKQogICAgfQogIH0pKSk7Cn0pOwoKZXhwb3J0cy5UZW1wbGF0ZXNGb3JtID0gVGVtcGxhdGVzRm9ybTs="},null]}