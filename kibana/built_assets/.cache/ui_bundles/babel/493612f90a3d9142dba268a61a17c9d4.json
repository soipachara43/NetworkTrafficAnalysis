{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/url_state/helpers.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/url_state/helpers.js","mtime":1589249553204},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlcGxhY2VTdGF0ZUluTG9jYXRpb24gPSBleHBvcnRzLnVwZGF0ZVVybFN0YXRlU3RyaW5nID0gZXhwb3J0cy51cGRhdGVUaW1lcmFuZ2VVcmwgPSBleHBvcnRzLm1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBleHBvcnRzLmdldFRpdGxlID0gZXhwb3J0cy5nZXRVcmxUeXBlID0gZXhwb3J0cy5yZXBsYWNlUXVlcnlTdHJpbmdJbkxvY2F0aW9uID0gZXhwb3J0cy5yZXBsYWNlU3RhdGVLZXlJblF1ZXJ5U3RyaW5nID0gZXhwb3J0cy5nZXRQYXJhbUZyb21RdWVyeVN0cmluZyA9IGV4cG9ydHMuZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb24gPSBleHBvcnRzLmVuY29kZVJpc29uVXJsU3RhdGUgPSBleHBvcnRzLmRlY29kZVJpc29uVXJsU3RhdGUgPSB2b2lkIDA7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX3F1ZXJ5U3RyaW5nID0gcmVxdWlyZSgicXVlcnktc3RyaW5nIik7Cgp2YXIgX3Jpc29uTm9kZSA9IHJlcXVpcmUoInJpc29uLW5vZGUiKTsKCnZhciBfcHVibGljID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3BsdWdpbnMva2liYW5hX3V0aWxzL3B1YmxpYyIpOwoKdmFyIF90eXBlcyA9IHJlcXVpcmUoIi4uLy4uL3BhZ2VzL2hvbWUvdHlwZXMiKTsKCnZhciBfc3RvcmUgPSByZXF1aXJlKCIuLi8uLi9zdG9yZSIpOwoKdmFyIF9zdXBlcl9kYXRlX3BpY2tlciA9IHJlcXVpcmUoIi4uL3N1cGVyX2RhdGVfcGlja2VyIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4vY29uc3RhbnRzIik7CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIGRlY29kZVJpc29uVXJsU3RhdGUgPSBmdW5jdGlvbiBkZWNvZGVSaXNvblVybFN0YXRlKHZhbHVlKSB7CiAgdHJ5IHsKICAgIHJldHVybiB2YWx1ZSA/ICgwLCBfcmlzb25Ob2RlLmRlY29kZSkodmFsdWUpIDogbnVsbDsKICB9IGNhdGNoIChlcnJvcikgewogICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5zdGFydHNXaXRoKCdyaXNvbiBkZWNvZGVyIGVycm9yJykpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdGhyb3cgZXJyb3I7CiAgfQp9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueQoKCmV4cG9ydHMuZGVjb2RlUmlzb25VcmxTdGF0ZSA9IGRlY29kZVJpc29uVXJsU3RhdGU7Cgp2YXIgZW5jb2RlUmlzb25VcmxTdGF0ZSA9IGZ1bmN0aW9uIGVuY29kZVJpc29uVXJsU3RhdGUoc3RhdGUpIHsKICByZXR1cm4gKDAsIF9yaXNvbk5vZGUuZW5jb2RlKShzdGF0ZSk7Cn07CgpleHBvcnRzLmVuY29kZVJpc29uVXJsU3RhdGUgPSBlbmNvZGVSaXNvblVybFN0YXRlOwoKdmFyIGdldFF1ZXJ5U3RyaW5nRnJvbUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb24oc2VhcmNoKSB7CiAgcmV0dXJuIHNlYXJjaC5zdWJzdHJpbmcoMSk7Cn07CgpleHBvcnRzLmdldFF1ZXJ5U3RyaW5nRnJvbUxvY2F0aW9uID0gZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb247Cgp2YXIgZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiBnZXRQYXJhbUZyb21RdWVyeVN0cmluZyhxdWVyeVN0cmluZywga2V5KSB7CiAgdmFyIHBhcnNlZFF1ZXJ5U3RyaW5nID0gKDAsIF9xdWVyeVN0cmluZy5wYXJzZSkocXVlcnlTdHJpbmcsIHsKICAgIHNvcnQ6IGZhbHNlCiAgfSk7CiAgdmFyIHF1ZXJ5UGFyYW0gPSBwYXJzZWRRdWVyeVN0cmluZ1trZXldOwogIHJldHVybiBBcnJheS5pc0FycmF5KHF1ZXJ5UGFyYW0pID8gcXVlcnlQYXJhbVswXSA6IHF1ZXJ5UGFyYW07Cn07CgpleHBvcnRzLmdldFBhcmFtRnJvbVF1ZXJ5U3RyaW5nID0gZ2V0UGFyYW1Gcm9tUXVlcnlTdHJpbmc7Cgp2YXIgcmVwbGFjZVN0YXRlS2V5SW5RdWVyeVN0cmluZyA9IGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcoc3RhdGVLZXksIHVybFN0YXRlKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIChxdWVyeVN0cmluZykgewogICAgdmFyIHByZXZpb3VzUXVlcnlWYWx1ZXMgPSAoMCwgX3F1ZXJ5U3RyaW5nLnBhcnNlKShxdWVyeVN0cmluZywgewogICAgICBzb3J0OiBmYWxzZQogICAgfSk7CgogICAgaWYgKHVybFN0YXRlID09IG51bGwgfHwgdHlwZW9mIHVybFN0YXRlID09PSAnc3RyaW5nJyAmJiB1cmxTdGF0ZSA9PT0gJycpIHsKICAgICAgZGVsZXRlIHByZXZpb3VzUXVlcnlWYWx1ZXNbc3RhdGVLZXldOwogICAgICByZXR1cm4gKDAsIF9xdWVyeVN0cmluZy5zdHJpbmdpZnkpKF9wdWJsaWMudXJsLmVuY29kZVF1ZXJ5KHByZXZpb3VzUXVlcnlWYWx1ZXMpLCB7CiAgICAgICAgc29ydDogZmFsc2UsCiAgICAgICAgZW5jb2RlOiBmYWxzZQogICAgICB9KTsKICAgIH0gLy8g4LKgX+CyoCBDb2RlIHdhcyBjb3BpZWQgZnJvbSB4LXBhY2svbGVnYWN5L3BsdWdpbnMvaW5mcmEvcHVibGljL3V0aWxzL3VybF9zdGF0ZS50c3gg4LKgX+CyoAogICAgLy8gUmVtb3ZlIHRoaXMgaWYgdGhlc2UgdXRpbGl0aWVzIGFyZSBwcm9tb3RlZCB0byBraWJhbmEgY29yZQoKCiAgICB2YXIgZW5jb2RlZFVybFN0YXRlID0gdHlwZW9mIHVybFN0YXRlICE9PSAndW5kZWZpbmVkJyA/IGVuY29kZVJpc29uVXJsU3RhdGUodXJsU3RhdGUpIDogdW5kZWZpbmVkOwogICAgcmV0dXJuICgwLCBfcXVlcnlTdHJpbmcuc3RyaW5naWZ5KShfcHVibGljLnVybC5lbmNvZGVRdWVyeShfb2JqZWN0U3ByZWFkKHt9LCBwcmV2aW91c1F1ZXJ5VmFsdWVzLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0YXRlS2V5LCBlbmNvZGVkVXJsU3RhdGUpKSksIHsKICAgICAgc29ydDogZmFsc2UsCiAgICAgIGVuY29kZTogZmFsc2UKICAgIH0pOwogIH07Cn07CgpleHBvcnRzLnJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcgPSByZXBsYWNlU3RhdGVLZXlJblF1ZXJ5U3RyaW5nOwoKdmFyIHJlcGxhY2VRdWVyeVN0cmluZ0luTG9jYXRpb24gPSBmdW5jdGlvbiByZXBsYWNlUXVlcnlTdHJpbmdJbkxvY2F0aW9uKGxvY2F0aW9uLCBxdWVyeVN0cmluZykgewogIGlmIChxdWVyeVN0cmluZyA9PT0gZ2V0UXVlcnlTdHJpbmdGcm9tTG9jYXRpb24obG9jYXRpb24uc2VhcmNoKSkgewogICAgcmV0dXJuIGxvY2F0aW9uOwogIH0gZWxzZSB7CiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgbG9jYXRpb24sIHsKICAgICAgc2VhcmNoOiAiPyIuY29uY2F0KHF1ZXJ5U3RyaW5nKQogICAgfSk7CiAgfQp9OwoKZXhwb3J0cy5yZXBsYWNlUXVlcnlTdHJpbmdJbkxvY2F0aW9uID0gcmVwbGFjZVF1ZXJ5U3RyaW5nSW5Mb2NhdGlvbjsKCnZhciBnZXRVcmxUeXBlID0gZnVuY3Rpb24gZ2V0VXJsVHlwZShwYWdlTmFtZSkgewogIGlmIChwYWdlTmFtZSA9PT0gX3R5cGVzLlNpZW1QYWdlTmFtZS5vdmVydmlldykgewogICAgcmV0dXJuICdvdmVydmlldyc7CiAgfSBlbHNlIGlmIChwYWdlTmFtZSA9PT0gX3R5cGVzLlNpZW1QYWdlTmFtZS5ob3N0cykgewogICAgcmV0dXJuICdob3N0JzsKICB9IGVsc2UgaWYgKHBhZ2VOYW1lID09PSBfdHlwZXMuU2llbVBhZ2VOYW1lLm5ldHdvcmspIHsKICAgIHJldHVybiAnbmV0d29yayc7CiAgfSBlbHNlIGlmIChwYWdlTmFtZSA9PT0gX3R5cGVzLlNpZW1QYWdlTmFtZS5kZXRlY3Rpb25zKSB7CiAgICByZXR1cm4gJ2RldGVjdGlvbnMnOwogIH0gZWxzZSBpZiAocGFnZU5hbWUgPT09IF90eXBlcy5TaWVtUGFnZU5hbWUudGltZWxpbmVzKSB7CiAgICByZXR1cm4gJ3RpbWVsaW5lJzsKICB9IGVsc2UgaWYgKHBhZ2VOYW1lID09PSBfdHlwZXMuU2llbVBhZ2VOYW1lLmNhc2UpIHsKICAgIHJldHVybiAnY2FzZSc7CiAgfQoKICByZXR1cm4gJ292ZXJ2aWV3JzsKfTsKCmV4cG9ydHMuZ2V0VXJsVHlwZSA9IGdldFVybFR5cGU7Cgp2YXIgZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZShwYWdlTmFtZSwgZGV0YWlsTmFtZSwgbmF2VGFicykgewogIGlmIChkZXRhaWxOYW1lICE9IG51bGwpIHJldHVybiBkZXRhaWxOYW1lOwogIHJldHVybiBuYXZUYWJzW3BhZ2VOYW1lXSAhPSBudWxsID8gbmF2VGFic1twYWdlTmFtZV0ubmFtZSA6ICcnOwp9OwoKZXhwb3J0cy5nZXRUaXRsZSA9IGdldFRpdGxlOwoKdmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkgewogIHZhciBnZXRJbnB1dHNTZWxlY3RvciA9IF9zdG9yZS5pbnB1dHNTZWxlY3RvcnMuaW5wdXRzU2VsZWN0b3IoKTsKCiAgdmFyIGdldEdsb2JhbFF1ZXJ5U2VsZWN0b3IgPSBfc3RvcmUuaW5wdXRzU2VsZWN0b3JzLmdsb2JhbFF1ZXJ5U2VsZWN0b3IoKTsKCiAgdmFyIGdldEdsb2JhbEZpbHRlcnNRdWVyeVNlbGVjdG9yID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nbG9iYWxGaWx0ZXJzUXVlcnlTZWxlY3RvcigpOwoKICB2YXIgZ2V0R2xvYmFsU2F2ZWRRdWVyeVNlbGVjdG9yID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nbG9iYWxTYXZlZFF1ZXJ5U2VsZWN0b3IoKTsKCiAgdmFyIGdldFRpbWVsaW5lcyA9IF9zdG9yZS50aW1lbGluZVNlbGVjdG9ycy5nZXRUaW1lbGluZXMoKTsKCiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkgewogICAgdmFyIF9zZWFyY2hBdHRyLCBfZ2xvYmFsLCBfdGltZWxpbmUsIF9vYmplY3RTcHJlYWQzOwoKICAgIHZhciBpbnB1dFN0YXRlID0gZ2V0SW5wdXRzU2VsZWN0b3Ioc3RhdGUpOwogICAgdmFyIF9pbnB1dFN0YXRlJGdsb2JhbCA9IGlucHV0U3RhdGUuZ2xvYmFsLAogICAgICAgIGdsb2JhbExpbmtUbyA9IF9pbnB1dFN0YXRlJGdsb2JhbC5saW5rVG8sCiAgICAgICAgZ2xvYmFsVGltZXJhbmdlID0gX2lucHV0U3RhdGUkZ2xvYmFsLnRpbWVyYW5nZTsKICAgIHZhciBfaW5wdXRTdGF0ZSR0aW1lbGluZSA9IGlucHV0U3RhdGUudGltZWxpbmUsCiAgICAgICAgdGltZWxpbmVMaW5rVG8gPSBfaW5wdXRTdGF0ZSR0aW1lbGluZS5saW5rVG8sCiAgICAgICAgdGltZWxpbmVUaW1lcmFuZ2UgPSBfaW5wdXRTdGF0ZSR0aW1lbGluZS50aW1lcmFuZ2U7CiAgICB2YXIgdGltZWxpbmUgPSBPYmplY3QuZW50cmllcyhnZXRUaW1lbGluZXMoc3RhdGUpKS5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgX3JlZikgewogICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICAgIHRpbWVsaW5lSWQgPSBfcmVmMlswXSwKICAgICAgICAgIHRpbWVsaW5lT2JqID0gX3JlZjJbMV07CgogICAgICByZXR1cm4gewogICAgICAgIGlkOiB0aW1lbGluZU9iai5zYXZlZE9iamVjdElkICE9IG51bGwgPyB0aW1lbGluZU9iai5zYXZlZE9iamVjdElkIDogJycsCiAgICAgICAgaXNPcGVuOiB0aW1lbGluZU9iai5zaG93CiAgICAgIH07CiAgICB9LCB7CiAgICAgIGlkOiAnJywKICAgICAgaXNPcGVuOiBmYWxzZQogICAgfSk7CiAgICB2YXIgc2VhcmNoQXR0ciA9IChfc2VhcmNoQXR0ciA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3NlYXJjaEF0dHIsIF9jb25zdGFudHMuQ09OU1RBTlRTLmFwcFF1ZXJ5LCBnZXRHbG9iYWxRdWVyeVNlbGVjdG9yKHN0YXRlKSksIF9kZWZpbmVQcm9wZXJ0eShfc2VhcmNoQXR0ciwgX2NvbnN0YW50cy5DT05TVEFOVFMuZmlsdGVycywgZ2V0R2xvYmFsRmlsdGVyc1F1ZXJ5U2VsZWN0b3Ioc3RhdGUpKSwgX3NlYXJjaEF0dHIpOwogICAgdmFyIHNhdmVkUXVlcnkgPSBnZXRHbG9iYWxTYXZlZFF1ZXJ5U2VsZWN0b3Ioc3RhdGUpOwoKICAgIGlmIChzYXZlZFF1ZXJ5ICE9IG51bGwgJiYgc2F2ZWRRdWVyeS5pZCAhPT0gJycpIHsKICAgICAgc2VhcmNoQXR0ciA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgX2NvbnN0YW50cy5DT05TVEFOVFMuc2F2ZWRRdWVyeSwgc2F2ZWRRdWVyeS5pZCk7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgdXJsU3RhdGU6IF9vYmplY3RTcHJlYWQoe30sIHNlYXJjaEF0dHIsIChfb2JqZWN0U3ByZWFkMyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDMsIF9jb25zdGFudHMuQ09OU1RBTlRTLnRpbWVyYW5nZSwgewogICAgICAgIGdsb2JhbDogKF9nbG9iYWwgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9nbG9iYWwsIF9jb25zdGFudHMuQ09OU1RBTlRTLnRpbWVyYW5nZSwgZ2xvYmFsVGltZXJhbmdlKSwgX2RlZmluZVByb3BlcnR5KF9nbG9iYWwsICJsaW5rVG8iLCBnbG9iYWxMaW5rVG8pLCBfZ2xvYmFsKSwKICAgICAgICB0aW1lbGluZTogKF90aW1lbGluZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3RpbWVsaW5lLCBfY29uc3RhbnRzLkNPTlNUQU5UUy50aW1lcmFuZ2UsIHRpbWVsaW5lVGltZXJhbmdlKSwgX2RlZmluZVByb3BlcnR5KF90aW1lbGluZSwgImxpbmtUbyIsIHRpbWVsaW5lTGlua1RvKSwgX3RpbWVsaW5lKQogICAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9vYmplY3RTcHJlYWQzLCBfY29uc3RhbnRzLkNPTlNUQU5UUy50aW1lbGluZSwgdGltZWxpbmUpLCBfb2JqZWN0U3ByZWFkMykpCiAgICB9OwogIH07CgogIHJldHVybiBtYXBTdGF0ZVRvUHJvcHM7Cn07CgpleHBvcnRzLm1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBtYWtlTWFwU3RhdGVUb1Byb3BzOwoKdmFyIHVwZGF0ZVRpbWVyYW5nZVVybCA9IGZ1bmN0aW9uIHVwZGF0ZVRpbWVyYW5nZVVybCh0aW1lUmFuZ2UsIGlzSW5pdGlhbGl6aW5nKSB7CiAgaWYgKHRpbWVSYW5nZS5nbG9iYWwudGltZXJhbmdlLmtpbmQgPT09ICdyZWxhdGl2ZScpIHsKICAgIHRpbWVSYW5nZS5nbG9iYWwudGltZXJhbmdlLmZyb20gPSAoMCwgX3N1cGVyX2RhdGVfcGlja2VyLmZvcm1hdERhdGUpKHRpbWVSYW5nZS5nbG9iYWwudGltZXJhbmdlLmZyb21TdHIpOwogICAgdGltZVJhbmdlLmdsb2JhbC50aW1lcmFuZ2UudG8gPSAoMCwgX3N1cGVyX2RhdGVfcGlja2VyLmZvcm1hdERhdGUpKHRpbWVSYW5nZS5nbG9iYWwudGltZXJhbmdlLnRvU3RyLCB7CiAgICAgIHJvdW5kVXA6IHRydWUKICAgIH0pOwogIH0KCiAgaWYgKHRpbWVSYW5nZS50aW1lbGluZS50aW1lcmFuZ2Uua2luZCA9PT0gJ3JlbGF0aXZlJyAmJiBpc0luaXRpYWxpemluZykgewogICAgdGltZVJhbmdlLnRpbWVsaW5lLnRpbWVyYW5nZS5mcm9tID0gKDAsIF9zdXBlcl9kYXRlX3BpY2tlci5mb3JtYXREYXRlKSh0aW1lUmFuZ2UudGltZWxpbmUudGltZXJhbmdlLmZyb21TdHIpOwogICAgdGltZVJhbmdlLnRpbWVsaW5lLnRpbWVyYW5nZS50byA9ICgwLCBfc3VwZXJfZGF0ZV9waWNrZXIuZm9ybWF0RGF0ZSkodGltZVJhbmdlLnRpbWVsaW5lLnRpbWVyYW5nZS50b1N0ciwgewogICAgICByb3VuZFVwOiB0cnVlCiAgICB9KTsKICB9CgogIHJldHVybiB0aW1lUmFuZ2U7Cn07CgpleHBvcnRzLnVwZGF0ZVRpbWVyYW5nZVVybCA9IHVwZGF0ZVRpbWVyYW5nZVVybDsKCnZhciB1cGRhdGVVcmxTdGF0ZVN0cmluZyA9IGZ1bmN0aW9uIHVwZGF0ZVVybFN0YXRlU3RyaW5nKF9yZWYzKSB7CiAgdmFyIGlzSW5pdGlhbGl6aW5nID0gX3JlZjMuaXNJbml0aWFsaXppbmcsCiAgICAgIGhpc3RvcnkgPSBfcmVmMy5oaXN0b3J5LAogICAgICBuZXdVcmxTdGF0ZVN0cmluZyA9IF9yZWYzLm5ld1VybFN0YXRlU3RyaW5nLAogICAgICBwYXRoTmFtZSA9IF9yZWYzLnBhdGhOYW1lLAogICAgICBzZWFyY2ggPSBfcmVmMy5zZWFyY2gsCiAgICAgIHVwZGF0ZVRpbWVyYW5nZSA9IF9yZWYzLnVwZGF0ZVRpbWVyYW5nZSwKICAgICAgdXJsS2V5ID0gX3JlZjMudXJsS2V5OwoKICBpZiAodXJsS2V5ID09PSBfY29uc3RhbnRzLkNPTlNUQU5UUy5hcHBRdWVyeSkgewogICAgdmFyIHF1ZXJ5U3RhdGUgPSBkZWNvZGVSaXNvblVybFN0YXRlKG5ld1VybFN0YXRlU3RyaW5nKTsKCiAgICBpZiAocXVlcnlTdGF0ZSAhPSBudWxsICYmIHF1ZXJ5U3RhdGUucXVlcnkgPT09ICcnKSB7CiAgICAgIHJldHVybiByZXBsYWNlU3RhdGVJbkxvY2F0aW9uKHsKICAgICAgICBoaXN0b3J5OiBoaXN0b3J5LAogICAgICAgIHBhdGhOYW1lOiBwYXRoTmFtZSwKICAgICAgICBzZWFyY2g6IHNlYXJjaCwKICAgICAgICB1cmxTdGF0ZVRvUmVwbGFjZTogJycsCiAgICAgICAgdXJsU3RhdGVLZXk6IHVybEtleQogICAgICB9KTsKICAgIH0KICB9IGVsc2UgaWYgKHVybEtleSA9PT0gX2NvbnN0YW50cy5DT05TVEFOVFMudGltZXJhbmdlICYmIHVwZGF0ZVRpbWVyYW5nZSkgewogICAgdmFyIF9xdWVyeVN0YXRlID0gZGVjb2RlUmlzb25VcmxTdGF0ZShuZXdVcmxTdGF0ZVN0cmluZyk7CgogICAgaWYgKF9xdWVyeVN0YXRlICE9IG51bGwgJiYgX3F1ZXJ5U3RhdGUuZ2xvYmFsICE9IG51bGwpIHsKICAgICAgcmV0dXJuIHJlcGxhY2VTdGF0ZUluTG9jYXRpb24oewogICAgICAgIGhpc3Rvcnk6IGhpc3RvcnksCiAgICAgICAgcGF0aE5hbWU6IHBhdGhOYW1lLAogICAgICAgIHNlYXJjaDogc2VhcmNoLAogICAgICAgIHVybFN0YXRlVG9SZXBsYWNlOiB1cGRhdGVUaW1lcmFuZ2VVcmwoX3F1ZXJ5U3RhdGUsIGlzSW5pdGlhbGl6aW5nKSwKICAgICAgICB1cmxTdGF0ZUtleTogdXJsS2V5CiAgICAgIH0pOwogICAgfQogIH0gZWxzZSBpZiAodXJsS2V5ID09PSBfY29uc3RhbnRzLkNPTlNUQU5UUy5maWx0ZXJzKSB7CiAgICB2YXIgX3F1ZXJ5U3RhdGUyID0gZGVjb2RlUmlzb25VcmxTdGF0ZShuZXdVcmxTdGF0ZVN0cmluZyk7CgogICAgaWYgKCgwLCBfZnAuaXNFbXB0eSkoX3F1ZXJ5U3RhdGUyKSkgewogICAgICByZXR1cm4gcmVwbGFjZVN0YXRlSW5Mb2NhdGlvbih7CiAgICAgICAgaGlzdG9yeTogaGlzdG9yeSwKICAgICAgICBwYXRoTmFtZTogcGF0aE5hbWUsCiAgICAgICAgc2VhcmNoOiBzZWFyY2gsCiAgICAgICAgdXJsU3RhdGVUb1JlcGxhY2U6ICcnLAogICAgICAgIHVybFN0YXRlS2V5OiB1cmxLZXkKICAgICAgfSk7CiAgICB9CiAgfSBlbHNlIGlmICh1cmxLZXkgPT09IF9jb25zdGFudHMuQ09OU1RBTlRTLnRpbWVsaW5lKSB7CiAgICB2YXIgX3F1ZXJ5U3RhdGUzID0gZGVjb2RlUmlzb25VcmxTdGF0ZShuZXdVcmxTdGF0ZVN0cmluZyk7CgogICAgaWYgKF9xdWVyeVN0YXRlMyAhPSBudWxsICYmIF9xdWVyeVN0YXRlMy5pZCA9PT0gJycpIHsKICAgICAgcmV0dXJuIHJlcGxhY2VTdGF0ZUluTG9jYXRpb24oewogICAgICAgIGhpc3Rvcnk6IGhpc3RvcnksCiAgICAgICAgcGF0aE5hbWU6IHBhdGhOYW1lLAogICAgICAgIHNlYXJjaDogc2VhcmNoLAogICAgICAgIHVybFN0YXRlVG9SZXBsYWNlOiAnJywKICAgICAgICB1cmxTdGF0ZUtleTogdXJsS2V5CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHNlYXJjaDsKfTsKCmV4cG9ydHMudXBkYXRlVXJsU3RhdGVTdHJpbmcgPSB1cGRhdGVVcmxTdGF0ZVN0cmluZzsKCnZhciByZXBsYWNlU3RhdGVJbkxvY2F0aW9uID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlSW5Mb2NhdGlvbihfcmVmNCkgewogIHZhciBoaXN0b3J5ID0gX3JlZjQuaGlzdG9yeSwKICAgICAgdXJsU3RhdGVUb1JlcGxhY2UgPSBfcmVmNC51cmxTdGF0ZVRvUmVwbGFjZSwKICAgICAgdXJsU3RhdGVLZXkgPSBfcmVmNC51cmxTdGF0ZUtleSwKICAgICAgcGF0aE5hbWUgPSBfcmVmNC5wYXRoTmFtZSwKICAgICAgc2VhcmNoID0gX3JlZjQuc2VhcmNoOwogIHZhciBuZXdMb2NhdGlvbiA9IHJlcGxhY2VRdWVyeVN0cmluZ0luTG9jYXRpb24oewogICAgaGFzaDogJycsCiAgICBwYXRobmFtZTogcGF0aE5hbWUsCiAgICBzZWFyY2g6IHNlYXJjaCwKICAgIHN0YXRlOiAnJwogIH0sIHJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcodXJsU3RhdGVLZXksIHVybFN0YXRlVG9SZXBsYWNlKShnZXRRdWVyeVN0cmluZ0Zyb21Mb2NhdGlvbihzZWFyY2gpKSk7CgogIGlmIChoaXN0b3J5KSB7CiAgICBoaXN0b3J5LnJlcGxhY2UobmV3TG9jYXRpb24pOwogIH0KCiAgcmV0dXJuIG5ld0xvY2F0aW9uLnNlYXJjaDsKfTsKCmV4cG9ydHMucmVwbGFjZVN0YXRlSW5Mb2NhdGlvbiA9IHJlcGxhY2VTdGF0ZUluTG9jYXRpb247"},null]}