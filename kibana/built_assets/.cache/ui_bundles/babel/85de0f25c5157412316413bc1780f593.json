{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/dashboard/np_ready/dashboard_empty_screen.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/dashboard/np_ready/dashboard_empty_screen.js","mtime":1589249549658},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkRhc2hib2FyZEVtcHR5U2NyZWVuID0gRGFzaGJvYXJkRW1wdHlTY3JlZW47Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIGNvbnN0YW50cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vZGFzaGJvYXJkX2VtcHR5X3NjcmVlbl9jb25zdGFudHMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCgoKZnVuY3Rpb24gRGFzaGJvYXJkRW1wdHlTY3JlZW4oX3JlZikgewogIHZhciBzaG93TGlua1RvVmlzdWFsaXplID0gX3JlZi5zaG93TGlua1RvVmlzdWFsaXplLAogICAgICBvbkxpbmtDbGljayA9IF9yZWYub25MaW5rQ2xpY2ssCiAgICAgIG9uVmlzdWFsaXplQ2xpY2sgPSBfcmVmLm9uVmlzdWFsaXplQ2xpY2ssCiAgICAgIHVpU2V0dGluZ3MgPSBfcmVmLnVpU2V0dGluZ3MsCiAgICAgIGh0dHAgPSBfcmVmLmh0dHAsCiAgICAgIGlzUmVhZG9ubHlNb2RlID0gX3JlZi5pc1JlYWRvbmx5TW9kZTsKICB2YXIgSVNfREFSS19USEVNRSA9IHVpU2V0dGluZ3MuZ2V0KCd0aGVtZTpkYXJrTW9kZScpOwogIHZhciBlbXB0eVN0YXRlR3JhcGhpY1VSTCA9IElTX0RBUktfVEhFTUUgPyAnL3BsdWdpbnMva2liYW5hL2hvbWUvYXNzZXRzL3dlbGNvbWVfZ3JhcGhpY19kYXJrXzJ4LnBuZycgOiAnL3BsdWdpbnMva2liYW5hL2hvbWUvYXNzZXRzL3dlbGNvbWVfZ3JhcGhpY19saWdodF8yeC5wbmcnOwoKICB2YXIgbGlua1RvVmlzdWFsaXplUGFyYWdyYXBoID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJsaW5rVG9WaXN1YWxpemVQYXJhZ3JhcGgiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbiwgewogICAgaWNvblNpZGU6ICJyaWdodCIsCiAgICBzaXplOiAicyIsCiAgICBmaWxsOiB0cnVlLAogICAgaWNvblR5cGU6ICJhcnJvd0Rvd24iLAogICAgb25DbGljazogb25WaXN1YWxpemVDbGljaywKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhZGRWaXN1YWxpemF0aW9uQnV0dG9uIiwKICAgICJhcmlhLWxhYmVsIjogY29uc3RhbnRzLmNyZWF0ZU5ld1Zpc3VhbGl6YXRpb25CdXR0b25BcmlhTGFiZWwKICB9LCBjb25zdGFudHMuY3JlYXRlTmV3VmlzdWFsaXphdGlvbkJ1dHRvbikpOwoKICB2YXIgcGFyYWdyYXBoID0gZnVuY3Rpb24gcGFyYWdyYXBoKGRlc2NyaXB0aW9uMSwgZGVzY3JpcHRpb24yLCBsaW5rVGV4dCwgYXJpYUxhYmVsLCBkYXRhVGVzdFN1YmopIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAibSIsCiAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBkZXNjcmlwdGlvbjEsIGRlc2NyaXB0aW9uMSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgIlx4QTAiKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgb25DbGljazogb25MaW5rQ2xpY2ssCiAgICAgICJhcmlhLWxhYmVsIjogYXJpYUxhYmVsLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiBkYXRhVGVzdFN1YmogfHwgJycKICAgIH0sIGxpbmtUZXh0KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsICJceEEwIiksIGRlc2NyaXB0aW9uMikpOwogIH07CgogIHZhciBlbnRlckVkaXRNb2RlUGFyYWdyYXBoID0gcGFyYWdyYXBoKGNvbnN0YW50cy5ob3dUb1N0YXJ0V29ya2luZ09uTmV3RGFzaGJvYXJkRGVzY3JpcHRpb24xLCBjb25zdGFudHMuaG93VG9TdGFydFdvcmtpbmdPbk5ld0Rhc2hib2FyZERlc2NyaXB0aW9uMiwgY29uc3RhbnRzLmhvd1RvU3RhcnRXb3JraW5nT25OZXdEYXNoYm9hcmRFZGl0TGlua1RleHQsIGNvbnN0YW50cy5ob3dUb1N0YXJ0V29ya2luZ09uTmV3RGFzaGJvYXJkRWRpdExpbmtBcmlhTGFiZWwpOwogIHZhciBlbnRlclZpZXdNb2RlUGFyYWdyYXBoID0gcGFyYWdyYXBoKG51bGwsIGNvbnN0YW50cy5hZGROZXdWaXN1YWxpemF0aW9uRGVzY3JpcHRpb24sIGNvbnN0YW50cy5hZGRFeGlzdGluZ1Zpc3VhbGl6YXRpb25MaW5rVGV4dCwgY29uc3RhbnRzLmFkZEV4aXN0aW5nVmlzdWFsaXphdGlvbkxpbmtBcmlhTGFiZWwpOwoKICB2YXIgcGFnZSA9IGZ1bmN0aW9uIHBhZ2UobWFpblRleHQsIHNob3dBZGRpdGlvbmFsUGFyYWdyYXBoLCBhZGRpdGlvbmFsVGV4dCkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlLCB7CiAgICAgIGNsYXNzTmFtZTogImRzaFN0YXJ0U2NyZWVuIiwKICAgICAgcmVzdHJpY3RXaWR0aDogIjUwMHB4IgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VCb2R5LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUNvbnRlbnQsIHsKICAgICAgdmVydGljYWxQb3NpdGlvbjogImNlbnRlciIsCiAgICAgIGhvcml6b250YWxQb3NpdGlvbjogImNlbnRlciIsCiAgICAgIHBhZGRpbmdTaXplOiAibm9uZSIsCiAgICAgIGNsYXNzTmFtZTogImRzaFN0YXJ0U2NyZWVuX19wYWdlQ29udGVudCIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlJbWFnZSwgewogICAgICB1cmw6IGh0dHAuYmFzZVBhdGgucHJlcGVuZChlbXB0eVN0YXRlR3JhcGhpY1VSTCksCiAgICAgIGFsdDogIiIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAibSIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCB7CiAgICAgIHN0eWxlOiB7CiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnCiAgICAgIH0KICAgIH0sIG1haW5UZXh0KSksIGFkZGl0aW9uYWxUZXh0ID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgc2l6ZTogIm0iLAogICAgICBjb2xvcjogInN1YmR1ZWQiCiAgICB9LCBhZGRpdGlvbmFsVGV4dCkgOiBudWxsLCBzaG93QWRkaXRpb25hbFBhcmFncmFwaCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogIm0iCiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICBjbGFzc05hbWU6ICJkc2hTdGFydFNjcmVlbl9fcGFuZWxEZXNjIgogICAgfSwgZW50ZXJFZGl0TW9kZVBhcmFncmFwaCkpIDogbnVsbCkpKTsKICB9OwoKICB2YXIgcmVhZG9ubHlNb2RlID0gcGFnZShjb25zdGFudHMuZW1wdHlEYXNoYm9hcmRUaXRsZSwgZmFsc2UsIGNvbnN0YW50cy5lbXB0eURhc2hib2FyZEFkZGl0aW9uYWxQcml2aWxlZ2UpOwogIHZhciB2aWV3TW9kZSA9IHBhZ2UoY29uc3RhbnRzLmZpbGxEYXNoYm9hcmRUaXRsZSwgdHJ1ZSk7CgogIHZhciBlZGl0TW9kZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJlbXB0eURhc2hib2FyZFdpZGdldCIsCiAgICBjbGFzc05hbWU6ICJkc2hFbXB0eVdpZGdldCIKICB9LCBlbnRlclZpZXdNb2RlUGFyYWdyYXBoLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibCIKICB9KSwgbGlua1RvVmlzdWFsaXplUGFyYWdyYXBoKTsKCiAgdmFyIGFjdGlvbmFibGVNb2RlID0gc2hvd0xpbmtUb1Zpc3VhbGl6ZSA/IGVkaXRNb2RlIDogdmlld01vZGU7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5JMThuUHJvdmlkZXIsIG51bGwsIGlzUmVhZG9ubHlNb2RlID8gcmVhZG9ubHlNb2RlIDogYWN0aW9uYWJsZU1vZGUpOwp9"},null]}