{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/ui/search_bar/lib/use_saved_query.js","dependencies":[{"path":"src/plugins/data/public/ui/search_bar/lib/use_saved_query.js","mtime":1589249550695},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZVNhdmVkUXVlcnkgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gcmVxdWlyZSgicmVhY3QiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9wb3B1bGF0ZV9zdGF0ZV9mcm9tX3NhdmVkX3F1ZXJ5ID0gcmVxdWlyZSgiLi9wb3B1bGF0ZV9zdGF0ZV9mcm9tX3NhdmVkX3F1ZXJ5Iik7Cgp2YXIgX2NsZWFyX3NhdmVkX3F1ZXJ5ID0gcmVxdWlyZSgiLi9jbGVhcl9zYXZlZF9xdWVyeSIpOwoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKdmFyIHVzZVNhdmVkUXVlcnkgPSBmdW5jdGlvbiB1c2VTYXZlZFF1ZXJ5KHByb3BzKSB7CiAgLy8gSGFuZGxlIHNhdmVkIHF1ZXJpZXMKICB2YXIgZGVmYXVsdExhbmd1YWdlID0gcHJvcHMuZGVmYXVsdExhbmd1YWdlOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHNhdmVkUXVlcnkgPSBfdXNlU3RhdGUyWzBdLAogICAgICBfc2V0U2F2ZWRRdWVyeSA9IF91c2VTdGF0ZTJbMV07IC8vIEVmZmVjdCBpcyB1c2VkIHRvIGNvbnZlcnQgYSBzYXZlZCBxdWVyeSBpZCBpbnRvIGFuIG9iamVjdAoKCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmZXRjaFNhdmVkUXVlcnkgPQogICAgLyojX19QVVJFX18qLwogICAgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc2F2ZWRRdWVyeUlkKSB7CiAgICAgICAgdmFyIG5ld1NhdmVkUXVlcnk7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5xdWVyeVNlcnZpY2Uuc2F2ZWRRdWVyaWVzLmdldFNhdmVkUXVlcnkoc2F2ZWRRdWVyeUlkKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgbmV3U2F2ZWRRdWVyeSA9IF9jb250ZXh0LnNlbnQ7IC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIHNhdmVkIHF1ZXJ5IHRvIHRoZSBtb3N0IHJlY2VudCBvbmUKCiAgICAgICAgICAgICAgICBpZiAobmV3U2F2ZWRRdWVyeSAmJiBuZXdTYXZlZFF1ZXJ5LmlkID09PSBzYXZlZFF1ZXJ5SWQpIHsKICAgICAgICAgICAgICAgICAgX3NldFNhdmVkUXVlcnkobmV3U2F2ZWRRdWVyeSk7CgogICAgICAgICAgICAgICAgICAoMCwgX3BvcHVsYXRlX3N0YXRlX2Zyb21fc2F2ZWRfcXVlcnkucG9wdWxhdGVTdGF0ZUZyb21TYXZlZFF1ZXJ5KShwcm9wcy5xdWVyeVNlcnZpY2UsIHByb3BzLnNldFF1ZXJ5LCBuZXdTYXZlZFF1ZXJ5KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOyAvLyBDbGVhciBzYXZlZCBxdWVyeQoKICAgICAgICAgICAgICAgIF9zZXRTYXZlZFF1ZXJ5KHVuZGVmaW5lZCk7CgogICAgICAgICAgICAgICAgKDAsIF9jbGVhcl9zYXZlZF9xdWVyeS5jbGVhclN0YXRlRnJvbVNhdmVkUXVlcnkpKHByb3BzLnF1ZXJ5U2VydmljZSwgcHJvcHMuc2V0UXVlcnksIGRlZmF1bHRMYW5ndWFnZSk7IC8vIG5vdGlmeSBvZiBzYXZpbmcgZXJyb3IKCiAgICAgICAgICAgICAgICBwcm9wcy5ub3RpZmljYXRpb25zLnRvYXN0cy5hZGRXYXJuaW5nKHsKICAgICAgICAgICAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdkYXRhLnNlYXJjaC51bmFibGVUb0dldFNhdmVkUXVlcnlUb2FzdFRpdGxlJywgewogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVW5hYmxlIHRvIGxvYWQgc2F2ZWQgcXVlcnkge3NhdmVkUXVlcnlJZH0nLAogICAgICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICAgICAgc2F2ZWRRdWVyeUlkOiBzYXZlZFF1ZXJ5SWQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICB0ZXh0OiAiIi5jb25jYXQoX2NvbnRleHQudDAubWVzc2FnZSkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA3XV0pOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gZmV0Y2hTYXZlZFF1ZXJ5KF94KSB7CiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICBpZiAocHJvcHMuc2F2ZWRRdWVyeUlkKSBmZXRjaFNhdmVkUXVlcnkocHJvcHMuc2F2ZWRRdWVyeUlkKTtlbHNlIF9zZXRTYXZlZFF1ZXJ5KHVuZGVmaW5lZCk7CiAgfSwgW2RlZmF1bHRMYW5ndWFnZSwgcHJvcHMubm90aWZpY2F0aW9ucy50b2FzdHMsIHByb3BzLnF1ZXJ5U2VydmljZSwgcHJvcHMucXVlcnlTZXJ2aWNlLnNhdmVkUXVlcmllcywgcHJvcHMuc2F2ZWRRdWVyeUlkLCBwcm9wcy5zZXRRdWVyeV0pOwogIHJldHVybiB7CiAgICBzYXZlZFF1ZXJ5OiBzYXZlZFF1ZXJ5LAogICAgc2V0U2F2ZWRRdWVyeTogZnVuY3Rpb24gc2V0U2F2ZWRRdWVyeShxKSB7CiAgICAgIF9zZXRTYXZlZFF1ZXJ5KHEpOwoKICAgICAgKDAsIF9wb3B1bGF0ZV9zdGF0ZV9mcm9tX3NhdmVkX3F1ZXJ5LnBvcHVsYXRlU3RhdGVGcm9tU2F2ZWRRdWVyeSkocHJvcHMucXVlcnlTZXJ2aWNlLCBwcm9wcy5zZXRRdWVyeSwgcSk7CiAgICB9LAogICAgY2xlYXJTYXZlZFF1ZXJ5OiBmdW5jdGlvbiBjbGVhclNhdmVkUXVlcnkoKSB7CiAgICAgIF9zZXRTYXZlZFF1ZXJ5KHVuZGVmaW5lZCk7CgogICAgICAoMCwgX2NsZWFyX3NhdmVkX3F1ZXJ5LmNsZWFyU3RhdGVGcm9tU2F2ZWRRdWVyeSkocHJvcHMucXVlcnlTZXJ2aWNlLCBwcm9wcy5zZXRRdWVyeSwgZGVmYXVsdExhbmd1YWdlKTsKICAgIH0KICB9Owp9OwoKZXhwb3J0cy51c2VTYXZlZFF1ZXJ5ID0gdXNlU2F2ZWRRdWVyeTs="},null]}