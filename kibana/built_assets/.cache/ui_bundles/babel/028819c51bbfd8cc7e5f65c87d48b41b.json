{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/i18n/ui.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/i18n/ui.js","mtime":1589249551895},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ViewStrings = exports.TransformStrings = exports.ModelStrings = exports.DataSourceStrings = exports.ArgumentStrings = void 0;

var _i18n = require("@kbn/i18n");

var _constants = require("./constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */


var ArgumentStrings = {
  AxisConfig: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfigTitle', {
        defaultMessage: 'Axis config'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfigLabel', {
        defaultMessage: 'Visualization axis configuration'
      });
    },
    getDisabledText: function getDisabledText() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfigDisabledText', {
        defaultMessage: 'Switch on to view axis settings'
      });
    },
    getPositionBottom: function getPositionBottom() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfig.position.options.bottomDropDown', {
        defaultMessage: 'bottom'
      });
    },
    getPositionLabel: function getPositionLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfig.positionLabel', {
        defaultMessage: 'Position'
      });
    },
    getPositionLeft: function getPositionLeft() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfig.position.options.leftDropDown', {
        defaultMessage: 'left'
      });
    },
    getPositionRight: function getPositionRight() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfig.position.options.rightDropDown', {
        defaultMessage: 'right'
      });
    },
    getPositionTop: function getPositionTop() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.axisConfig.position.options.topDropDown', {
        defaultMessage: 'top'
      });
    }
  },
  DataColumn: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumnTitle', {
        defaultMessage: 'Column'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumnLabel', {
        defaultMessage: 'Select the data column'
      });
    },
    getOptionAverage: function getOptionAverage() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.averageDropDown', {
        defaultMessage: 'Average'
      });
    },
    getOptionCount: function getOptionCount() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.countDropDown', {
        defaultMessage: 'Count'
      });
    },
    getOptionFirst: function getOptionFirst() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.firstDropDown', {
        defaultMessage: 'First'
      });
    },
    getOptionLast: function getOptionLast() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.lastDropDown', {
        defaultMessage: 'Last'
      });
    },
    getOptionMax: function getOptionMax() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.maxDropDown', {
        defaultMessage: 'Max'
      });
    },
    getOptionMedian: function getOptionMedian() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.medianDropDown', {
        defaultMessage: 'Median'
      });
    },
    getOptionMin: function getOptionMin() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.minDropDown', {
        defaultMessage: 'Min'
      });
    },
    getOptionSum: function getOptionSum() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.sumDropDown', {
        defaultMessage: 'Sum'
      });
    },
    getOptionUnique: function getOptionUnique() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.uniqueDropDown', {
        defaultMessage: 'Unique'
      });
    },
    getOptionValue: function getOptionValue() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dataColumn.options.valueDropDown', {
        defaultMessage: 'Value'
      });
    }
  },
  DateFormat: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dateFormatTitle', {
        defaultMessage: 'Date Format'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.dateFormatLabel', {
        defaultMessage: 'Select or enter a {momentJS} format',
        values: {
          momentJS: _constants.MOMENTJS
        }
      });
    }
  },
  FilterGroup: {
    getCreateNewGroup: function getCreateNewGroup() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.filterGroup.createNewGroupLinkText', {
        defaultMessage: 'Create new group'
      });
    },
    getButtonSet: function getButtonSet() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.filterGroup.setValue', {
        defaultMessage: 'Set'
      });
    },
    getButtonCancel: function getButtonCancel() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.filterGroup.cancelValue', {
        defaultMessage: 'Cancel'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.filterGroupTitle', {
        defaultMessage: 'Filter Group'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.filterGroupLabel', {
        defaultMessage: 'Create or select a filter group'
      });
    }
  },
  ImageUpload: {
    getAssetUrlType: function getAssetUrlType() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.urlTypes.assetDropDown', {
        defaultMessage: 'Asset'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUploadTitle', {
        defaultMessage: 'Image upload'
      });
    },
    getFileUploadPrompt: function getFileUploadPrompt() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.fileUploadPromptLabel', {
        defaultMessage: 'Select or drag and drop an image'
      });
    },
    getFileUrlType: function getFileUrlType() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.urlTypes.fileDropDown', {
        defaultMessage: 'Import'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUploadLabel', {
        defaultMessage: 'Select or upload an image'
      });
    },
    getImageUploading: function getImageUploading() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.imageUploadingLabel', {
        defaultMessage: 'Image uploading'
      });
    },
    getLinkUrlType: function getLinkUrlType() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.urlTypes.linkDropDown', {
        defaultMessage: 'Link'
      });
    },
    getUrlFieldPlaceholder: function getUrlFieldPlaceholder() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.imageUpload.urlFieldPlaceholder', {
        defaultMessage: 'Image {url}',
        values: {
          url: _constants.URL
        }
      });
    }
  },
  Number: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberTitle', {
        defaultMessage: 'Number'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberLabel', {
        defaultMessage: 'Input a number'
      });
    }
  },
  NumberFormat: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormatTitle', {
        defaultMessage: 'Number Format'
      });
    },
    getFormatBytes: function getFormatBytes() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormat.format.bytesDropDown', {
        defaultMessage: 'Bytes'
      });
    },
    getFormatCurrency: function getFormatCurrency() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormat.format.currencyDropDown', {
        defaultMessage: 'Currency'
      });
    },
    getFormatDuration: function getFormatDuration() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormat.format.durationDropDown', {
        defaultMessage: 'Duration'
      });
    },
    getFormatNumber: function getFormatNumber() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormat.format.numberDropDown', {
        defaultMessage: 'Number'
      });
    },
    getFormatPercent: function getFormatPercent() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormat.format.percentDropDown', {
        defaultMessage: 'Percent'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.numberFormatLabel', {
        defaultMessage: 'Select or enter a valid {numeralJS} format',
        values: {
          numeralJS: _constants.NUMERALJS
        }
      });
    }
  },
  Palette: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.paletteTitle', {
        defaultMessage: 'Color palette'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.paletteLabel', {
        defaultMessage: 'Choose a color palette'
      });
    }
  },
  Percentage: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.percentageTitle', {
        defaultMessage: 'Percentage'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.percentageLabel', {
        defaultMessage: 'Slider for percentage '
      });
    }
  },
  Range: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.rangeTitle', {
        defaultMessage: 'Range'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.rangeLabel', {
        defaultMessage: 'Slider for values within a range'
      });
    }
  },
  Select: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.selectTitle', {
        defaultMessage: 'Select'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.selectLabel', {
        defaultMessage: 'Select from multiple options in a drop down'
      });
    }
  },
  Shape: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.shapeTitle', {
        defaultMessage: 'Shape'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.shapeLabel', {
        defaultMessage: 'Change the shape of the current element'
      });
    }
  },
  String: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.stringTitle', {
        defaultMessage: 'String'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.stringLabel', {
        defaultMessage: 'Input short strings'
      });
    }
  },
  Textarea: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.textareaTitle', {
        defaultMessage: 'Textarea'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.textareaLabel', {
        defaultMessage: 'Input long strings'
      });
    }
  },
  Toggle: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.toggleTitle', {
        defaultMessage: 'Toggle'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.arguments.toggleLabel', {
        defaultMessage: 'A true/false toggle switch'
      });
    }
  }
};
exports.ArgumentStrings = ArgumentStrings;
var DataSourceStrings = {
  // Demo data source
  DemoData: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.demoDataTitle', {
        defaultMessage: 'Demo data'
      });
    },
    getHeading: function getHeading() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.demoData.headingTitle', {
        defaultMessage: 'This element is using demo data'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.demoDataLabel', {
        defaultMessage: 'Sample data set used to populate default elements'
      });
    },
    getDescription: function getDescription() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.demoDataDescription', {
        defaultMessage: 'By default, every {canvas} element is connected to the demo data source. Change the data source, above, to connect your own data.',
        values: {
          canvas: _constants.CANVAS
        }
      });
    }
  },
  // Elasticsearch documents datasource
  ESDocs: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocsTitle', {
        defaultMessage: '{elasticsearch} documents',
        values: {
          elasticsearch: _constants.ELASTICSEARCH
        }
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocsLabel', {
        defaultMessage: 'Pull data directly from {elasticsearch} without the use of aggregations',
        values: {
          elasticsearch: _constants.ELASTICSEARCH
        }
      });
    },
    getWarningTitle: function getWarningTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.warningTitle', {
        defaultMessage: 'Query with caution'
      });
    },
    getWarning: function getWarning() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.warningDescription', {
        defaultMessage: "\n        Using this data source with larger data sets can result in slower performance. Use this source only when you need exact values."
      });
    },
    getIndexTitle: function getIndexTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.indexTitle', {
        defaultMessage: 'Index'
      });
    },
    getIndexLabel: function getIndexLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.indexLabel', {
        defaultMessage: 'Enter an index name or select an index pattern'
      });
    },
    getQueryTitle: function getQueryTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.queryTitle', {
        defaultMessage: 'Query'
      });
    },
    getQueryLabel: function getQueryLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.queryLabel', {
        defaultMessage: '{lucene} query string syntax',
        values: {
          lucene: _constants.LUCENE
        }
      });
    },
    getSortFieldTitle: function getSortFieldTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.sortFieldTitle', {
        defaultMessage: 'Sort field'
      });
    },
    getSortFieldLabel: function getSortFieldLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.sortFieldLabel', {
        defaultMessage: 'Document sort field'
      });
    },
    getSortOrderTitle: function getSortOrderTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.sortOrderTitle', {
        defaultMessage: 'Sort order'
      });
    },
    getSortOrderLabel: function getSortOrderLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.sortOrderLabel', {
        defaultMessage: 'Document sort order'
      });
    },
    getFieldsTitle: function getFieldsTitle() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.fieldsTitle', {
        defaultMessage: 'Fields'
      });
    },
    getFieldsLabel: function getFieldsLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.fieldsLabel', {
        defaultMessage: 'Scripted fields are unavailable'
      });
    },
    getFieldsWarningLabel: function getFieldsWarningLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.fieldsWarningLabel', {
        defaultMessage: 'This datasource performs best with 10 or fewer fields'
      });
    },
    getAscendingOption: function getAscendingOption() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.ascendingDropDown', {
        defaultMessage: 'Ascending'
      });
    },
    getDescendingOption: function getDescendingOption() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.esdocs.descendingDropDown', {
        defaultMessage: 'Descending'
      });
    }
  },
  // Elasticsearch SQL data source
  Essql: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.essqlTitle', {
        defaultMessage: '{elasticsearch} {sql}',
        values: {
          elasticsearch: _constants.ELASTICSEARCH,
          sql: _constants.SQL
        }
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.essqlLabel', {
        defaultMessage: 'Write an {elasticsearch} {sql} query to retrieve data',
        values: {
          elasticsearch: _constants.ELASTICSEARCH,
          sql: _constants.SQL
        }
      });
    },
    getLabel: function getLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.essql.queryTitle', {
        defaultMessage: 'Query'
      });
    },
    getLabelAppend: function getLabelAppend() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.essql.queryTitleAppend', {
        defaultMessage: 'Learn {elasticsearchShort} {sql} query syntax',
        values: {
          elasticsearchShort: _constants.ELASTICSEARCH_SHORT,
          sql: _constants.SQL
        }
      });
    }
  },
  // Timelion datasource
  Timelion: {
    getAbout: function getAbout() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.aboutDetail', {
        defaultMessage: 'Use {timelion} syntax in {canvas} to retrieve timeseries data',
        values: {
          timelion: _constants.TIMELION,
          canvas: _constants.CANVAS
        }
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelionLabel', {
        defaultMessage: 'Use {timelion} syntax to retrieve timeseries data',
        values: {
          timelion: _constants.TIMELION
        }
      });
    },
    getIntervalHelp: function getIntervalHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.intervalLabel', {
        defaultMessage: 'Use date math like {weeksExample}, {daysExample}, {secondsExample}, or {auto}',
        values: {
          secondsExample: '10s',
          daysExample: '5d',
          weeksExample: '1w',
          auto: 'auto'
        }
      });
    },
    getIntervalLabel: function getIntervalLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.intervalTitle', {
        defaultMessage: 'Interval'
      });
    },
    queryLabel: function queryLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.queryLabel', {
        defaultMessage: '{timelion} Query String syntax',
        values: {
          timelion: _constants.TIMELION
        }
      });
    },
    getQueryLabel: function getQueryLabel() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.queryTitle', {
        defaultMessage: 'Query'
      });
    },
    getTipsHeading: function getTipsHeading() {
      return _i18n.i18n.translate('xpack.canvas.uis.dataSources.timelion.tipsTitle', {
        defaultMessage: 'Tips for using {timelion} in {canvas}',
        values: {
          timelion: _constants.TIMELION,
          canvas: _constants.CANVAS
        }
      });
    }
  }
};
exports.DataSourceStrings = DataSourceStrings;
var ModelStrings = {
  Math: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.mathTitle', {
        defaultMessage: 'Measure'
      });
    },
    getValueDisplayName: function getValueDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.math.args.valueTitle', {
        defaultMessage: 'Value'
      });
    },
    getValueHelp: function getValueHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.math.args.valueLabel', {
        defaultMessage: 'Function and column to use in extracting a value from the datasource'
      });
    }
  },
  PointSeries: {
    getColorDisplayName: function getColorDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.colorTitle', {
        defaultMessage: 'Color'
      });
    },
    getColorHelp: function getColorHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.colorLabel', {
        defaultMessage: 'Determines the color of a mark or series'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeriesTitle', {
        defaultMessage: 'Dimensions & measures'
      });
    },
    getSizeDisplayName: function getSizeDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.sizeTitle', {
        defaultMessage: 'Size'
      });
    },
    getSizeHelp: function getSizeHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.sizeLabel', {
        defaultMessage: 'Determine the size of a mark'
      });
    },
    getTextDisplayName: function getTextDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.textTitle', {
        defaultMessage: 'Text'
      });
    },
    getTextHelp: function getTextHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.textLabel', {
        defaultMessage: 'Set the text to use as, or around, the mark'
      });
    },
    getXAxisDisplayName: function getXAxisDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.xaxisTitle', {
        defaultMessage: 'X-axis'
      });
    },
    getXAxisHelp: function getXAxisHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.xaxisLabel', {
        defaultMessage: 'Data along the horizontal axis. Usually a number, string or date'
      });
    },
    getYaxisDisplayName: function getYaxisDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.yaxisTitle', {
        defaultMessage: 'Y-axis'
      });
    },
    getYaxisHelp: function getYaxisHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.models.pointSeries.args.yaxisLabel', {
        defaultMessage: 'Data along the vertical axis. Usually a number'
      });
    }
  }
};
exports.ModelStrings = ModelStrings;
var TransformStrings = {
  FormatDate: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.formatDateTitle', {
        defaultMessage: 'Date format'
      });
    },
    getFormatDisplayName: function getFormatDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.formatDate.args.formatTitle', {
        defaultMessage: 'Format'
      });
    }
  },
  FormatNumber: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.formatNumberTitle', {
        defaultMessage: 'Number format'
      });
    },
    getFormatDisplayName: function getFormatDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.formatNumber.args.formatTitle', {
        defaultMessage: 'Format'
      });
    }
  },
  RoundDate: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.roundDateTitle', {
        defaultMessage: 'Round date'
      });
    },
    getFormatDisplayName: function getFormatDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.roundDate.args.formatTitle', {
        defaultMessage: 'Format'
      });
    },
    getFormatHelp: function getFormatHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.roundDate.args.formatLabel', {
        defaultMessage: 'Select or enter a {momentJs} format to round the date',
        values: {
          momentJs: _constants.MOMENTJS
        }
      });
    }
  },
  Sort: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.sortTitle', {
        defaultMessage: 'Datatable sorting'
      });
    },
    getReverseDisplayName: function getReverseDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.sort.args.reverseToggleSwitch', {
        defaultMessage: 'Descending'
      });
    },
    getSortFieldDisplayName: function getSortFieldDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.transforms.sort.args.sortFieldTitle', {
        defaultMessage: 'Sort field'
      });
    }
  }
};
exports.TransformStrings = TransformStrings;
var ViewStrings = {
  DropdownControl: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControlTitle', {
        defaultMessage: 'Dropdown filter'
      });
    },
    getFilterDisplayName: function getFilterDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.filterColumnTitle', {
        defaultMessage: 'Filter column'
      });
    },
    getFilterGroupDisplayName: function getFilterGroupDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.filterGroupTitle', {
        defaultMessage: 'Filter group'
      });
    },
    getFilterGroupHelp: function getFilterGroupHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.filterGroupLabel', {
        defaultMessage: "Apply the selected group name to an element's filters function to target this filter"
      });
    },
    getFilterHelp: function getFilterHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.filterColumnLabel', {
        defaultMessage: 'Column to which the value selected from the dropdown is applied'
      });
    },
    getValueDisplayName: function getValueDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.valueColumnTitle', {
        defaultMessage: 'Value column'
      });
    },
    getValueHelp: function getValueHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.dropdownControl.args.valueColumnLabel', {
        defaultMessage: 'Column from which to extract values to make available in the dropdown'
      });
    }
  },
  GetCell: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.getCellTitle', {
        defaultMessage: 'Dropdown filter'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.getCellLabel', {
        defaultMessage: 'Grab the first row and first column'
      });
    }
  },
  Image: {
    getContainMode: function getContainMode() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.image.args.mode.containDropDown', {
        defaultMessage: 'Contain'
      });
    },
    getCoverMode: function getCoverMode() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.image.args.mode.coverDropDown', {
        defaultMessage: 'Cover'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.imageTitle', {
        defaultMessage: 'Image'
      });
    },
    getModeDisplayName: function getModeDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.image.args.modeTitle', {
        defaultMessage: 'Fill mode'
      });
    },
    getModeHelp: function getModeHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.image.args.modeLabel', {
        defaultMessage: 'Note: Stretched fill may not work with vector images'
      });
    },
    getStretchMode: function getStretchMode() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.image.args.mode.stretchDropDown', {
        defaultMessage: 'Stretch'
      });
    }
  },
  Markdown: {
    getContentDisplayName: function getContentDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.markdown.args.contentTitle', {
        defaultMessage: '{markdown} content',
        values: {
          markdown: _constants.MARKDOWN
        }
      });
    },
    getContentHelp: function getContentHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.markdown.args.contentLabel', {
        defaultMessage: '{markdown} formatted text',
        values: {
          markdown: _constants.MARKDOWN
        }
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.markdownTitle', {
        defaultMessage: '{markdown}',
        values: {
          markdown: _constants.MARKDOWN
        }
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.markdownLabel', {
        defaultMessage: 'Generate markup using {markdown}',
        values: {
          markdown: _constants.MARKDOWN
        }
      });
    },
    getOpenLinksInNewTabDisplayName: function getOpenLinksInNewTabDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.openLinksInNewTabTitle', {
        defaultMessage: 'Markdown link settings'
      });
    },
    getOpenLinksInNewTabLabelName: function getOpenLinksInNewTabLabelName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.openLinksInNewTabLabel', {
        defaultMessage: 'Open all links in a new tab'
      });
    },
    getOpenLinksInNewTabHelp: function getOpenLinksInNewTabHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.openLinksInNewTabHelpLabel', {
        defaultMessage: 'Set links to open in new tab'
      });
    }
  },
  Metric: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metricTitle', {
        defaultMessage: 'Metric'
      });
    },
    getNumberDisplayName: function getNumberDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.numberArgTitle', {
        defaultMessage: 'Value'
      });
    },
    getLabelDisplayName: function getLabelDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.labelArgTitle', {
        defaultMessage: 'Label'
      });
    },
    getLabelFontDisplayName: function getLabelFontDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.labelFontTitle', {
        defaultMessage: 'Label text'
      });
    },
    getLabelFontHelp: function getLabelFontHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.labelFontLabel', {
        defaultMessage: 'Fonts, alignment and color'
      });
    },
    getLabelHelp: function getLabelHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.labelArgLabel', {
        defaultMessage: 'Enter a text label for the metric value'
      });
    },
    getMetricFontDisplayName: function getMetricFontDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.metricFontTitle', {
        defaultMessage: 'Metric text'
      });
    },
    getMetricFontHelp: function getMetricFontHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.metricFontLabel', {
        defaultMessage: 'Fonts, alignment and color'
      });
    },
    getMetricFormatDisplayName: function getMetricFormatDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.metricFormatTitle', {
        defaultMessage: 'Format'
      });
    },
    getMetricFormatHelp: function getMetricFormatHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.metric.args.metricFormatLabel', {
        defaultMessage: 'Select a format for the metric value'
      });
    }
  },
  Pie: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pieTitle', {
        defaultMessage: 'Chart style'
      });
    },
    getHoleDisplayName: function getHoleDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.holeTitle', {
        defaultMessage: 'Inner radius'
      });
    },
    getHoleHelp: function getHoleHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.holeLabel', {
        defaultMessage: 'Radius of the hole'
      });
    },
    getLabelRadiusDisplayName: function getLabelRadiusDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.labelRadiusTitle', {
        defaultMessage: 'Label radius'
      });
    },
    getLabelRadiusHelp: function getLabelRadiusHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.labelRadiusLabel', {
        defaultMessage: 'Distance of the labels from the center of the pie'
      });
    },
    getLabelsDisplayName: function getLabelsDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.labelsTitle', {
        defaultMessage: 'Labels'
      });
    },
    getLabelsHelp: function getLabelsHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.labelsToggleSwitch', {
        defaultMessage: 'Show/hide labels'
      });
    },
    getLegendDisplayName: function getLegendDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.legendTitle', {
        defaultMessage: 'Legend'
      });
    },
    getLegendHelp: function getLegendHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.legendLabel', {
        defaultMessage: 'Disable or position the legend'
      });
    },
    getRadiusDisplayName: function getRadiusDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.radiusTitle', {
        defaultMessage: 'Radius'
      });
    },
    getRadiusHelp: function getRadiusHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.radiusLabel', {
        defaultMessage: 'Radius of the pie'
      });
    },
    getTiltDisplayName: function getTiltDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.tiltTitle', {
        defaultMessage: 'Tilt angle'
      });
    },
    getTiltHelp: function getTiltHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.pie.args.tiltLabel', {
        defaultMessage: 'Percentage of tilt where 100 is fully vertical and 0 is completely flat'
      });
    }
  },
  Plot: {
    getDefaultStyleDisplayName: function getDefaultStyleDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.defaultStyleTitle', {
        defaultMessage: 'Default style'
      });
    },
    getDefaultStyleHelp: function getDefaultStyleHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.defaultStyleLabel', {
        defaultMessage: 'Set the style to be used by default by every series, unless overridden'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plotTitle', {
        defaultMessage: 'Chart style'
      });
    },
    getLegendDisplayName: function getLegendDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.legendTitle', {
        defaultMessage: 'Legend'
      });
    },
    getLegendHelp: function getLegendHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.legendLabel', {
        defaultMessage: 'Disable or position the legend'
      });
    },
    getXaxisDisplayName: function getXaxisDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.xaxisTitle', {
        defaultMessage: 'X-axis'
      });
    },
    getXaxisHelp: function getXaxisHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.xaxisLabel', {
        defaultMessage: 'Configure or disable the x-axis'
      });
    },
    getYaxisDisplayName: function getYaxisDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.yaxisTitle', {
        defaultMessage: 'Y-axis'
      });
    },
    getYaxisHelp: function getYaxisHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.plot.args.yaxisLabel', {
        defaultMessage: 'Configure or disable the Y-axis'
      });
    }
  },
  Progress: {
    getBarColorDisplayName: function getBarColorDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.barColorTitle', {
        defaultMessage: 'Background color'
      });
    },
    getBarColorHelp: function getBarColorHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.barColorLabel', {
        defaultMessage: 'Accepts HEX, RGB or HTML color names'
      });
    },
    getBarWeightDisplayName: function getBarWeightDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.barWeightTitle', {
        defaultMessage: 'Background weight'
      });
    },
    getBarWeightHelp: function getBarWeightHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.barWeightLabel', {
        defaultMessage: 'Thickness of the background bar'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progressTitle', {
        defaultMessage: 'Progress'
      });
    },
    getFontDisplayName: function getFontDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.fontTitle', {
        defaultMessage: 'Label settings'
      });
    },
    getFontHelp: function getFontHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.fontLabel', {
        defaultMessage: 'Font settings for the label. Technically, you can add other styles as well'
      });
    },
    getLabelDisplayName: function getLabelDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.labelArgTitle', {
        defaultMessage: 'Label'
      });
    },
    getLabelHelp: function getLabelHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.labelArgLabel', {
        defaultMessage: "Set {true}/{false} to show/hide label or provide a string to display as the label",
        values: {
          true: _constants.BOOLEAN_TRUE,
          false: _constants.BOOLEAN_FALSE
        }
      });
    },
    getMaxDisplayName: function getMaxDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.maxTitle', {
        defaultMessage: 'Maximum value'
      });
    },
    getMaxHelp: function getMaxHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.maxLabel', {
        defaultMessage: 'Maximum value of the progress element'
      });
    },
    getShapeDisplayName: function getShapeDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.shapeTitle', {
        defaultMessage: 'Shape'
      });
    },
    getShapeHelp: function getShapeHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.shapeLabel', {
        defaultMessage: 'Shape of the progress indicator'
      });
    },
    getValueColorDisplayName: function getValueColorDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.valueColorTitle', {
        defaultMessage: 'Progress color'
      });
    },
    getValueColorHelp: function getValueColorHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.valueColorLabel', {
        defaultMessage: 'Accepts {hex}, {rgb} or {html} Color names',
        values: {
          html: _constants.HTML,
          hex: _constants.HEX,
          rgb: _constants.RGB
        }
      });
    },
    getValueWeightDisplayName: function getValueWeightDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.valueWeightTitle', {
        defaultMessage: 'Progress weight'
      });
    },
    getValueWeightHelp: function getValueWeightHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.progress.args.valueWeightLabel', {
        defaultMessage: 'Thickness of the progress bar'
      });
    }
  },
  Render: {
    getCssApply: function getCssApply() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.render.args.css.applyButtonLabel', {
        defaultMessage: 'Apply Stylesheet'
      });
    },
    getCssHelp: function getCssHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.render.args.cssLabel', {
        defaultMessage: 'A {css} stylesheet scoped to your element',
        values: {
          css: _constants.CSS
        }
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.renderTitle', {
        defaultMessage: 'Element style'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.renderLabel', {
        defaultMessage: 'Setting for the container around your element'
      });
    }
  },
  RepeatImage: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImageTitle', {
        defaultMessage: 'Repeating image'
      });
    },
    getEmptyImageDisplayName: function getEmptyImageDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.emptyImageTitle', {
        defaultMessage: 'Empty image'
      });
    },
    getEmptyImageHelp: function getEmptyImageHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.emptyImageLabel', {
        defaultMessage: 'An image to fill up the difference between the value and the max count'
      });
    },
    getImageDisplayName: function getImageDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.imageTitle', {
        defaultMessage: 'Image'
      });
    },
    getImageHelp: function getImageHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.imageLabel', {
        defaultMessage: 'An image to repeat'
      });
    },
    getMaxDisplayName: function getMaxDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.maxTitle', {
        defaultMessage: 'Max count'
      });
    },
    getMaxHelp: function getMaxHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.maxLabel', {
        defaultMessage: 'The maximum number of repeated images'
      });
    },
    getSizeDisplayName: function getSizeDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.sizeTitle', {
        defaultMessage: 'Image size'
      });
    },
    getSizeHelp: function getSizeHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.repeatImage.args.sizeLabel', {
        defaultMessage: 'The size of the largest dimension of the image. Eg, if the image is tall but not wide, this is the height'
      });
    }
  },
  RevealImage: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImageTitle', {
        defaultMessage: 'Reveal image'
      });
    },
    getEmptyImageDisplayName: function getEmptyImageDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.emptyImageTitle', {
        defaultMessage: 'Background image'
      });
    },
    getEmptyImageHelp: function getEmptyImageHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.emptyImageLabel', {
        defaultMessage: 'A background image. Eg, an empty glass'
      });
    },
    getImageDisplayName: function getImageDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.imageTitle', {
        defaultMessage: 'Image'
      });
    },
    getImageHelp: function getImageHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.imageLabel', {
        defaultMessage: 'An image to reveal given the function input. Eg, a full glass'
      });
    },
    getOriginBottom: function getOriginBottom() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.origin.bottomDropDown', {
        defaultMessage: 'Bottom'
      });
    },
    getOriginDisplayName: function getOriginDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.originTitle', {
        defaultMessage: 'Reveal from'
      });
    },
    getOriginHelp: function getOriginHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.originLabel', {
        defaultMessage: 'The direction from which to start the reveal'
      });
    },
    getOriginLeft: function getOriginLeft() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.origin.leftDropDown', {
        defaultMessage: 'Left'
      });
    },
    getOriginRight: function getOriginRight() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.origin.rightDropDown', {
        defaultMessage: 'Right'
      });
    },
    getOriginTop: function getOriginTop() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.revealImage.args.origin.topDropDown', {
        defaultMessage: 'Top'
      });
    }
  },
  Shape: {
    getBorderDisplayName: function getBorderDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.borderTitle', {
        defaultMessage: 'Border'
      });
    },
    getBorderHelp: function getBorderHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.borderLabel', {
        defaultMessage: 'Accepts HEX, RGB or HTML color names'
      });
    },
    getBorderWidthDisplayName: function getBorderWidthDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.borderWidthTitle', {
        defaultMessage: 'Border width'
      });
    },
    getBorderWidthHelp: function getBorderWidthHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.borderWidthLabel', {
        defaultMessage: 'Border width'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shapeTitle', {
        defaultMessage: 'Shape'
      });
    },
    getFillDisplayName: function getFillDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.fillTitle', {
        defaultMessage: 'Fill'
      });
    },
    getFillHelp: function getFillHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.fillLabel', {
        defaultMessage: 'Accepts HEX, RGB or HTML color names'
      });
    },
    getMaintainAspectDisplayName: function getMaintainAspectDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.maintainAspectTitle', {
        defaultMessage: 'Fixed ratio'
      });
    },
    getMaintainAspectHelp: function getMaintainAspectHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.maintainAspectLabel', {
        defaultMessage: "Enable to maintain aspect ratio"
      });
    },
    getShapeDisplayName: function getShapeDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.shape.args.shapeTitle', {
        defaultMessage: 'Select shape'
      });
    }
  },
  Table: {
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.tableTitle', {
        defaultMessage: 'Table style'
      });
    },
    getHelp: function getHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.tableLabel', {
        defaultMessage: 'Set styling for a Table element'
      });
    },
    getPaginateDisplayName: function getPaginateDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.paginateTitle', {
        defaultMessage: 'Pagination'
      });
    },
    getPaginateHelp: function getPaginateHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.paginateLabel', {
        defaultMessage: 'Show or hide pagination controls. If disabled only the first page will be shown'
      });
    },
    getPerPageDisplayName: function getPerPageDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.perPageTitle', {
        defaultMessage: 'Rows'
      });
    },
    getPerPageHelp: function getPerPageHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.perPageLabel', {
        defaultMessage: 'Number of rows to display per table page'
      });
    },
    getShowHeaderDisplayName: function getShowHeaderDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.showHeaderTitle', {
        defaultMessage: 'Header'
      });
    },
    getShowHeaderHelp: function getShowHeaderHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.table.args.showHeaderLabel', {
        defaultMessage: 'Show or hide the header row with titles for each column'
      });
    }
  },
  Timefilter: {
    getColumnConfirm: function getColumnConfirm() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilter.args.columnConfirmButtonLabel', {
        defaultMessage: 'Set'
      });
    },
    getColumnDisplayName: function getColumnDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilter.args.columnTitle', {
        defaultMessage: 'Column'
      });
    },
    getColumnHelp: function getColumnHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilter.args.columnLabel', {
        defaultMessage: 'Column to which selected time is applied'
      });
    },
    getDisplayName: function getDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilterTitle', {
        defaultMessage: 'Time filter'
      });
    },
    getFilterGroupDisplayName: function getFilterGroupDisplayName() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilter.args.filterGroupTitle', {
        defaultMessage: 'Filter group'
      });
    },
    getFilterGroupHelp: function getFilterGroupHelp() {
      return _i18n.i18n.translate('xpack.canvas.uis.views.timefilter.args.filterGroupLabel', {
        defaultMessage: "Apply the selected group name to an element's filters function to target this filter"
      });
    }
  }
};
exports.ViewStrings = ViewStrings;"},null]}