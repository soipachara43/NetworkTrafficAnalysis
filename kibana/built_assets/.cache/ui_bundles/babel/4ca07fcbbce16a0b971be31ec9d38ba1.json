{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/common/es_query/filters/phrase_filter.js","dependencies":[{"path":"src/plugins/data/common/es_query/filters/phrase_filter.js","mtime":1589249550563},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5idWlsZElubGluZVNjcmlwdEZvclBocmFzZUZpbHRlciA9IGV4cG9ydHMuZ2V0Q29udmVydGVkVmFsdWVGb3JGaWVsZCA9IGV4cG9ydHMuZ2V0UGhyYXNlU2NyaXB0ID0gZXhwb3J0cy5idWlsZFBocmFzZUZpbHRlciA9IGV4cG9ydHMuZ2V0UGhyYXNlRmlsdGVyVmFsdWUgPSBleHBvcnRzLmdldFBocmFzZUZpbHRlckZpZWxkID0gZXhwb3J0cy5pc1NjcmlwdGVkUGhyYXNlRmlsdGVyID0gZXhwb3J0cy5pc1BocmFzZUZpbHRlciA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKCnZhciBpc1BocmFzZUZpbHRlciA9IGZ1bmN0aW9uIGlzUGhyYXNlRmlsdGVyKGZpbHRlcikgewogIHZhciBpc01hdGNoUGhyYXNlUXVlcnkgPSBmaWx0ZXIgJiYgZmlsdGVyLnF1ZXJ5ICYmIGZpbHRlci5xdWVyeS5tYXRjaF9waHJhc2U7CiAgdmFyIGlzRGVwcmVjYXRlZE1hdGNoUGhyYXNlUXVlcnkgPSBmaWx0ZXIgJiYgZmlsdGVyLnF1ZXJ5ICYmIGZpbHRlci5xdWVyeS5tYXRjaCAmJiBPYmplY3QudmFsdWVzKGZpbHRlci5xdWVyeS5tYXRjaCkuZmluZChmdW5jdGlvbiAocGFyYW1zKSB7CiAgICByZXR1cm4gcGFyYW1zLnR5cGUgPT09ICdwaHJhc2UnOwogIH0pOwogIHJldHVybiBCb29sZWFuKGlzTWF0Y2hQaHJhc2VRdWVyeSB8fCBpc0RlcHJlY2F0ZWRNYXRjaFBocmFzZVF1ZXJ5KTsKfTsKCmV4cG9ydHMuaXNQaHJhc2VGaWx0ZXIgPSBpc1BocmFzZUZpbHRlcjsKCnZhciBpc1NjcmlwdGVkUGhyYXNlRmlsdGVyID0gZnVuY3Rpb24gaXNTY3JpcHRlZFBocmFzZUZpbHRlcihmaWx0ZXIpIHsKICByZXR1cm4gQm9vbGVhbigoMCwgX2xvZGFzaC5nZXQpKGZpbHRlciwgJ3NjcmlwdC5zY3JpcHQucGFyYW1zLnZhbHVlJykpOwp9OwoKZXhwb3J0cy5pc1NjcmlwdGVkUGhyYXNlRmlsdGVyID0gaXNTY3JpcHRlZFBocmFzZUZpbHRlcjsKCnZhciBnZXRQaHJhc2VGaWx0ZXJGaWVsZCA9IGZ1bmN0aW9uIGdldFBocmFzZUZpbHRlckZpZWxkKGZpbHRlcikgewogIHZhciBxdWVyeUNvbmZpZyA9IGZpbHRlci5xdWVyeS5tYXRjaF9waHJhc2UgfHwgZmlsdGVyLnF1ZXJ5Lm1hdGNoOwogIHJldHVybiBPYmplY3Qua2V5cyhxdWVyeUNvbmZpZylbMF07Cn07CgpleHBvcnRzLmdldFBocmFzZUZpbHRlckZpZWxkID0gZ2V0UGhyYXNlRmlsdGVyRmllbGQ7Cgp2YXIgZ2V0UGhyYXNlRmlsdGVyVmFsdWUgPSBmdW5jdGlvbiBnZXRQaHJhc2VGaWx0ZXJWYWx1ZShmaWx0ZXIpIHsKICB2YXIgcXVlcnlDb25maWcgPSBmaWx0ZXIucXVlcnkubWF0Y2hfcGhyYXNlIHx8IGZpbHRlci5xdWVyeS5tYXRjaDsKICB2YXIgcXVlcnlWYWx1ZSA9IE9iamVjdC52YWx1ZXMocXVlcnlDb25maWcpWzBdOwogIHJldHVybiAoMCwgX2xvZGFzaC5pc1BsYWluT2JqZWN0KShxdWVyeVZhbHVlKSA/IHF1ZXJ5VmFsdWUucXVlcnkgOiBxdWVyeVZhbHVlOwp9OwoKZXhwb3J0cy5nZXRQaHJhc2VGaWx0ZXJWYWx1ZSA9IGdldFBocmFzZUZpbHRlclZhbHVlOwoKdmFyIGJ1aWxkUGhyYXNlRmlsdGVyID0gZnVuY3Rpb24gYnVpbGRQaHJhc2VGaWx0ZXIoZmllbGQsIHZhbHVlLCBpbmRleFBhdHRlcm4pIHsKICB2YXIgY29udmVydGVkVmFsdWUgPSBnZXRDb252ZXJ0ZWRWYWx1ZUZvckZpZWxkKGZpZWxkLCB2YWx1ZSk7CgogIGlmIChmaWVsZC5zY3JpcHRlZCkgewogICAgcmV0dXJuIHsKICAgICAgbWV0YTogewogICAgICAgIGluZGV4OiBpbmRleFBhdHRlcm4uaWQsCiAgICAgICAgZmllbGQ6IGZpZWxkLm5hbWUKICAgICAgfSwKICAgICAgc2NyaXB0OiBnZXRQaHJhc2VTY3JpcHQoZmllbGQsIHZhbHVlKQogICAgfTsKICB9IGVsc2UgewogICAgcmV0dXJuIHsKICAgICAgbWV0YTogewogICAgICAgIGluZGV4OiBpbmRleFBhdHRlcm4uaWQKICAgICAgfSwKICAgICAgcXVlcnk6IHsKICAgICAgICBtYXRjaF9waHJhc2U6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQubmFtZSwgY29udmVydGVkVmFsdWUpCiAgICAgIH0KICAgIH07CiAgfQp9OwoKZXhwb3J0cy5idWlsZFBocmFzZUZpbHRlciA9IGJ1aWxkUGhyYXNlRmlsdGVyOwoKdmFyIGdldFBocmFzZVNjcmlwdCA9IGZ1bmN0aW9uIGdldFBocmFzZVNjcmlwdChmaWVsZCwgdmFsdWUpIHsKICB2YXIgY29udmVydGVkVmFsdWUgPSBnZXRDb252ZXJ0ZWRWYWx1ZUZvckZpZWxkKGZpZWxkLCB2YWx1ZSk7CiAgdmFyIHNjcmlwdCA9IGJ1aWxkSW5saW5lU2NyaXB0Rm9yUGhyYXNlRmlsdGVyKGZpZWxkKTsKICByZXR1cm4gewogICAgc2NyaXB0OiB7CiAgICAgIHNvdXJjZTogc2NyaXB0LAogICAgICBsYW5nOiBmaWVsZC5sYW5nLAogICAgICBwYXJhbXM6IHsKICAgICAgICB2YWx1ZTogY29udmVydGVkVmFsdWUKICAgICAgfQogICAgfQogIH07Cn07IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9lbGFzdGljc2VhcmNoL2lzc3Vlcy8yMDk0MSBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMva2liYW5hL2lzc3Vlcy84Njc3Ci8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vZWxhc3RpYy9lbGFzdGljc2VhcmNoL3B1bGwvMjIyMDEKLy8gZm9yIHRoZSByZWFzb24gYmVoaW5kIHRoaXMgY2hhbmdlLiBBZ2dzIG5vdyByZXR1cm4gYm9vbGVhbiBidWNrZXRzIHdpdGggYSBrZXkgb2YgMSBvciAwLgoKCmV4cG9ydHMuZ2V0UGhyYXNlU2NyaXB0ID0gZ2V0UGhyYXNlU2NyaXB0OwoKdmFyIGdldENvbnZlcnRlZFZhbHVlRm9yRmllbGQgPSBmdW5jdGlvbiBnZXRDb252ZXJ0ZWRWYWx1ZUZvckZpZWxkKGZpZWxkLCB2YWx1ZSkgewogIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJyAmJiBmaWVsZC50eXBlID09PSAnYm9vbGVhbicpIHsKICAgIGlmIChbMSwgJ3RydWUnXS5pbmNsdWRlcyh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgaWYgKFswLCAnZmFsc2UnXS5pbmNsdWRlcyh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCIiLmNvbmNhdCh2YWx1ZSwgIiBpcyBub3QgYSB2YWxpZCBib29sZWFuIHZhbHVlIGZvciBib29sZWFuIGZpZWxkICIpLmNvbmNhdChmaWVsZC5uYW1lKSk7CiAgICB9CiAgfQoKICByZXR1cm4gdmFsdWU7Cn07Ci8qKgogKiBUYWtlcyBhIHNjcmlwdGVkIGZpZWxkIGFuZCByZXR1cm5zIGFuIGlubGluZSBzY3JpcHQgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjcmlwdCBxdWVyeS4KICogSGFuZGxlcyBsdWNlbmUgZXhwcmVzc2lvbiBhbmQgUGFpbmxlc3Mgc2NyaXB0cy4gT3RoZXIgbGFuZ3MgYXJlbid0IGd1YXJhbnRlZWQgdG8gZ2VuZXJhdGUgdmFsaWQKICogc2NyaXB0cy4KICoKICogQHBhcmFtIHtvYmplY3R9IHNjcmlwdGVkRmllbGQgQSBGaWVsZCBvYmplY3QgcmVwcmVzZW50aW5nIGEgc2NyaXB0ZWQgZmllbGQKICogQHJldHVybnMge3N0cmluZ30gVGhlIGlubGluZSBzY3JpcHQgc3RyaW5nCiAqLwoKCmV4cG9ydHMuZ2V0Q29udmVydGVkVmFsdWVGb3JGaWVsZCA9IGdldENvbnZlcnRlZFZhbHVlRm9yRmllbGQ7Cgp2YXIgYnVpbGRJbmxpbmVTY3JpcHRGb3JQaHJhc2VGaWx0ZXIgPSBmdW5jdGlvbiBidWlsZElubGluZVNjcmlwdEZvclBocmFzZUZpbHRlcihzY3JpcHRlZEZpZWxkKSB7CiAgLy8gV2UgbXVzdCB3cmFwIHBhaW5sZXNzIHNjcmlwdHMgaW4gYSBsYW1iZGEgaW4gY2FzZSB0aGV5J3JlIG1vcmUgdGhhbiBhIHNpbXBsZSBleHByZXNzaW9uCiAgaWYgKHNjcmlwdGVkRmllbGQubGFuZyA9PT0gJ3BhaW5sZXNzJykgewogICAgcmV0dXJuICJib29sZWFuIGNvbXBhcmUoU3VwcGxpZXIgcywgZGVmIHYpIHtyZXR1cm4gcy5nZXQoKSA9PSB2O30iICsgImNvbXBhcmUoKCkgLT4geyAiLmNvbmNhdChzY3JpcHRlZEZpZWxkLnNjcmlwdCwgIiB9LCBwYXJhbXMudmFsdWUpOyIpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gIigiLmNvbmNhdChzY3JpcHRlZEZpZWxkLnNjcmlwdCwgIikgPT0gdmFsdWUiKTsKICB9Cn07CgpleHBvcnRzLmJ1aWxkSW5saW5lU2NyaXB0Rm9yUGhyYXNlRmlsdGVyID0gYnVpbGRJbmxpbmVTY3JpcHRGb3JQaHJhc2VGaWx0ZXI7"},null]}