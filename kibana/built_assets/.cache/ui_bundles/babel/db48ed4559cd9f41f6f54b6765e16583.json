{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/lib/elasticsearch_settings/start_checks.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/lib/elasticsearch_settings/start_checks.js","mtime":1589249552604},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnN0YXJ0Q2hlY2tzID0gc3RhcnRDaGVja3M7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwovLyBjYWxsIHNldE5leHQgb24gYWxsIHRoZSBOLTEgY2hlY2tlcnMgdG8gbGluayB0aGVtIHRvIHRoZSBuZXh0IGNoZWNrZXIKdmFyIG1hcENoZWNrZXJzID0gZnVuY3Rpb24gbWFwQ2hlY2tlcnMoX2NoZWNrZXJzKSB7CiAgcmV0dXJuIF9jaGVja2Vycy5tYXAoZnVuY3Rpb24gKGN1cnJlbnQsIGNoZWNrZXJJbmRleCkgewogICAgdmFyIG5leHQgPSBfY2hlY2tlcnNbY2hlY2tlckluZGV4ICsgMV07CgogICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkgewogICAgICBjdXJyZW50LnNldE5leHQobmV4dCk7CiAgICB9CgogICAgcmV0dXJuIGN1cnJlbnQ7CiAgfSk7Cn07Ci8qCiAqIE5PVEU6IFRoaXMgcmV0dXJucyBhIHByb21pc2UsIHRodXMgdGhlIGFzeW5jLiBUeXBpY2FsbHkgdGhlcmUgaXMgbm8gbmVlZCB0bwogKiBhd2FpdCB0aGUgcmV0dXJuIHZhbHVlIHNpbmNlIHRoZSBmdW5jdGlvbiBpbnRlcm5hbHMgdXBkYXRlcyB0aGUgY29udHJvbGxlcidzCiAqIG1vZGVsIGl0cyB0aGVpciBvd24uCiAqLwoKCmZ1bmN0aW9uIHN0YXJ0Q2hlY2tzKF94LCBfeDIpIHsKICByZXR1cm4gX3N0YXJ0Q2hlY2tzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zdGFydENoZWNrcygpIHsKICBfc3RhcnRDaGVja3MgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoY2hlY2tlcnMsIHVwZGF0ZU1vZGVsKSB7CiAgICB2YXIgcnVuQ2hlY2ssIF9jaGVja2VyczsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBydW5DaGVjayA9CiAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY3VycmVudENoZWNrZXIpIHsKICAgICAgICAgICAgICAgIHZhciBfcmVmMiwgZm91bmQsIHJlYXNvbiwgZXJyb3IsIGVycm9yUmVhc29uOwoKICAgICAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTW9kZWwoewogICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrTWVzc2FnZTogY3VycmVudENoZWNrZXIuZ2V0TWVzc2FnZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDaGVja2VyLmV4ZWN1dGVDaGVjaygpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgX3JlZjIgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IF9yZWYyLmZvdW5kOwogICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBfcmVmMi5yZWFzb247CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gX3JlZjIuZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yUmVhc29uID0gX3JlZjIuZXJyb3JSZWFzb247CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVNb2RlbCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBlcnJvclJlYXNvbgogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudENoZWNrZXIuaGFzTmV4dCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBydW5DaGVjayhjdXJyZW50Q2hlY2tlci5nZXROZXh0KCkpKTsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm91bmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHVwZGF0ZU1vZGVsKHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrTWVzc2FnZTogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50Q2hlY2tlci5oYXNOZXh0KCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJ1bkNoZWNrKGN1cnJlbnRDaGVja2VyLmdldE5leHQoKSkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlYWQgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1vZGVsKHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja01lc3NhZ2U6IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBydW5DaGVjayhfeDMpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSgpOwoKICAgICAgICAgICAgX2NoZWNrZXJzID0gbWFwQ2hlY2tlcnMoY2hlY2tlcnMpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcnVuQ2hlY2soX2NoZWNrZXJzWzBdKSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwogIHJldHVybiBfc3RhcnRDaGVja3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},null]}