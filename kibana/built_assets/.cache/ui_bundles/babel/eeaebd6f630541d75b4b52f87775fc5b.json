{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/pages/logs/log_entry_categories/sections/top_categories/top_categories_table.js","dependencies":[{"path":"x-pack/plugins/infra/public/pages/logs/log_entry_categories/sections/top_categories/top_categories_table.js","mtime":1589249554309},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}