{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/step_about_rule/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/step_about_rule/index.js","mtime":1589249553316},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlN0ZXBBYm91dFJ1bGUgPSB2b2lkIDA7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9zdHlsZWRDb21wb25lbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJzdHlsZWQtY29tcG9uZW50cyIpKTsKCnZhciBfZmFzdERlZXBFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiZmFzdC1kZWVwLWVxdWFsIikpOwoKdmFyIF9oZWxwZXJzID0gcmVxdWlyZSgiLi4vLi4vaGVscGVycyIpOwoKdmFyIF90eXBlcyA9IHJlcXVpcmUoIi4uLy4uL3R5cGVzIik7Cgp2YXIgX2FkZF9pdGVtX2Zvcm0gPSByZXF1aXJlKCIuLi9hZGRfaXRlbV9mb3JtIik7Cgp2YXIgX2Rlc2NyaXB0aW9uX3N0ZXAgPSByZXF1aXJlKCIuLi9kZXNjcmlwdGlvbl9zdGVwIik7Cgp2YXIgX21pdHJlID0gcmVxdWlyZSgiLi4vbWl0cmUiKTsKCnZhciBfc2hhcmVkX2ltcG9ydHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9zaGFyZWRfaW1wb3J0cyIpOwoKdmFyIF9kYXRhID0gcmVxdWlyZSgiLi9kYXRhIik7Cgp2YXIgX2RlZmF1bHRfdmFsdWUgPSByZXF1aXJlKCIuL2RlZmF1bHRfdmFsdWUiKTsKCnZhciBfaGVscGVyczIgPSByZXF1aXJlKCIuL2hlbHBlcnMiKTsKCnZhciBfc2NoZW1hID0gcmVxdWlyZSgiLi9zY2hlbWEiKTsKCnZhciBJMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi90cmFuc2xhdGlvbnMiKSk7Cgp2YXIgX3N0ZXBfY29udGVudF93cmFwcGVyID0gcmVxdWlyZSgiLi4vc3RlcF9jb250ZW50X3dyYXBwZXIiKTsKCnZhciBfbmV4dF9zdGVwID0gcmVxdWlyZSgiLi4vbmV4dF9zdGVwIik7Cgp2YXIgX2Zvcm0gPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL21hcmtkb3duX2VkaXRvci9mb3JtIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CgogIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsKCiAgdmFyIGtleSwgaTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOwoKICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07CiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7CiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgdmFyIHRhcmdldCA9IHt9OwogIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsKICB2YXIga2V5LCBpOwoKICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgewogICAga2V5ID0gc291cmNlS2V5c1tpXTsKICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBDb21tb25Vc2VGaWVsZCA9ICgwLCBfc2hhcmVkX2ltcG9ydHMuZ2V0VXNlRmllbGQpKHsKICBjb21wb25lbnQ6IF9zaGFyZWRfaW1wb3J0cy5GaWVsZAp9KTsKCnZhciBUaHJlZVF1YXJ0ZXJzQ29udGFpbmVyID0gX3N0eWxlZENvbXBvbmVudHMuZGVmYXVsdC5kaXYud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJUaHJlZVF1YXJ0ZXJzQ29udGFpbmVyIiwKICBjb21wb25lbnRJZDogInNjLTFoa3l1dm4tMCIKfSkoWyJtYXgtd2lkdGg6NzQwcHg7Il0pOwoKVGhyZWVRdWFydGVyc0NvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdUaHJlZVF1YXJ0ZXJzQ29udGFpbmVyJzsKCnZhciBUYWdDb250YWluZXIgPSBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0LmRpdi53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIlRhZ0NvbnRhaW5lciIsCiAgY29tcG9uZW50SWQ6ICJzYy0xaGt5dXZuLTEiCn0pKFsibWFyZ2luLXRvcDoxNnB4OyJdKTsKClRhZ0NvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdUYWdDb250YWluZXInOwp2YXIgQWR2YW5jZWRTZXR0aW5nc0FjY29yZGlvbiA9ICgwLCBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0KShfZXVpLkV1aUFjY29yZGlvbikud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJBZHZhbmNlZFNldHRpbmdzQWNjb3JkaW9uIiwKICBjb21wb25lbnRJZDogInNjLTFoa3l1dm4tMiIKfSkoWyIuZXVpQWNjb3JkaW9uX19pY29uV3JhcHBlcntkaXNwbGF5Om5vbmU7fS5ldWlBY2NvcmRpb25fX2NoaWxkV3JhcHBlcnt0cmFuc2l0aW9uLWR1cmF0aW9uOjFtczt9Ji5ldWlBY2NvcmRpb24taXNPcGVuIC5ldWlCdXR0b25FbXB0eV9fY29udGVudCA+IHN2Z3t0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt9Il0pOwoKdmFyIEFkdmFuY2VkU2V0dGluZ3NBY2NvcmRpb25CdXR0b24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICBmbHVzaDogImxlZnQiLAogIHNpemU6ICJzIiwKICBpY29uVHlwZTogImFycm93UmlnaHQiCn0sIEkxOG4uQURWQU5DRURfU0VUVElOR1MpOwoKdmFyIFN0ZXBBYm91dFJ1bGVDb21wb25lbnQgPSBmdW5jdGlvbiBTdGVwQWJvdXRSdWxlQ29tcG9uZW50KF9yZWYpIHsKICB2YXIgX3JlZiRhZGRQYWRkaW5nID0gX3JlZi5hZGRQYWRkaW5nLAogICAgICBhZGRQYWRkaW5nID0gX3JlZiRhZGRQYWRkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkYWRkUGFkZGluZywKICAgICAgZGVmYXVsdFZhbHVlcyA9IF9yZWYuZGVmYXVsdFZhbHVlcywKICAgICAgX3JlZiRkZXNjcmlwdGlvbkNvbHVtID0gX3JlZi5kZXNjcmlwdGlvbkNvbHVtbnMsCiAgICAgIGRlc2NyaXB0aW9uQ29sdW1ucyA9IF9yZWYkZGVzY3JpcHRpb25Db2x1bSA9PT0gdm9pZCAwID8gJ3NpbmdsZVNwbGl0JyA6IF9yZWYkZGVzY3JpcHRpb25Db2x1bSwKICAgICAgaXNSZWFkT25seVZpZXcgPSBfcmVmLmlzUmVhZE9ubHlWaWV3LAogICAgICBfcmVmJGlzVXBkYXRlVmlldyA9IF9yZWYuaXNVcGRhdGVWaWV3LAogICAgICBpc1VwZGF0ZVZpZXcgPSBfcmVmJGlzVXBkYXRlVmlldyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzVXBkYXRlVmlldywKICAgICAgaXNMb2FkaW5nID0gX3JlZi5pc0xvYWRpbmcsCiAgICAgIHNldEZvcm0gPSBfcmVmLnNldEZvcm0sCiAgICAgIHNldFN0ZXBEYXRhID0gX3JlZi5zZXRTdGVwRGF0YTsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKF9kZWZhdWx0X3ZhbHVlLnN0ZXBBYm91dERlZmF1bHRWYWx1ZSksCiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLAogICAgICBteVN0ZXBEYXRhID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0TXlTdGVwRGF0YSA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfdXNlRm9ybSA9ICgwLCBfc2hhcmVkX2ltcG9ydHMudXNlRm9ybSkoewogICAgZGVmYXVsdFZhbHVlOiBteVN0ZXBEYXRhLAogICAgb3B0aW9uczogewogICAgICBzdHJpcEVtcHR5RmllbGRzOiBmYWxzZQogICAgfSwKICAgIHNjaGVtYTogX3NjaGVtYS5zY2hlbWEKICB9KSwKICAgICAgZm9ybSA9IF91c2VGb3JtLmZvcm07CgogIHZhciBvblN1Ym1pdCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKAogIC8qI19fUFVSRV9fKi8KICBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgIHZhciBfcmVmMywgaXNWYWxpZCwgZGF0YTsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlmICghc2V0U3RlcERhdGEpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2V0U3RlcERhdGEoX3R5cGVzLlJ1bGVTdGVwLmFib3V0UnVsZSwgbnVsbCwgZmFsc2UpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIGZvcm0uc3VibWl0KCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBfcmVmMyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGlzVmFsaWQgPSBfcmVmMy5pc1ZhbGlkOwogICAgICAgICAgICBkYXRhID0gX3JlZjMuZGF0YTsKCiAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7CiAgICAgICAgICAgICAgc2V0U3RlcERhdGEoX3R5cGVzLlJ1bGVTdGVwLmFib3V0UnVsZSwgZGF0YSwgaXNWYWxpZCk7CiAgICAgICAgICAgICAgc2V0TXlTdGVwRGF0YShfb2JqZWN0U3ByZWFkKHt9LCBkYXRhLCB7CiAgICAgICAgICAgICAgICBpc05ldzogZmFsc2UKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpLCBbZm9ybV0pOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICB2YXIgaXNOZXcgPSBteVN0ZXBEYXRhLmlzTmV3LAogICAgICAgIGluaXREZWZhdWx0VmFsdWUgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMobXlTdGVwRGF0YSwgWyJpc05ldyJdKTsKCiAgICBpZiAoZGVmYXVsdFZhbHVlcyAhPSBudWxsICYmICEoMCwgX2Zhc3REZWVwRXF1YWwuZGVmYXVsdCkoaW5pdERlZmF1bHRWYWx1ZSwgZGVmYXVsdFZhbHVlcykpIHsKICAgICAgdmFyIG15RGVmYXVsdFZhbHVlcyA9IF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRWYWx1ZXMsIHsKICAgICAgICBpc05ldzogZmFsc2UKICAgICAgfSk7CgogICAgICBzZXRNeVN0ZXBEYXRhKG15RGVmYXVsdFZhbHVlcyk7CiAgICAgICgwLCBfaGVscGVycy5zZXRGaWVsZFZhbHVlKShmb3JtLCBfc2NoZW1hLnNjaGVtYSwgbXlEZWZhdWx0VmFsdWVzKTsKICAgIH0KICB9LCBbZGVmYXVsdFZhbHVlc10pOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICBpZiAoc2V0Rm9ybSAhPSBudWxsKSB7CiAgICAgIHNldEZvcm0oX3R5cGVzLlJ1bGVTdGVwLmFib3V0UnVsZSwgZm9ybSk7CiAgICB9CiAgfSwgW2Zvcm1dKTsKICByZXR1cm4gaXNSZWFkT25seVZpZXcgJiYgbXlTdGVwRGF0YS5uYW1lICE9IG51bGwgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdGVwX2NvbnRlbnRfd3JhcHBlci5TdGVwQ29udGVudFdyYXBwZXIsIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhYm91dFN0ZXAiLAogICAgYWRkUGFkZGluZzogYWRkUGFkZGluZwogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Rlc2NyaXB0aW9uX3N0ZXAuU3RlcFJ1bGVEZXNjcmlwdGlvbiwgewogICAgY29sdW1uczogZGVzY3JpcHRpb25Db2x1bW5zLAogICAgc2NoZW1hOiBfc2NoZW1hLnNjaGVtYSwKICAgIGRhdGE6IG15U3RlcERhdGEKICB9KSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zdGVwX2NvbnRlbnRfd3JhcHBlci5TdGVwQ29udGVudFdyYXBwZXIsIHsKICAgIGFkZFBhZGRpbmc6ICFpc1VwZGF0ZVZpZXcKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Gb3JtLCB7CiAgICBmb3JtOiBmb3JtCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUaHJlZVF1YXJ0ZXJzQ29udGFpbmVyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbW1vblVzZUZpZWxkLCB7CiAgICBwYXRoOiAibmFtZSIsCiAgICBjb21wb25lbnRQcm9wczogewogICAgICBpZEFyaWE6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlTmFtZScsCiAgICAgICdkYXRhLXRlc3Qtc3Viaic6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlTmFtZScsCiAgICAgIGV1aUZpZWxkUHJvcHM6IHsKICAgICAgICBmdWxsV2lkdGg6IHRydWUsCiAgICAgICAgZGlzYWJsZWQ6IGlzTG9hZGluZwogICAgICB9CiAgICB9CiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUaHJlZVF1YXJ0ZXJzQ29udGFpbmVyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbW1vblVzZUZpZWxkLCB7CiAgICBwYXRoOiAiZGVzY3JpcHRpb24iLAogICAgY29tcG9uZW50UHJvcHM6IHsKICAgICAgaWRBcmlhOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZURlc2NyaXB0aW9uJywKICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ2RldGVjdGlvbkVuZ2luZVN0ZXBBYm91dFJ1bGVEZXNjcmlwdGlvbicsCiAgICAgIGV1aUZpZWxkUHJvcHM6IHsKICAgICAgICBkaXNhYmxlZDogaXNMb2FkaW5nLAogICAgICAgIGNvbXByZXNzZWQ6IHRydWUsCiAgICAgICAgZnVsbFdpZHRoOiB0cnVlCiAgICAgIH0KICAgIH0KICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJtIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tbW9uVXNlRmllbGQsIHsKICAgIHBhdGg6ICJzZXZlcml0eSIsCiAgICBjb21wb25lbnRQcm9wczogewogICAgICBpZEFyaWE6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlU2V2ZXJpdHknLAogICAgICAnZGF0YS10ZXN0LXN1YmonOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZVNldmVyaXR5JywKICAgICAgZXVpRmllbGRQcm9wczogewogICAgICAgIGZ1bGxXaWR0aDogZmFsc2UsCiAgICAgICAgZGlzYWJsZWQ6IGlzTG9hZGluZywKICAgICAgICBvcHRpb25zOiBfZGF0YS5zZXZlcml0eU9wdGlvbnMKICAgICAgfQogICAgfQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogIm0iCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21tb25Vc2VGaWVsZCwgewogICAgcGF0aDogInJpc2tTY29yZSIsCiAgICBjb21wb25lbnRQcm9wczogewogICAgICBpZEFyaWE6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlUmlza1Njb3JlJywKICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ2RldGVjdGlvbkVuZ2luZVN0ZXBBYm91dFJ1bGVSaXNrU2NvcmUnLAogICAgICBldWlGaWVsZFByb3BzOiB7CiAgICAgICAgbWF4OiAxMDAsCiAgICAgICAgbWluOiAwLAogICAgICAgIGZ1bGxXaWR0aDogZmFsc2UsCiAgICAgICAgZGlzYWJsZWQ6IGlzTG9hZGluZywKICAgICAgICBzaG93VGlja3M6IHRydWUsCiAgICAgICAgdGlja0ludGVydmFsOiAyNQogICAgICB9CiAgICB9CiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRhZ0NvbnRhaW5lciwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21tb25Vc2VGaWVsZCwgewogICAgcGF0aDogInRhZ3MiLAogICAgY29tcG9uZW50UHJvcHM6IHsKICAgICAgaWRBcmlhOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZVRhZ3MnLAogICAgICAnZGF0YS10ZXN0LXN1YmonOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZVRhZ3MnLAogICAgICBldWlGaWVsZFByb3BzOiB7CiAgICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICAgIGlzRGlzYWJsZWQ6IGlzTG9hZGluZywKICAgICAgICBwbGFjZWhvbGRlcjogJycKICAgICAgfQogICAgfQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogIm0iCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQWR2YW5jZWRTZXR0aW5nc0FjY29yZGlvbiwgewogICAgImRhdGEtdGVzdC1zdWJqIjogImFkdmFuY2VkU2V0dGluZ3MiLAogICAgaWQ6ICJhZHZhbmNlZFNldHRpbmdzQWNjb3JkaW9uIiwKICAgIGJ1dHRvbkNvbnRlbnQ6IEFkdmFuY2VkU2V0dGluZ3NBY2NvcmRpb25CdXR0b24KICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuVXNlRmllbGQsIHsKICAgIHBhdGg6ICJyZWZlcmVuY2VzIiwKICAgIGNvbXBvbmVudDogX2FkZF9pdGVtX2Zvcm0uQWRkSXRlbSwKICAgIGNvbXBvbmVudFByb3BzOiB7CiAgICAgIGFkZFRleHQ6IEkxOG4uQUREX1JFRkVSRU5DRSwKICAgICAgaWRBcmlhOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZVJlZmVyZW5jZVVybHMnLAogICAgICBpc0Rpc2FibGVkOiBpc0xvYWRpbmcsCiAgICAgIGRhdGFUZXN0U3ViajogJ2RldGVjdGlvbkVuZ2luZVN0ZXBBYm91dFJ1bGVSZWZlcmVuY2VVcmxzJywKICAgICAgdmFsaWRhdGU6IF9oZWxwZXJzMi5pc1VybEludmFsaWQKICAgIH0KICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuVXNlRmllbGQsIHsKICAgIHBhdGg6ICJmYWxzZVBvc2l0aXZlcyIsCiAgICBjb21wb25lbnQ6IF9hZGRfaXRlbV9mb3JtLkFkZEl0ZW0sCiAgICBjb21wb25lbnRQcm9wczogewogICAgICBhZGRUZXh0OiBJMThuLkFERF9GQUxTRV9QT1NJVElWRSwKICAgICAgaWRBcmlhOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZUZhbHNlUG9zaXRpdmVzJywKICAgICAgaXNEaXNhYmxlZDogaXNMb2FkaW5nLAogICAgICBkYXRhVGVzdFN1Ymo6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlRmFsc2VQb3NpdGl2ZXMnCiAgICB9CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NoYXJlZF9pbXBvcnRzLlVzZUZpZWxkLCB7CiAgICBwYXRoOiAidGhyZWF0IiwKICAgIGNvbXBvbmVudDogX21pdHJlLkFkZE1pdHJlVGhyZWF0LAogICAgY29tcG9uZW50UHJvcHM6IHsKICAgICAgaWRBcmlhOiAnZGV0ZWN0aW9uRW5naW5lU3RlcEFib3V0UnVsZU1pdHJlVGhyZWF0JywKICAgICAgaXNEaXNhYmxlZDogaXNMb2FkaW5nLAogICAgICBkYXRhVGVzdFN1Ymo6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlTWl0cmVUaHJlYXQnCiAgICB9CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJtIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRocmVlUXVhcnRlcnNDb250YWluZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NoYXJlZF9pbXBvcnRzLlVzZUZpZWxkLCB7CiAgICBwYXRoOiAibm90ZSIsCiAgICBjb21wb25lbnQ6IF9mb3JtLk1hcmtkb3duRWRpdG9yRm9ybSwKICAgIGNvbXBvbmVudFByb3BzOiB7CiAgICAgIGlkQXJpYTogJ2RldGVjdGlvbkVuZ2luZVN0ZXBBYm91dFJ1bGVOb3RlJywKICAgICAgaXNEaXNhYmxlZDogaXNMb2FkaW5nLAogICAgICBkYXRhVGVzdFN1Ymo6ICdkZXRlY3Rpb25FbmdpbmVTdGVwQWJvdXRSdWxlTm90ZScsCiAgICAgIHBsYWNlaG9sZGVyOiBJMThuLkFERF9SVUxFX05PVEVfSEVMUF9URVhUCiAgICB9CiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuRm9ybURhdGFQcm92aWRlciwgewogICAgcGF0aHNUb1dhdGNoOiAic2V2ZXJpdHkiCiAgfSwgZnVuY3Rpb24gKF9yZWY0KSB7CiAgICB2YXIgc2V2ZXJpdHkgPSBfcmVmNC5zZXZlcml0eTsKICAgIHZhciBuZXdSaXNrU2NvcmUgPSBfZGF0YS5kZWZhdWx0Umlza1Njb3JlQnlTZXZlcml0eVtzZXZlcml0eV07CiAgICB2YXIgc2V2ZXJpdHlGaWVsZCA9IGZvcm0uZ2V0RmllbGRzKCkuc2V2ZXJpdHk7CiAgICB2YXIgcmlza1Njb3JlRmllbGQgPSBmb3JtLmdldEZpZWxkcygpLnJpc2tTY29yZTsKCiAgICBpZiAoc2V2ZXJpdHlGaWVsZC52YWx1ZSAhPT0gc2V2ZXJpdHkgJiYgbmV3Umlza1Njb3JlICE9IG51bGwgJiYgcmlza1Njb3JlRmllbGQudmFsdWUgIT09IG5ld1Jpc2tTY29yZSkgewogICAgICByaXNrU2NvcmVGaWVsZC5zZXRWYWx1ZShuZXdSaXNrU2NvcmUpOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0pKSksICFpc1VwZGF0ZVZpZXcgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbmV4dF9zdGVwLk5leHRTdGVwLCB7CiAgICBkYXRhVGVzdFN1Ymo6ICJhYm91dC1jb250aW51ZSIsCiAgICBvbkNsaWNrOiBvblN1Ym1pdCwKICAgIGlzRGlzYWJsZWQ6IGlzTG9hZGluZwogIH0pKTsKfTsKCnZhciBTdGVwQWJvdXRSdWxlID0gKDAsIF9yZWFjdC5tZW1vKShTdGVwQWJvdXRSdWxlQ29tcG9uZW50KTsKZXhwb3J0cy5TdGVwQWJvdXRSdWxlID0gU3RlcEFib3V0UnVsZTs="},null]}