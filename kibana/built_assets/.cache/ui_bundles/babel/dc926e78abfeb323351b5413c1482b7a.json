{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/dashboard/public/saved_dashboards/saved_dashboard.js","dependencies":[{"path":"src/plugins/dashboard/public/saved_dashboards/saved_dashboard.js","mtime":1589249550551},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuY3JlYXRlU2F2ZWREYXNoYm9hcmRDbGFzcyA9IGNyZWF0ZVNhdmVkRGFzaGJvYXJkQ2xhc3M7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3BsdWdpbnMvc2F2ZWRfb2JqZWN0cy9wdWJsaWMiKTsKCnZhciBfc2F2ZWRfZGFzaGJvYXJkX3JlZmVyZW5jZXMgPSByZXF1aXJlKCIuL3NhdmVkX2Rhc2hib2FyZF9yZWZlcmVuY2VzIik7Cgp2YXIgX2Rhc2hib2FyZF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi9kYXNoYm9hcmRfY29uc3RhbnRzIik7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsKICB9OwogIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7Cn0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgewogIGlmIChzZWxmID09PSB2b2lkIDApIHsKICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7CiAgfQoKICByZXR1cm4gc2VsZjsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgby5fX3Byb3RvX18gPSBwOwogICAgcmV0dXJuIG87CiAgfTsKCiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0gLy8gVXNlZCBvbmx5IGJ5IHRoZSBzYXZlZERhc2hib2FyZHMgc2VydmljZSwgdXN1YWxseSBubyByZWFzb24gdG8gY2hhbmdlIHRoaXMKCgpmdW5jdGlvbiBjcmVhdGVTYXZlZERhc2hib2FyZENsYXNzKHNlcnZpY2VzKSB7CiAgdmFyIFNhdmVkT2JqZWN0Q2xhc3MgPSAoMCwgX3B1YmxpYy5jcmVhdGVTYXZlZE9iamVjdENsYXNzKShzZXJ2aWNlcyk7CgogIHZhciBTYXZlZERhc2hib2FyZCA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uIChfU2F2ZWRPYmplY3RDbGFzcykgewogICAgX2luaGVyaXRzKFNhdmVkRGFzaGJvYXJkLCBfU2F2ZWRPYmplY3RDbGFzcyk7IC8vIHNhdmUgdGhlc2Ugb2JqZWN0cyB3aXRoIHRoZSAnZGFzaGJvYXJkJyB0eXBlCiAgICAvLyBpZiB0eXBlOmRhc2hib2FyZCBoYXMgbm8gbWFwcGluZywgd2UgcHVzaCB0aGlzIG1hcHBpbmcgaW50byBFUwoKCiAgICBmdW5jdGlvbiBTYXZlZERhc2hib2FyZChpZCkgewogICAgICB2YXIgX3RoaXM7CgogICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F2ZWREYXNoYm9hcmQpOwoKICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2F2ZWREYXNoYm9hcmQpLmNhbGwodGhpcywgewogICAgICAgIHR5cGU6IFNhdmVkRGFzaGJvYXJkLnR5cGUsCiAgICAgICAgbWFwcGluZzogU2F2ZWREYXNoYm9hcmQubWFwcGluZywKICAgICAgICBzZWFyY2hTb3VyY2U6IFNhdmVkRGFzaGJvYXJkLnNlYXJjaFNvdXJjZSwKICAgICAgICBleHRyYWN0UmVmZXJlbmNlczogX3NhdmVkX2Rhc2hib2FyZF9yZWZlcmVuY2VzLmV4dHJhY3RSZWZlcmVuY2VzLAogICAgICAgIGluamVjdFJlZmVyZW5jZXM6IF9zYXZlZF9kYXNoYm9hcmRfcmVmZXJlbmNlcy5pbmplY3RSZWZlcmVuY2VzLAogICAgICAgIC8vIGlmIHRoaXMgaXMgbnVsbC91bmRlZmluZWQgdGhlbiB0aGUgU2F2ZWRPYmplY3Qgd2lsbCBiZSBhc3NpZ25lZCB0aGUgZGVmYXVsdHMKICAgICAgICBpZDogaWQsCiAgICAgICAgLy8gZGVmYXVsdCB2YWx1ZXMgdGhhdCB3aWxsIGdldCBhc3NpZ25lZCBpZiB0aGUgZG9jIGlzIG5ldwogICAgICAgIGRlZmF1bHRzOiB7CiAgICAgICAgICB0aXRsZTogJycsCiAgICAgICAgICBoaXRzOiAwLAogICAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgICAgcGFuZWxzSlNPTjogJ1tdJywKICAgICAgICAgIG9wdGlvbnNKU09OOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgIC8vIGZvciBCV0MgcmVhc29ucyB3ZSBjYW4ndCBkZWZhdWx0IGRhc2hib2FyZHMgdGhhdCBhbHJlYWR5IGV4aXN0IHdpdGhvdXQgdGhpcyBzZXR0aW5nIHRvIHRydWUuCiAgICAgICAgICAgIHVzZU1hcmdpbnM6ICFpZCwKICAgICAgICAgICAgaGlkZVBhbmVsVGl0bGVzOiBmYWxzZQogICAgICAgICAgfSksCiAgICAgICAgICB2ZXJzaW9uOiAxLAogICAgICAgICAgdGltZVJlc3RvcmU6IGZhbHNlLAogICAgICAgICAgdGltZVRvOiB1bmRlZmluZWQsCiAgICAgICAgICB0aW1lRnJvbTogdW5kZWZpbmVkLAogICAgICAgICAgcmVmcmVzaEludGVydmFsOiB1bmRlZmluZWQKICAgICAgICB9CiAgICAgIH0pKTsKCiAgICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNob3dJblJlY2VudGx5QWNjZXNzZWQiLCB0cnVlKTsKCiAgICAgIF90aGlzLmdldEZ1bGxQYXRoID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiAiL2FwcC9raWJhbmEjIi5jb25jYXQoKDAsIF9kYXNoYm9hcmRfY29uc3RhbnRzLmNyZWF0ZURhc2hib2FyZEVkaXRVcmwpKFN0cmluZyhfdGhpcy5pZCkpKTsKICAgICAgfTsKCiAgICAgIHJldHVybiBfdGhpczsKICAgIH0KCiAgICBfY3JlYXRlQ2xhc3MoU2F2ZWREYXNoYm9hcmQsIFt7CiAgICAgIGtleTogImdldFF1ZXJ5IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFF1ZXJ5KCkgewogICAgICAgIHJldHVybiB0aGlzLnNlYXJjaFNvdXJjZS5nZXRPd25GaWVsZCgncXVlcnknKSB8fCB7CiAgICAgICAgICBxdWVyeTogJycsCiAgICAgICAgICBsYW5ndWFnZTogJ2t1ZXJ5JwogICAgICAgIH07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZ2V0RmlsdGVycyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWx0ZXJzKCkgewogICAgICAgIHJldHVybiB0aGlzLnNlYXJjaFNvdXJjZS5nZXRPd25GaWVsZCgnZmlsdGVyJykgfHwgW107CiAgICAgIH0KICAgIH1dKTsKCiAgICByZXR1cm4gU2F2ZWREYXNoYm9hcmQ7CiAgfShTYXZlZE9iamVjdENsYXNzKTsgLy8gVW5mb3J0dW5hdGVseSB0aGlzIHRocm93cyBhIHR5cGVzY3JpcHQgZXJyb3Igd2l0aG91dCB0aGUgY2FzdGluZy4gIEkgdGhpbmsgaXQncyBkdWUgdG8gdGhlCiAgLy8gY29udm9sdXRlZCB3YXkgU2F2ZWRPYmplY3RzIGFyZSBjcmVhdGVkLgoKCiAgX2RlZmluZVByb3BlcnR5KFNhdmVkRGFzaGJvYXJkLCAidHlwZSIsICdkYXNoYm9hcmQnKTsKCiAgX2RlZmluZVByb3BlcnR5KFNhdmVkRGFzaGJvYXJkLCAibWFwcGluZyIsIHsKICAgIHRpdGxlOiAndGV4dCcsCiAgICBoaXRzOiAnaW50ZWdlcicsCiAgICBkZXNjcmlwdGlvbjogJ3RleHQnLAogICAgcGFuZWxzSlNPTjogJ3RleHQnLAogICAgb3B0aW9uc0pTT046ICd0ZXh0JywKICAgIHZlcnNpb246ICdpbnRlZ2VyJywKICAgIHRpbWVSZXN0b3JlOiAnYm9vbGVhbicsCiAgICB0aW1lVG86ICdrZXl3b3JkJywKICAgIHRpbWVGcm9tOiAna2V5d29yZCcsCiAgICByZWZyZXNoSW50ZXJ2YWw6IHsKICAgICAgdHlwZTogJ29iamVjdCcsCiAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICBkaXNwbGF5OiB7CiAgICAgICAgICB0eXBlOiAna2V5d29yZCcKICAgICAgICB9LAogICAgICAgIHBhdXNlOiB7CiAgICAgICAgICB0eXBlOiAnYm9vbGVhbicKICAgICAgICB9LAogICAgICAgIHNlY3Rpb246IHsKICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJwogICAgICAgIH0sCiAgICAgICAgdmFsdWU6IHsKICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0pOwoKICBfZGVmaW5lUHJvcGVydHkoU2F2ZWREYXNoYm9hcmQsICJmaWVsZE9yZGVyIiwgWyd0aXRsZScsICdkZXNjcmlwdGlvbiddKTsKCiAgX2RlZmluZVByb3BlcnR5KFNhdmVkRGFzaGJvYXJkLCAic2VhcmNoU291cmNlIiwgdHJ1ZSk7CgogIHJldHVybiBTYXZlZERhc2hib2FyZDsKfQ=="},null]}