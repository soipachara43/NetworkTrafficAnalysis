{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/core/public/legacy/legacy_service.js","dependencies":[{"path":"src/core/public/legacy/legacy_service.js","mtime":1589249549310},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkxlZ2FjeVBsYXRmb3JtU2VydmljZSA9IHZvaWQgMDsKCnZhciBfYW5ndWxhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiYW5ndWxhciIpKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfcnhqcyA9IHJlcXVpcmUoInJ4anMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Ci8qKgogKiBUaGUgTGVnYWN5UGxhdGZvcm1TZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciBpbml0aWFsaXppbmcKICogdGhlIGxlZ2FjeSBwbGF0Zm9ybSBieSBpbmplY3RpbmcgcGFydHMgb2YgdGhlIG5ldyBwbGF0Zm9ybQogKiBzZXJ2aWNlcyBpbnRvIHRoZSBsZWdhY3kgcGxhdGZvcm0gbW9kdWxlcywgbGlrZSB1aS9tb2R1bGVzLAogKiBhbmQgdGhlbiBib290c3RyYXBwaW5nIHRoZSB1aS9jaHJvbWUgb3IgdWkvdGVzdF9oYXJuZXNzIHRvCiAqIHNldHVwIGVpdGhlciB0aGUgYXBwIG9yIGJyb3dzZXIgdGVzdHMuCiAqLwoKCnZhciBMZWdhY3lQbGF0Zm9ybVNlcnZpY2UgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICAvKiogU3ltYm9sIHRvIHJlcHJlc2VudCB0aGUgbGVnYWN5IHBsYXRmb3JtIGFzIGEgZmFrZSAicGx1Z2luIi4gVXNlZCBieSB0aGUgQ29udGV4dFNlcnZpY2UgKi8KICBmdW5jdGlvbiBMZWdhY3lQbGF0Zm9ybVNlcnZpY2UocGFyYW1zKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGVnYWN5UGxhdGZvcm1TZXJ2aWNlKTsKCiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImxlZ2FjeUlkIiwgU3ltYm9sKCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiYm9vdHN0cmFwTW9kdWxlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInRhcmdldERvbUVsZW1lbnQiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic3RhcnREZXBlbmRlbmNpZXMkIiwgbmV3IF9yeGpzLlN1YmplY3QoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzdGFydERlcGVuZGVuY2llcyIsIHRoaXMuc3RhcnREZXBlbmRlbmNpZXMkLnBpcGUoKDAsIF9vcGVyYXRvcnMuZmlyc3QpKCkpLnRvUHJvbWlzZSgpKTsKICB9CgogIF9jcmVhdGVDbGFzcyhMZWdhY3lQbGF0Zm9ybVNlcnZpY2UsIFt7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoX3JlZikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGNvcmUgPSBfcmVmLmNvcmUsCiAgICAgICAgICBwbHVnaW5zID0gX3JlZi5wbHVnaW5zOyAvLyBBbHdheXMgcmVnaXN0ZXIgbGVnYWN5IGFwcHMsIGV2ZW4gaWYgbm90IGluIGxlZ2FjeSBtb2RlLgoKICAgICAgY29yZS5pbmplY3RlZE1ldGFkYXRhLmdldExlZ2FjeU1ldGFkYXRhKCkubmF2LmZvckVhY2goZnVuY3Rpb24gKG5hdkxpbmspIHsKICAgICAgICByZXR1cm4gY29yZS5hcHBsaWNhdGlvbi5yZWdpc3RlckxlZ2FjeUFwcCh7CiAgICAgICAgICBpZDogbmF2TGluay5pZCwKICAgICAgICAgIG9yZGVyOiBuYXZMaW5rLm9yZGVyLAogICAgICAgICAgdGl0bGU6IG5hdkxpbmsudGl0bGUsCiAgICAgICAgICBldWlJY29uVHlwZTogbmF2TGluay5ldWlJY29uVHlwZSwKICAgICAgICAgIGljb246IG5hdkxpbmsuaWNvbiwKICAgICAgICAgIGFwcFVybDogbmF2TGluay51cmwsCiAgICAgICAgICBzdWJVcmxCYXNlOiBuYXZMaW5rLnN1YlVybEJhc2UsCiAgICAgICAgICBsaW5rVG9MYXN0U3ViVXJsOiBuYXZMaW5rLmxpbmtUb0xhc3RTdWJVcmwsCiAgICAgICAgICBjYXRlZ29yeTogbmF2TGluay5jYXRlZ29yeSwKICAgICAgICAgIGRpc2FibGVTdWJVcmxUcmFja2luZzogbmF2TGluay5kaXNhYmxlU3ViVXJsVHJhY2tpbmcKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB2YXIgbGVnYWN5Q29yZSA9IF9vYmplY3RTcHJlYWQoe30sIGNvcmUsIHsKICAgICAgICBnZXRTdGFydFNlcnZpY2VzOiBmdW5jdGlvbiBnZXRTdGFydFNlcnZpY2VzKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzLnN0YXJ0RGVwZW5kZW5jaWVzOwogICAgICAgIH0sCiAgICAgICAgYXBwbGljYXRpb246IF9vYmplY3RTcHJlYWQoe30sIGNvcmUuYXBwbGljYXRpb24sIHsKICAgICAgICAgIHJlZ2lzdGVyOiBub3RTdXBwb3J0ZWQoImNvcmUuYXBwbGljYXRpb24ucmVnaXN0ZXIoKSIpLAogICAgICAgICAgcmVnaXN0ZXJNb3VudENvbnRleHQ6IG5vdFN1cHBvcnRlZCgiY29yZS5hcHBsaWNhdGlvbi5yZWdpc3Rlck1vdW50Q29udGV4dCgpIikKICAgICAgICB9KQogICAgICB9KTsgLy8gSW5qZWN0IHBhcnRzIG9mIHRoZSBuZXcgcGxhdGZvcm0gaW50byBwYXJ0cyBvZiB0aGUgbGVnYWN5IHBsYXRmb3JtCiAgICAgIC8vIHNvIHRoYXQgbGVnYWN5IEFQSXMvbW9kdWxlcyBjYW4gbWltaWMgdGhlaXIgbmV3IHBsYXRmb3JtIGNvdW50ZXJwYXJ0cwoKCiAgICAgIGlmIChjb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0TGVnYWN5TW9kZSgpKSB7CiAgICAgICAgcmVxdWlyZSgndWkvbmV3X3BsYXRmb3JtJykuX19zZXR1cF9fKGxlZ2FjeUNvcmUsIHBsdWdpbnMpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KF9yZWYyKSB7CiAgICAgIHZhciBjb3JlID0gX3JlZjIuY29yZSwKICAgICAgICAgIHRhcmdldERvbUVsZW1lbnQgPSBfcmVmMi50YXJnZXREb21FbGVtZW50LAogICAgICAgICAgcGx1Z2lucyA9IF9yZWYyLnBsdWdpbnMsCiAgICAgICAgICBfcmVmMiRsYXN0U3ViVXJsU3RvcmEgPSBfcmVmMi5sYXN0U3ViVXJsU3RvcmFnZSwKICAgICAgICAgIGxhc3RTdWJVcmxTdG9yYWdlID0gX3JlZjIkbGFzdFN1YlVybFN0b3JhID09PSB2b2lkIDAgPyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UgOiBfcmVmMiRsYXN0U3ViVXJsU3RvcmE7IC8vIEluaXRpYWxpemUgbGVnYWN5IHN1YiB1cmxzCgogICAgICBjb3JlLmNocm9tZS5uYXZMaW5rcy5nZXRBbGwoKS5maWx0ZXIoZnVuY3Rpb24gKGxpbmspIHsKICAgICAgICByZXR1cm4gbGluay5sZWdhY3k7CiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG5hdkxpbmspIHsKICAgICAgICB2YXIgbGFzdFN1YlVybCA9IGxhc3RTdWJVcmxTdG9yYWdlLmdldEl0ZW0oImxhc3RTdWJVcmw6Ii5jb25jYXQobmF2TGluay5iYXNlVXJsKSk7CiAgICAgICAgY29yZS5jaHJvbWUubmF2TGlua3MudXBkYXRlKG5hdkxpbmsuaWQsIHsKICAgICAgICAgIHVybDogbGFzdFN1YlVybCB8fCBuYXZMaW5rLnVybCB8fCBuYXZMaW5rLmJhc2VVcmwKICAgICAgICB9KTsKICAgICAgfSk7IC8vIE9ubHkgaW1wb3J0IGFuZCBib290c3RyYXAgbGVnYWN5IHBsYXRmb3JtIGlmIHdlJ3JlIGluIGxlZ2FjeSBtb2RlLgoKICAgICAgaWYgKCFjb3JlLmluamVjdGVkTWV0YWRhdGEuZ2V0TGVnYWN5TW9kZSgpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgbGVnYWN5Q29yZSA9IF9vYmplY3RTcHJlYWQoe30sIGNvcmUsIHsKICAgICAgICBhcHBsaWNhdGlvbjogewogICAgICAgICAgY3VycmVudEFwcElkJDogY29yZS5hcHBsaWNhdGlvbi5jdXJyZW50QXBwSWQkLAogICAgICAgICAgY2FwYWJpbGl0aWVzOiBjb3JlLmFwcGxpY2F0aW9uLmNhcGFiaWxpdGllcywKICAgICAgICAgIGdldFVybEZvckFwcDogY29yZS5hcHBsaWNhdGlvbi5nZXRVcmxGb3JBcHAsCiAgICAgICAgICBuYXZpZ2F0ZVRvQXBwOiBjb3JlLmFwcGxpY2F0aW9uLm5hdmlnYXRlVG9BcHAsCiAgICAgICAgICByZWdpc3Rlck1vdW50Q29udGV4dDogbm90U3VwcG9ydGVkKCJjb3JlLmFwcGxpY2F0aW9uLnJlZ2lzdGVyTW91bnRDb250ZXh0KCkiKQogICAgICAgIH0KICAgICAgfSk7CgogICAgICB0aGlzLnN0YXJ0RGVwZW5kZW5jaWVzJC5uZXh0KFtsZWdhY3lDb3JlLCBwbHVnaW5zXSk7IC8vIEluamVjdCBwYXJ0cyBvZiB0aGUgbmV3IHBsYXRmb3JtIGludG8gcGFydHMgb2YgdGhlIGxlZ2FjeSBwbGF0Zm9ybQogICAgICAvLyBzbyB0aGF0IGxlZ2FjeSBBUElzL21vZHVsZXMgY2FuIG1pbWljIHRoZWlyIG5ldyBwbGF0Zm9ybSBjb3VudGVycGFydHMKCiAgICAgIHJlcXVpcmUoJ3VpL25ld19wbGF0Zm9ybScpLl9fc3RhcnRfXyhsZWdhY3lDb3JlLCBwbHVnaW5zKTsgLy8gTG9hZCB0aGUgYm9vdHN0cmFwIG1vZHVsZSBiZWZvcmUgbG9hZGluZyB0aGUgbGVnYWN5IHBsYXRmb3JtIGZpbGVzIHNvIHRoYXQKICAgICAgLy8gdGhlIGJvb3RzdHJhcCBtb2R1bGUgY2FuIG1vZGlmeSB0aGUgZW52aXJvbm1lbnQgYSBiaXQgZmlyc3QKCgogICAgICB0aGlzLmJvb3RzdHJhcE1vZHVsZSA9IHRoaXMubG9hZEJvb3RzdHJhcE1vZHVsZSgpOyAvLyByZXF1aXJlIHRoZSBmaWxlcyB0aGF0IHdpbGwgdGllIGludG8gdGhlIGxlZ2FjeSBwbGF0Zm9ybQoKICAgICAgdGhpcy5wYXJhbXMucmVxdWlyZUxlZ2FjeUZpbGVzKCk7CgogICAgICBpZiAoIXRoaXMuYm9vdHN0cmFwTW9kdWxlKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXAgbW9kdWxlIG11c3QgYmUgbG9hZGVkIGJlZm9yZSBgc3RhcnRgJyk7CiAgICAgIH0KCiAgICAgIHRoaXMudGFyZ2V0RG9tRWxlbWVudCA9IHRhcmdldERvbUVsZW1lbnQ7IC8vIGB0YXJnZXREb21FbGVtZW50YCBpcyBhbHdheXMgZGVmaW5lZCB3aGVuIGluIGxlZ2FjeSBtb2RlCgogICAgICB0aGlzLmJvb3RzdHJhcE1vZHVsZS5ib290c3RyYXAodGhpcy50YXJnZXREb21FbGVtZW50KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgewogICAgICBpZiAoIXRoaXMudGFyZ2V0RG9tRWxlbWVudCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGFuZ3VsYXJSb290ID0gX2FuZ3VsYXIuZGVmYXVsdC5lbGVtZW50KHRoaXMudGFyZ2V0RG9tRWxlbWVudCk7CgogICAgICB2YXIgaW5qZWN0b3IkID0gYW5ndWxhclJvb3QuaW5qZWN0b3IoKTsgLy8gaWYgd2UgaGF2ZW4ndCBnb3R0ZW4gdG8gdGhlIHBvaW50IG9mIGJvb3RzdHJhcHBpbmcKICAgICAgLy8gYW5ndWxhciwgaW5qZWN0b3IkIHdvbid0IGJlIGRlZmluZWQKCiAgICAgIGlmICghaW5qZWN0b3IkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9IC8vIGRlc3Ryb3kgdGhlIHJvb3QgYW5ndWxhciBzY29wZQoKCiAgICAgIGluamVjdG9yJC5nZXQoJyRyb290U2NvcGUnKS4kZGVzdHJveSgpOyAvLyBjbGVhciB0aGUgaW5uZXIgaHRtbCBvZiB0aGUgcm9vdCBhbmd1bGFyIGVsZW1lbnQKCiAgICAgIHRoaXMudGFyZ2V0RG9tRWxlbWVudC50ZXh0Q29udGVudCA9ICcnOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWRCb290c3RyYXBNb2R1bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRCb290c3RyYXBNb2R1bGUoKSB7CiAgICAgIGlmICh0aGlzLnBhcmFtcy51c2VMZWdhY3lUZXN0SGFybmVzcykgewogICAgICAgIC8vIHdyYXBwZWQgaW4gTk9ERV9FTlYgY2hlY2sgc28gdGhlIGB1aS90ZXN0X2hhcm5lc3NgIG1vZHVsZQogICAgICAgIC8vIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgZGlzdHJpYnV0YWJsZQogICAgICAgIGlmIChwcm9jZXNzLmVudi5JU19LSUJBTkFfRElTVFJJQlVUQUJMRSAhPT0gJ3RydWUnKSB7CiAgICAgICAgICByZXR1cm4gcmVxdWlyZSgndWkvdGVzdF9oYXJuZXNzJyk7CiAgICAgICAgfQoKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Rlc3RzIGJ1bmRsZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBkaXN0cmlidXRhYmxlJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXF1aXJlKCd1aS9jaHJvbWUnKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBMZWdhY3lQbGF0Zm9ybVNlcnZpY2U7Cn0oKTsKCmV4cG9ydHMuTGVnYWN5UGxhdGZvcm1TZXJ2aWNlID0gTGVnYWN5UGxhdGZvcm1TZXJ2aWNlOwoKdmFyIG5vdFN1cHBvcnRlZCA9IGZ1bmN0aW9uIG5vdFN1cHBvcnRlZChtZXRob2ROYW1lKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHRocm93IG5ldyBFcnJvcigiIi5jb25jYXQobWV0aG9kTmFtZSwgIiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBsZWdhY3kgcGxhdGZvcm0uIikpOwogIH07Cn07"},null]}