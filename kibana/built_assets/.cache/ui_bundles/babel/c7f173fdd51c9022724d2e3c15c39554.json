{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/meta.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/meta.js","mtime":1589249552380},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldEtpYmFuYVJlZ2lvbkxpc3QgPSBnZXRLaWJhbmFSZWdpb25MaXN0OwpleHBvcnRzLmdldEtpYmFuYVRpbGVNYXAgPSBnZXRLaWJhbmFUaWxlTWFwOwpleHBvcnRzLmdldEVNU0NsaWVudCA9IGdldEVNU0NsaWVudDsKZXhwb3J0cy5nZXRHbHlwaFVybCA9IGdldEdseXBoVXJsOwpleHBvcnRzLmlzUmV0aW5hID0gaXNSZXRpbmE7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfZW1zQ2xpZW50ID0gcmVxdWlyZSgiQGVsYXN0aWMvZW1zLWNsaWVudCIpOwoKdmFyIF9raWJhbmFfc2VydmljZXMgPSByZXF1aXJlKCIuL2tpYmFuYV9zZXJ2aWNlcyIpOwoKdmFyIF9ub2RlRmV0Y2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm5vZGUtZmV0Y2giKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCnZhciBHSVNfQVBJX1JFTEFUSVZFID0gIi4uLyIuY29uY2F0KF9jb25zdGFudHMuR0lTX0FQSV9QQVRIKTsKCmZ1bmN0aW9uIGdldEtpYmFuYVJlZ2lvbkxpc3QoKSB7CiAgcmV0dXJuIF9jaHJvbWUuZGVmYXVsdC5nZXRJbmplY3RlZCgncmVnaW9ubWFwTGF5ZXJzJyk7Cn0KCmZ1bmN0aW9uIGdldEtpYmFuYVRpbGVNYXAoKSB7CiAgcmV0dXJuIF9jaHJvbWUuZGVmYXVsdC5nZXRJbmplY3RlZCgndGlsZW1hcCcpOwp9CgpmdW5jdGlvbiByZWxhdGl2ZVRvQWJzb2x1dGUodXJsKSB7CiAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpOwogIHJldHVybiBhLmhyZWY7Cn0KCmZ1bmN0aW9uIGZldGNoRnVuY3Rpb24oKSB7CiAgcmV0dXJuIF9ub2RlRmV0Y2guZGVmYXVsdC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7Cn0KCnZhciBlbXNDbGllbnQgPSBudWxsOwp2YXIgbGF0ZXN0TGljZW5zZUlkID0gbnVsbDsKCmZ1bmN0aW9uIGdldEVNU0NsaWVudCgpIHsKICBpZiAoIWVtc0NsaWVudCkgewogICAgdmFyIGlzRW1zRW5hYmxlZCA9IF9jaHJvbWUuZGVmYXVsdC5nZXRJbmplY3RlZCgnaXNFbXNFbmFibGVkJywgdHJ1ZSk7CgogICAgaWYgKGlzRW1zRW5hYmxlZCkgewogICAgICB2YXIgcHJveHlFbGFzdGljTWFwc1NlcnZpY2VJbk1hcHMgPSBfY2hyb21lLmRlZmF1bHQuZ2V0SW5qZWN0ZWQoJ3Byb3h5RWxhc3RpY01hcHNTZXJ2aWNlSW5NYXBzJywgZmFsc2UpOwoKICAgICAgdmFyIHByb3h5UGF0aCA9ICcnOwogICAgICB2YXIgdGlsZUFwaVVybCA9IHByb3h5RWxhc3RpY01hcHNTZXJ2aWNlSW5NYXBzID8gcmVsYXRpdmVUb0Fic29sdXRlKCIiLmNvbmNhdChHSVNfQVBJX1JFTEFUSVZFLCAiLyIpLmNvbmNhdChfY29uc3RhbnRzLkVNU19USUxFU19DQVRBTE9HVUVfUEFUSCkpIDogX2Nocm9tZS5kZWZhdWx0LmdldEluamVjdGVkKCdlbXNUaWxlQXBpVXJsJyk7CiAgICAgIHZhciBmaWxlQXBpVXJsID0gcHJveHlFbGFzdGljTWFwc1NlcnZpY2VJbk1hcHMgPyByZWxhdGl2ZVRvQWJzb2x1dGUoIiIuY29uY2F0KEdJU19BUElfUkVMQVRJVkUsICIvIikuY29uY2F0KF9jb25zdGFudHMuRU1TX0ZJTEVTX0NBVEFMT0dVRV9QQVRIKSkgOiBfY2hyb21lLmRlZmF1bHQuZ2V0SW5qZWN0ZWQoJ2Vtc0ZpbGVBcGlVcmwnKTsKICAgICAgZW1zQ2xpZW50ID0gbmV3IF9lbXNDbGllbnQuRU1TQ2xpZW50KHsKICAgICAgICBsYW5ndWFnZTogX2kxOG4uaTE4bi5nZXRMb2NhbGUoKSwKICAgICAgICBhcHBWZXJzaW9uOiBfY2hyb21lLmRlZmF1bHQuZ2V0SW5qZWN0ZWQoJ2tiblBrZ1ZlcnNpb24nKSwKICAgICAgICBhcHBOYW1lOiBfY29uc3RhbnRzLkVNU19BUFBfTkFNRSwKICAgICAgICB0aWxlQXBpVXJsOiB0aWxlQXBpVXJsLAogICAgICAgIGZpbGVBcGlVcmw6IGZpbGVBcGlVcmwsCiAgICAgICAgbGFuZGluZ1BhZ2VVcmw6IF9jaHJvbWUuZGVmYXVsdC5nZXRJbmplY3RlZCgnZW1zTGFuZGluZ1BhZ2VVcmwnKSwKICAgICAgICBmZXRjaEZ1bmN0aW9uOiBmZXRjaEZ1bmN0aW9uLAogICAgICAgIC8vaW1wb3J0IHRoaXMgZnJvbSBjbGllbnQtc2lkZSwgc28gdGhlIHJpZ2h0IGluc3RhbmNlIGlzIHJldHVybmVkIChib290c3RyYXBwZWQgZnJvbSBjb21tb24vKiB3b3VsZCBub3Qgd29yawogICAgICAgIHByb3h5UGF0aDogcHJveHlQYXRoCiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgLy9FTVMgaXMgdHVybmVkIG9mZi4gTW9jayBBUEkuCiAgICAgIGVtc0NsaWVudCA9IHsKICAgICAgICBnZXRGaWxlTGF5ZXJzOiBmdW5jdGlvbiBnZXRGaWxlTGF5ZXJzKCkgewogICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIFtdKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGdldFRNU1NlcnZpY2VzOiBmdW5jdGlvbiBnZXRUTVNTZXJ2aWNlcygpIHsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBbXSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgICB9KSkoKTsKICAgICAgICB9LAogICAgICAgIGFkZFF1ZXJ5UGFyYW1zOiBmdW5jdGlvbiBhZGRRdWVyeVBhcmFtcygpIHt9CiAgICAgIH07CiAgICB9CiAgfQoKICB2YXIgbGljZW5zZUlkID0gKDAsIF9raWJhbmFfc2VydmljZXMuZ2V0TGljZW5zZUlkKSgpOwoKICBpZiAobGF0ZXN0TGljZW5zZUlkICE9PSBsaWNlbnNlSWQpIHsKICAgIGxhdGVzdExpY2Vuc2VJZCA9IGxpY2Vuc2VJZDsKICAgIGVtc0NsaWVudC5hZGRRdWVyeVBhcmFtcyh7CiAgICAgIGxpY2Vuc2U6IGxpY2Vuc2VJZAogICAgfSk7CiAgfQoKICByZXR1cm4gZW1zQ2xpZW50Owp9CgpmdW5jdGlvbiBnZXRHbHlwaFVybCgpIHsKICBpZiAoIV9jaHJvbWUuZGVmYXVsdC5nZXRJbmplY3RlZCgnaXNFbXNFbmFibGVkJywgdHJ1ZSkpIHsKICAgIHJldHVybiAnJzsKICB9CgogIHJldHVybiBfY2hyb21lLmRlZmF1bHQuZ2V0SW5qZWN0ZWQoJ3Byb3h5RWxhc3RpY01hcHNTZXJ2aWNlSW5NYXBzJywgZmFsc2UpID8gcmVsYXRpdmVUb0Fic29sdXRlKCIuLi8iLmNvbmNhdChfY29uc3RhbnRzLkdJU19BUElfUEFUSCwgIi8iKS5jb25jYXQoX2NvbnN0YW50cy5FTVNfVElMRVNfQ0FUQUxPR1VFX1BBVEgsICIvIikuY29uY2F0KF9jb25zdGFudHMuRU1TX0dMWVBIU19QQVRIKSkgKyAiL3tmb250c3RhY2t9L3tyYW5nZX0iIDogX2Nocm9tZS5kZWZhdWx0LmdldEluamVjdGVkKCdlbXNGb250TGlicmFyeVVybCcsIHRydWUpOwp9CgpmdW5jdGlvbiBpc1JldGluYSgpIHsKICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPT09IDI7Cn0="},null]}