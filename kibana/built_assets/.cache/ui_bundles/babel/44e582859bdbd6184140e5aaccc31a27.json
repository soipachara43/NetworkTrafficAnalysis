{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/timeline/body/stateful_body.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/timeline/body/stateful_body.js","mtime":1589249553140},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlN0YXRlZnVsQm9keSA9IGV4cG9ydHMuZW1wdHlDb2x1bW5IZWFkZXJzID0gdm9pZCAwOwoKdmFyIF9mcCA9IHJlcXVpcmUoImxvZGFzaC9mcCIpOwoKdmFyIF9tZW1vaXplT25lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtZW1vaXplLW9uZSIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX2Zhc3REZWVwRXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImZhc3QtZGVlcC1lcXVhbCIpKTsKCnZhciBfc3RvcmUgPSByZXF1aXJlKCIuLi8uLi8uLi9zdG9yZSIpOwoKdmFyIF9hY3Rpb25zID0gcmVxdWlyZSgiLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyIpOwoKdmFyIF9kZWZhdWx0cyA9IHJlcXVpcmUoIi4uLy4uLy4uL3N0b3JlL3RpbWVsaW5lL2RlZmF1bHRzIik7Cgp2YXIgX3RpbWVsaW5lX2NvbnRleHQgPSByZXF1aXJlKCIuLi90aW1lbGluZV9jb250ZXh0Iik7Cgp2YXIgX2hlbHBlcnMgPSByZXF1aXJlKCIuL2NvbHVtbl9oZWFkZXJzL2hlbHBlcnMiKTsKCnZhciBfaGVscGVyczIgPSByZXF1aXJlKCIuL2hlbHBlcnMiKTsKCnZhciBfaW5kZXggPSByZXF1aXJlKCIuL2luZGV4Iik7Cgp2YXIgX3JlbmRlcmVycyA9IHJlcXVpcmUoIi4vcmVuZGVyZXJzIik7Cgp2YXIgX3BsYWluX3Jvd19yZW5kZXJlciA9IHJlcXVpcmUoIi4vcmVuZGVyZXJzL3BsYWluX3Jvd19yZW5kZXJlciIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgZW1wdHlDb2x1bW5IZWFkZXJzID0gW107CmV4cG9ydHMuZW1wdHlDb2x1bW5IZWFkZXJzID0gZW1wdHlDb2x1bW5IZWFkZXJzOwoKdmFyIFN0YXRlZnVsQm9keUNvbXBvbmVudCA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgYWRkTm90ZVRvRXZlbnQgPSBfcmVmLmFkZE5vdGVUb0V2ZW50LAogICAgICBhcHBseURlbHRhVG9Db2x1bW5XaWR0aCA9IF9yZWYuYXBwbHlEZWx0YVRvQ29sdW1uV2lkdGgsCiAgICAgIGJyb3dzZXJGaWVsZHMgPSBfcmVmLmJyb3dzZXJGaWVsZHMsCiAgICAgIGNvbHVtbkhlYWRlcnMgPSBfcmVmLmNvbHVtbkhlYWRlcnMsCiAgICAgIGRhdGEgPSBfcmVmLmRhdGEsCiAgICAgIGV2ZW50SWRUb05vdGVJZHMgPSBfcmVmLmV2ZW50SWRUb05vdGVJZHMsCiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LAogICAgICBpZCA9IF9yZWYuaWQsCiAgICAgIF9yZWYkaXNFdmVudFZpZXdlciA9IF9yZWYuaXNFdmVudFZpZXdlciwKICAgICAgaXNFdmVudFZpZXdlciA9IF9yZWYkaXNFdmVudFZpZXdlciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlzRXZlbnRWaWV3ZXIsCiAgICAgIGlzU2VsZWN0QWxsQ2hlY2tlZCA9IF9yZWYuaXNTZWxlY3RBbGxDaGVja2VkLAogICAgICBsb2FkaW5nRXZlbnRJZHMgPSBfcmVmLmxvYWRpbmdFdmVudElkcywKICAgICAgbm90ZXNCeUlkID0gX3JlZi5ub3Rlc0J5SWQsCiAgICAgIHBpbkV2ZW50ID0gX3JlZi5waW5FdmVudCwKICAgICAgcGlubmVkRXZlbnRJZHMgPSBfcmVmLnBpbm5lZEV2ZW50SWRzLAogICAgICByZW1vdmVDb2x1bW4gPSBfcmVmLnJlbW92ZUNvbHVtbiwKICAgICAgc2VsZWN0ZWRFdmVudElkcyA9IF9yZWYuc2VsZWN0ZWRFdmVudElkcywKICAgICAgc2V0U2VsZWN0ZWQgPSBfcmVmLnNldFNlbGVjdGVkLAogICAgICBjbGVhclNlbGVjdGVkID0gX3JlZi5jbGVhclNlbGVjdGVkLAogICAgICBzaG93Q2hlY2tib3hlcyA9IF9yZWYuc2hvd0NoZWNrYm94ZXMsCiAgICAgIHNob3dSb3dSZW5kZXJlcnMgPSBfcmVmLnNob3dSb3dSZW5kZXJlcnMsCiAgICAgIHNvcnQgPSBfcmVmLnNvcnQsCiAgICAgIHRvZ2dsZUNvbHVtbiA9IF9yZWYudG9nZ2xlQ29sdW1uLAogICAgICB1blBpbkV2ZW50ID0gX3JlZi51blBpbkV2ZW50LAogICAgICB1cGRhdGVDb2x1bW5zID0gX3JlZi51cGRhdGVDb2x1bW5zLAogICAgICB1cGRhdGVOb3RlID0gX3JlZi51cGRhdGVOb3RlLAogICAgICB1cGRhdGVTb3J0ID0gX3JlZi51cGRhdGVTb3J0OwogIHZhciB0aW1lbGluZVR5cGVDb250ZXh0ID0gKDAsIF90aW1lbGluZV9jb250ZXh0LnVzZVRpbWVsaW5lVHlwZUNvbnRleHQpKCk7CiAgdmFyIGdldE5vdGVzQnlJZHMgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAobm90ZUlkcykgewogICAgcmV0dXJuIF9zdG9yZS5hcHBTZWxlY3RvcnMuZ2V0Tm90ZXMobm90ZXNCeUlkLCBub3RlSWRzKTsKICB9LCBbbm90ZXNCeUlkXSk7CiAgdmFyIG9uQWRkTm90ZVRvRXZlbnQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoX3JlZjIpIHsKICAgIHZhciBldmVudElkID0gX3JlZjIuZXZlbnRJZCwKICAgICAgICBub3RlSWQgPSBfcmVmMi5ub3RlSWQ7CiAgICByZXR1cm4gYWRkTm90ZVRvRXZlbnQoewogICAgICBpZDogaWQsCiAgICAgIGV2ZW50SWQ6IGV2ZW50SWQsCiAgICAgIG5vdGVJZDogbm90ZUlkCiAgICB9KTsKICB9LCBbaWRdKTsKICB2YXIgb25Sb3dTZWxlY3RlZCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChfcmVmMykgewogICAgdmFyIF90aW1lbGluZVR5cGVDb250ZXh0JDsKCiAgICB2YXIgZXZlbnRJZHMgPSBfcmVmMy5ldmVudElkcywKICAgICAgICBpc1NlbGVjdGVkID0gX3JlZjMuaXNTZWxlY3RlZDsKICAgIHNldFNlbGVjdGVkKHsKICAgICAgaWQ6IGlkLAogICAgICBldmVudElkczogKDAsIF9oZWxwZXJzMi5nZXRFdmVudElkVG9EYXRhTWFwcGluZykoZGF0YSwgZXZlbnRJZHMsIChfdGltZWxpbmVUeXBlQ29udGV4dCQgPSB0aW1lbGluZVR5cGVDb250ZXh0LnF1ZXJ5RmllbGRzKSAhPT0gbnVsbCAmJiBfdGltZWxpbmVUeXBlQ29udGV4dCQgIT09IHZvaWQgMCA/IF90aW1lbGluZVR5cGVDb250ZXh0JCA6IFtdKSwKICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCwKICAgICAgaXNTZWxlY3RBbGxDaGVja2VkOiBpc1NlbGVjdGVkICYmIE9iamVjdC5rZXlzKHNlbGVjdGVkRXZlbnRJZHMpLmxlbmd0aCArIDEgPT09IGRhdGEubGVuZ3RoCiAgICB9KTsKICB9LCBbc2V0U2VsZWN0ZWQsIGlkLCBkYXRhLCBzZWxlY3RlZEV2ZW50SWRzLCB0aW1lbGluZVR5cGVDb250ZXh0LnF1ZXJ5RmllbGRzXSk7CiAgdmFyIG9uU2VsZWN0QWxsID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKF9yZWY0KSB7CiAgICB2YXIgX3RpbWVsaW5lVHlwZUNvbnRleHQkMjsKCiAgICB2YXIgaXNTZWxlY3RlZCA9IF9yZWY0LmlzU2VsZWN0ZWQ7CiAgICByZXR1cm4gaXNTZWxlY3RlZCA/IHNldFNlbGVjdGVkKHsKICAgICAgaWQ6IGlkLAogICAgICBldmVudElkczogKDAsIF9oZWxwZXJzMi5nZXRFdmVudElkVG9EYXRhTWFwcGluZykoZGF0YSwgZGF0YS5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgcmV0dXJuIGV2ZW50Ll9pZDsKICAgICAgfSksIChfdGltZWxpbmVUeXBlQ29udGV4dCQyID0gdGltZWxpbmVUeXBlQ29udGV4dC5xdWVyeUZpZWxkcykgIT09IG51bGwgJiYgX3RpbWVsaW5lVHlwZUNvbnRleHQkMiAhPT0gdm9pZCAwID8gX3RpbWVsaW5lVHlwZUNvbnRleHQkMiA6IFtdKSwKICAgICAgaXNTZWxlY3RlZDogaXNTZWxlY3RlZCwKICAgICAgaXNTZWxlY3RBbGxDaGVja2VkOiBpc1NlbGVjdGVkCiAgICB9KSA6IGNsZWFyU2VsZWN0ZWQoewogICAgICBpZDogaWQKICAgIH0pOwogIH0sIFtzZXRTZWxlY3RlZCwgY2xlYXJTZWxlY3RlZCwgaWQsIGRhdGEsIHRpbWVsaW5lVHlwZUNvbnRleHQucXVlcnlGaWVsZHNdKTsKICB2YXIgb25Db2x1bW5Tb3J0ZWQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoc29ydGVkKSB7CiAgICB1cGRhdGVTb3J0KHsKICAgICAgaWQ6IGlkLAogICAgICBzb3J0OiBzb3J0ZWQKICAgIH0pOwogIH0sIFtpZF0pOwogIHZhciBvbkNvbHVtblJlbW92ZWQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoY29sdW1uSWQpIHsKICAgIHJldHVybiByZW1vdmVDb2x1bW4oewogICAgICBpZDogaWQsCiAgICAgIGNvbHVtbklkOiBjb2x1bW5JZAogICAgfSk7CiAgfSwgW2lkXSk7CiAgdmFyIG9uQ29sdW1uUmVzaXplZCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChfcmVmNSkgewogICAgdmFyIGNvbHVtbklkID0gX3JlZjUuY29sdW1uSWQsCiAgICAgICAgZGVsdGEgPSBfcmVmNS5kZWx0YTsKICAgIHJldHVybiBhcHBseURlbHRhVG9Db2x1bW5XaWR0aCh7CiAgICAgIGlkOiBpZCwKICAgICAgY29sdW1uSWQ6IGNvbHVtbklkLAogICAgICBkZWx0YTogZGVsdGEKICAgIH0pOwogIH0sIFtpZF0pOwogIHZhciBvblBpbkV2ZW50ID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGV2ZW50SWQpIHsKICAgIHJldHVybiBwaW5FdmVudCh7CiAgICAgIGlkOiBpZCwKICAgICAgZXZlbnRJZDogZXZlbnRJZAogICAgfSk7CiAgfSwgW2lkXSk7CiAgdmFyIG9uVW5QaW5FdmVudCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChldmVudElkKSB7CiAgICByZXR1cm4gdW5QaW5FdmVudCh7CiAgICAgIGlkOiBpZCwKICAgICAgZXZlbnRJZDogZXZlbnRJZAogICAgfSk7CiAgfSwgW2lkXSk7CiAgdmFyIG9uVXBkYXRlTm90ZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChub3RlKSB7CiAgICByZXR1cm4gdXBkYXRlTm90ZSh7CiAgICAgIG5vdGU6IG5vdGUKICAgIH0pOwogIH0sIFtdKTsKICB2YXIgb25VcGRhdGVDb2x1bW5zID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGNvbHVtbnMpIHsKICAgIHJldHVybiB1cGRhdGVDb2x1bW5zKHsKICAgICAgaWQ6IGlkLAogICAgICBjb2x1bW5zOiBjb2x1bW5zCiAgICB9KTsKICB9LCBbaWRdKTsgLy8gU3luYyB0byB0aW1lbGluZVR5cGVDb250ZXh0LnNlbGVjdEFsbCBzbyBwYXJlbnQgY29tcG9uZW50cyBjYW4gc2VsZWN0IGFsbCBldmVudHMKCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIGlmICh0aW1lbGluZVR5cGVDb250ZXh0LnNlbGVjdEFsbCkgewogICAgICBvblNlbGVjdEFsbCh7CiAgICAgICAgaXNTZWxlY3RlZDogdHJ1ZQogICAgICB9KTsKICAgIH0KICB9LCBbdGltZWxpbmVUeXBlQ29udGV4dC5zZWxlY3RBbGxdKTsgLy8gb25TZWxlY3RBbGwgZGVwZW5kZW5jeSBub3QgbmVjZXNzYXJ5CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pbmRleC5Cb2R5LCB7CiAgICBhZGROb3RlVG9FdmVudDogb25BZGROb3RlVG9FdmVudCwKICAgIGJyb3dzZXJGaWVsZHM6IGJyb3dzZXJGaWVsZHMsCiAgICBjb2x1bW5IZWFkZXJzOiBjb2x1bW5IZWFkZXJzIHx8IGVtcHR5Q29sdW1uSGVhZGVycywKICAgIGNvbHVtblJlbmRlcmVyczogX3JlbmRlcmVycy5jb2x1bW5SZW5kZXJlcnMsCiAgICBkYXRhOiBkYXRhLAogICAgZXZlbnRJZFRvTm90ZUlkczogZXZlbnRJZFRvTm90ZUlkcywKICAgIGdldE5vdGVzQnlJZHM6IGdldE5vdGVzQnlJZHMsCiAgICBoZWlnaHQ6IGhlaWdodCwKICAgIGlkOiBpZCwKICAgIGlzRXZlbnRWaWV3ZXI6IGlzRXZlbnRWaWV3ZXIsCiAgICBpc1NlbGVjdEFsbENoZWNrZWQ6IGlzU2VsZWN0QWxsQ2hlY2tlZCwKICAgIGxvYWRpbmdFdmVudElkczogbG9hZGluZ0V2ZW50SWRzLAogICAgb25Db2x1bW5SZW1vdmVkOiBvbkNvbHVtblJlbW92ZWQsCiAgICBvbkNvbHVtblJlc2l6ZWQ6IG9uQ29sdW1uUmVzaXplZCwKICAgIG9uQ29sdW1uU29ydGVkOiBvbkNvbHVtblNvcnRlZCwKICAgIG9uUm93U2VsZWN0ZWQ6IG9uUm93U2VsZWN0ZWQsCiAgICBvblNlbGVjdEFsbDogb25TZWxlY3RBbGwsCiAgICBvbkZpbHRlckNoYW5nZTogX2ZwLm5vb3AgLy8gVE9ETzogdGhpcyBpcyB0aGUgY2FsbGJhY2sgZm9yIGNvbHVtbiBmaWx0ZXJzLCB3aGljaCBpcyBvdXQgc2NvcGUgZm9yIHRoaXMgcGhhc2Ugb2YgZGVsaXZlcnkKICAgICwKICAgIG9uUGluRXZlbnQ6IG9uUGluRXZlbnQsCiAgICBvblVuUGluRXZlbnQ6IG9uVW5QaW5FdmVudCwKICAgIG9uVXBkYXRlQ29sdW1uczogb25VcGRhdGVDb2x1bW5zLAogICAgcGlubmVkRXZlbnRJZHM6IHBpbm5lZEV2ZW50SWRzLAogICAgcm93UmVuZGVyZXJzOiBzaG93Um93UmVuZGVyZXJzID8gX3JlbmRlcmVycy5yb3dSZW5kZXJlcnMgOiBbX3BsYWluX3Jvd19yZW5kZXJlci5wbGFpblJvd1JlbmRlcmVyXSwKICAgIHNlbGVjdGVkRXZlbnRJZHM6IHNlbGVjdGVkRXZlbnRJZHMsCiAgICBzaG93Q2hlY2tib3hlczogc2hvd0NoZWNrYm94ZXMsCiAgICBzb3J0OiBzb3J0LAogICAgdG9nZ2xlQ29sdW1uOiB0b2dnbGVDb2x1bW4sCiAgICB1cGRhdGVOb3RlOiBvblVwZGF0ZU5vdGUKICB9KTsKfSwgZnVuY3Rpb24gKHByZXZQcm9wcywgbmV4dFByb3BzKSB7CiAgcmV0dXJuICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMuYnJvd3NlckZpZWxkcywgbmV4dFByb3BzLmJyb3dzZXJGaWVsZHMpICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMuY29sdW1uSGVhZGVycywgbmV4dFByb3BzLmNvbHVtbkhlYWRlcnMpICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMuZGF0YSwgbmV4dFByb3BzLmRhdGEpICYmIHByZXZQcm9wcy5ldmVudElkVG9Ob3RlSWRzID09PSBuZXh0UHJvcHMuZXZlbnRJZFRvTm90ZUlkcyAmJiAoMCwgX2Zhc3REZWVwRXF1YWwuZGVmYXVsdCkocHJldlByb3BzLm5vdGVzQnlJZCwgbmV4dFByb3BzLm5vdGVzQnlJZCkgJiYgcHJldlByb3BzLmhlaWdodCA9PT0gbmV4dFByb3BzLmhlaWdodCAmJiBwcmV2UHJvcHMuaWQgPT09IG5leHRQcm9wcy5pZCAmJiBwcmV2UHJvcHMuaXNFdmVudFZpZXdlciA9PT0gbmV4dFByb3BzLmlzRXZlbnRWaWV3ZXIgJiYgcHJldlByb3BzLmlzU2VsZWN0QWxsQ2hlY2tlZCA9PT0gbmV4dFByb3BzLmlzU2VsZWN0QWxsQ2hlY2tlZCAmJiBwcmV2UHJvcHMubG9hZGluZ0V2ZW50SWRzID09PSBuZXh0UHJvcHMubG9hZGluZ0V2ZW50SWRzICYmIHByZXZQcm9wcy5waW5uZWRFdmVudElkcyA9PT0gbmV4dFByb3BzLnBpbm5lZEV2ZW50SWRzICYmIHByZXZQcm9wcy5zZWxlY3RlZEV2ZW50SWRzID09PSBuZXh0UHJvcHMuc2VsZWN0ZWRFdmVudElkcyAmJiBwcmV2UHJvcHMuc2hvd0NoZWNrYm94ZXMgPT09IG5leHRQcm9wcy5zaG93Q2hlY2tib3hlcyAmJiBwcmV2UHJvcHMuc2hvd1Jvd1JlbmRlcmVycyA9PT0gbmV4dFByb3BzLnNob3dSb3dSZW5kZXJlcnMgJiYgcHJldlByb3BzLnNvcnQgPT09IG5leHRQcm9wcy5zb3J0Owp9KTsKClN0YXRlZnVsQm9keUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdTdGF0ZWZ1bEJvZHlDb21wb25lbnQnOwoKdmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkgewogIHZhciBtZW1vaXplZENvbHVtbkhlYWRlcnMgPSAoMCwgX21lbW9pemVPbmUuZGVmYXVsdCkoX2hlbHBlcnMuZ2V0Q29sdW1uSGVhZGVycyk7CgogIHZhciBnZXRUaW1lbGluZSA9IF9zdG9yZS50aW1lbGluZVNlbGVjdG9ycy5nZXRUaW1lbGluZUJ5SWRTZWxlY3RvcigpOwoKICB2YXIgZ2V0Tm90ZXNCeUlkcyA9IF9zdG9yZS5hcHBTZWxlY3RvcnMubm90ZXNCeUlkc1NlbGVjdG9yKCk7CgogIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIF9yZWY2KSB7CiAgICB2YXIgX2dldFRpbWVsaW5lOwoKICAgIHZhciBicm93c2VyRmllbGRzID0gX3JlZjYuYnJvd3NlckZpZWxkcywKICAgICAgICBpZCA9IF9yZWY2LmlkOwogICAgdmFyIHRpbWVsaW5lID0gKF9nZXRUaW1lbGluZSA9IGdldFRpbWVsaW5lKHN0YXRlLCBpZCkpICE9PSBudWxsICYmIF9nZXRUaW1lbGluZSAhPT0gdm9pZCAwID8gX2dldFRpbWVsaW5lIDogX2RlZmF1bHRzLnRpbWVsaW5lRGVmYXVsdHM7CiAgICB2YXIgY29sdW1ucyA9IHRpbWVsaW5lLmNvbHVtbnMsCiAgICAgICAgZXZlbnRJZFRvTm90ZUlkcyA9IHRpbWVsaW5lLmV2ZW50SWRUb05vdGVJZHMsCiAgICAgICAgZXZlbnRUeXBlID0gdGltZWxpbmUuZXZlbnRUeXBlLAogICAgICAgIGlzU2VsZWN0QWxsQ2hlY2tlZCA9IHRpbWVsaW5lLmlzU2VsZWN0QWxsQ2hlY2tlZCwKICAgICAgICBsb2FkaW5nRXZlbnRJZHMgPSB0aW1lbGluZS5sb2FkaW5nRXZlbnRJZHMsCiAgICAgICAgcGlubmVkRXZlbnRJZHMgPSB0aW1lbGluZS5waW5uZWRFdmVudElkcywKICAgICAgICBzZWxlY3RlZEV2ZW50SWRzID0gdGltZWxpbmUuc2VsZWN0ZWRFdmVudElkcywKICAgICAgICBzaG93Q2hlY2tib3hlcyA9IHRpbWVsaW5lLnNob3dDaGVja2JveGVzLAogICAgICAgIHNob3dSb3dSZW5kZXJlcnMgPSB0aW1lbGluZS5zaG93Um93UmVuZGVyZXJzOwogICAgcmV0dXJuIHsKICAgICAgY29sdW1uSGVhZGVyczogbWVtb2l6ZWRDb2x1bW5IZWFkZXJzKGNvbHVtbnMsIGJyb3dzZXJGaWVsZHMpLAogICAgICBldmVudElkVG9Ob3RlSWRzOiBldmVudElkVG9Ob3RlSWRzLAogICAgICBldmVudFR5cGU6IGV2ZW50VHlwZSwKICAgICAgaXNTZWxlY3RBbGxDaGVja2VkOiBpc1NlbGVjdEFsbENoZWNrZWQsCiAgICAgIGxvYWRpbmdFdmVudElkczogbG9hZGluZ0V2ZW50SWRzLAogICAgICBub3Rlc0J5SWQ6IGdldE5vdGVzQnlJZHMoc3RhdGUpLAogICAgICBpZDogaWQsCiAgICAgIHBpbm5lZEV2ZW50SWRzOiBwaW5uZWRFdmVudElkcywKICAgICAgc2VsZWN0ZWRFdmVudElkczogc2VsZWN0ZWRFdmVudElkcywKICAgICAgc2hvd0NoZWNrYm94ZXM6IHNob3dDaGVja2JveGVzLAogICAgICBzaG93Um93UmVuZGVyZXJzOiBzaG93Um93UmVuZGVyZXJzCiAgICB9OwogIH07CgogIHJldHVybiBtYXBTdGF0ZVRvUHJvcHM7Cn07Cgp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gewogIGFkZE5vdGVUb0V2ZW50OiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMuYWRkTm90ZVRvRXZlbnQsCiAgYXBwbHlEZWx0YVRvQ29sdW1uV2lkdGg6IF9hY3Rpb25zLnRpbWVsaW5lQWN0aW9ucy5hcHBseURlbHRhVG9Db2x1bW5XaWR0aCwKICBjbGVhclNlbGVjdGVkOiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMuY2xlYXJTZWxlY3RlZCwKICBwaW5FdmVudDogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnBpbkV2ZW50LAogIHJlbW92ZUNvbHVtbjogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnJlbW92ZUNvbHVtbiwKICByZW1vdmVQcm92aWRlcjogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnJlbW92ZVByb3ZpZGVyLAogIHNldFNlbGVjdGVkOiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMuc2V0U2VsZWN0ZWQsCiAgdW5QaW5FdmVudDogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnVuUGluRXZlbnQsCiAgdXBkYXRlQ29sdW1uczogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnVwZGF0ZUNvbHVtbnMsCiAgdXBkYXRlTm90ZTogX2FjdGlvbnMuYXBwQWN0aW9ucy51cGRhdGVOb3RlLAogIHVwZGF0ZVNvcnQ6IF9hY3Rpb25zLnRpbWVsaW5lQWN0aW9ucy51cGRhdGVTb3J0Cn07CnZhciBjb25uZWN0b3IgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFrZU1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKTsKdmFyIFN0YXRlZnVsQm9keSA9IGNvbm5lY3RvcihTdGF0ZWZ1bEJvZHlDb21wb25lbnQpOwpleHBvcnRzLlN0YXRlZnVsQm9keSA9IFN0YXRlZnVsQm9keTs="},null]}