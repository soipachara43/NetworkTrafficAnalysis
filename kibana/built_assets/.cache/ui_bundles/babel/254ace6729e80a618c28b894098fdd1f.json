{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/source_field_section/source_field_section.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/source_field_section/source_field_section.js","mtime":1589249554096},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNvdXJjZUZpZWxkU2VjdGlvbiA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2RvY3VtZW50YXRpb24iKTsKCnZhciBfc2hhcmVkX2ltcG9ydHMgPSByZXF1aXJlKCIuLi8uLi8uLi9zaGFyZWRfaW1wb3J0cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9Cgp2YXIgU291cmNlRmllbGRTZWN0aW9uID0gZnVuY3Rpb24gU291cmNlRmllbGRTZWN0aW9uKCkgewogIHZhciByZW5kZXJXYXJuaW5nID0gZnVuY3Rpb24gcmVuZGVyV2FybmluZygpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ2FsbE91dCwgewogICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IuZGlzYWJsZWRTb3VyY2VGaWVsZENhbGxPdXRUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VzZSBjYXV0aW9uIHdoZW4gZGlzYWJsaW5nIHRoZSBfc291cmNlIGZpZWxkJwogICAgICB9KSwKICAgICAgaWNvblR5cGU6ICJhbGVydCIsCiAgICAgIGNvbG9yOiAid2FybmluZyIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICBpZDogInhwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IuZGlzYWJsZWRTb3VyY2VGaWVsZENhbGxPdXREZXNjcmlwdGlvbjEiLAogICAgICBkZWZhdWx0TWVzc2FnZTogIkRpc2FibGluZyB7c291cmNlfSBsb3dlcnMgc3RvcmFnZSBvdmVyaGVhZCB3aXRoaW4gdGhlIGluZGV4LCBidXQgdGhpcyBjb21lcyBhdCBhIGNvc3QuIEl0IGFsc28gZGlzYWJsZXMgaW1wb3J0YW50IGZlYXR1cmVzLCBzdWNoIGFzIHRoZSBhYmlsaXR5IHRvIHJlaW5kZXggb3IgZGVidWcgcXVlcmllcyBieSB2aWV3aW5nIHRoZSBvcmlnaW5hbCBkb2N1bWVudC4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBzb3VyY2U6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImNvZGUiLCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5kaXNhYmxlZFNvdXJjZUZpZWxkQ2FsbE91dERlc2NyaXB0aW9uMS5zb3VyY2VUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdfc291cmNlJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJhIiwgewogICAgICBocmVmOiBfZG9jdW1lbnRhdGlvbi5kb2N1bWVudGF0aW9uU2VydmljZS5nZXREaXNhYmxpbmdNYXBwaW5nU291cmNlRmllbGRMaW5rKCksCiAgICAgIHRhcmdldDogIl9ibGFuayIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGlkOiAieHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5kaXNhYmxlZFNvdXJjZUZpZWxkQ2FsbE91dERlc2NyaXB0aW9uMiIsCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiTGVhcm4gbW9yZSBhYm91dCBhbHRlcm5hdGl2ZXMgdG8gZGlzYWJsaW5nIHRoZSB7c291cmNlfSBmaWVsZC4iLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBzb3VyY2U6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImNvZGUiLCBudWxsLCBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci5kaXNhYmxlZFNvdXJjZUZpZWxkQ2FsbE91dERlc2NyaXB0aW9uMi5zb3VyY2VUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdfc291cmNlJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KSkpKTsKICB9OwoKICB2YXIgcmVuZGVyRm9ybUZpZWxkcyA9IGZ1bmN0aW9uIHJlbmRlckZvcm1GaWVsZHMoKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuVXNlRmllbGQsIHsKICAgICAgcGF0aDogInNvdXJjZUZpZWxkLmluY2x1ZGVzIgogICAgfSwgZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIGxhYmVsID0gX3JlZi5sYWJlbCwKICAgICAgICAgIGhlbHBUZXh0ID0gX3JlZi5oZWxwVGV4dCwKICAgICAgICAgIHZhbHVlID0gX3JlZi52YWx1ZSwKICAgICAgICAgIHNldFZhbHVlID0gX3JlZi5zZXRWYWx1ZTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IGxhYmVsLAogICAgICAgIGhlbHBUZXh0OiBoZWxwVGV4dCwKICAgICAgICBmdWxsV2lkdGg6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgbm9TdWdnZXN0aW9uczogdHJ1ZSwKICAgICAgICBwbGFjZWhvbGRlcjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3Iuc291cmNlSW5jbHVkZUZpZWxkLnBsYWNlaG9sZGVyTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3BhdGgudG8uZmllbGQuKicKICAgICAgICB9KSwKICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHZhbHVlLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShuZXdWYWx1ZSkgewogICAgICAgICAgc2V0VmFsdWUobmV3VmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgb25DcmVhdGVPcHRpb246IGZ1bmN0aW9uIG9uQ3JlYXRlT3B0aW9uKHNlYXJjaFZhbHVlKSB7CiAgICAgICAgICB2YXIgbmV3T3B0aW9uID0gewogICAgICAgICAgICBsYWJlbDogc2VhcmNoVmFsdWUKICAgICAgICAgIH07CiAgICAgICAgICBzZXRWYWx1ZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlKSwgW25ld09wdGlvbl0pKTsKICAgICAgICB9LAogICAgICAgIGZ1bGxXaWR0aDogdHJ1ZQogICAgICB9KSk7CiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAibSIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Vc2VGaWVsZCwgewogICAgICBwYXRoOiAic291cmNlRmllbGQuZXhjbHVkZXMiCiAgICB9LCBmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgdmFyIGxhYmVsID0gX3JlZjIubGFiZWwsCiAgICAgICAgICBoZWxwVGV4dCA9IF9yZWYyLmhlbHBUZXh0LAogICAgICAgICAgdmFsdWUgPSBfcmVmMi52YWx1ZSwKICAgICAgICAgIHNldFZhbHVlID0gX3JlZjIuc2V0VmFsdWU7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICBoZWxwVGV4dDogaGVscFRleHQsCiAgICAgICAgZnVsbFdpZHRoOiB0cnVlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgICAgIG5vU3VnZ2VzdGlvbnM6IHRydWUsCiAgICAgICAgcGxhY2Vob2xkZXI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLnNvdXJjZUV4Y2x1ZGVGaWVsZC5wbGFjZWhvbGRlckxhYmVsJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdwYXRoLnRvLmZpZWxkLionCiAgICAgICAgfSksCiAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiB2YWx1ZSwKICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UobmV3VmFsdWUpIHsKICAgICAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTsKICAgICAgICB9LAogICAgICAgIG9uQ3JlYXRlT3B0aW9uOiBmdW5jdGlvbiBvbkNyZWF0ZU9wdGlvbihzZWFyY2hWYWx1ZSkgewogICAgICAgICAgdmFyIG5ld09wdGlvbiA9IHsKICAgICAgICAgICAgbGFiZWw6IHNlYXJjaFZhbHVlCiAgICAgICAgICB9OwogICAgICAgICAgc2V0VmFsdWUoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSksIFtuZXdPcHRpb25dKSk7CiAgICAgICAgfSwKICAgICAgICBmdWxsV2lkdGg6IHRydWUKICAgICAgfSkpOwogICAgfSkpOwogIH07CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Gb3JtUm93LCB7CiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3Iuc291cmNlRmllbGRUaXRsZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdfc291cmNlIGZpZWxkJwogICAgfSksCiAgICBkZXNjcmlwdGlvbjogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgaWQ6ICJ4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLnNvdXJjZUZpZWxkRGVzY3JpcHRpb24iLAogICAgICBkZWZhdWx0TWVzc2FnZTogIlRoZSBfc291cmNlIGZpZWxkIGNvbnRhaW5zIHRoZSBvcmlnaW5hbCBKU09OIGRvY3VtZW50IGJvZHkgdGhhdCB3YXMgcHJvdmlkZWQgYXQgaW5kZXggdGltZS4gSW5kaXZpZHVhbCBmaWVsZHMgY2FuIGJlIHBydW5lZCBieSBkZWZpbmluZyB3aGljaCBvbmVzIHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBmcm9tIHRoZSBfc291cmNlIGZpZWxkLiB7ZG9jc0xpbmt9IiwKICAgICAgdmFsdWVzOiB7CiAgICAgICAgZG9jc0xpbms6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMaW5rLCB7CiAgICAgICAgICBocmVmOiBfZG9jdW1lbnRhdGlvbi5kb2N1bWVudGF0aW9uU2VydmljZS5nZXRNYXBwaW5nU291cmNlRmllbGRMaW5rKCksCiAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgfSwgX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3Iuc291cmNlRmllbGREb2N1bWVudGlvbkxpbmsnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlYXJuIG1vcmUuJwogICAgICAgIH0pKQogICAgICB9CiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAibSIKICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Vc2VGaWVsZCwgewogICAgICBwYXRoOiAic291cmNlRmllbGQuZW5hYmxlZCIsCiAgICAgIGNvbXBvbmVudDogX3NoYXJlZF9pbXBvcnRzLlRvZ2dsZUZpZWxkCiAgICB9KSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zaGFyZWRfaW1wb3J0cy5Gb3JtRGF0YVByb3ZpZGVyLCB7CiAgICBwYXRoc1RvV2F0Y2g6IFsnc291cmNlRmllbGQuZW5hYmxlZCddCiAgfSwgZnVuY3Rpb24gKGZvcm1EYXRhKSB7CiAgICB2YXIgZW5hYmxlZCA9IGZvcm1EYXRhWydzb3VyY2VGaWVsZC5lbmFibGVkJ107CgogICAgaWYgKGVuYWJsZWQgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICByZXR1cm4gZW5hYmxlZCA/IHJlbmRlckZvcm1GaWVsZHMoKSA6IHJlbmRlcldhcm5pbmcoKTsKICB9KSk7Cn07CgpleHBvcnRzLlNvdXJjZUZpZWxkU2VjdGlvbiA9IFNvdXJjZUZpZWxkU2VjdGlvbjs="},null]}