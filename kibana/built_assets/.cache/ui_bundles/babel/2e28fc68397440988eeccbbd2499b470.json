{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/beats_management/public/pages/beat/details.js","dependencies":[{"path":"x-pack/legacy/plugins/beats_management/public/pages/beat/details.js","mtime":1589249551715},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuQmVhdERldGFpbFBhZ2UgPSB2b2lkIDA7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0ID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9jb25maWdfc2NoZW1hcyA9IHJlcXVpcmUoIi4uLy4uLy4uL2NvbW1vbi9jb25maWdfc2NoZW1hcyIpOwoKdmFyIF9jb25maWdfc2NoZW1hc190cmFuc2xhdGlvbnNfbWFwID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uL2NvbmZpZ19zY2hlbWFzX3RyYW5zbGF0aW9uc19tYXAiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9icmVhZGNydW1iID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cy9uYXZpZ2F0aW9uL2JyZWFkY3J1bWIiKTsKCnZhciBfY29ubmVjdGVkX2xpbmsgPSByZXF1aXJlKCIuLi8uLi9jb21wb25lbnRzL25hdmlnYXRpb24vY29ubmVjdGVkX2xpbmsiKTsKCnZhciBfdGFnID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cy90YWciKTsKCnZhciBfaW5kZXggPSByZXF1aXJlKCIuLi8uLi9jb21wb25lbnRzL3RhZy9jb25maWdfdmlldy9pbmRleCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9Cgp2YXIgQmVhdERldGFpbFBhZ2VVaSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEJlYXREZXRhaWxQYWdlVWksIF9SZWFjdCRQdXJlQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gQmVhdERldGFpbFBhZ2VVaShwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCZWF0RGV0YWlsUGFnZVVpKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihCZWF0RGV0YWlsUGFnZVVpKS5jYWxsKHRoaXMsIHByb3BzKSk7CiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgc2VsZWN0ZWRDb25maWc6IG51bGwsCiAgICAgIHRhZ3M6IFtdLAogICAgICBjb25maWd1cmF0aW9uX2Jsb2NrczogW10sCiAgICAgIGNvbmZpZ3VyYXRpb25CbG9ja3NQYWdlOiAwCiAgICB9OwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJlYXREZXRhaWxQYWdlVWksIFt7CiAgICBrZXk6ICJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHRhZ3MsIGJsb2Nrc1Jlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxpYnMudGFncy5nZXRUYWdzV2l0aElkcyh0aGlzLnByb3BzLmJlYXQudGFncyk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHRhZ3MgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5saWJzLmNvbmZpZ0Jsb2Nrcy5nZXRGb3JUYWdzKHRoaXMucHJvcHMuYmVhdC50YWdzLCB0aGlzLnN0YXRlLmNvbmZpZ3VyYXRpb25CbG9ja3NQYWdlKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgYmxvY2tzUmVzdWx0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uX2Jsb2NrczogYmxvY2tzUmVzdWx0Lmxpc3QsCiAgICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ3MKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpIHsKICAgICAgICByZXR1cm4gX1VOU0FGRV9jb21wb25lbnRXaWxsTW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzOwogICAgICB2YXIgYmVhdCA9IHByb3BzLmJlYXQsCiAgICAgICAgICBpbnRsID0gcHJvcHMuaW50bDsKCiAgICAgIGlmICghYmVhdCkgewogICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ4cGFjay5iZWF0c01hbmFnZW1lbnQuYmVhdC5iZWF0Tm90Rm91bmRFcnJvclRpdGxlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQmVhdCBub3QgZm91bmQiCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciBjb25maWd1cmF0aW9uQmxvY2tzID0gIXRoaXMuc3RhdGUuY29uZmlndXJhdGlvbl9ibG9ja3MgPyBbXSA6IHRoaXMuc3RhdGUuY29uZmlndXJhdGlvbl9ibG9ja3MubWFwKGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7CiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoewogICAgICAgICAgLy8gQHRzLWlnbm9yZSBvbmUgb2YgdGhlIHR5cGVzIG9uIENvbmZpZ3VyYXRpb25CbG9jayBkb2Vzbid0IGRlZmluZSBhICJtb2R1bGUiIHByb3BlcnR5CiAgICAgICAgICBtb2R1bGU6IGNvbmZpZ3VyYXRpb24uY29uZmlnLnR5cGUgfHwgbnVsbCwKICAgICAgICAgIHRhZ0lkOiBjb25maWd1cmF0aW9uLnRhZywKICAgICAgICAgIHRhZ0NvbG9yOiAoKF90aGlzMi5zdGF0ZS50YWdzIHx8IFtdKS5maW5kKGZ1bmN0aW9uICh0YWcpIHsKICAgICAgICAgICAgcmV0dXJuIHRhZy5pZCA9PT0gY29uZmlndXJhdGlvbi50YWc7CiAgICAgICAgICB9KSB8fCB7fSkuY29sb3IgfHwgJ2dyZXknLAogICAgICAgICAgdGFnTmFtZTogKChfdGhpczIuc3RhdGUudGFncyB8fCBbXSkuZmluZChmdW5jdGlvbiAodGFnKSB7CiAgICAgICAgICAgIHJldHVybiB0YWcuaWQgPT09IGNvbmZpZ3VyYXRpb24udGFnOwogICAgICAgICAgfSkgfHwge30pLm5hbWUgfHwgY29uZmlndXJhdGlvbi50YWcKICAgICAgICB9LCBiZWF0LCB7fSwgY29uZmlndXJhdGlvbiwgewogICAgICAgICAgZGlzcGxheVZhbHVlOiAoMCwgX2xvZGFzaC5nZXQpKCgwLCBfY29uZmlnX3NjaGVtYXNfdHJhbnNsYXRpb25zX21hcC50cmFuc2xhdGVDb25maWdTY2hlbWEpKF9jb25maWdfc2NoZW1hcy5jb25maWdCbG9ja1NjaGVtYXMpLmZpbmQoZnVuY3Rpb24gKGNvbmZpZykgewogICAgICAgICAgICByZXR1cm4gY29uZmlnLmlkID09PSBjb25maWd1cmF0aW9uLnR5cGU7CiAgICAgICAgICB9KSwgJ3RleHQnLCBudWxsKQogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgdmFyIGNvbHVtbnMgPSBbewogICAgICAgIGZpZWxkOiAnZGlzcGxheVZhbHVlJywKICAgICAgICBuYW1lOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd4cGFjay5iZWF0c01hbmFnZW1lbnQuYmVhdENvbmZpZ3VyYXRpb25zLnR5cGVDb2x1bW5OYW1lJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVHlwZScKICAgICAgICB9KSwKICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcih2YWx1ZSwgY29uZmlndXJhdGlvbikgewogICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICBzZWxlY3RlZENvbmZpZzogY29uZmlndXJhdGlvbgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCB2YWx1ZSB8fCBjb25maWd1cmF0aW9uLnR5cGUpOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnbW9kdWxlJywKICAgICAgICBuYW1lOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd4cGFjay5iZWF0c01hbmFnZW1lbnQuYmVhdENvbmZpZ3VyYXRpb25zLm1vZHVsZUNvbHVtbk5hbWUnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNb2R1bGUnCiAgICAgICAgfSksCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIGZpZWxkOiAnZGVzY3JpcHRpb24nLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLmJlYXRzTWFuYWdlbWVudC5iZWF0Q29uZmlndXJhdGlvbnMuZGVzY3JpcHRpb25Db2x1bW5OYW1lJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRGVzY3JpcHRpb24nCiAgICAgICAgfSksCiAgICAgICAgc29ydGFibGU6IHRydWUKICAgICAgfSwgewogICAgICAgIGZpZWxkOiAndGFnSWQnLAogICAgICAgIG5hbWU6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3hwYWNrLmJlYXRzTWFuYWdlbWVudC5iZWF0Q29uZmlndXJhdGlvbnMudGFnQ29sdW1uTmFtZScsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RhZycKICAgICAgICB9KSwKICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihpZCwgYmxvY2spIHsKICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29ubmVjdGVkX2xpbmsuQ29ubmVjdGVkTGluaywgewogICAgICAgICAgICBwYXRoOiAiL3RhZy9lZGl0LyIuY29uY2F0KGlkKQogICAgICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3RhZy5UYWdCYWRnZSwgewogICAgICAgICAgICBtYXhJZFJlbmRlclNpemU6IF9jb25zdGFudHMuVEFCTEVfQ09ORklHLlRSVU5DQVRFX1RBR19MRU5HVEhfU01BTEwsCiAgICAgICAgICAgIHRhZzogewogICAgICAgICAgICAgIGNvbG9yOiBibG9jay50YWdDb2xvciwKICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgbmFtZTogYmxvY2sudGFnTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfSwKICAgICAgICBzb3J0YWJsZTogdHJ1ZQogICAgICB9XTsKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2JyZWFkY3J1bWIuQnJlYWRjcnVtYiwgewogICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suYmVhdHNNYW5hZ2VtZW50LmJyZWFkY3J1bWIuYmVhdERldGFpbHMnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0JlYXQgZGV0YWlscyBmb3I6IHtiZWF0SWR9JywKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBiZWF0SWQ6IGJlYXQuaWQKICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBwYXRoOiAiL2JlYXQvIi5jb25jYXQoYmVhdC5pZCwgIi9kZXRhaWxzIikKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCBudWxsKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ4cGFjay5iZWF0c01hbmFnZW1lbnQuYmVhdC5kZXRhaWxzQ29uZmlndXJhdGlvblRpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkNvbmZpZ3VyYXRpb25zIgogICAgICB9KSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgICAgICBzaXplOiAicyIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAieHBhY2suYmVhdHNNYW5hZ2VtZW50LmJlYXQuZGV0YWlsc0NvbmZpZ3VyYXRpb25EZXNjcmlwdGlvbiIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgY2FuIGhhdmUgbXVsdGlwbGUgY29uZmlndXJhdGlvbnMgYXBwbGllZCB0byBhbiBpbmRpdmlkdWFsIHRhZy4gVGhlc2UgY29uZmlndXJhdGlvbnMgY2FuIHJlcGVhdCBvciBtaXggdHlwZXMgYXMgbmVjZXNzYXJ5LiBGb3IgZXhhbXBsZSwgeW91IG1heSB1dGlsaXplIHRocmVlIG1ldHJpY2JlYXQgY29uZmlndXJhdGlvbnMgYWxvbmdzaWRlIG9uZSBpbnB1dCBhbmQgZmlsZWJlYXQgY29uZmlndXJhdGlvbi4iCiAgICAgIH0pKSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUluTWVtb3J5VGFibGUsIHsKICAgICAgICBjb2x1bW5zOiBjb2x1bW5zLAogICAgICAgIGl0ZW1zOiBjb25maWd1cmF0aW9uQmxvY2tzCiAgICAgIH0pKSksIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb25maWcgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2luZGV4LkNvbmZpZ1ZpZXcsIHsKICAgICAgICBjb25maWdCbG9jazogdGhpcy5zdGF0ZS5zZWxlY3RlZENvbmZpZywKICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7CiAgICAgICAgICAgIHNlbGVjdGVkQ29uZmlnOiBudWxsCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCZWF0RGV0YWlsUGFnZVVpOwp9KF9yZWFjdDIuZGVmYXVsdC5QdXJlQ29tcG9uZW50KTsKCnZhciBCZWF0RGV0YWlsUGFnZSA9ICgwLCBfcmVhY3QuaW5qZWN0STE4bikoQmVhdERldGFpbFBhZ2VVaSk7CmV4cG9ydHMuQmVhdERldGFpbFBhZ2UgPSBCZWF0RGV0YWlsUGFnZTs="},null]}