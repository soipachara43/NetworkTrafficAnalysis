{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/es_ui_shared/public/use_ui_ace_keyboard_mode.js","dependencies":[{"path":"src/plugins/es_ui_shared/public/use_ui_ace_keyboard_mode.js","mtime":1589249550783},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZVVJQWNlS2V5Ym9hcmRNb2RlID0gdXNlVUlBY2VLZXlib2FyZE1vZGU7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgUmVhY3RET00gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdC1kb20iKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9Ci8qCiAqIExpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvcgogKiBsaWNlbnNlIGFncmVlbWVudHMuIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodAogKiBvd25lcnNoaXAuIEVsYXN0aWNzZWFyY2ggQi5WLiBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyCiAqIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOyB5b3UgbWF5CiAqIG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLAogKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbgogKiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkKICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlCiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMKICogdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKCnZhciBPdmVybGF5VGV4dCA9IGZ1bmN0aW9uIE92ZXJsYXlUZXh0KCkgewogIHJldHVybiAoLy8gVGhlIHBvaW50IG9mIHRoaXMgZWxlbWVudCBpcyBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3Nlcywgc28gaWdub3JlIGVzbGludCBlcnJvcgogICAgLy8gaW4gdGhpcyBjYXNlCiAgICAvLwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtaW50ZXJhY3Rpb25zCiAgICBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAicyIKICAgIH0sICJQcmVzcyBFbnRlciB0byBzdGFydCBlZGl0aW5nLiIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICBzaXplOiAicyIKICAgIH0sICJXaGVuIHlvdVx1MjAxOXJlIGRvbmUsIHByZXNzIEVzY2FwZSB0byBzdG9wIGVkaXRpbmcuIikpCiAgKTsKfTsKCmZ1bmN0aW9uIHVzZVVJQWNlS2V5Ym9hcmRNb2RlKGFjZVRleHRBcmVhRWxlbWVudCkgewogIHZhciBvdmVybGF5TW91bnROb2RlID0gKDAsIF9yZWFjdC51c2VSZWYpKG51bGwpOwogIHZhciBhdXRvQ29tcGxldGVWaXNpYmxlUmVmID0gKDAsIF9yZWFjdC51c2VSZWYpKGZhbHNlKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gb25EaXNtaXNzT3ZlcmxheShldmVudCkgewogICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gX2V1aS5rZXlDb2Rlcy5FTlRFUikgewogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgYWNlVGV4dEFyZWFFbGVtZW50LmZvY3VzKCk7CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBlbmFibGVPdmVybGF5KCkgewogICAgICBpZiAob3ZlcmxheU1vdW50Tm9kZS5jdXJyZW50KSB7CiAgICAgICAgb3ZlcmxheU1vdW50Tm9kZS5jdXJyZW50LmZvY3VzKCk7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgaXNBdXRvQ29tcGxldGVWaXNpYmxlID0gZnVuY3Rpb24gaXNBdXRvQ29tcGxldGVWaXNpYmxlKCkgewogICAgICB2YXIgYXV0b0NvbXBsZXRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY2VfYXV0b2NvbXBsZXRlJyk7CgogICAgICBpZiAoIWF1dG9Db21wbGV0ZXIpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gLy8gVGhlIGF1dG9Db21wbGV0ZSBpcyBqdXN0IGhpZGRlbiB3aGVuIGl0J3MgY2xvc2VkLCBub3QgcmVtb3ZlZCBmcm9tIHRoZSBET00uCgoKICAgICAgcmV0dXJuIGF1dG9Db21wbGV0ZXIuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnOwogICAgfTsKCiAgICB2YXIgZG9jdW1lbnRLZXlEb3duTGlzdGVuZXIgPSBmdW5jdGlvbiBkb2N1bWVudEtleURvd25MaXN0ZW5lcigpIHsKICAgICAgYXV0b0NvbXBsZXRlVmlzaWJsZVJlZi5jdXJyZW50ID0gaXNBdXRvQ29tcGxldGVWaXNpYmxlKCk7CiAgICB9OwoKICAgIHZhciBhY2VLZXlkb3duTGlzdGVuZXIgPSBmdW5jdGlvbiBhY2VLZXlkb3duTGlzdGVuZXIoZXZlbnQpIHsKICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IF9ldWkua2V5Q29kZXMuRVNDQVBFICYmICFhdXRvQ29tcGxldGVWaXNpYmxlUmVmLmN1cnJlbnQpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgIGVuYWJsZU92ZXJsYXkoKTsKICAgICAgfQogICAgfTsKCiAgICBpZiAoYWNlVGV4dEFyZWFFbGVtZW50KSB7CiAgICAgIC8vIFdlIGRvbid0IGNvbnRyb2wgSFRNTCBlbGVtZW50cyBpbnNpZGUgb2YgYWNlIHNvIHdlIGltcGVyYXRpdmVseSBjcmVhdGUgYW4gZWxlbWVudAogICAgICAvLyB0aGF0IGFjdHMgYXMgYSBjb250YWluZXIgYW5kIGluc2VydCBpdCBqdXN0IGJlZm9yZSBhY2UncyB0ZXh0YXJlYSBlbGVtZW50CiAgICAgIC8vIHNvIHRoYXQgdGhlIG92ZXJsYXkgbGl2ZXMgYXQgdGhlIGNvcnJlY3Qgc3BvdCBpbiB0aGUgRE9NIGhpZXJhcmNoeS4KICAgICAgb3ZlcmxheU1vdW50Tm9kZS5jdXJyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIG92ZXJsYXlNb3VudE5vZGUuY3VycmVudC5jbGFzc05hbWUgPSAna2JuVWlBY2VLZXlib2FyZEhpbnQnOwogICAgICBvdmVybGF5TW91bnROb2RlLmN1cnJlbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2FwcGxpY2F0aW9uJyk7CiAgICAgIG92ZXJsYXlNb3VudE5vZGUuY3VycmVudC50YWJJbmRleCA9IDA7CiAgICAgIG92ZXJsYXlNb3VudE5vZGUuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGVuYWJsZU92ZXJsYXkpOwogICAgICBvdmVybGF5TW91bnROb2RlLmN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRGlzbWlzc092ZXJsYXkpOwogICAgICBSZWFjdERPTS5yZW5kZXIoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChPdmVybGF5VGV4dCwgbnVsbCksIG92ZXJsYXlNb3VudE5vZGUuY3VycmVudCk7CiAgICAgIGFjZVRleHRBcmVhRWxlbWVudC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShvdmVybGF5TW91bnROb2RlLmN1cnJlbnQsIGFjZVRleHRBcmVhRWxlbWVudCk7CiAgICAgIGFjZVRleHRBcmVhRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7IC8vIE9yZGVyIG9mIGV2ZW50czoKICAgICAgLy8gMS4gRG9jdW1lbnQgY2FwdHVyZSBldmVudCBmaXJlcyBmaXJzdCBhbmQgd2UgY2hlY2sgd2hldGhlciBhbiBhdXRvY29tcGxldGUgbWVudSBpcyBvcGVuIG9uIGtleWRvd24KICAgICAgLy8gICAgKG5vdCBpZGVhbCBiZWNhdXNlIHRoaXMgaXMgc2NvcGVkIHRvIHRoZSBlbnRpcmUgZG9jdW1lbnQpLgogICAgICAvLyAyLiBBY2UgY2hhbmdlcyBpdCdzIHN0YXRlIChsaWtlIGhpZGluZyBvciBzaG93aW5nIGF1dG9jb21wbGV0ZSBtZW51KQogICAgICAvLyAzLiBXZSBjaGVjayB3aGF0IGJ1dHRvbiB3YXMgcHJlc3NlZCBhbmQgd2hldGhlciBhdXRvY29tcGxldGUgd2FzIHZpc2libGUgdGhlbiBkZXRlcm1pbmUKICAgICAgLy8gICAgd2hldGhlciBpdCBzaG91bGQgYWN0IGxpa2UgYSBkaXNtaXNzIG9yIGlmIHdlIHNob3VsZCBkaXNwbGF5IGFuIG92ZXJsYXkuCgogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZG9jdW1lbnRLZXlEb3duTGlzdGVuZXIsIHsKICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgIH0pOwogICAgICBhY2VUZXh0QXJlYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGFjZUtleWRvd25MaXN0ZW5lcik7CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKGFjZVRleHRBcmVhRWxlbWVudCkgewogICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBkb2N1bWVudEtleURvd25MaXN0ZW5lciwgewogICAgICAgICAgY2FwdHVyZTogdHJ1ZQogICAgICAgIH0pOwogICAgICAgIGFjZVRleHRBcmVhRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgYWNlS2V5ZG93bkxpc3RlbmVyKTsKICAgICAgICB2YXIgdGV4dEFyZWFDb250YWluZXIgPSBhY2VUZXh0QXJlYUVsZW1lbnQucGFyZW50RWxlbWVudDsKCiAgICAgICAgaWYgKHRleHRBcmVhQ29udGFpbmVyICYmIHRleHRBcmVhQ29udGFpbmVyLmNvbnRhaW5zKG92ZXJsYXlNb3VudE5vZGUuY3VycmVudCkpIHsKICAgICAgICAgIHRleHRBcmVhQ29udGFpbmVyLnJlbW92ZUNoaWxkKG92ZXJsYXlNb3VudE5vZGUuY3VycmVudCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0sIFthY2VUZXh0QXJlYUVsZW1lbnRdKTsKfQ=="},null]}