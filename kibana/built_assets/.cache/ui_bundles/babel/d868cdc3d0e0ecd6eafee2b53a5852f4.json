{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/chrome/api/nav.js","dependencies":[{"path":"src/legacy/ui/public/chrome/api/nav.js","mtime":1589249550283},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRDaHJvbWVOYXZBcGkgPSBpbml0Q2hyb21lTmF2QXBpOwoKdmFyIF9hYnNvbHV0ZV90b19wYXJzZWRfdXJsID0gcmVxdWlyZSgiLi4vLi4vdXJsL2Fic29sdXRlX3RvX3BhcnNlZF91cmwiKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgiLi4vLi4vbmV3X3BsYXRmb3JtIik7Cgp2YXIgX3JlbGF0aXZlX3RvX2Fic29sdXRlID0gcmVxdWlyZSgiLi4vLi4vdXJsL3JlbGF0aXZlX3RvX2Fic29sdXRlIik7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9CgpmdW5jdGlvbiBpbml0Q2hyb21lTmF2QXBpKGNocm9tZSwgaW50ZXJuYWxzKSB7CiAgdmFyIGNvcmVOYXZMaW5rcyA9IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmNocm9tZS5uYXZMaW5rczsKICAvKioKICAgKiBDbGVhciBsYXN0IHVybCBmb3IgZGVsZXRlZCBzYXZlZCBvYmplY3RzIHRvIGF2b2lkIGxvYWRpbmcgcGFnZXMgd2l0aCAiQ291bGQgbm90IGxvY2F0ZS4uLiIKICAgKi8KCiAgY2hyb21lLnVudHJhY2tOYXZMaW5rc0ZvckRlbGV0ZWRTYXZlZE9iamVjdHMgPSBmdW5jdGlvbiAoZGVsZXRlZElkcykgewogICAgZnVuY3Rpb24gdXJsQ29udGFpbnNEZWxldGVkSWQodXJsKSB7CiAgICAgIHZhciBpbmNsdWRlZElkID0gZGVsZXRlZElkcy5maW5kKGZ1bmN0aW9uIChkZWxldGVkSWQpIHsKICAgICAgICByZXR1cm4gdXJsLmluY2x1ZGVzKGRlbGV0ZWRJZCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gaW5jbHVkZWRJZCAhPT0gdW5kZWZpbmVkOwogICAgfQoKICAgIGNvcmVOYXZMaW5rcy5nZXRBbGwoKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7CiAgICAgIGlmIChsaW5rLmxpbmtUb0xhc3RTdWJVcmwgJiYgdXJsQ29udGFpbnNEZWxldGVkSWQobGluay51cmwpKSB7CiAgICAgICAgc2V0TGFzdFVybChsaW5rLCBsaW5rLmJhc2VVcmwpOwogICAgICB9CiAgICB9KTsKICB9OwogIC8qKgogICAqIE1hbnVhbGx5IHNldHMgdGhlIGxhc3QgdXJsIGZvciB0aGUgZ2l2ZW4gYXBwLiBUaGUgbGFzdCB1cmwgZm9yIGEgZ2l2ZW4gYXBwIGlzIHVwZGF0ZWQgYXV0b21hdGljYWxseSBkdXJpbmcKICAgKiBub3JtYWwgcGFnZSBuYXZpZ2F0aW9uLCBzbyB0aGlzIHNob3VsZCBvbmx5IG5lZWQgdG8gYmUgY2FsbGVkIHRvIGluc2VydCBhIGxhc3QgdXJsIHRoYXQgd2FzIG5vdCBhY3R1YWxseQogICAqIG5hdmlnYXRlZCB0by4gRm9yIGluc3RhbmNlLCB3aGVuIHNhdmluZyBhbiBvYmplY3QgYW5kIHJlZGlyZWN0aW5nIHRvIGFub3RoZXIgcGFnZSwgdGhlIGxhc3QgdXJsIG9mIHRoZSBhcHAKICAgKiBzaG91bGQgYmUgdGhlIHNhdmVkIGluc3RhbmNlLCBidXQgYmVjYXVzZSBvZiB0aGUgcmVkaXJlY3QgdG8gYSBkaWZmZXJlbnQgcGFnZSAoZS5nLiBgU2F2ZSBhbmQgQWRkIHRvIERhc2hib2FyZGAKICAgKiBvbiB2aXN1YWxpemUgdGFiKSwgaXQgd29uJ3QgYmUgdHJhY2tlZCBhdXRvbWF0aWNhbGx5IGFuZCB3aWxsIG5lZWQgdG8gYmUgaW5zZXJ0ZWQgbWFudWFsbHkuIFNlZQogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFzdGljL2tpYmFuYS9wdWxsLzExOTMyIGZvciBtb3JlIGJhY2tncm91bmQgb24gd2h5IHRoaXMgd2FzIGFkZGVkLgogICAqCiAgICogQHBhcmFtIGlkIHtTdHJpbmd9IC0gYW4gaWQgdGhhdCByZXByZXNlbnRzIHRoZSBuYXZpZ2F0aW9uIGxpbmsuCiAgICogQHBhcmFtIGtpYmFuYVBhcnNlZFVybCB7S2liYW5hUGFyc2VkVXJsfSB0aGUgdXJsIHRvIHRyYWNrCiAgICovCgoKICBjaHJvbWUudHJhY2tTdWJVcmxGb3JBcHAgPSBmdW5jdGlvbiAoaWQsIGtpYmFuYVBhcnNlZFVybCkgewogICAgdmFyIG5hdkxpbmsgPSBjb3JlTmF2TGlua3MuZ2V0KGlkKTsKCiAgICBpZiAobmF2TGluaykgewogICAgICBzZXRMYXN0VXJsKG5hdkxpbmssIGtpYmFuYVBhcnNlZFVybC5nZXRBYnNvbHV0ZVVybCgpKTsKICAgIH0KICB9OwoKICBpbnRlcm5hbHMudHJhY2tQb3NzaWJsZVN1YlVybCA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHVybCkgewogICAgICB2YXIga2liYW5hUGFyc2VkVXJsOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAga2liYW5hUGFyc2VkVXJsID0gKDAsIF9hYnNvbHV0ZV90b19wYXJzZWRfdXJsLmFic29sdXRlVG9QYXJzZWRVcmwpKHVybCwgY2hyb21lLmdldEJhc2VQYXRoKCkpOwogICAgICAgICAgICAgIGNvcmVOYXZMaW5rcy5nZXRBbGwoKSAvLyBGaWx0ZXIgb25seSBsZWdhY3kgbGlua3MKICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsaW5rKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGluay5sZWdhY3kgJiYgIWxpbmsuZGlzYWJsZVN1YlVybFRyYWNraW5nOwogICAgICAgICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGxpbmspIHsKICAgICAgICAgICAgICAgIHZhciBhY3RpdmUgPSB1cmwuc3RhcnRzV2l0aChsaW5rLnN1YlVybEJhc2UpOwogICAgICAgICAgICAgICAgbGluayA9IGNvcmVOYXZMaW5rcy51cGRhdGUobGluay5pZCwgewogICAgICAgICAgICAgICAgICBhY3RpdmU6IGFjdGl2ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKGFjdGl2ZSkgewogICAgICAgICAgICAgICAgICBzZXRMYXN0VXJsKGxpbmssIHVybCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsaW5rID0gcmVmcmVzaExhc3RVcmwobGluayk7CiAgICAgICAgICAgICAgICB2YXIgbmV3R2xvYmFsU3RhdGUgPSBraWJhbmFQYXJzZWRVcmwuZ2V0R2xvYmFsU3RhdGUoKTsKCiAgICAgICAgICAgICAgICBpZiAobmV3R2xvYmFsU3RhdGUpIHsKICAgICAgICAgICAgICAgICAgaW5qZWN0TmV3R2xvYmFsU3RhdGUobGluaywga2liYW5hUGFyc2VkVXJsLmFwcElkLCBuZXdHbG9iYWxTdGF0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICBmdW5jdGlvbiBsYXN0U3ViVXJsS2V5KGxpbmspIHsKICAgIHJldHVybiAibGFzdFN1YlVybDoiLmNvbmNhdChsaW5rLmJhc2VVcmwpOwogIH0KCiAgZnVuY3Rpb24gZ2V0TGFzdFVybChsaW5rKSB7CiAgICByZXR1cm4gaW50ZXJuYWxzLmFwcFVybFN0b3JlLmdldEl0ZW0obGFzdFN1YlVybEtleShsaW5rKSk7CiAgfQoKICBmdW5jdGlvbiBzZXRMYXN0VXJsKGxpbmssIHVybCkgewogICAgaWYgKGxpbmsubGlua1RvTGFzdFN1YlVybCA9PT0gZmFsc2UpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGludGVybmFscy5hcHBVcmxTdG9yZS5zZXRJdGVtKGxhc3RTdWJVcmxLZXkobGluayksIHVybCk7CiAgICByZWZyZXNoTGFzdFVybChsaW5rKTsKICB9CgogIGZ1bmN0aW9uIHJlZnJlc2hMYXN0VXJsKGxpbmspIHsKICAgIHZhciBsYXN0U3ViVXJsID0gZ2V0TGFzdFVybChsaW5rKTsKICAgIHJldHVybiBjb3JlTmF2TGlua3MudXBkYXRlKGxpbmsuaWQsIHsKICAgICAgdXJsOiBsYXN0U3ViVXJsIHx8IGxpbmsudXJsIHx8IGxpbmsuYmFzZVVybAogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBpbmplY3ROZXdHbG9iYWxTdGF0ZShsaW5rLCBmcm9tQXBwSWQsIG5ld0dsb2JhbFN0YXRlKSB7CiAgICB2YXIga2liYW5hUGFyc2VkVXJsID0gKDAsIF9hYnNvbHV0ZV90b19wYXJzZWRfdXJsLmFic29sdXRlVG9QYXJzZWRVcmwpKGdldExhc3RVcmwobGluaykgfHwgbGluay51cmwgfHwgbGluay5iYXNlVXJsLCBjaHJvbWUuZ2V0QmFzZVBhdGgoKSk7IC8vIGRvbid0IGNvcHkgZ2xvYmFsIHN0YXRlIGlmIGxpbmtzIGFyZSBmb3IgZGlmZmVyZW50IGFwcHMKCiAgICBpZiAoZnJvbUFwcElkICE9PSBraWJhbmFQYXJzZWRVcmwuYXBwSWQpIHJldHVybjsKICAgIGtpYmFuYVBhcnNlZFVybC5zZXRHbG9iYWxTdGF0ZShuZXdHbG9iYWxTdGF0ZSk7CiAgICBjb3JlTmF2TGlua3MudXBkYXRlKGxpbmsuaWQsIHsKICAgICAgdXJsOiBraWJhbmFQYXJzZWRVcmwuZ2V0QWJzb2x1dGVVcmwoKQogICAgfSk7CiAgfSAvLyBzaW11bGF0ZSBhIHBvc3NpYmxlIGNoYW5nZSBpbiB1cmwgdG8gaW5pdGlhbGl6ZSB0aGUKICAvLyBsaW5rLmFjdGl2ZSBhbmQgbGluay5sYXN0VXJsIHByb3BlcnRpZXMKCgogIGNvcmVOYXZMaW5rcy5nZXRBbGwoKS5maWx0ZXIoZnVuY3Rpb24gKGxpbmspIHsKICAgIHJldHVybiBsaW5rLnN1YlVybEJhc2UgJiYgIWxpbmsuZGlzYWJsZVN1YlVybFRyYWNraW5nOwogIH0pLmZvckVhY2goZnVuY3Rpb24gKGxpbmspIHsKICAgIGNvcmVOYXZMaW5rcy51cGRhdGUobGluay5pZCwgewogICAgICBzdWJVcmxCYXNlOiAoMCwgX3JlbGF0aXZlX3RvX2Fic29sdXRlLnJlbGF0aXZlVG9BYnNvbHV0ZSkoY2hyb21lLmFkZEJhc2VQYXRoKGxpbmsuc3ViVXJsQmFzZSkpCiAgICB9KTsKICB9KTsKICBpbnRlcm5hbHMudHJhY2tQb3NzaWJsZVN1YlVybChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKTsKfQ=="},null]}