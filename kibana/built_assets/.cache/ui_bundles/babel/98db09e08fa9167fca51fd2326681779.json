{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/pages/metrics/containers/with_metrics_time.js","dependencies":[{"path":"x-pack/plugins/infra/public/pages/metrics/containers/with_metrics_time.js","mtime":1589249554329},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlcGxhY2VNZXRyaWNUaW1lSW5RdWVyeVN0cmluZyA9IGV4cG9ydHMuV2l0aE1ldHJpY3NUaW1lVXJsU3RhdGUgPSBleHBvcnRzLldpdGhNZXRyaWNzVGltZSA9IGV4cG9ydHMuTWV0cmljc1RpbWVDb250YWluZXIgPSBleHBvcnRzLnVzZU1ldHJpY3NUaW1lID0gdm9pZCAwOwoKdmFyIF9jb25zdGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiY29uc3RhdGUiKSk7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm1vbWVudCIpKTsKCnZhciBfZGF0ZW1hdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBlbGFzdGljL2RhdGVtYXRoIikpOwoKdmFyIHJ0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiaW8tdHMiKSk7Cgp2YXIgX0VpdGhlciA9IHJlcXVpcmUoImZwLXRzL2xpYi9FaXRoZXIiKTsKCnZhciBfdXJsX3N0YXRlID0gcmVxdWlyZSgiLi4vLi4vLi4vdXRpbHMvdXJsX3N0YXRlIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgcGFyc2VSYW5nZSA9IGZ1bmN0aW9uIHBhcnNlUmFuZ2UocmFuZ2UpIHsKICB2YXIgcGFyc2VkRnJvbSA9IF9kYXRlbWF0aC5kZWZhdWx0LnBhcnNlKHJhbmdlLmZyb20pOwoKICB2YXIgcGFyc2VkVG8gPSBfZGF0ZW1hdGguZGVmYXVsdC5wYXJzZShyYW5nZS50bywgewogICAgcm91bmRVcDogdHJ1ZQogIH0pOwoKICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgcmFuZ2UsIHsKICAgIGZyb206IHBhcnNlZEZyb20gJiYgcGFyc2VkRnJvbS52YWx1ZU9mKCkgfHwgKDAsIF9tb21lbnQuZGVmYXVsdCkoKS5zdWJ0cmFjdCgxLCAnaG91cicpLnZhbHVlT2YoKSwKICAgIHRvOiBwYXJzZWRUbyAmJiBwYXJzZWRUby52YWx1ZU9mKCkgfHwgKDAsIF9tb21lbnQuZGVmYXVsdCkoKS52YWx1ZU9mKCkKICB9KTsKfTsKCnZhciB1c2VNZXRyaWNzVGltZSA9IGZ1bmN0aW9uIHVzZU1ldHJpY3NUaW1lKCkgewogIHZhciBkZWZhdWx0UmFuZ2UgPSB7CiAgICBmcm9tOiAnbm93LTFoJywKICAgIHRvOiAnbm93JywKICAgIGludGVydmFsOiAnPj0xbScKICB9OwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaXNBdXRvUmVsb2FkaW5nID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0QXV0b1JlbG9hZCA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfdXNlU3RhdGUzID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoNTAwMCksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgcmVmcmVzaEludGVydmFsID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0UmVmcmVzaEludGVydmFsID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSgoMCwgX21vbWVudC5kZWZhdWx0KSgpLnZhbHVlT2YoKSksCiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSwKICAgICAgbGFzdFJlZnJlc2ggPSBfdXNlU3RhdGU2WzBdLAogICAgICBzZXRMYXN0UmVmcmVzaCA9IF91c2VTdGF0ZTZbMV07CgogIHZhciBfdXNlU3RhdGU3ID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZGVmYXVsdFJhbmdlKSwKICAgICAgX3VzZVN0YXRlOCA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTcsIDIpLAogICAgICB0aW1lUmFuZ2UgPSBfdXNlU3RhdGU4WzBdLAogICAgICBzZXRUaW1lUmFuZ2UgPSBfdXNlU3RhdGU4WzFdOwoKICB2YXIgX3VzZVN0YXRlOSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKHBhcnNlUmFuZ2UoZGVmYXVsdFJhbmdlKSksCiAgICAgIF91c2VTdGF0ZTEwID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlOSwgMiksCiAgICAgIHBhcnNlZFRpbWVSYW5nZSA9IF91c2VTdGF0ZTEwWzBdLAogICAgICBzZXRQYXJzZWRUaW1lUmFuZ2UgPSBfdXNlU3RhdGUxMFsxXTsKCiAgdmFyIHVwZGF0ZVRpbWVSYW5nZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChyYW5nZSkgewogICAgc2V0VGltZVJhbmdlKHJhbmdlKTsKICAgIHNldFBhcnNlZFRpbWVSYW5nZShwYXJzZVJhbmdlKHJhbmdlKSk7CiAgfSwgW10pOwogIHJldHVybiB7CiAgICB0aW1lUmFuZ2U6IHRpbWVSYW5nZSwKICAgIHNldFRpbWVSYW5nZTogdXBkYXRlVGltZVJhbmdlLAogICAgcGFyc2VkVGltZVJhbmdlOiBwYXJzZWRUaW1lUmFuZ2UsCiAgICByZWZyZXNoSW50ZXJ2YWw6IHJlZnJlc2hJbnRlcnZhbCwKICAgIHNldFJlZnJlc2hJbnRlcnZhbDogc2V0UmVmcmVzaEludGVydmFsLAogICAgaXNBdXRvUmVsb2FkaW5nOiBpc0F1dG9SZWxvYWRpbmcsCiAgICBzZXRBdXRvUmVsb2FkOiBzZXRBdXRvUmVsb2FkLAogICAgbGFzdFJlZnJlc2g6IGxhc3RSZWZyZXNoLAogICAgdHJpZ2dlclJlZnJlc2g6ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHNldExhc3RSZWZyZXNoKCgwLCBfbW9tZW50LmRlZmF1bHQpKCkudmFsdWVPZigpKTsKICAgIH0sIFtzZXRMYXN0UmVmcmVzaF0pCiAgfTsKfTsKCmV4cG9ydHMudXNlTWV0cmljc1RpbWUgPSB1c2VNZXRyaWNzVGltZTsKdmFyIE1ldHJpY3NUaW1lQ29udGFpbmVyID0gKDAsIF9jb25zdGF0ZS5kZWZhdWx0KSh1c2VNZXRyaWNzVGltZSk7CmV4cG9ydHMuTWV0cmljc1RpbWVDb250YWluZXIgPSBNZXRyaWNzVGltZUNvbnRhaW5lcjsKCnZhciBXaXRoTWV0cmljc1RpbWUgPSBmdW5jdGlvbiBXaXRoTWV0cmljc1RpbWUoX3JlZikgewogIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47CiAgdmFyIG1ldHJpY3NUaW1lU3RhdGUgPSAoMCwgX3JlYWN0LnVzZUNvbnRleHQpKE1ldHJpY3NUaW1lQ29udGFpbmVyLkNvbnRleHQpOwogIHJldHVybiBjaGlsZHJlbihfb2JqZWN0U3ByZWFkKHt9LCBtZXRyaWNzVGltZVN0YXRlKSk7Cn07Ci8qKgogKiBVcmwgU3RhdGUKICovCgoKZXhwb3J0cy5XaXRoTWV0cmljc1RpbWUgPSBXaXRoTWV0cmljc1RpbWU7Cgp2YXIgV2l0aE1ldHJpY3NUaW1lVXJsU3RhdGUgPSBmdW5jdGlvbiBXaXRoTWV0cmljc1RpbWVVcmxTdGF0ZSgpIHsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChXaXRoTWV0cmljc1RpbWUsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikgewogICAgdmFyIHRpbWVSYW5nZSA9IF9yZWYyLnRpbWVSYW5nZSwKICAgICAgICBzZXRUaW1lUmFuZ2UgPSBfcmVmMi5zZXRUaW1lUmFuZ2UsCiAgICAgICAgcmVmcmVzaEludGVydmFsID0gX3JlZjIucmVmcmVzaEludGVydmFsLAogICAgICAgIHNldFJlZnJlc2hJbnRlcnZhbCA9IF9yZWYyLnNldFJlZnJlc2hJbnRlcnZhbCwKICAgICAgICBpc0F1dG9SZWxvYWRpbmcgPSBfcmVmMi5pc0F1dG9SZWxvYWRpbmcsCiAgICAgICAgc2V0QXV0b1JlbG9hZCA9IF9yZWYyLnNldEF1dG9SZWxvYWQ7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdXJsX3N0YXRlLlVybFN0YXRlQ29udGFpbmVyLCB7CiAgICAgIHVybFN0YXRlOiB7CiAgICAgICAgdGltZTogdGltZVJhbmdlLAogICAgICAgIGF1dG9SZWxvYWQ6IGlzQXV0b1JlbG9hZGluZywKICAgICAgICByZWZyZXNoSW50ZXJ2YWw6IHJlZnJlc2hJbnRlcnZhbAogICAgICB9LAogICAgICB1cmxTdGF0ZUtleTogIm1ldHJpY1RpbWUiLAogICAgICBtYXBUb1VybFN0YXRlOiBtYXBUb1VybFN0YXRlLAogICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UobmV3VXJsU3RhdGUpIHsKICAgICAgICBpZiAobmV3VXJsU3RhdGUgJiYgbmV3VXJsU3RhdGUudGltZSkgewogICAgICAgICAgc2V0VGltZVJhbmdlKG5ld1VybFN0YXRlLnRpbWUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5ld1VybFN0YXRlICYmIG5ld1VybFN0YXRlLmF1dG9SZWxvYWQpIHsKICAgICAgICAgIHNldEF1dG9SZWxvYWQodHJ1ZSk7CiAgICAgICAgfSBlbHNlIGlmIChuZXdVcmxTdGF0ZSAmJiB0eXBlb2YgbmV3VXJsU3RhdGUuYXV0b1JlbG9hZCAhPT0gJ3VuZGVmaW5lZCcgJiYgIW5ld1VybFN0YXRlLmF1dG9SZWxvYWQpIHsKICAgICAgICAgIHNldEF1dG9SZWxvYWQoZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgaWYgKG5ld1VybFN0YXRlICYmIG5ld1VybFN0YXRlLnJlZnJlc2hJbnRlcnZhbCkgewogICAgICAgICAgc2V0UmVmcmVzaEludGVydmFsKG5ld1VybFN0YXRlLnJlZnJlc2hJbnRlcnZhbCk7CiAgICAgICAgfQogICAgICB9LAogICAgICBvbkluaXRpYWxpemU6IGZ1bmN0aW9uIG9uSW5pdGlhbGl6ZShpbml0aWFsVXJsU3RhdGUpIHsKICAgICAgICBpZiAoaW5pdGlhbFVybFN0YXRlICYmIGluaXRpYWxVcmxTdGF0ZS50aW1lKSB7CiAgICAgICAgICBpZiAodGltZVJhbmdlLmZyb20gIT09IGluaXRpYWxVcmxTdGF0ZS50aW1lLmZyb20gfHwgdGltZVJhbmdlLnRvICE9PSBpbml0aWFsVXJsU3RhdGUudGltZS50byB8fCB0aW1lUmFuZ2UuaW50ZXJ2YWwgIT09IGluaXRpYWxVcmxTdGF0ZS50aW1lLmludGVydmFsKSB7CiAgICAgICAgICAgIHNldFRpbWVSYW5nZShpbml0aWFsVXJsU3RhdGUudGltZSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoaW5pdGlhbFVybFN0YXRlICYmIGluaXRpYWxVcmxTdGF0ZS5hdXRvUmVsb2FkKSB7CiAgICAgICAgICBzZXRBdXRvUmVsb2FkKHRydWUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGluaXRpYWxVcmxTdGF0ZSAmJiBpbml0aWFsVXJsU3RhdGUucmVmcmVzaEludGVydmFsKSB7CiAgICAgICAgICBzZXRSZWZyZXNoSW50ZXJ2YWwoaW5pdGlhbFVybFN0YXRlLnJlZnJlc2hJbnRlcnZhbCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICB9KTsKfTsKCmV4cG9ydHMuV2l0aE1ldHJpY3NUaW1lVXJsU3RhdGUgPSBXaXRoTWV0cmljc1RpbWVVcmxTdGF0ZTsKCnZhciBtYXBUb1VybFN0YXRlID0gZnVuY3Rpb24gbWFwVG9VcmxTdGF0ZSh2YWx1ZSkgewogIHJldHVybiB2YWx1ZSA/IHsKICAgIHRpbWU6IG1hcFRvVGltZVVybFN0YXRlKHZhbHVlLnRpbWUpLAogICAgYXV0b1JlbG9hZDogbWFwVG9BdXRvUmVsb2FkVXJsU3RhdGUodmFsdWUuYXV0b1JlbG9hZCksCiAgICByZWZyZXNoSW50ZXJ2YWw6IG1hcFRvUmVmcmVzaEludGVydmFsKHZhbHVlLnJlZnJlc2hJbnRlcnZhbCkKICB9IDogdW5kZWZpbmVkOwp9OwoKdmFyIE1ldHJpY3NUaW1lUlQgPSBydC50eXBlKHsKICBmcm9tOiBydC51bmlvbihbcnQuc3RyaW5nLCBydC5udW1iZXJdKSwKICB0bzogcnQudW5pb24oW3J0LnN0cmluZywgcnQubnVtYmVyXSksCiAgaW50ZXJ2YWw6IHJ0LnN0cmluZwp9KTsKCnZhciBtYXBUb1RpbWVVcmxTdGF0ZSA9IGZ1bmN0aW9uIG1hcFRvVGltZVVybFN0YXRlKHZhbHVlKSB7CiAgdmFyIHJlc3VsdCA9IE1ldHJpY3NUaW1lUlQuZGVjb2RlKHZhbHVlKTsKCiAgaWYgKCgwLCBfRWl0aGVyLmlzUmlnaHQpKHJlc3VsdCkpIHsKICAgIHZhciByZXN1bHRWYWx1ZSA9IHJlc3VsdC5yaWdodDsKICAgIHZhciB0byA9ICgwLCBfbG9kYXNoLmlzTnVtYmVyKShyZXN1bHRWYWx1ZS50bykgPyAoMCwgX21vbWVudC5kZWZhdWx0KShyZXN1bHRWYWx1ZS50bykudG9JU09TdHJpbmcoKSA6IHJlc3VsdFZhbHVlLnRvOwogICAgdmFyIGZyb20gPSAoMCwgX2xvZGFzaC5pc051bWJlcikocmVzdWx0VmFsdWUuZnJvbSkgPyAoMCwgX21vbWVudC5kZWZhdWx0KShyZXN1bHRWYWx1ZS5mcm9tKS50b0lTT1N0cmluZygpIDogcmVzdWx0VmFsdWUuZnJvbTsKICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByZXN1bHRWYWx1ZSwgewogICAgICBmcm9tOiBmcm9tLAogICAgICB0bzogdG8KICAgIH0pOwogIH0KCiAgcmV0dXJuIHVuZGVmaW5lZDsKfTsKCnZhciBtYXBUb0F1dG9SZWxvYWRVcmxTdGF0ZSA9IGZ1bmN0aW9uIG1hcFRvQXV0b1JlbG9hZFVybFN0YXRlKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nID8gdmFsdWUgOiB1bmRlZmluZWQ7Cn07Cgp2YXIgbWFwVG9SZWZyZXNoSW50ZXJ2YWwgPSBmdW5jdGlvbiBtYXBUb1JlZnJlc2hJbnRlcnZhbCh2YWx1ZSkgewogIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiB1bmRlZmluZWQ7Cn07Cgp2YXIgcmVwbGFjZU1ldHJpY1RpbWVJblF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gcmVwbGFjZU1ldHJpY1RpbWVJblF1ZXJ5U3RyaW5nKGZyb20sIHRvKSB7CiAgcmV0dXJuIE51bWJlci5pc05hTihmcm9tKSB8fCBOdW1iZXIuaXNOYU4odG8pID8gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWU7CiAgfSA6ICgwLCBfdXJsX3N0YXRlLnJlcGxhY2VTdGF0ZUtleUluUXVlcnlTdHJpbmcpKCdtZXRyaWNUaW1lJywgewogICAgYXV0b1JlbG9hZDogZmFsc2UsCiAgICB0aW1lOiB7CiAgICAgIGludGVydmFsOiAnPj0xbScsCiAgICAgIGZyb206ICgwLCBfbW9tZW50LmRlZmF1bHQpKGZyb20pLnRvSVNPU3RyaW5nKCksCiAgICAgIHRvOiAoMCwgX21vbWVudC5kZWZhdWx0KSh0bykudG9JU09TdHJpbmcoKQogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5yZXBsYWNlTWV0cmljVGltZUluUXVlcnlTdHJpbmcgPSByZXBsYWNlTWV0cmljVGltZUluUXVlcnlTdHJpbmc7"},null]}