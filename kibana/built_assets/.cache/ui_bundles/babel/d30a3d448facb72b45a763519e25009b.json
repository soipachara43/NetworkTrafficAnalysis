{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_default_editor/public/components/sidebar/sidebar_title.js","dependencies":[{"path":"src/legacy/core_plugins/vis_default_editor/public/components/sidebar/sidebar_title.js","mtime":1589249549974},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkxpbmtlZFNlYXJjaCA9IExpbmtlZFNlYXJjaDsKZXhwb3J0cy5TaWRlYmFyVGl0bGUgPSBTaWRlYmFyVGl0bGU7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBMaW5rZWRTZWFyY2goX3JlZikgewogIHZhciBzYXZlZFNlYXJjaCA9IF9yZWYuc2F2ZWRTZWFyY2gsCiAgICAgIGV2ZW50RW1pdHRlciA9IF9yZWYuZXZlbnRFbWl0dGVyOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgc2hvd1BvcG92ZXIgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRTaG93UG9wb3ZlciA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBjbG9zZVBvcG92ZXIgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gc2V0U2hvd1BvcG92ZXIoZmFsc2UpOwogIH0sIFtdKTsKICB2YXIgb25DbGlja0J1dHRvbkxpbmsgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gc2V0U2hvd1BvcG92ZXIoZnVuY3Rpb24gKHYpIHsKICAgICAgcmV0dXJuICF2OwogICAgfSk7CiAgfSwgW10pOwogIHZhciBvbkNsaWNrVW5saWtGcm9tU2F2ZWRTZWFyY2ggPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBzZXRTaG93UG9wb3ZlcihmYWxzZSk7CiAgICBldmVudEVtaXR0ZXIuZW1pdCgndW5saW5rRnJvbVNhdmVkU2VhcmNoJyk7CiAgfSwgW2V2ZW50RW1pdHRlcl0pOwoKICB2YXIgbGlua0J1dHRvbkFyaWFMYWJlbCA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNEZWZhdWx0RWRpdG9yLnNpZGViYXIuc2F2ZWRTZWFyY2gubGlua0J1dHRvbkFyaWFMYWJlbCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnTGluayB0byBzYXZlZCBzZWFyY2guIENsaWNrIHRvIGxlYXJuIG1vcmUgb3IgYnJlYWsgbGluay4nCiAgfSk7CgogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgIGNsYXNzTmFtZTogInZpc0VkaXRvclNpZGViYXJfX3RpdGxlQ29udGFpbmVyIHZpc0VkaXRvclNpZGViYXJfX2xpbmtlZFNlYXJjaCIsCiAgICBndXR0ZXJTaXplOiAieHMiLAogICAgcmVzcG9uc2l2ZTogZmFsc2UKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUljb24sIHsKICAgIHR5cGU6ICJzZWFyY2giCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlLAogICAgY2xhc3NOYW1lOiAiZXVpLXRleHRUcnVuY2F0ZSIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJ4cyIsCiAgICBjbGFzc05hbWU6ICJldWktdGV4dFRydW5jYXRlIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgewogICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNEZWZhdWx0RWRpdG9yLnNpZGViYXIuc2F2ZWRTZWFyY2gudGl0bGVBcmlhTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2F2ZWQgc2VhcmNoOiB7dGl0bGV9JywKICAgICAgdmFsdWVzOiB7CiAgICAgICAgdGl0bGU6IHNhdmVkU2VhcmNoLnRpdGxlCiAgICAgIH0KICAgIH0pCiAgfSwgc2F2ZWRTZWFyY2gudGl0bGUpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgZ3JvdzogZmFsc2UKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUG9wb3ZlciwgewogICAgYW5jaG9yUG9zaXRpb246ICJkb3duUmlnaHQiLAogICAgYnV0dG9uOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICBjb250ZW50OiBsaW5rQnV0dG9uQXJpYUxhYmVsCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICAiYXJpYS1sYWJlbCI6IGxpbmtCdXR0b25BcmlhTGFiZWwsCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJzaG93VW5saW5rU2F2ZWRTZWFyY2hQb3BvdmVyIiwKICAgICAgaWNvblR5cGU6ICJsaW5rIiwKICAgICAgb25DbGljazogb25DbGlja0J1dHRvbkxpbmsKICAgIH0pKSwKICAgIGlzT3Blbjogc2hvd1BvcG92ZXIsCiAgICBjbG9zZVBvcG92ZXI6IGNsb3NlUG9wb3ZlciwKICAgIHBhbmVsUGFkZGluZ1NpemU6ICJzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyVGl0bGUsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBpZDogInZpc0RlZmF1bHRFZGl0b3Iuc2lkZWJhci5zYXZlZFNlYXJjaC5wb3BvdmVyVGl0bGUiLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJMaW5rZWQgdG8gc2F2ZWQgc2VhcmNoIgogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgc3R5bGU6IHsKICAgICAgd2lkdGg6IDI2MAogICAgfQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICBzaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkVtcHR5LCB7CiAgICBmbHVzaDogImxlZnQiLAogICAgaHJlZjogIiMvZGlzY292ZXIvIi5jb25jYXQoc2F2ZWRTZWFyY2guaWQpLAogICAgc2l6ZTogInhzIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBpZDogInZpc0RlZmF1bHRFZGl0b3Iuc2lkZWJhci5zYXZlZFNlYXJjaC5nb1RvRGlzY292ZXJCdXR0b25UZXh0IiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiVmlldyB0aGlzIHNlYXJjaCBpbiBEaXNjb3ZlciIKICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAidmlzRGVmYXVsdEVkaXRvci5zaWRlYmFyLnNhdmVkU2VhcmNoLnBvcG92ZXJIZWxwVGV4dCIsCiAgICBkZWZhdWx0TWVzc2FnZTogIlN1YnNlcXVlbnQgbW9kaWZpY2F0aW9ucyB0byB0aGlzIHNhdmVkIHNlYXJjaCBhcmUgcmVmbGVjdGVkIGluIHRoZSB2aXN1YWxpemF0aW9uLiBUbyBkaXNhYmxlIGF1dG9tYXRpYyB1cGRhdGVzLCByZW1vdmUgdGhlIGxpbmsuIgogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ1bmxpbmtTYXZlZFNlYXJjaCIsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBvbkNsaWNrOiBvbkNsaWNrVW5saWtGcm9tU2F2ZWRTZWFyY2gsCiAgICBzaXplOiAicyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgaWQ6ICJ2aXNEZWZhdWx0RWRpdG9yLnNpZGViYXIuc2F2ZWRTZWFyY2gudW5saW5rU2F2ZWRTZWFyY2hCdXR0b25UZXh0IiwKICAgIGRlZmF1bHRNZXNzYWdlOiAiUmVtb3ZlIGxpbmsgdG8gc2F2ZWQgc2VhcmNoIgogIH0pKSkpKSkpKTsKfQoKZnVuY3Rpb24gU2lkZWJhclRpdGxlKF9yZWYyKSB7CiAgdmFyIHNhdmVkU2VhcmNoID0gX3JlZjIuc2F2ZWRTZWFyY2gsCiAgICAgIHZpcyA9IF9yZWYyLnZpcywKICAgICAgaXNMaW5rZWRTZWFyY2ggPSBfcmVmMi5pc0xpbmtlZFNlYXJjaCwKICAgICAgZXZlbnRFbWl0dGVyID0gX3JlZjIuZXZlbnRFbWl0dGVyOwogIHJldHVybiBpc0xpbmtlZFNlYXJjaCAmJiBzYXZlZFNlYXJjaCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTGlua2VkU2VhcmNoLCB7CiAgICBzYXZlZFNlYXJjaDogc2F2ZWRTZWFyY2gsCiAgICBldmVudEVtaXR0ZXI6IGV2ZW50RW1pdHRlcgogIH0pIDogdmlzLnR5cGUub3B0aW9ucy5zaG93SW5kZXhTZWxlY3Rpb24gPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgIHNpemU6ICJ4cyIsCiAgICBjbGFzc05hbWU6ICJ2aXNFZGl0b3JTaWRlYmFyX190aXRsZUNvbnRhaW5lciBldWktdGV4dFRydW5jYXRlIgogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgewogICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNEZWZhdWx0RWRpdG9yLnNpZGViYXIuaW5kZXhQYXR0ZXJuQXJpYUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0luZGV4IHBhdHRlcm46IHt0aXRsZX0nLAogICAgICB2YWx1ZXM6IHsKICAgICAgICB0aXRsZTogdmlzLmRhdGEuaW5kZXhQYXR0ZXJuLnRpdGxlCiAgICAgIH0KICAgIH0pCiAgfSwgdmlzLmRhdGEuaW5kZXhQYXR0ZXJuLnRpdGxlKSkgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICBjbGFzc05hbWU6ICJ2aXNFZGl0b3JTaWRlYmFyX19pbmRleFBhdHRlcm5QbGFjZWhvbGRlciIKICB9KTsKfQ=="},null]}