{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/add_item_form/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/add_item_form/index.js","mtime":1589249553300},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFkZEl0ZW0gPSBleHBvcnRzLk15QWRkSXRlbUJ1dHRvbiA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3N0eWxlZENvbXBvbmVudHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInN0eWxlZC1jb21wb25lbnRzIikpOwoKdmFyIFJ1bGVJMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi4vLi4vdHJhbnNsYXRpb25zIikpOwoKdmFyIF9zaGFyZWRfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NoYXJlZF9pbXBvcnRzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9leHRlbmRzKCkgewogIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKCiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBNeUV1aUZvcm1Sb3cgPSAoMCwgX3N0eWxlZENvbXBvbmVudHMuZGVmYXVsdCkoX2V1aS5FdWlGb3JtUm93KS53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIk15RXVpRm9ybVJvdyIsCiAgY29tcG9uZW50SWQ6ICJzYy0xNWxkZmp3LTAiCn0pKFsiLmV1aUZvcm1Sb3dfX2xhYmVsV3JhcHBlcnsuZXVpVGV4dHtwYWRkaW5nLXJpZ2h0OjMycHg7fX0iXSk7CnZhciBNeUFkZEl0ZW1CdXR0b24gPSAoMCwgX3N0eWxlZENvbXBvbmVudHMuZGVmYXVsdCkoX2V1aS5FdWlCdXR0b25FbXB0eSkud2l0aENvbmZpZyh7CiAgZGlzcGxheU5hbWU6ICJNeUFkZEl0ZW1CdXR0b24iLAogIGNvbXBvbmVudElkOiAic2MtMTVsZGZqdy0xIgp9KShbIm1hcmdpbi10b3A6NHB4OyYuZXVpQnV0dG9uRW1wdHktLXhTbWFsbHtmb250LXNpemU6MTJweDt9LmV1aUljb257d2lkdGg6MTJweDtoZWlnaHQ6MTJweDt9Il0pOwpleHBvcnRzLk15QWRkSXRlbUJ1dHRvbiA9IE15QWRkSXRlbUJ1dHRvbjsKTXlBZGRJdGVtQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHsKICBmbHVzaDogJ2xlZnQnLAogIGljb25UeXBlOiAncGx1c0luQ2lyY2xlJywKICBzaXplOiAneHMnCn07Cgp2YXIgQWRkSXRlbSA9IGZ1bmN0aW9uIEFkZEl0ZW0oX3JlZikgewogIHZhciBhZGRUZXh0ID0gX3JlZi5hZGRUZXh0LAogICAgICBkYXRhVGVzdFN1YmogPSBfcmVmLmRhdGFUZXN0U3ViaiwKICAgICAgZmllbGQgPSBfcmVmLmZpZWxkLAogICAgICBpZEFyaWEgPSBfcmVmLmlkQXJpYSwKICAgICAgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZCwKICAgICAgdmFsaWRhdGUgPSBfcmVmLnZhbGlkYXRlOwoKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgc2hvd1ZhbGlkYXRpb24gPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRTaG93VmFsaWRhdGlvbiA9IF91c2VTdGF0ZTJbMV07CgogIHZhciBfZ2V0RmllbGRWYWxpZGl0eUFuZEUgPSAoMCwgX3NoYXJlZF9pbXBvcnRzLmdldEZpZWxkVmFsaWRpdHlBbmRFcnJvck1lc3NhZ2UpKGZpZWxkKSwKICAgICAgaXNJbnZhbGlkID0gX2dldEZpZWxkVmFsaWRpdHlBbmRFLmlzSW52YWxpZCwKICAgICAgZXJyb3JNZXNzYWdlID0gX2dldEZpZWxkVmFsaWRpdHlBbmRFLmVycm9yTWVzc2FnZTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSgtMSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgaGF2ZUJlZW5LZXlib2FyZERlbGV0ZWQgPSBfdXNlU3RhdGU0WzBdLAogICAgICBzZXRIYXZlQmVlbktleWJvYXJkRGVsZXRlZCA9IF91c2VTdGF0ZTRbMV07CgogIHZhciBpbnB1dHNSZWYgPSAoMCwgX3JlYWN0LnVzZVJlZikoW10pOwogIHZhciByZW1vdmVJdGVtID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGluZGV4KSB7CiAgICB2YXIgdmFsdWVzID0gZmllbGQudmFsdWU7CiAgICB2YXIgbmV3VmFsdWVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZXMuc2xpY2UoMCwgaW5kZXgpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5zbGljZShpbmRleCArIDEpKSk7CiAgICBmaWVsZC5zZXRWYWx1ZShuZXdWYWx1ZXMubGVuZ3RoID09PSAwID8gWycnXSA6IG5ld1ZhbHVlcyk7CiAgICBpbnB1dHNSZWYuY3VycmVudCA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoaW5wdXRzUmVmLmN1cnJlbnQuc2xpY2UoMCwgaW5kZXgpKSwgX3RvQ29uc3VtYWJsZUFycmF5KGlucHV0c1JlZi5jdXJyZW50LnNsaWNlKGluZGV4ICsgMSkpKTsKICAgIGlucHV0c1JlZi5jdXJyZW50ID0gaW5wdXRzUmVmLmN1cnJlbnQubWFwKGZ1bmN0aW9uIChyZWYsIGkpIHsKICAgICAgaWYgKGkgPj0gaW5kZXggJiYgaW5wdXRzUmVmLmN1cnJlbnRbaW5kZXhdICE9IG51bGwpIHsKICAgICAgICByZWYudmFsdWUgPSAncmUtcmVuZGVyJzsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlZjsKICAgIH0pOwogIH0sIFtmaWVsZF0pOwogIHZhciBhZGRJdGVtID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKCkgewogICAgdmFyIHZhbHVlcyA9IGZpZWxkLnZhbHVlOwogICAgZmllbGQuc2V0VmFsdWUoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZXMpLCBbJyddKSk7CiAgfSwgW2ZpZWxkXSk7CiAgdmFyIHVwZGF0ZUl0ZW0gPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoZXZlbnQsIGluZGV4KSB7CiAgICBldmVudC5wZXJzaXN0KCk7CiAgICB2YXIgdmFsdWVzID0gZmllbGQudmFsdWU7CiAgICB2YXIgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7CiAgICBmaWVsZC5zZXRWYWx1ZShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5zbGljZSgwLCBpbmRleCkpLCBbdmFsdWVdLCBfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzLnNsaWNlKGluZGV4ICsgMSkpKSk7CiAgfSwgW2ZpZWxkXSk7CiAgdmFyIGhhbmRsZUxhc3RJbnB1dFJlZiA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgewogICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkgewogICAgICBpbnB1dHNSZWYuY3VycmVudCA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoaW5wdXRzUmVmLmN1cnJlbnQuc2xpY2UoMCwgaW5kZXgpKSwgW2VsZW1lbnRdLCBfdG9Db25zdW1hYmxlQXJyYXkoaW5wdXRzUmVmLmN1cnJlbnQuc2xpY2UoaW5kZXggKyAxKSkpOwogICAgfQogIH0sIFtpbnB1dHNSZWZdKTsKICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgaWYgKGhhdmVCZWVuS2V5Ym9hcmREZWxldGVkICE9PSAtMSAmJiAhKDAsIF9mcC5pc0VtcHR5KShpbnB1dHNSZWYuY3VycmVudCkgJiYgaW5wdXRzUmVmLmN1cnJlbnRbaGF2ZUJlZW5LZXlib2FyZERlbGV0ZWRdICE9IG51bGwpIHsKICAgICAgaW5wdXRzUmVmLmN1cnJlbnRbaGF2ZUJlZW5LZXlib2FyZERlbGV0ZWRdLmZvY3VzKCk7CiAgICAgIHNldEhhdmVCZWVuS2V5Ym9hcmREZWxldGVkKC0xKTsKICAgIH0KICB9LCBbaGF2ZUJlZW5LZXlib2FyZERlbGV0ZWQsIGlucHV0c1JlZi5jdXJyZW50XSk7CiAgdmFyIHZhbHVlcyA9IGZpZWxkLnZhbHVlOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE15RXVpRm9ybVJvdywgewogICAgbGFiZWw6IGZpZWxkLmxhYmVsLAogICAgbGFiZWxBcHBlbmQ6IGZpZWxkLmxhYmVsQXBwZW5kLAogICAgZXJyb3I6IHNob3dWYWxpZGF0aW9uID8gZXJyb3JNZXNzYWdlIDogbnVsbCwKICAgIGlzSW52YWxpZDogc2hvd1ZhbGlkYXRpb24gJiYgaXNJbnZhbGlkLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgImRhdGEtdGVzdC1zdWJqIjogZGF0YVRlc3RTdWJqLAogICAgZGVzY3JpYmVkQnlJZHM6IGlkQXJpYSA/IFtpZEFyaWFdIDogdW5kZWZpbmVkCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgdmFsdWVzLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgIHZhciBldWlGaWVsZFByb3BzID0gX29iamVjdFNwcmVhZCh7CiAgICAgIGRpc2FibGVkOiBpc0Rpc2FibGVkCiAgICB9LCBpbmRleCA9PT0gdmFsdWVzLmxlbmd0aCAtIDEgPyB7CiAgICAgIGlucHV0UmVmOiBoYW5kbGVMYXN0SW5wdXRSZWYuYmluZChudWxsLCBpbmRleCkKICAgIH0gOiB7fSwge30sIGlucHV0c1JlZi5jdXJyZW50W2luZGV4XSAhPSBudWxsICYmIGlucHV0c1JlZi5jdXJyZW50W2luZGV4XS52YWx1ZSAhPT0gaXRlbSB8fCBpbnB1dHNSZWYuY3VycmVudFtpbmRleF0gPT0gbnVsbCA/IHsKICAgICAgdmFsdWU6IGl0ZW0KICAgIH0gOiB7fSwgewogICAgICBpc0ludmFsaWQ6IHZhbGlkYXRlID09IG51bGwgPyBmYWxzZSA6IHNob3dWYWxpZGF0aW9uICYmIHZhbGlkYXRlKGl0ZW0pCiAgICB9KTsKCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICBrZXk6IGluZGV4CiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIGd1dHRlclNpemU6ICJzIiwKICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICBncm93OiB0cnVlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRUZXh0LCBfZXh0ZW5kcyh7CiAgICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCkgewogICAgICAgIHJldHVybiBzZXRTaG93VmFsaWRhdGlvbih0cnVlKTsKICAgICAgfSwKICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICByZXR1cm4gdXBkYXRlSXRlbShlLCBpbmRleCk7CiAgICAgIH0sCiAgICAgIGZ1bGxXaWR0aDogdHJ1ZQogICAgfSwgZXVpRmllbGRQcm9wcykpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgIGljb25UeXBlOiAidHJhc2giLAogICAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkIHx8ICgwLCBfZnAuaXNFbXB0eSkoaXRlbSkgJiYgdmFsdWVzLmxlbmd0aCA9PT0gMSwKICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICByZXR1cm4gcmVtb3ZlSXRlbShpbmRleCk7CiAgICAgIH0sCiAgICAgICJhcmlhLWxhYmVsIjogUnVsZUkxOG4uREVMRVRFCiAgICB9KSkpLCB2YWx1ZXMubGVuZ3RoIC0gMSAhPT0gaW5kZXggJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICBzaXplOiAicyIKICAgIH0pKTsKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNeUFkZEl0ZW1CdXR0b24sIHsKICAgIG9uQ2xpY2s6IGFkZEl0ZW0sCiAgICBpc0Rpc2FibGVkOiBpc0Rpc2FibGVkCiAgfSwgYWRkVGV4dCkpKTsKfTsKCmV4cG9ydHMuQWRkSXRlbSA9IEFkZEl0ZW07"},null]}