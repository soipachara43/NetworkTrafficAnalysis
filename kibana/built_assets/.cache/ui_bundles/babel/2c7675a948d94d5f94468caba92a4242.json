{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/infra/public/components/alerting/metrics/expression.js","dependencies":[{"path":"x-pack/plugins/infra/public/components/alerting/metrics/expression.js","mtime":1589249554225},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmFnZ3JlZ2F0aW9uVHlwZSA9IGV4cG9ydHMuRXhwcmVzc2lvblJvdyA9IGV4cG9ydHMuRXhwcmVzc2lvbnMgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF90eXBlcyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NlcnZlci9saWIvYWxlcnRpbmcvbWV0cmljX3RocmVzaG9sZC90eXBlcyIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9vYnNlcnZhYmlsaXR5L3B1YmxpYyIpOwoKdmFyIF9jb21tb24gPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi90cmlnZ2Vyc19hY3Rpb25zX3VpL3B1YmxpYy9jb21tb24iKTsKCnZhciBfa3VlcnlfYmFyID0gcmVxdWlyZSgiLi4vLi4vbWV0cmljc19leHBsb3Jlci9rdWVyeV9iYXIiKTsKCnZhciBfZ3JvdXBfYnkgPSByZXF1aXJlKCIuLi8uLi9tZXRyaWNzX2V4cGxvcmVyL2dyb3VwX2J5Iik7Cgp2YXIgX3VzZV9zb3VyY2VfdmlhX2h0dHAgPSByZXF1aXJlKCIuLi8uLi8uLi9jb250YWluZXJzL3NvdXJjZS91c2Vfc291cmNlX3ZpYV9odHRwIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gIHBhZGRpbmc6IDAgNHB4O1xuIl0pOwoKICBfdGVtcGxhdGVPYmplY3QyID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtd3JhcDogd3JhcDtcbiAgbWFyZ2luOiAwIC00cHg7XG4iXSk7CgogIF90ZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykgewogIGlmICghcmF3KSB7CiAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApOwogIH0KCiAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgewogICAgcmF3OiB7CiAgICAgIHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdykKICAgIH0KICB9KSk7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgQUdHUkVHQVRJT05fVFlQRVM7CgooZnVuY3Rpb24gKEFHR1JFR0FUSU9OX1RZUEVTKSB7CiAgQUdHUkVHQVRJT05fVFlQRVNbIkNPVU5UIl0gPSAiY291bnQiOwogIEFHR1JFR0FUSU9OX1RZUEVTWyJBVkVSQUdFIl0gPSAiYXZnIjsKICBBR0dSRUdBVElPTl9UWVBFU1siU1VNIl0gPSAic3VtIjsKICBBR0dSRUdBVElPTl9UWVBFU1siTUlOIl0gPSAibWluIjsKICBBR0dSRUdBVElPTl9UWVBFU1siTUFYIl0gPSAibWF4IjsKICBBR0dSRUdBVElPTl9UWVBFU1siUkFURSJdID0gInJhdGUiOwogIEFHR1JFR0FUSU9OX1RZUEVTWyJDQVJESU5BTElUWSJdID0gImNhcmRpbmFsaXR5IjsKfSkoQUdHUkVHQVRJT05fVFlQRVMgfHwgKEFHR1JFR0FUSU9OX1RZUEVTID0ge30pKTsKCnZhciBkZWZhdWx0RXhwcmVzc2lvbiA9IHsKICBhZ2dUeXBlOiBBR0dSRUdBVElPTl9UWVBFUy5BVkVSQUdFLAogIGNvbXBhcmF0b3I6IF90eXBlcy5Db21wYXJhdG9yLkdULAogIHRocmVzaG9sZDogW10sCiAgdGltZVNpemU6IDEsCiAgdGltZVVuaXQ6ICdtJwp9OwoKdmFyIEV4cHJlc3Npb25zID0gZnVuY3Rpb24gRXhwcmVzc2lvbnMocHJvcHMpIHsKICB2YXIgc2V0QWxlcnRQYXJhbXMgPSBwcm9wcy5zZXRBbGVydFBhcmFtcywKICAgICAgYWxlcnRQYXJhbXMgPSBwcm9wcy5hbGVydFBhcmFtcywKICAgICAgZXJyb3JzID0gcHJvcHMuZXJyb3JzLAogICAgICBhbGVydHNDb250ZXh0ID0gcHJvcHMuYWxlcnRzQ29udGV4dDsKCiAgdmFyIF91c2VTb3VyY2VWaWFIdHRwID0gKDAsIF91c2Vfc291cmNlX3ZpYV9odHRwLnVzZVNvdXJjZVZpYUh0dHApKHsKICAgIHNvdXJjZUlkOiAnZGVmYXVsdCcsCiAgICB0eXBlOiAnbWV0cmljcycsCiAgICBmZXRjaDogYWxlcnRzQ29udGV4dC5odHRwLmZldGNoLAogICAgdG9hc3RXYXJuaW5nOiBhbGVydHNDb250ZXh0LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nCiAgfSksCiAgICAgIHNvdXJjZSA9IF91c2VTb3VyY2VWaWFIdHRwLnNvdXJjZSwKICAgICAgY3JlYXRlRGVyaXZlZEluZGV4UGF0dGVybiA9IF91c2VTb3VyY2VWaWFIdHRwLmNyZWF0ZURlcml2ZWRJbmRleFBhdHRlcm47CgogIHZhciBfdXNlU3RhdGUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSgxKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHRpbWVTaXplID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0VGltZVNpemUgPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX3VzZVN0YXRlMyA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKCdtJyksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgdGltZVVuaXQgPSBfdXNlU3RhdGU0WzBdLAogICAgICBzZXRUaW1lVW5pdCA9IF91c2VTdGF0ZTRbMV07CgogIHZhciBkZXJpdmVkSW5kZXhQYXR0ZXJuID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY3JlYXRlRGVyaXZlZEluZGV4UGF0dGVybignbWV0cmljcycpOwogIH0sIFtjcmVhdGVEZXJpdmVkSW5kZXhQYXR0ZXJuXSk7CiAgdmFyIG9wdGlvbnMgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHsKICAgIHZhciBfYWxlcnRzQ29udGV4dCRtZXRhZGEsIF9hbGVydHNDb250ZXh0JG1ldGFkYTI7CgogICAgaWYgKChfYWxlcnRzQ29udGV4dCRtZXRhZGEgPSBhbGVydHNDb250ZXh0Lm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfYWxlcnRzQ29udGV4dCRtZXRhZGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYWxlcnRzQ29udGV4dCRtZXRhZGEyID0gX2FsZXJ0c0NvbnRleHQkbWV0YWRhLmN1cnJlbnRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYWxlcnRzQ29udGV4dCRtZXRhZGEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYWxlcnRzQ29udGV4dCRtZXRhZGEyLm1ldHJpY3MpIHsKICAgICAgcmV0dXJuIGFsZXJ0c0NvbnRleHQubWV0YWRhdGEuY3VycmVudE9wdGlvbnM7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gewogICAgICAgIG1ldHJpY3M6IFtdLAogICAgICAgIGFnZ3JlZ2F0aW9uOiAnYXZnJwogICAgICB9OwogICAgfQogIH0sIFthbGVydHNDb250ZXh0Lm1ldGFkYXRhXSk7CiAgdmFyIHVwZGF0ZVBhcmFtcyA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChpZCwgZSkgewogICAgdmFyIGV4cCA9IGFsZXJ0UGFyYW1zLmNyaXRlcmlhID8gYWxlcnRQYXJhbXMuY3JpdGVyaWEuc2xpY2UoKSA6IFtdOwogICAgZXhwW2lkXSA9IF9vYmplY3RTcHJlYWQoe30sIGV4cFtpZF0sIHt9LCBlKTsKICAgIHNldEFsZXJ0UGFyYW1zKCdjcml0ZXJpYScsIGV4cCk7CiAgfSwgW3NldEFsZXJ0UGFyYW1zLCBhbGVydFBhcmFtcy5jcml0ZXJpYV0pOwogIHZhciBhZGRFeHByZXNzaW9uID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4cCA9IGFsZXJ0UGFyYW1zLmNyaXRlcmlhLnNsaWNlKCk7CiAgICBleHAucHVzaChkZWZhdWx0RXhwcmVzc2lvbik7CiAgICBzZXRBbGVydFBhcmFtcygnY3JpdGVyaWEnLCBleHApOwogIH0sIFtzZXRBbGVydFBhcmFtcywgYWxlcnRQYXJhbXMuY3JpdGVyaWFdKTsKICB2YXIgcmVtb3ZlRXhwcmVzc2lvbiA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChpZCkgewogICAgdmFyIGV4cCA9IGFsZXJ0UGFyYW1zLmNyaXRlcmlhLnNsaWNlKCk7CgogICAgaWYgKGV4cC5sZW5ndGggPiAxKSB7CiAgICAgIGV4cC5zcGxpY2UoaWQsIDEpOwogICAgICBzZXRBbGVydFBhcmFtcygnY3JpdGVyaWEnLCBleHApOwogICAgfQogIH0sIFtzZXRBbGVydFBhcmFtcywgYWxlcnRQYXJhbXMuY3JpdGVyaWFdKTsKICB2YXIgb25GaWx0ZXJDaGFuZ2UgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoZmlsdGVyKSB7CiAgICBzZXRBbGVydFBhcmFtcygnZmlsdGVyUXVlcnknLCBmaWx0ZXIpOwogIH0sIFtzZXRBbGVydFBhcmFtc10pOwogIHZhciBvbkdyb3VwQnlDaGFuZ2UgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoZ3JvdXApIHsKICAgIHNldEFsZXJ0UGFyYW1zKCdncm91cEJ5JywgZ3JvdXAgfHwgJycpOwogIH0sIFtzZXRBbGVydFBhcmFtc10pOwogIHZhciBlbXB0eUVycm9yID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICBhZ2dGaWVsZDogW10sCiAgICAgIHRpbWVTaXplVW5pdDogW10sCiAgICAgIHRpbWVXaW5kb3dTaXplOiBbXQogICAgfTsKICB9LCBbXSk7CiAgdmFyIHVwZGF0ZVRpbWVTaXplID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKHRzKSB7CiAgICB2YXIgY3JpdGVyaWEgPSBhbGVydFBhcmFtcy5jcml0ZXJpYS5tYXAoZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGMsIHsKICAgICAgICB0aW1lU2l6ZTogdHMKICAgICAgfSk7CiAgICB9KTsKICAgIHNldFRpbWVTaXplKHRzIHx8IHVuZGVmaW5lZCk7CiAgICBzZXRBbGVydFBhcmFtcygnY3JpdGVyaWEnLCBjcml0ZXJpYSk7CiAgfSwgW2FsZXJ0UGFyYW1zLmNyaXRlcmlhLCBzZXRBbGVydFBhcmFtc10pOwogIHZhciB1cGRhdGVUaW1lVW5pdCA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uICh0dSkgewogICAgdmFyIGNyaXRlcmlhID0gYWxlcnRQYXJhbXMuY3JpdGVyaWEubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBjLCB7CiAgICAgICAgdGltZVVuaXQ6IHR1CiAgICAgIH0pOwogICAgfSk7CiAgICBzZXRUaW1lVW5pdCh0dSk7CiAgICBzZXRBbGVydFBhcmFtcygnY3JpdGVyaWEnLCBjcml0ZXJpYSk7CiAgfSwgW2FsZXJ0UGFyYW1zLmNyaXRlcmlhLCBzZXRBbGVydFBhcmFtc10pOwogICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7CiAgICB2YXIgbWQgPSBhbGVydHNDb250ZXh0Lm1ldGFkYXRhOwoKICAgIGlmIChtZCkgewogICAgICB2YXIgX21kJGN1cnJlbnRPcHRpb25zOwoKICAgICAgaWYgKChfbWQkY3VycmVudE9wdGlvbnMgPSBtZC5jdXJyZW50T3B0aW9ucykgPT09IG51bGwgfHwgX21kJGN1cnJlbnRPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWQkY3VycmVudE9wdGlvbnMubWV0cmljcykgewogICAgICAgIHNldEFsZXJ0UGFyYW1zKCdjcml0ZXJpYScsIG1kLmN1cnJlbnRPcHRpb25zLm1ldHJpY3MubWFwKGZ1bmN0aW9uIChtZXRyaWMpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG1ldHJpYzogbWV0cmljLmZpZWxkLAogICAgICAgICAgICBjb21wYXJhdG9yOiBfdHlwZXMuQ29tcGFyYXRvci5HVCwKICAgICAgICAgICAgdGhyZXNob2xkOiBbXSwKICAgICAgICAgICAgdGltZVNpemU6IHRpbWVTaXplLAogICAgICAgICAgICB0aW1lVW5pdDogdGltZVVuaXQsCiAgICAgICAgICAgIGFnZ1R5cGU6IG1ldHJpYy5hZ2dyZWdhdGlvbgogICAgICAgICAgfTsKICAgICAgICB9KSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2V0QWxlcnRQYXJhbXMoJ2NyaXRlcmlhJywgW2RlZmF1bHRFeHByZXNzaW9uXSk7CiAgICAgIH0KCiAgICAgIGlmIChtZC5jdXJyZW50T3B0aW9ucykgewogICAgICAgIGlmIChtZC5jdXJyZW50T3B0aW9ucy5maWx0ZXJRdWVyeSkgewogICAgICAgICAgc2V0QWxlcnRQYXJhbXMoJ2ZpbHRlclF1ZXJ5JywgbWQuY3VycmVudE9wdGlvbnMuZmlsdGVyUXVlcnkpOwogICAgICAgIH0gZWxzZSBpZiAobWQuY3VycmVudE9wdGlvbnMuZ3JvdXBCeSAmJiBtZC5zZXJpZXMpIHsKICAgICAgICAgIHZhciBmaWx0ZXIgPSAiIi5jb25jYXQobWQuY3VycmVudE9wdGlvbnMuZ3JvdXBCeSwgIjogXCIiKS5jb25jYXQobWQuc2VyaWVzLmlkLCAiXCIiKTsKICAgICAgICAgIHNldEFsZXJ0UGFyYW1zKCdmaWx0ZXJRdWVyeScsIGZpbHRlcik7CiAgICAgICAgfQoKICAgICAgICBzZXRBbGVydFBhcmFtcygnZ3JvdXBCeScsIG1kLmN1cnJlbnRPcHRpb25zLmdyb3VwQnkpOwogICAgICB9CgogICAgICBzZXRBbGVydFBhcmFtcygnc291cmNlSWQnLCBzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UuaWQpOwogICAgfSBlbHNlIHsKICAgICAgaWYgKCFhbGVydFBhcmFtcy5jcml0ZXJpYSkgewogICAgICAgIHNldEFsZXJ0UGFyYW1zKCdjcml0ZXJpYScsIFtkZWZhdWx0RXhwcmVzc2lvbl0pOwogICAgICB9CgogICAgICBpZiAoIWFsZXJ0UGFyYW1zLnNvdXJjZUlkKSB7CiAgICAgICAgc2V0QWxlcnRQYXJhbXMoJ3NvdXJjZUlkJywgKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5pZCkgfHwgJ2RlZmF1bHQnKTsKICAgICAgfQogICAgfQogIH0sIFthbGVydHNDb250ZXh0Lm1ldGFkYXRhLCBkZWZhdWx0RXhwcmVzc2lvbiwgc291cmNlXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzCgogIHZhciBoYW5kbGVGaWVsZFNlYXJjaENoYW5nZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gb25GaWx0ZXJDaGFuZ2UoZS50YXJnZXQudmFsdWUpOwogIH0sIFtvbkZpbHRlckNoYW5nZV0pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAnbScKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIHsKICAgIHNpemU6ICJ4cyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNCIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBpZDogInhwYWNrLmluZnJhLm1ldHJpY3MuYWxlcnRGbHlvdXQuY29uZGl0aW9ucyIsCiAgICBkZWZhdWx0TWVzc2FnZTogIkNvbmRpdGlvbnMiCiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogJ3hzJwogIH0pLCBhbGVydFBhcmFtcy5jcml0ZXJpYSAmJiBhbGVydFBhcmFtcy5jcml0ZXJpYS5tYXAoZnVuY3Rpb24gKGUsIGlkeCkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXhwcmVzc2lvblJvdywgewogICAgICBjYW5EZWxldGU6IGFsZXJ0UGFyYW1zLmNyaXRlcmlhLmxlbmd0aCA+IDEsCiAgICAgIGZpZWxkczogZGVyaXZlZEluZGV4UGF0dGVybi5maWVsZHMsCiAgICAgIHJlbW92ZTogcmVtb3ZlRXhwcmVzc2lvbiwKICAgICAgYWRkRXhwcmVzc2lvbjogYWRkRXhwcmVzc2lvbiwKICAgICAga2V5OiBpZHggLy8gaWR4J3MgZG9uJ3QgdXN1YWxseSBtYWtlIGdvb2Qga2V5J3MgYnV0IGhlcmUgdGhlIGluZGV4IGhhcyBzZW1hbnRpYyBtZWFuaW5nCiAgICAgICwKICAgICAgZXhwcmVzc2lvbklkOiBpZHgsCiAgICAgIHNldEFsZXJ0UGFyYW1zOiB1cGRhdGVQYXJhbXMsCiAgICAgIGVycm9yczogZXJyb3JzW2lkeF0gfHwgZW1wdHlFcnJvciwKICAgICAgZXhwcmVzc2lvbjogZSB8fCB7fQogICAgfSk7CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Gb3JMYXN0RXhwcmVzc2lvbiwgewogICAgdGltZVdpbmRvd1NpemU6IHRpbWVTaXplLAogICAgdGltZVdpbmRvd1VuaXQ6IHRpbWVVbml0LAogICAgZXJyb3JzOiBlbXB0eUVycm9yLAogICAgb25DaGFuZ2VXaW5kb3dTaXplOiB1cGRhdGVUaW1lU2l6ZSwKICAgIG9uQ2hhbmdlV2luZG93VW5pdDogdXBkYXRlVGltZVVuaXQKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkVtcHR5LCB7CiAgICBjb2xvcjogJ3ByaW1hcnknLAogICAgaWNvblNpZGU6ICdsZWZ0JywKICAgIGZsdXNoOiAnbGVmdCcsCiAgICBpY29uVHlwZTogJ3BsdXNJbkNpcmNsZUZpbGxlZCcsCiAgICBvbkNsaWNrOiBhZGRFeHByZXNzaW9uCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgIGlkOiAieHBhY2suaW5mcmEubWV0cmljcy5hbGVydEZseW91dC5hZGRDb25kaXRpb24iLAogICAgZGVmYXVsdE1lc3NhZ2U6ICJBZGQgY29uZGl0aW9uIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICdtJwogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmZyYS5tZXRyaWNzLmFsZXJ0Rmx5b3V0LmZpbHRlckxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0ZpbHRlciAob3B0aW9uYWwpJwogICAgfSksCiAgICBoZWxwVGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmluZnJhLm1ldHJpY3MuYWxlcnRGbHlvdXQuZmlsdGVySGVscFRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVXNlIGEgS1FMIGV4cHJlc3Npb24gdG8gbGltaXQgdGhlIHNjb3BlIG9mIHlvdXIgYWxlcnQgdHJpZ2dlci4nCiAgICB9KSwKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIGNvbXByZXNzZWQ6IHRydWUKICB9LCBhbGVydHNDb250ZXh0Lm1ldGFkYXRhICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2t1ZXJ5X2Jhci5NZXRyaWNzRXhwbG9yZXJLdWVyeUJhciwgewogICAgZGVyaXZlZEluZGV4UGF0dGVybjogZGVyaXZlZEluZGV4UGF0dGVybiwKICAgIG9uQ2hhbmdlOiBvbkZpbHRlckNoYW5nZSwKICAgIG9uU3VibWl0OiBvbkZpbHRlckNoYW5nZSwKICAgIHZhbHVlOiBhbGVydFBhcmFtcy5maWx0ZXJRdWVyeQogIH0pIHx8IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFNlYXJjaCwgewogICAgb25DaGFuZ2U6IGhhbmRsZUZpZWxkU2VhcmNoQ2hhbmdlLAogICAgdmFsdWU6IGFsZXJ0UGFyYW1zLmZpbHRlclF1ZXJ5LAogICAgZnVsbFdpZHRoOiB0cnVlCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAnbScKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaW5mcmEubWV0cmljcy5hbGVydEZseW91dC5jcmVhdGVBbGVydFBlclRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3JlYXRlIGFsZXJ0IHBlciAob3B0aW9uYWwpJwogICAgfSksCiAgICBoZWxwVGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmluZnJhLm1ldHJpY3MuYWxlcnRGbHlvdXQuY3JlYXRlQWxlcnRQZXJIZWxwVGV4dCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDcmVhdGUgYW4gYWxlcnQgZm9yIGV2ZXJ5IHVuaXF1ZSB2YWx1ZS4gRm9yIGV4YW1wbGU6ICJob3N0LmlkIiBvciAiY2xvdWQucmVnaW9uIi4nCiAgICB9KSwKICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgIGNvbXByZXNzZWQ6IHRydWUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ncm91cF9ieS5NZXRyaWNzRXhwbG9yZXJHcm91cEJ5LCB7CiAgICBvbkNoYW5nZTogb25Hcm91cEJ5Q2hhbmdlLAogICAgZmllbGRzOiBkZXJpdmVkSW5kZXhQYXR0ZXJuLmZpZWxkcywKICAgIG9wdGlvbnM6IF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHsKICAgICAgZ3JvdXBCeTogYWxlcnRQYXJhbXMuZ3JvdXBCeSB8fCB1bmRlZmluZWQKICAgIH0pCiAgfSkpKTsKfTsKCmV4cG9ydHMuRXhwcmVzc2lvbnMgPSBFeHByZXNzaW9uczsKdmFyIFN0eWxlZEV4cHJlc3Npb25Sb3cgPSAoMCwgX3B1YmxpYy5ldWlTdHlsZWQpKF9ldWkuRXVpRmxleEdyb3VwKShfdGVtcGxhdGVPYmplY3QoKSk7Cgp2YXIgU3R5bGVkRXhwcmVzc2lvbiA9IF9wdWJsaWMuZXVpU3R5bGVkLmRpdihfdGVtcGxhdGVPYmplY3QyKCkpOwoKdmFyIEV4cHJlc3Npb25Sb3cgPSBmdW5jdGlvbiBFeHByZXNzaW9uUm93KHByb3BzKSB7CiAgdmFyIHNldEFsZXJ0UGFyYW1zID0gcHJvcHMuc2V0QWxlcnRQYXJhbXMsCiAgICAgIGV4cHJlc3Npb24gPSBwcm9wcy5leHByZXNzaW9uLAogICAgICBlcnJvcnMgPSBwcm9wcy5lcnJvcnMsCiAgICAgIGV4cHJlc3Npb25JZCA9IHByb3BzLmV4cHJlc3Npb25JZCwKICAgICAgcmVtb3ZlID0gcHJvcHMucmVtb3ZlLAogICAgICBmaWVsZHMgPSBwcm9wcy5maWVsZHMsCiAgICAgIGNhbkRlbGV0ZSA9IHByb3BzLmNhbkRlbGV0ZTsKICB2YXIgX2V4cHJlc3Npb24kYWdnVHlwZSA9IGV4cHJlc3Npb24uYWdnVHlwZSwKICAgICAgYWdnVHlwZSA9IF9leHByZXNzaW9uJGFnZ1R5cGUgPT09IHZvaWQgMCA/IEFHR1JFR0FUSU9OX1RZUEVTLk1BWCA6IF9leHByZXNzaW9uJGFnZ1R5cGUsCiAgICAgIG1ldHJpYyA9IGV4cHJlc3Npb24ubWV0cmljLAogICAgICBfZXhwcmVzc2lvbiRjb21wYXJhdG8gPSBleHByZXNzaW9uLmNvbXBhcmF0b3IsCiAgICAgIGNvbXBhcmF0b3IgPSBfZXhwcmVzc2lvbiRjb21wYXJhdG8gPT09IHZvaWQgMCA/IF90eXBlcy5Db21wYXJhdG9yLkdUIDogX2V4cHJlc3Npb24kY29tcGFyYXRvLAogICAgICBfZXhwcmVzc2lvbiR0aHJlc2hvbGQgPSBleHByZXNzaW9uLnRocmVzaG9sZCwKICAgICAgdGhyZXNob2xkID0gX2V4cHJlc3Npb24kdGhyZXNob2xkID09PSB2b2lkIDAgPyBbXSA6IF9leHByZXNzaW9uJHRocmVzaG9sZDsKICB2YXIgdXBkYXRlQWdnVHlwZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChhdCkgewogICAgc2V0QWxlcnRQYXJhbXMoZXhwcmVzc2lvbklkLCBfb2JqZWN0U3ByZWFkKHt9LCBleHByZXNzaW9uLCB7CiAgICAgIGFnZ1R5cGU6IGF0LAogICAgICBtZXRyaWM6IGF0ID09PSAnY291bnQnID8gdW5kZWZpbmVkIDogZXhwcmVzc2lvbi5tZXRyaWMKICAgIH0pKTsKICB9LCBbZXhwcmVzc2lvbklkLCBleHByZXNzaW9uLCBzZXRBbGVydFBhcmFtc10pOwogIHZhciB1cGRhdGVNZXRyaWMgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAobSkgewogICAgc2V0QWxlcnRQYXJhbXMoZXhwcmVzc2lvbklkLCBfb2JqZWN0U3ByZWFkKHt9LCBleHByZXNzaW9uLCB7CiAgICAgIG1ldHJpYzogbQogICAgfSkpOwogIH0sIFtleHByZXNzaW9uSWQsIGV4cHJlc3Npb24sIHNldEFsZXJ0UGFyYW1zXSk7CiAgdmFyIHVwZGF0ZUNvbXBhcmF0b3IgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoYykgewogICAgc2V0QWxlcnRQYXJhbXMoZXhwcmVzc2lvbklkLCBfb2JqZWN0U3ByZWFkKHt9LCBleHByZXNzaW9uLCB7CiAgICAgIGNvbXBhcmF0b3I6IGMKICAgIH0pKTsKICB9LCBbZXhwcmVzc2lvbklkLCBleHByZXNzaW9uLCBzZXRBbGVydFBhcmFtc10pOwogIHZhciB1cGRhdGVUaHJlc2hvbGQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAodCkgewogICAgaWYgKHQuam9pbigpICE9PSBleHByZXNzaW9uLnRocmVzaG9sZC5qb2luKCkpIHsKICAgICAgc2V0QWxlcnRQYXJhbXMoZXhwcmVzc2lvbklkLCBfb2JqZWN0U3ByZWFkKHt9LCBleHByZXNzaW9uLCB7CiAgICAgICAgdGhyZXNob2xkOiB0CiAgICAgIH0pKTsKICAgIH0KICB9LCBbZXhwcmVzc2lvbklkLCBleHByZXNzaW9uLCBzZXRBbGVydFBhcmFtc10pOwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBndXR0ZXJTaXplOiAieHMiCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiB0cnVlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdHlsZWRFeHByZXNzaW9uUm93LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZEV4cHJlc3Npb24sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5XaGVuRXhwcmVzc2lvbiwgewogICAgY3VzdG9tQWdnVHlwZXNPcHRpb25zOiBhZ2dyZWdhdGlvblR5cGUsCiAgICBhZ2dUeXBlOiBhZ2dUeXBlLAogICAgb25DaGFuZ2VTZWxlY3RlZEFnZ1R5cGU6IHVwZGF0ZUFnZ1R5cGUKICB9KSksIGFnZ1R5cGUgIT09ICdjb3VudCcgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdHlsZWRFeHByZXNzaW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uT2ZFeHByZXNzaW9uLCB7CiAgICBjdXN0b21BZ2dUeXBlc09wdGlvbnM6IGFnZ3JlZ2F0aW9uVHlwZSwKICAgIGFnZ0ZpZWxkOiBtZXRyaWMsCiAgICBmaWVsZHM6IGZpZWxkcy5tYXAoZnVuY3Rpb24gKGYpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBub3JtYWxpemVkVHlwZTogZi50eXBlLAogICAgICAgIG5hbWU6IGYubmFtZQogICAgICB9OwogICAgfSksCiAgICBhZ2dUeXBlOiBhZ2dUeXBlLAogICAgZXJyb3JzOiBlcnJvcnMsCiAgICBvbkNoYW5nZVNlbGVjdGVkQWdnRmllbGQ6IHVwZGF0ZU1ldHJpYwogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdHlsZWRFeHByZXNzaW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uVGhyZXNob2xkRXhwcmVzc2lvbiwgewogICAgdGhyZXNob2xkQ29tcGFyYXRvcjogY29tcGFyYXRvciB8fCBfdHlwZXMuQ29tcGFyYXRvci5HVCwKICAgIHRocmVzaG9sZDogdGhyZXNob2xkLAogICAgb25DaGFuZ2VTZWxlY3RlZFRocmVzaG9sZENvbXBhcmF0b3I6IHVwZGF0ZUNvbXBhcmF0b3IsCiAgICBvbkNoYW5nZVNlbGVjdGVkVGhyZXNob2xkOiB1cGRhdGVUaHJlc2hvbGQsCiAgICBlcnJvcnM6IGVycm9ycwogIH0pKSkpLCBjYW5EZWxldGUgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmZyYS5tZXRyaWNzLmFsZXJ0Rmx5b3V0LnJlbW92ZUNvbmRpdGlvbicsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSZW1vdmUgY29uZGl0aW9uJwogICAgfSksCiAgICBjb2xvcjogJ2RhbmdlcicsCiAgICBpY29uVHlwZTogJ3RyYXNoJywKICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgIHJldHVybiByZW1vdmUoZXhwcmVzc2lvbklkKTsKICAgIH0KICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAncycKICB9KSk7Cn07CgpleHBvcnRzLkV4cHJlc3Npb25Sb3cgPSBFeHByZXNzaW9uUm93Owp2YXIgYWdncmVnYXRpb25UeXBlID0gewogIGF2ZzogewogICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmluZnJhLm1ldHJpY3MuYWxlcnRGbHlvdXQuYWdncmVnYXRpb25UZXh0LmF2ZycsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBdmVyYWdlJwogICAgfSksCiAgICBmaWVsZFJlcXVpcmVkOiB0cnVlLAogICAgdmFsaWROb3JtYWxpemVkVHlwZXM6IFsnbnVtYmVyJ10sCiAgICB2YWx1ZTogQUdHUkVHQVRJT05fVFlQRVMuQVZFUkFHRQogIH0sCiAgbWF4OiB7CiAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaW5mcmEubWV0cmljcy5hbGVydEZseW91dC5hZ2dyZWdhdGlvblRleHQubWF4JywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ01heCcKICAgIH0pLAogICAgZmllbGRSZXF1aXJlZDogdHJ1ZSwKICAgIHZhbGlkTm9ybWFsaXplZFR5cGVzOiBbJ251bWJlcicsICdkYXRlJ10sCiAgICB2YWx1ZTogQUdHUkVHQVRJT05fVFlQRVMuTUFYCiAgfSwKICBtaW46IHsKICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmZyYS5tZXRyaWNzLmFsZXJ0Rmx5b3V0LmFnZ3JlZ2F0aW9uVGV4dC5taW4nLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWluJwogICAgfSksCiAgICBmaWVsZFJlcXVpcmVkOiB0cnVlLAogICAgdmFsaWROb3JtYWxpemVkVHlwZXM6IFsnbnVtYmVyJywgJ2RhdGUnXSwKICAgIHZhbHVlOiBBR0dSRUdBVElPTl9UWVBFUy5NSU4KICB9LAogIGNhcmRpbmFsaXR5OiB7CiAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaW5mcmEubWV0cmljcy5hbGVydEZseW91dC5hZ2dyZWdhdGlvblRleHQuY2FyZGluYWxpdHknLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ2FyZGluYWxpdHknCiAgICB9KSwKICAgIGZpZWxkUmVxdWlyZWQ6IGZhbHNlLAogICAgdmFsdWU6IEFHR1JFR0FUSU9OX1RZUEVTLkNBUkRJTkFMSVRZLAogICAgdmFsaWROb3JtYWxpemVkVHlwZXM6IFsnbnVtYmVyJ10KICB9LAogIHJhdGU6IHsKICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmZyYS5tZXRyaWNzLmFsZXJ0Rmx5b3V0LmFnZ3JlZ2F0aW9uVGV4dC5yYXRlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1JhdGUnCiAgICB9KSwKICAgIGZpZWxkUmVxdWlyZWQ6IGZhbHNlLAogICAgdmFsdWU6IEFHR1JFR0FUSU9OX1RZUEVTLlJBVEUsCiAgICB2YWxpZE5vcm1hbGl6ZWRUeXBlczogWydudW1iZXInXQogIH0sCiAgY291bnQ6IHsKICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pbmZyYS5tZXRyaWNzLmFsZXJ0Rmx5b3V0LmFnZ3JlZ2F0aW9uVGV4dC5jb3VudCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEb2N1bWVudCBjb3VudCcKICAgIH0pLAogICAgZmllbGRSZXF1aXJlZDogZmFsc2UsCiAgICB2YWx1ZTogQUdHUkVHQVRJT05fVFlQRVMuQ09VTlQsCiAgICB2YWxpZE5vcm1hbGl6ZWRUeXBlczogWydudW1iZXInXQogIH0KfTsKZXhwb3J0cy5hZ2dyZWdhdGlvblR5cGUgPSBhZ2dyZWdhdGlvblR5cGU7"},null]}