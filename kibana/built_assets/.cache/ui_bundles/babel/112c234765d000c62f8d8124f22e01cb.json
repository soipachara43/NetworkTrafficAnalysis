{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_tagcloud/public/components/tag_cloud_visualization.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_tagcloud/public/components/tag_cloud_visualization.js","mtime":1589249549994},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVRhZ0Nsb3VkVmlzdWFsaXphdGlvbiA9IGNyZWF0ZVRhZ0Nsb3VkVmlzdWFsaXphdGlvbjsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIFJ4ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicnhqcyIpKTsKCnZhciBfb3BlcmF0b3JzID0gcmVxdWlyZSgicnhqcy9vcGVyYXRvcnMiKTsKCnZhciBfcmVhY3REb20gPSByZXF1aXJlKCJyZWFjdC1kb20iKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2xlZ2FjeV9pbXBvcnRzID0gcmVxdWlyZSgiLi4vbGVnYWN5X2ltcG9ydHMiKTsKCnZhciBfbGFiZWwgPSByZXF1aXJlKCIuL2xhYmVsIik7Cgp2YXIgX3RhZ19jbG91ZCA9IHJlcXVpcmUoIi4vdGFnX2Nsb3VkIik7Cgp2YXIgX2ZlZWRiYWNrX21lc3NhZ2UgPSByZXF1aXJlKCIuL2ZlZWRiYWNrX21lc3NhZ2UiKTsKCnZhciBfZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiZDMiKSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgTUFYX1RBR19DT1VOVCA9IDIwMDsKCmZ1bmN0aW9uIGNyZWF0ZVRhZ0Nsb3VkVmlzdWFsaXphdGlvbihfcmVmKSB7CiAgdmFyIGNvbG9ycyA9IF9yZWYuY29sb3JzOwoKICB2YXIgY29sb3JTY2FsZSA9IF9kLmRlZmF1bHQuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGNvbG9ycy5zZWVkQ29sb3JzKTsKCiAgcmV0dXJuICgKICAgIC8qI19fUFVSRV9fKi8KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgZnVuY3Rpb24gVGFnQ2xvdWRWaXN1YWxpemF0aW9uKG5vZGUsIHZpcykgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYWdDbG91ZFZpc3VhbGl6YXRpb24pOwoKICAgICAgICB0aGlzLl9jb250YWluZXJOb2RlID0gbm9kZTsKICAgICAgICB2YXIgY2xvdWRSZWxhdGl2ZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGNsb3VkUmVsYXRpdmVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndGdjVmlzJyk7CiAgICAgICAgY2xvdWRSZWxhdGl2ZUNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3Bvc2l0aW9uOiByZWxhdGl2ZScpOwogICAgICAgIHZhciBjbG91ZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgIGNsb3VkQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RnY1ZpcycpOwogICAgICAgIGNsb3VkQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS10ZXN0LXN1YmonLCAndGFnQ2xvdWRWaXN1YWxpemF0aW9uJyk7CgogICAgICAgIHRoaXMuX2NvbnRhaW5lck5vZGUuY2xhc3NMaXN0LmFkZCgndmlzQ2hhcnQtLXZlcnRpY2FsJyk7CgogICAgICAgIGNsb3VkUmVsYXRpdmVDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvdWRDb250YWluZXIpOwoKICAgICAgICB0aGlzLl9jb250YWluZXJOb2RlLmFwcGVuZENoaWxkKGNsb3VkUmVsYXRpdmVDb250YWluZXIpOwoKICAgICAgICB0aGlzLl92aXMgPSB2aXM7CiAgICAgICAgdGhpcy5fdHJ1bmNhdGVkID0gZmFsc2U7CiAgICAgICAgdGhpcy5fdGFnQ2xvdWQgPSBuZXcgX3RhZ19jbG91ZC5UYWdDbG91ZChjbG91ZENvbnRhaW5lciwgY29sb3JTY2FsZSk7CgogICAgICAgIHRoaXMuX3RhZ0Nsb3VkLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgIGlmICghX3RoaXMuX3Zpc1BhcmFtcy5idWNrZXQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzLl92aXMuQVBJLmV2ZW50cy5maWx0ZXIoewogICAgICAgICAgICB0YWJsZTogZXZlbnQubWV0YS5kYXRhLAogICAgICAgICAgICBjb2x1bW46IDAsCiAgICAgICAgICAgIHJvdzogZXZlbnQubWV0YS5yb3dJbmRleAogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuX3JlbmRlckNvbXBsZXRlJCA9IFJ4LmZyb21FdmVudCh0aGlzLl90YWdDbG91ZCwgJ3JlbmRlckNvbXBsZXRlJyk7CiAgICAgICAgdGhpcy5fZmVlZGJhY2tOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgIHRoaXMuX2NvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQodGhpcy5fZmVlZGJhY2tOb2RlKTsKCiAgICAgICAgdGhpcy5fZmVlZGJhY2tNZXNzYWdlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlUmVmKCk7CiAgICAgICAgKDAsIF9yZWFjdERvbS5yZW5kZXIpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5JMThuUHJvdmlkZXIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZlZWRiYWNrX21lc3NhZ2UuRmVlZGJhY2tNZXNzYWdlLCB7CiAgICAgICAgICByZWY6IHRoaXMuX2ZlZWRiYWNrTWVzc2FnZQogICAgICAgIH0pKSwgdGhpcy5fZmVlZGJhY2tOb2RlKTsKICAgICAgICB0aGlzLl9sYWJlbE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgdGhpcy5fY29udGFpbmVyTm9kZS5hcHBlbmRDaGlsZCh0aGlzLl9sYWJlbE5vZGUpOwoKICAgICAgICB0aGlzLl9sYWJlbCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZVJlZigpOwogICAgICAgICgwLCBfcmVhY3REb20ucmVuZGVyKShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYWJlbC5MYWJlbCwgewogICAgICAgICAgcmVmOiB0aGlzLl9sYWJlbAogICAgICAgIH0pLCB0aGlzLl9sYWJlbE5vZGUpOwogICAgICB9CgogICAgICBfY3JlYXRlQ2xhc3MoVGFnQ2xvdWRWaXN1YWxpemF0aW9uLCBbewogICAgICAgIGtleTogInJlbmRlciIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfcmVuZGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGRhdGEsIHZpc1BhcmFtcykgewogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUGFyYW1zKHZpc1BhcmFtcyk7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURhdGEoZGF0YSk7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSgpOwoKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyQ29tcGxldGUkLnBpcGUoKDAsIF9vcGVyYXRvcnMudGFrZSkoMSkpLnRvUHJvbWlzZSgpOwoKICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgIGlmICghKGRhdGEuY29sdW1ucy5sZW5ndGggIT09IDIpKSB7CiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmVlZGJhY2tNZXNzYWdlLmN1cnJlbnQuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvd1RydW5jYXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNob3dJbmNvbXBsZXRlOiBmYWxzZQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYWJlbC5jdXJyZW50LnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiIi5jb25jYXQoZGF0YS5jb2x1bW5zWzBdLm5hbWUsICIgLSAiKS5jb25jYXQoZGF0YS5jb2x1bW5zWzFdLm5hbWUpLAogICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvd0xhYmVsOiB2aXNQYXJhbXMuc2hvd0xhYmVsCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZlZWRiYWNrTWVzc2FnZS5jdXJyZW50LnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNob3dUcnVuY2F0ZTogdGhpcy5fdHJ1bmNhdGVkLAogICAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvd0luY29tcGxldGU6IHRoaXMuX3RhZ0Nsb3VkLmdldFN0YXR1cygpID09PSBfdGFnX2Nsb3VkLlRhZ0Nsb3VkLlNUQVRVUy5JTkNPTVBMRVRFCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgICAgIH0pKTsKCiAgICAgICAgICBmdW5jdGlvbiByZW5kZXIoX3gsIF94MikgewogICAgICAgICAgICByZXR1cm4gX3JlbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiByZW5kZXI7CiAgICAgICAgfSgpCiAgICAgIH0sIHsKICAgICAgICBrZXk6ICJkZXN0cm95IiwKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgIHRoaXMuX3RhZ0Nsb3VkLmRlc3Ryb3koKTsKCiAgICAgICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKHRoaXMuX2ZlZWRiYWNrTm9kZSk7CiAgICAgICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKHRoaXMuX2xhYmVsTm9kZSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAiX3VwZGF0ZURhdGEiLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlRGF0YShkYXRhKSB7CiAgICAgICAgICBpZiAoIWRhdGEgfHwgIWRhdGEucm93cy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy5fdGFnQ2xvdWQuc2V0RGF0YShbXSk7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGJ1Y2tldCA9IHRoaXMuX3Zpc1BhcmFtcy5idWNrZXQ7CiAgICAgICAgICB2YXIgbWV0cmljID0gdGhpcy5fdmlzUGFyYW1zLm1ldHJpYzsKICAgICAgICAgIHZhciBidWNrZXRGb3JtYXR0ZXIgPSBidWNrZXQgPyAoMCwgX2xlZ2FjeV9pbXBvcnRzLmdldEZvcm1hdCkoYnVja2V0LmZvcm1hdCkgOiBudWxsOwogICAgICAgICAgdmFyIHRhZ0NvbHVtbiA9IGJ1Y2tldCA/IGRhdGEuY29sdW1uc1tidWNrZXQuYWNjZXNzb3JdLmlkIDogLTE7CiAgICAgICAgICB2YXIgbWV0cmljQ29sdW1uID0gZGF0YS5jb2x1bW5zW21ldHJpYy5hY2Nlc3Nvcl0uaWQ7CiAgICAgICAgICB2YXIgdGFncyA9IGRhdGEucm93cy5tYXAoZnVuY3Rpb24gKHJvdywgcm93SW5kZXgpIHsKICAgICAgICAgICAgdmFyIHRhZyA9IHJvd1t0YWdDb2x1bW5dID09PSB1bmRlZmluZWQgPyAnYWxsJyA6IHJvd1t0YWdDb2x1bW5dOwogICAgICAgICAgICB2YXIgbWV0cmljID0gcm93W21ldHJpY0NvbHVtbl07CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgZGlzcGxheVRleHQ6IGJ1Y2tldEZvcm1hdHRlciA/IGJ1Y2tldEZvcm1hdHRlci5jb252ZXJ0KHRhZywgJ3RleHQnKSA6IHRhZywKICAgICAgICAgICAgICByYXdUZXh0OiB0YWcsCiAgICAgICAgICAgICAgdmFsdWU6IG1ldHJpYywKICAgICAgICAgICAgICBtZXRhOiB7CiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID4gTUFYX1RBR19DT1VOVCkgewogICAgICAgICAgICB0YWdzLmxlbmd0aCA9IE1BWF9UQUdfQ09VTlQ7CiAgICAgICAgICAgIHRoaXMuX3RydW5jYXRlZCA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLl90cnVuY2F0ZWQgPSBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLl90YWdDbG91ZC5zZXREYXRhKHRhZ3MpOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIGtleTogIl91cGRhdGVQYXJhbXMiLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlUGFyYW1zKHZpc1BhcmFtcykgewogICAgICAgICAgdGhpcy5fdmlzUGFyYW1zID0gdmlzUGFyYW1zOwoKICAgICAgICAgIHRoaXMuX3RhZ0Nsb3VkLnNldE9wdGlvbnModmlzUGFyYW1zKTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBrZXk6ICJfcmVzaXplIiwKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2l6ZSgpIHsKICAgICAgICAgIHRoaXMuX3RhZ0Nsb3VkLnJlc2l6ZSgpOwogICAgICAgIH0KICAgICAgfV0pOwoKICAgICAgcmV0dXJuIFRhZ0Nsb3VkVmlzdWFsaXphdGlvbjsKICAgIH0oKQogICk7Cn0="},null]}