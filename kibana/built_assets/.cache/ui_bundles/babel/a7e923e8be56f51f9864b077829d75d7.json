{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/canvas/public/components/sidebar_header/sidebar_header.js","dependencies":[{"path":"x-pack/legacy/plugins/canvas/public/components/sidebar_header/sidebar_header.js","mtime":1589249552011},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU2lkZWJhckhlYWRlciA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcG9wb3ZlciA9IHJlcXVpcmUoIi4uL3BvcG92ZXIiKTsKCnZhciBfY3VzdG9tX2VsZW1lbnRfbW9kYWwgPSByZXF1aXJlKCIuLi9jdXN0b21fZWxlbWVudF9tb2RhbCIpOwoKdmFyIF90b29sX3RpcF9zaG9ydGN1dCA9IHJlcXVpcmUoIi4uL3Rvb2xfdGlwX3Nob3J0Y3V0LyIpOwoKdmFyIF9jb21wb25lbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vaTE4bi9jb21wb25lbnRzIik7Cgp2YXIgX3Nob3J0Y3V0cyA9IHJlcXVpcmUoIi4uLy4uLy4uL2kxOG4vc2hvcnRjdXRzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgdG9wQm9yZGVyQ2xhc3NOYW1lID0gJ2NhbnZhc0NvbnRleHRNZW51LS10b3BCb3JkZXInOwp2YXIgc3RyaW5ncyA9IF9jb21wb25lbnRzLkNvbXBvbmVudFN0cmluZ3MuU2lkZWJhckhlYWRlcjsKCnZhciBzaG9ydGN1dEhlbHAgPSBfc2hvcnRjdXRzLlNob3J0Y3V0U3RyaW5ncy5nZXRTaG9ydGN1dEhlbHAoKTsKCnZhciBjb250ZXh0TWVudUJ1dHRvbiA9IGZ1bmN0aW9uIGNvbnRleHRNZW51QnV0dG9uKGhhbmRsZUNsaWNrKSB7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICBjb2xvcjogInRleHQiLAogICAgaWNvblR5cGU6ICJib3hlc1ZlcnRpY2FsIiwKICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLAogICAgImFyaWEtbGFiZWwiOiBzdHJpbmdzLmdldENvbnRleHRNZW51VGl0bGUoKQogIH0pOwp9OwoKdmFyIFNpZGViYXJIZWFkZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFNpZGViYXJIZWFkZXIsIF9Db21wb25lbnQpOwoKICBmdW5jdGlvbiBTaWRlYmFySGVhZGVyKCkgewogICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7CgogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWRlYmFySGVhZGVyKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFNpZGViYXJIZWFkZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHsKICAgICAgaXNNb2RhbFZpc2libGU6IGZhbHNlCiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfaXNNb3VudGVkIiwgZmFsc2UpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9zaG93TW9kYWwiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5faXNNb3VudGVkICYmIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc01vZGFsVmlzaWJsZTogdHJ1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9oaWRlTW9kYWwiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5faXNNb3VudGVkICYmIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc01vZGFsVmlzaWJsZTogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfcmVuZGVyTGF5b3V0Q29udHJvbHMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLAogICAgICAgICAgYnJpbmdUb0Zyb250ID0gX3RoaXMkcHJvcHMuYnJpbmdUb0Zyb250LAogICAgICAgICAgYnJpbmdGb3J3YXJkID0gX3RoaXMkcHJvcHMuYnJpbmdGb3J3YXJkLAogICAgICAgICAgc2VuZEJhY2t3YXJkID0gX3RoaXMkcHJvcHMuc2VuZEJhY2t3YXJkLAogICAgICAgICAgc2VuZFRvQmFjayA9IF90aGlzJHByb3BzLnNlbmRUb0JhY2s7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBwb3NpdGlvbjogImJvdHRvbSIsCiAgICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHNob3J0Y3V0SGVscC5CUklOR19UT19GUk9OVCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdG9vbF90aXBfc2hvcnRjdXQuVG9vbFRpcFNob3J0Y3V0LCB7CiAgICAgICAgICBuYW1lc3BhY2U6ICJFTEVNRU5UIiwKICAgICAgICAgIGFjdGlvbjogIkJSSU5HX1RPX0ZST05UIgogICAgICAgIH0pKQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICAgIGNvbG9yOiAidGV4dCIsCiAgICAgICAgaWNvblR5cGU6ICJzb3J0VXAiLAogICAgICAgIG9uQ2xpY2s6IGJyaW5nVG9Gcm9udCwKICAgICAgICAiYXJpYS1sYWJlbCI6IHN0cmluZ3MuZ2V0QnJpbmdUb0Zyb250QXJpYUxhYmVsKCkKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBwb3NpdGlvbjogImJvdHRvbSIsCiAgICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHNob3J0Y3V0SGVscC5CUklOR19GT1JXQVJELCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF90b29sX3RpcF9zaG9ydGN1dC5Ub29sVGlwU2hvcnRjdXQsIHsKICAgICAgICAgIG5hbWVzcGFjZTogIkVMRU1FTlQiLAogICAgICAgICAgYWN0aW9uOiAiQlJJTkdfRk9SV0FSRCIKICAgICAgICB9KSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgICBjb2xvcjogInRleHQiLAogICAgICAgIGljb25UeXBlOiAiYXJyb3dVcCIsCiAgICAgICAgb25DbGljazogYnJpbmdGb3J3YXJkLAogICAgICAgICJhcmlhLWxhYmVsIjogc3RyaW5ncy5nZXRCcmluZ0ZvcndhcmRBcmlhTGFiZWwoKQogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAgIHBvc2l0aW9uOiAiYm90dG9tIiwKICAgICAgICBjb250ZW50OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgc2hvcnRjdXRIZWxwLlNFTkRfQkFDS1dBUkQsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3Rvb2xfdGlwX3Nob3J0Y3V0LlRvb2xUaXBTaG9ydGN1dCwgewogICAgICAgICAgbmFtZXNwYWNlOiAiRUxFTUVOVCIsCiAgICAgICAgICBhY3Rpb246ICJTRU5EX0JBQ0tXQVJEIgogICAgICAgIH0pKQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICAgIGNvbG9yOiAidGV4dCIsCiAgICAgICAgaWNvblR5cGU6ICJhcnJvd0Rvd24iLAogICAgICAgIG9uQ2xpY2s6IHNlbmRCYWNrd2FyZCwKICAgICAgICAiYXJpYS1sYWJlbCI6IHN0cmluZ3MuZ2V0U2VuZEJhY2t3YXJkQXJpYUxhYmVsKCkKICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRvb2xUaXAsIHsKICAgICAgICBwb3NpdGlvbjogImJvdHRvbSIsCiAgICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHNob3J0Y3V0SGVscC5TRU5EX1RPX0JBQ0ssIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3Rvb2xfdGlwX3Nob3J0Y3V0LlRvb2xUaXBTaG9ydGN1dCwgewogICAgICAgICAgbmFtZXNwYWNlOiAiRUxFTUVOVCIsCiAgICAgICAgICBhY3Rpb246ICJTRU5EX1RPX0JBQ0siCiAgICAgICAgfSkpCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgY29sb3I6ICJ0ZXh0IiwKICAgICAgICBpY29uVHlwZTogInNvcnREb3duIiwKICAgICAgICBvbkNsaWNrOiBzZW5kVG9CYWNrLAogICAgICAgICJhcmlhLWxhYmVsIjogc3RyaW5ncy5nZXRTZW5kVG9CYWNrQXJpYUxhYmVsKCkKICAgICAgfSkpKSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0TGF5ZXJNZW51SXRlbXMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcywKICAgICAgICAgIGJyaW5nVG9Gcm9udCA9IF90aGlzJHByb3BzMi5icmluZ1RvRnJvbnQsCiAgICAgICAgICBicmluZ0ZvcndhcmQgPSBfdGhpcyRwcm9wczIuYnJpbmdGb3J3YXJkLAogICAgICAgICAgc2VuZEJhY2t3YXJkID0gX3RoaXMkcHJvcHMyLnNlbmRCYWNrd2FyZCwKICAgICAgICAgIHNlbmRUb0JhY2sgPSBfdGhpcyRwcm9wczIuc2VuZFRvQmFjazsKICAgICAgcmV0dXJuIHsKICAgICAgICBtZW51SXRlbTogewogICAgICAgICAgbmFtZTogc3RyaW5ncy5nZXRPcmRlck1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgIGNsYXNzTmFtZTogdG9wQm9yZGVyQ2xhc3NOYW1lLAogICAgICAgICAgcGFuZWw6IDEKICAgICAgICB9LAogICAgICAgIHBhbmVsOiB7CiAgICAgICAgICBpZDogMSwKICAgICAgICAgIHRpdGxlOiBzdHJpbmdzLmdldE9yZGVyTWVudUl0ZW1MYWJlbCgpLAogICAgICAgICAgaXRlbXM6IFt7CiAgICAgICAgICAgIG5hbWU6IHNob3J0Y3V0SGVscC5CUklOR19UT19GUk9OVCwKICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBjdXJyZW50IGVsZW1lbnQgcG9zaXRpb24gYW5kIGRpc2FibGUgaWYgYWxyZWFkeSB0b3AgbGF5ZXIKICAgICAgICAgICAgaWNvbjogJ3NvcnRVcCcsCiAgICAgICAgICAgIG9uQ2xpY2s6IGJyaW5nVG9Gcm9udAogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiBzaG9ydGN1dEhlbHAuQlJJTkdfVE9fRlJPTlQsCiAgICAgICAgICAgIC8vIFRPRE86IHNhbWUgYXMgYWJvdmUKICAgICAgICAgICAgaWNvbjogJ2Fycm93VXAnLAogICAgICAgICAgICBvbkNsaWNrOiBicmluZ0ZvcndhcmQKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbmFtZTogc2hvcnRjdXRIZWxwLlNFTkRfQkFDS1dBUkQsCiAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGFnYWluc3QgY3VycmVudCBlbGVtZW50IHBvc2l0aW9uIGFuZCBkaXNhYmxlIGlmIGFscmVhZHkgYm90dG9tIGxheWVyCiAgICAgICAgICAgIGljb246ICdhcnJvd0Rvd24nLAogICAgICAgICAgICBvbkNsaWNrOiBzZW5kQmFja3dhcmQKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbmFtZTogc2hvcnRjdXRIZWxwLlNFTkRfVE9fQkFDSywKICAgICAgICAgICAgLy8gVE9ETzogc2FtZSBhcyBhYm92ZQogICAgICAgICAgICBpY29uOiAnc29ydERvd24nLAogICAgICAgICAgICBvbkNsaWNrOiBzZW5kVG9CYWNrCiAgICAgICAgICB9XQogICAgICAgIH0KICAgICAgfTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9nZXRBbGlnbm1lbnRNZW51SXRlbXMiLCBmdW5jdGlvbiAoY2xvc2UpIHsKICAgICAgdmFyIF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzLAogICAgICAgICAgYWxpZ25MZWZ0ID0gX3RoaXMkcHJvcHMzLmFsaWduTGVmdCwKICAgICAgICAgIGFsaWduQ2VudGVyID0gX3RoaXMkcHJvcHMzLmFsaWduQ2VudGVyLAogICAgICAgICAgYWxpZ25SaWdodCA9IF90aGlzJHByb3BzMy5hbGlnblJpZ2h0LAogICAgICAgICAgYWxpZ25Ub3AgPSBfdGhpcyRwcm9wczMuYWxpZ25Ub3AsCiAgICAgICAgICBhbGlnbk1pZGRsZSA9IF90aGlzJHByb3BzMy5hbGlnbk1pZGRsZSwKICAgICAgICAgIGFsaWduQm90dG9tID0gX3RoaXMkcHJvcHMzLmFsaWduQm90dG9tOwogICAgICByZXR1cm4gewogICAgICAgIG1lbnVJdGVtOiB7CiAgICAgICAgICBuYW1lOiBzdHJpbmdzLmdldEFsaWdubWVudE1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgIGNsYXNzTmFtZTogJ2NhbnZhc0NvbnRleHRNZW51JywKICAgICAgICAgIHBhbmVsOiAyCiAgICAgICAgfSwKICAgICAgICBwYW5lbDogewogICAgICAgICAgaWQ6IDIsCiAgICAgICAgICB0aXRsZTogc3RyaW5ncy5nZXRBbGlnbm1lbnRNZW51SXRlbUxhYmVsKCksCiAgICAgICAgICBpdGVtczogW3sKICAgICAgICAgICAgbmFtZTogc3RyaW5ncy5nZXRMZWZ0QWxpZ25NZW51SXRlbUxhYmVsKCksCiAgICAgICAgICAgIGljb246ICdlZGl0b3JJdGVtQWxpZ25MZWZ0JywKICAgICAgICAgICAgb25DbGljazogY2xvc2UoYWxpZ25MZWZ0KQogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiBzdHJpbmdzLmdldENlbnRlckFsaWduTWVudUl0ZW1MYWJlbCgpLAogICAgICAgICAgICBpY29uOiAnZWRpdG9ySXRlbUFsaWduQ2VudGVyJywKICAgICAgICAgICAgb25DbGljazogY2xvc2UoYWxpZ25DZW50ZXIpCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG5hbWU6IHN0cmluZ3MuZ2V0UmlnaHRBbGlnbk1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgICAgaWNvbjogJ2VkaXRvckl0ZW1BbGlnblJpZ2h0JywKICAgICAgICAgICAgb25DbGljazogY2xvc2UoYWxpZ25SaWdodCkKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbmFtZTogc3RyaW5ncy5nZXRUb3BBbGlnbk1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgICAgaWNvbjogJ2VkaXRvckl0ZW1BbGlnblRvcCcsCiAgICAgICAgICAgIG9uQ2xpY2s6IGNsb3NlKGFsaWduVG9wKQogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiBzdHJpbmdzLmdldE1pZGRsZUFsaWduTWVudUl0ZW1MYWJlbCgpLAogICAgICAgICAgICBpY29uOiAnZWRpdG9ySXRlbUFsaWduTWlkZGxlJywKICAgICAgICAgICAgb25DbGljazogY2xvc2UoYWxpZ25NaWRkbGUpCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG5hbWU6IHN0cmluZ3MuZ2V0Qm90dG9tQWxpZ25NZW51SXRlbUxhYmVsKCksCiAgICAgICAgICAgIGljb246ICdlZGl0b3JJdGVtQWxpZ25Cb3R0b20nLAogICAgICAgICAgICBvbkNsaWNrOiBjbG9zZShhbGlnbkJvdHRvbSkKICAgICAgICAgIH1dCiAgICAgICAgfQogICAgICB9OwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX2dldERpc3RyaWJ1dGlvbk1lbnVJdGVtcyIsIGZ1bmN0aW9uIChjbG9zZSkgewogICAgICB2YXIgX3RoaXMkcHJvcHM0ID0gX3RoaXMucHJvcHMsCiAgICAgICAgICBkaXN0cmlidXRlSG9yaXpvbnRhbGx5ID0gX3RoaXMkcHJvcHM0LmRpc3RyaWJ1dGVIb3Jpem9udGFsbHksCiAgICAgICAgICBkaXN0cmlidXRlVmVydGljYWxseSA9IF90aGlzJHByb3BzNC5kaXN0cmlidXRlVmVydGljYWxseTsKICAgICAgcmV0dXJuIHsKICAgICAgICBtZW51SXRlbTogewogICAgICAgICAgbmFtZTogc3RyaW5ncy5nZXREaXN0cmlidXRpb25NZW51SXRlbUxhYmVsKCksCiAgICAgICAgICBjbGFzc05hbWU6ICdjYW52YXNDb250ZXh0TWVudScsCiAgICAgICAgICBwYW5lbDogMwogICAgICAgIH0sCiAgICAgICAgcGFuZWw6IHsKICAgICAgICAgIGlkOiAzLAogICAgICAgICAgdGl0bGU6IHN0cmluZ3MuZ2V0RGlzdHJpYnV0aW9uTWVudUl0ZW1MYWJlbCgpLAogICAgICAgICAgaXRlbXM6IFt7CiAgICAgICAgICAgIG5hbWU6IHN0cmluZ3MuZ2V0SG9yaXpvbnRhbERpc3RyaWJ1dGlvbk1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgICAgaWNvbjogJ2VkaXRvckRpc3RyaWJ1dGVIb3Jpem9udGFsJywKICAgICAgICAgICAgb25DbGljazogY2xvc2UoZGlzdHJpYnV0ZUhvcml6b250YWxseSkKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbmFtZTogc3RyaW5ncy5nZXRWZXJ0aWNhbERpc3RyaWJ1dGlvbk1lbnVJdGVtTGFiZWwoKSwKICAgICAgICAgICAgaWNvbjogJ2VkaXRvckRpc3RyaWJ1dGVWZXJ0aWNhbCcsCiAgICAgICAgICAgIG9uQ2xpY2s6IGNsb3NlKGRpc3RyaWJ1dGVWZXJ0aWNhbGx5KQogICAgICAgICAgfV0KICAgICAgICB9CiAgICAgIH07CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0R3JvdXBNZW51SXRlbXMiLCBmdW5jdGlvbiAoY2xvc2UpIHsKICAgICAgdmFyIF90aGlzJHByb3BzNSA9IF90aGlzLnByb3BzLAogICAgICAgICAgZ3JvdXBJc1NlbGVjdGVkID0gX3RoaXMkcHJvcHM1Lmdyb3VwSXNTZWxlY3RlZCwKICAgICAgICAgIHVuZ3JvdXBOb2RlcyA9IF90aGlzJHByb3BzNS51bmdyb3VwTm9kZXMsCiAgICAgICAgICBncm91cE5vZGVzID0gX3RoaXMkcHJvcHM1Lmdyb3VwTm9kZXMsCiAgICAgICAgICBzZWxlY3RlZE5vZGVzID0gX3RoaXMkcHJvcHM1LnNlbGVjdGVkTm9kZXM7CiAgICAgIHJldHVybiBncm91cElzU2VsZWN0ZWQgPyBbewogICAgICAgIG5hbWU6IHN0cmluZ3MuZ2V0VW5ncm91cE1lbnVJdGVtTGFiZWwoKSwKICAgICAgICBjbGFzc05hbWU6IHRvcEJvcmRlckNsYXNzTmFtZSwKICAgICAgICBvbkNsaWNrOiBjbG9zZSh1bmdyb3VwTm9kZXMpCiAgICAgIH1dIDogc2VsZWN0ZWROb2Rlcy5sZW5ndGggPiAxID8gW3sKICAgICAgICBuYW1lOiBzdHJpbmdzLmdldEdyb3VwTWVudUl0ZW1MYWJlbCgpLAogICAgICAgIGNsYXNzTmFtZTogdG9wQm9yZGVyQ2xhc3NOYW1lLAogICAgICAgIG9uQ2xpY2s6IGNsb3NlKGdyb3VwTm9kZXMpCiAgICAgIH1dIDogW107CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0UGFuZWxzIiwgZnVuY3Rpb24gKGNsb3NlUG9wb3ZlcikgewogICAgICB2YXIgX3RoaXMkcHJvcHM2ID0gX3RoaXMucHJvcHMsCiAgICAgICAgICBzaG93TGF5ZXJDb250cm9scyA9IF90aGlzJHByb3BzNi5zaG93TGF5ZXJDb250cm9scywKICAgICAgICAgIGN1dE5vZGVzID0gX3RoaXMkcHJvcHM2LmN1dE5vZGVzLAogICAgICAgICAgY29weU5vZGVzID0gX3RoaXMkcHJvcHM2LmNvcHlOb2RlcywKICAgICAgICAgIHBhc3RlTm9kZXMgPSBfdGhpcyRwcm9wczYucGFzdGVOb2RlcywKICAgICAgICAgIGRlbGV0ZU5vZGVzID0gX3RoaXMkcHJvcHM2LmRlbGV0ZU5vZGVzLAogICAgICAgICAgY2xvbmVOb2RlcyA9IF90aGlzJHByb3BzNi5jbG9uZU5vZGVzOyAvLyBjbG9zZXMgcG9wb3ZlciBhZnRlciBpbnZva2luZyBmbgoKICAgICAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZm4pIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgZm4oKTsKICAgICAgICAgIGNsb3NlUG9wb3ZlcigpOwogICAgICAgIH07CiAgICAgIH07CgogICAgICB2YXIgaXRlbXMgPSBbewogICAgICAgIG5hbWU6IHNob3J0Y3V0SGVscC5DVVQsCiAgICAgICAgaWNvbjogJ2N1dCcsCiAgICAgICAgb25DbGljazogY2xvc2UoY3V0Tm9kZXMpCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiBzaG9ydGN1dEhlbHAuQ09QWSwKICAgICAgICBpY29uOiAnY29weScsCiAgICAgICAgb25DbGljazogY29weU5vZGVzCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiBzaG9ydGN1dEhlbHAuUEFTVEUsCiAgICAgICAgLy8gVE9ETzogY2FuIHRoaXMgYmUgZGlzYWJsZWQgaWYgY2xpcGJvYXJkIGlzIGVtcHR5PwogICAgICAgIGljb246ICdjb3B5Q2xpcGJvYXJkJywKICAgICAgICBvbkNsaWNrOiBjbG9zZShwYXN0ZU5vZGVzKQogICAgICB9LCB7CiAgICAgICAgbmFtZTogc2hvcnRjdXRIZWxwLkRFTEVURSwKICAgICAgICBpY29uOiAndHJhc2gnLAogICAgICAgIG9uQ2xpY2s6IGNsb3NlKGRlbGV0ZU5vZGVzKQogICAgICB9LCB7CiAgICAgICAgbmFtZTogc2hvcnRjdXRIZWxwLkNMT05FLAogICAgICAgIG9uQ2xpY2s6IGNsb3NlKGNsb25lTm9kZXMpCiAgICAgIH1dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX3RoaXMuX2dldEdyb3VwTWVudUl0ZW1zKGNsb3NlKSkpOwogICAgICB2YXIgcGFuZWxzID0gW3sKICAgICAgICBpZDogMCwKICAgICAgICB0aXRsZTogc3RyaW5ncy5nZXRDb250ZXh0TWVudVRpdGxlKCksCiAgICAgICAgaXRlbXM6IGl0ZW1zCiAgICAgIH1dOwoKICAgICAgdmFyIGZpbGxNZW51ID0gZnVuY3Rpb24gZmlsbE1lbnUoX3JlZikgewogICAgICAgIHZhciBtZW51SXRlbSA9IF9yZWYubWVudUl0ZW0sCiAgICAgICAgICAgIHBhbmVsID0gX3JlZi5wYW5lbDsKICAgICAgICBpdGVtcy5wdXNoKG1lbnVJdGVtKTsgLy8gYWRkIE9yZGVyIG1lbnUgaXRlbSB0byBmaXJzdCBwYW5lbAoKICAgICAgICBwYW5lbHMucHVzaChwYW5lbCk7IC8vIGFkZCBuZXN0ZWQgcGFuZWwgZm9yIGxheWVycyBjb250cm9scwogICAgICB9OwoKICAgICAgaWYgKHNob3dMYXllckNvbnRyb2xzKSB7CiAgICAgICAgZmlsbE1lbnUoX3RoaXMuX2dldExheWVyTWVudUl0ZW1zKCkpOwogICAgICB9CgogICAgICBpZiAoX3RoaXMucHJvcHMuc2VsZWN0ZWROb2Rlcy5sZW5ndGggPiAxKSB7CiAgICAgICAgZmlsbE1lbnUoX3RoaXMuX2dldEFsaWdubWVudE1lbnVJdGVtcyhjbG9zZSkpOwogICAgICB9CgogICAgICBpZiAoX3RoaXMucHJvcHMuc2VsZWN0ZWROb2Rlcy5sZW5ndGggPiAyKSB7CiAgICAgICAgZmlsbE1lbnUoX3RoaXMuX2dldERpc3RyaWJ1dGlvbk1lbnVJdGVtcyhjbG9zZSkpOwogICAgICB9CgogICAgICBpdGVtcy5wdXNoKHsKICAgICAgICBuYW1lOiBzdHJpbmdzLmdldFNhdmVFbGVtZW50TWVudUl0ZW1MYWJlbCgpLAogICAgICAgIGljb246ICdpbmRleE9wZW4nLAogICAgICAgIGNsYXNzTmFtZTogdG9wQm9yZGVyQ2xhc3NOYW1lLAogICAgICAgIG9uQ2xpY2s6IF90aGlzLl9zaG93TW9kYWwKICAgICAgfSk7CiAgICAgIHJldHVybiBwYW5lbHM7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfcmVuZGVyQ29udGV4dE1lbnUiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wb3BvdmVyLlBvcG92ZXIsIHsKICAgICAgICBpZDogInNpZGViYXItY29udGV4dC1tZW51LXBvcG92ZXIiLAogICAgICAgIGNsYXNzTmFtZTogImNhbnZhc0NvbnRleHRNZW51IiwKICAgICAgICBidXR0b246IGNvbnRleHRNZW51QnV0dG9uLAogICAgICAgIHBhbmVsUGFkZGluZ1NpemU6ICJub25lIiwKICAgICAgICB0b29sdGlwOiBzdHJpbmdzLmdldENvbnRleHRNZW51VGl0bGUoKSwKICAgICAgICB0b29sdGlwUG9zaXRpb246ICJib3R0b20iCiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmMikgewogICAgICAgIHZhciBjbG9zZVBvcG92ZXIgPSBfcmVmMi5jbG9zZVBvcG92ZXI7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb250ZXh0TWVudSwgewogICAgICAgICAgaW5pdGlhbFBhbmVsSWQ6IDAsCiAgICAgICAgICBwYW5lbHM6IF90aGlzLl9nZXRQYW5lbHMoY2xvc2VQb3BvdmVyKQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9oYW5kbGVTYXZlIiwgZnVuY3Rpb24gKG5hbWUsIGRlc2NyaXB0aW9uLCBpbWFnZSkgewogICAgICB2YXIgY3JlYXRlQ3VzdG9tRWxlbWVudCA9IF90aGlzLnByb3BzLmNyZWF0ZUN1c3RvbUVsZW1lbnQ7CiAgICAgIGNyZWF0ZUN1c3RvbUVsZW1lbnQobmFtZSwgZGVzY3JpcHRpb24sIGltYWdlKTsKCiAgICAgIF90aGlzLl9oaWRlTW9kYWwoKTsKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhTaWRlYmFySGVhZGVyLCBbewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudFdpbGxVbm1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsKICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLAogICAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wczcudGl0bGUsCiAgICAgICAgICBzaG93TGF5ZXJDb250cm9scyA9IF90aGlzJHByb3BzNy5zaG93TGF5ZXJDb250cm9sczsKICAgICAgdmFyIGlzTW9kYWxWaXNpYmxlID0gdGhpcy5zdGF0ZS5pc01vZGFsVmlzaWJsZTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiY2FudmFzTGF5b3V0X19zaWRlYmFySGVhZGVyIiwKICAgICAgICBndXR0ZXJTaXplOiAibm9uZSIsCiAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIsCiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJ4cyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCB0aXRsZSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiLAogICAgICAgIGd1dHRlclNpemU6ICJub25lIgogICAgICB9LCBzaG93TGF5ZXJDb250cm9scyA/IHRoaXMuX3JlbmRlckxheW91dENvbnRyb2xzKCkgOiBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAgIHBvc2l0aW9uOiAiYm90dG9tIiwKICAgICAgICBjb250ZW50OiBzdHJpbmdzLmdldFNhdmVFbGVtZW50TWVudUl0ZW1MYWJlbCgpCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgY29sb3I6ICJ0ZXh0IiwKICAgICAgICBpY29uVHlwZTogImluZGV4T3BlbiIsCiAgICAgICAgb25DbGljazogdGhpcy5fc2hvd01vZGFsLAogICAgICAgICJhcmlhLWxhYmVsIjogc3RyaW5ncy5nZXRTYXZlRWxlbWVudE1lbnVJdGVtTGFiZWwoKQogICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCB0aGlzLl9yZW5kZXJDb250ZXh0TWVudSgpKSkpKSwgaXNNb2RhbFZpc2libGUgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpT3ZlcmxheU1hc2ssIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2N1c3RvbV9lbGVtZW50X21vZGFsLkN1c3RvbUVsZW1lbnRNb2RhbCwgewogICAgICAgIHRpdGxlOiBzdHJpbmdzLmdldENyZWF0ZUVsZW1lbnRNb2RhbFRpdGxlKCksCiAgICAgICAgb25TYXZlOiB0aGlzLl9oYW5kbGVTYXZlLAogICAgICAgIG9uQ2FuY2VsOiB0aGlzLl9oaWRlTW9kYWwKICAgICAgfSkpIDogbnVsbCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2lkZWJhckhlYWRlcjsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuU2lkZWJhckhlYWRlciA9IFNpZGViYXJIZWFkZXI7CgpfZGVmaW5lUHJvcGVydHkoU2lkZWJhckhlYWRlciwgInByb3BUeXBlcyIsIHsKICB0aXRsZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogIHNob3dMYXllckNvbnRyb2xzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwKICAvLyBUT0RPOiByZW1vdmUgd2hlbiB3ZSBzdXBwb3J0IHJlbGF5ZXJpbmcgbXVsdGlwbGUgZWxlbWVudHMKICBjdXROb2RlczogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBjb3B5Tm9kZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgcGFzdGVOb2RlczogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBjbG9uZU5vZGVzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIGRlbGV0ZU5vZGVzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIGJyaW5nVG9Gcm9udDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBicmluZ0ZvcndhcmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgc2VuZEJhY2t3YXJkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIHNlbmRUb0JhY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgY3JlYXRlQ3VzdG9tRWxlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBncm91cElzU2VsZWN0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLAogIHNlbGVjdGVkTm9kZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheSwKICBncm91cE5vZGVzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIHVuZ3JvdXBOb2RlczogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBhbGlnbkxlZnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgYWxpZ25DZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsCiAgYWxpZ25SaWdodDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBhbGlnblRvcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBhbGlnbk1pZGRsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBhbGlnbkJvdHRvbTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCwKICBkaXN0cmlidXRlSG9yaXpvbnRhbGx5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLAogIGRpc3RyaWJ1dGVWZXJ0aWNhbGx5OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkCn0pOwoKX2RlZmluZVByb3BlcnR5KFNpZGViYXJIZWFkZXIsICJkZWZhdWx0UHJvcHMiLCB7CiAgZ3JvdXBJc1NlbGVjdGVkOiBmYWxzZSwKICBzaG93TGF5ZXJDb250cm9sczogZmFsc2UsCiAgc2VsZWN0ZWROb2RlczogW10KfSk7"},null]}