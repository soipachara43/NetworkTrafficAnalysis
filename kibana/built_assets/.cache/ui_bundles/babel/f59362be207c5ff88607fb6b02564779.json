{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/search/search_source/normalize_sort_request.js","dependencies":[{"path":"src/plugins/data/public/search/search_source/normalize_sort_request.js","mtime":1589249550675},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMubm9ybWFsaXplU29ydFJlcXVlc3QgPSBub3JtYWxpemVTb3J0UmVxdWVzdDsKCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CgogIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsKCiAgdmFyIGtleSwgaTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOwoKICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07CiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7CiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgdmFyIHRhcmdldCA9IHt9OwogIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsKICB2YXIga2V5LCBpOwoKICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgewogICAga2V5ID0gc291cmNlS2V5c1tpXTsKICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCgoKZnVuY3Rpb24gbm9ybWFsaXplU29ydFJlcXVlc3Qoc29ydE9iamVjdCwgaW5kZXhQYXR0ZXJuKSB7CiAgdmFyIGRlZmF1bHRTb3J0T3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgdmFyIHNvcnRBcnJheSA9IEFycmF5LmlzQXJyYXkoc29ydE9iamVjdCkgPyBzb3J0T2JqZWN0IDogW3NvcnRPYmplY3RdOwogIHJldHVybiBzb3J0QXJyYXkubWFwKGZ1bmN0aW9uIChzb3J0YWJsZSkgewogICAgcmV0dXJuIG5vcm1hbGl6ZShzb3J0YWJsZSwgaW5kZXhQYXR0ZXJuLCBkZWZhdWx0U29ydE9wdGlvbnMpOwogIH0pOwp9Ci8qKgogKiBOb3JtYWxpemUgdGhlIHNvcnQgZGVzY3JpcHRpb24gdG8gdGhlIG1vcmUgdmVyYm9zZSBmb3JtYXQgKGUuZy4geyBzb21lRmllbGQ6ICJkZXNjIiB9IGludG8KICogeyBzb21lRmllbGQ6IHsgIm9yZGVyIjogImRlc2MifX0pLCBhbmQgY29udmVydCBzb3J0cyBvbiBzY3JpcHRlZCBmaWVsZHMgaW50byB0aGUgcHJvcGVyIHNjcmlwdAogKiBmb3IgRWxhc3RpY3NlYXJjaC4gTWl4IGluIHRoZSBkZWZhdWx0IG9wdGlvbnMgYWNjb3JkaW5nIHRvIHRoZSBhZHZhbmNlZCBzZXR0aW5ncy4KICovCgoKZnVuY3Rpb24gbm9ybWFsaXplKHNvcnRhYmxlLCBpbmRleFBhdHRlcm4sIGRlZmF1bHRTb3J0T3B0aW9ucykgewogIHZhciBfT2JqZWN0JGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhzb3J0YWJsZSksCiAgICAgIF9PYmplY3QkZW50cmllczIgPSBfc2xpY2VkVG9BcnJheShfT2JqZWN0JGVudHJpZXMsIDEpLAogICAgICBfT2JqZWN0JGVudHJpZXMyJCA9IF9zbGljZWRUb0FycmF5KF9PYmplY3QkZW50cmllczJbMF0sIDIpLAogICAgICBzb3J0RmllbGQgPSBfT2JqZWN0JGVudHJpZXMyJFswXSwKICAgICAgc29ydE9yZGVyID0gX09iamVjdCRlbnRyaWVzMiRbMV07CgogIHZhciBvcmRlciA9IF90eXBlb2Yoc29ydE9yZGVyKSA9PT0gJ29iamVjdCcgPyBzb3J0T3JkZXIgOiB7CiAgICBvcmRlcjogc29ydE9yZGVyCiAgfTsKCiAgaWYgKGluZGV4UGF0dGVybiAmJiB0eXBlb2YgaW5kZXhQYXR0ZXJuICE9PSAnc3RyaW5nJykgewogICAgdmFyIGluZGV4RmllbGQgPSBpbmRleFBhdHRlcm4uZmllbGRzLmZpbmQoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7CiAgICAgIHJldHVybiBuYW1lID09PSBzb3J0RmllbGQ7CiAgICB9KTsKCiAgICBpZiAoaW5kZXhGaWVsZCAmJiBpbmRleEZpZWxkLnNjcmlwdGVkICYmIGluZGV4RmllbGQuc29ydGFibGUpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBfc2NyaXB0OiBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgIHNjcmlwdDogewogICAgICAgICAgICBzb3VyY2U6IGluZGV4RmllbGQuc2NyaXB0LAogICAgICAgICAgICBsYW5nOiBpbmRleEZpZWxkLmxhbmcKICAgICAgICAgIH0sCiAgICAgICAgICB0eXBlOiBjYXN0U29ydFR5cGUoaW5kZXhGaWVsZC50eXBlKQogICAgICAgIH0sIG9yZGVyKQogICAgICB9OwogICAgfQogIH0gLy8gRG9uJ3QgaW5jbHVkZSB1bm1hcHBlZF90eXBlIGZvciBfc2NvcmUgZmllbGQKCgogIHZhciB1bm1hcHBlZF90eXBlID0gZGVmYXVsdFNvcnRPcHRpb25zLnVubWFwcGVkX3R5cGUsCiAgICAgIG90aGVyU29ydE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZGVmYXVsdFNvcnRPcHRpb25zLCBbInVubWFwcGVkX3R5cGUiXSk7CgogIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHNvcnRGaWVsZCwgX29iamVjdFNwcmVhZCh7fSwgb3JkZXIsIHt9LCBzb3J0RmllbGQgPT09ICdfc2NvcmUnID8gb3RoZXJTb3J0T3B0aW9ucyA6IGRlZmF1bHRTb3J0T3B0aW9ucykpOwp9IC8vIFRoZSBFUyBBUEkgb25seSBzdXBwb3J0cyBzb3J0IHNjcmlwdHMgb2YgdHlwZSAnbnVtYmVyJyBhbmQgJ3N0cmluZycKCgpmdW5jdGlvbiBjYXN0U29ydFR5cGUodHlwZSkgewogIGlmIChbJ251bWJlcicsICdzdHJpbmcnXS5pbmNsdWRlcyh0eXBlKSkgewogICAgcmV0dXJuICdudW1iZXInOwogIH0gZWxzZSBpZiAoWydzdHJpbmcnLCAnYm9vbGVhbiddLmluY2x1ZGVzKHR5cGUpKSB7CiAgICByZXR1cm4gJ3N0cmluZyc7CiAgfQoKICB0aHJvdyBuZXcgRXJyb3IoIlVuc3VwcG9ydGVkIHNjcmlwdCBzb3J0IHR5cGU6ICIuY29uY2F0KHR5cGUpKTsKfQ=="},null]}