{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/mitre/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/mitre/index.js","mtime":1589249553304},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFkZE1pdHJlVGhyZWF0ID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfc3R5bGVkQ29tcG9uZW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgic3R5bGVkLWNvbXBvbmVudHMiKSk7Cgp2YXIgX21pdHJlX3RhY3RpY3NfdGVjaG5pcXVlcyA9IHJlcXVpcmUoIi4uLy4uLy4uL21pdHJlL21pdHJlX3RhY3RpY3NfdGVjaG5pcXVlcyIpOwoKdmFyIFJ1bGVpMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi4vLi4vdHJhbnNsYXRpb25zIikpOwoKdmFyIF9zaGFyZWRfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NoYXJlZF9pbXBvcnRzIik7Cgp2YXIgX2RlZmF1bHRfdmFsdWUgPSByZXF1aXJlKCIuLi9zdGVwX2Fib3V0X3J1bGUvZGVmYXVsdF92YWx1ZSIpOwoKdmFyIF9hZGRfaXRlbV9mb3JtID0gcmVxdWlyZSgiLi4vYWRkX2l0ZW1fZm9ybSIpOwoKdmFyIF9oZWxwZXJzID0gcmVxdWlyZSgiLi9oZWxwZXJzIik7Cgp2YXIgaTE4biA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgTWl0cmVDb250YWluZXIgPSBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0LmRpdi53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIk1pdHJlQ29udGFpbmVyIiwKICBjb21wb25lbnRJZDogInMyenFqai0wIgp9KShbIm1hcmdpbi10b3A6MTZweDsiXSk7Cgp2YXIgTXlFdWlTdXBlclNlbGVjdCA9ICgwLCBfc3R5bGVkQ29tcG9uZW50cy5kZWZhdWx0KShfZXVpLkV1aVN1cGVyU2VsZWN0KS53aXRoQ29uZmlnKHsKICBkaXNwbGF5TmFtZTogIk15RXVpU3VwZXJTZWxlY3QiLAogIGNvbXBvbmVudElkOiAiczJ6cWpqLTEiCn0pKFsid2lkdGg6MjgwcHg7Il0pOwoKdmFyIEFkZE1pdHJlVGhyZWF0ID0gZnVuY3Rpb24gQWRkTWl0cmVUaHJlYXQoX3JlZikgewogIHZhciBkYXRhVGVzdFN1YmogPSBfcmVmLmRhdGFUZXN0U3ViaiwKICAgICAgZmllbGQgPSBfcmVmLmZpZWxkLAogICAgICBpZEFyaWEgPSBfcmVmLmlkQXJpYSwKICAgICAgaXNEaXNhYmxlZCA9IF9yZWYuaXNEaXNhYmxlZDsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKGZhbHNlKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIHNob3dWYWxpZGF0aW9uID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0U2hvd1ZhbGlkYXRpb24gPSBfdXNlU3RhdGUyWzFdOwoKICB2YXIgX2dldEZpZWxkVmFsaWRpdHlBbmRFID0gKDAsIF9zaGFyZWRfaW1wb3J0cy5nZXRGaWVsZFZhbGlkaXR5QW5kRXJyb3JNZXNzYWdlKShmaWVsZCksCiAgICAgIGlzSW52YWxpZCA9IF9nZXRGaWVsZFZhbGlkaXR5QW5kRS5pc0ludmFsaWQsCiAgICAgIGVycm9yTWVzc2FnZSA9IF9nZXRGaWVsZFZhbGlkaXR5QW5kRS5lcnJvck1lc3NhZ2U7CgogIHZhciByZW1vdmVJdGVtID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGluZGV4KSB7CiAgICB2YXIgdmFsdWVzID0gZmllbGQudmFsdWU7CiAgICB2YXIgbmV3VmFsdWVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZXMuc2xpY2UoMCwgaW5kZXgpKSwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5zbGljZShpbmRleCArIDEpKSk7CgogICAgaWYgKCgwLCBfZnAuaXNFbXB0eSkobmV3VmFsdWVzKSkgewogICAgICBmaWVsZC5zZXRWYWx1ZShfZGVmYXVsdF92YWx1ZS50aHJlYXREZWZhdWx0KTsKICAgIH0gZWxzZSB7CiAgICAgIGZpZWxkLnNldFZhbHVlKG5ld1ZhbHVlcyk7CiAgICB9CiAgfSwgW2ZpZWxkXSk7CiAgdmFyIGFkZEl0ZW0gPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICB2YXIgdmFsdWVzID0gZmllbGQudmFsdWU7CgogICAgaWYgKCEoMCwgX2ZwLmlzRW1wdHkpKHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0pKSB7CiAgICAgIGZpZWxkLnNldFZhbHVlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzKSwgW3sKICAgICAgICB0YWN0aWM6IHsKICAgICAgICAgIGlkOiAnbm9uZScsCiAgICAgICAgICBuYW1lOiAnbm9uZScsCiAgICAgICAgICByZWZlcmVuY2U6ICdub25lJwogICAgICAgIH0sCiAgICAgICAgdGVjaG5pcXVlOiBbXQogICAgICB9XSkpOwogICAgfSBlbHNlIHsKICAgICAgZmllbGQuc2V0VmFsdWUoW3sKICAgICAgICB0YWN0aWM6IHsKICAgICAgICAgIGlkOiAnbm9uZScsCiAgICAgICAgICBuYW1lOiAnbm9uZScsCiAgICAgICAgICByZWZlcmVuY2U6ICdub25lJwogICAgICAgIH0sCiAgICAgICAgdGVjaG5pcXVlOiBbXQogICAgICB9XSk7CiAgICB9CiAgfSwgW2ZpZWxkXSk7CiAgdmFyIHVwZGF0ZVRhY3RpYyA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHsKICAgIHZhciB2YWx1ZXMgPSBmaWVsZC52YWx1ZTsKCiAgICB2YXIgX3JlZjIgPSBfbWl0cmVfdGFjdGljc190ZWNobmlxdWVzLnRhY3RpY3NPcHRpb25zLmZpbmQoZnVuY3Rpb24gKHQpIHsKICAgICAgcmV0dXJuIHQudmFsdWUgPT09IHZhbHVlOwogICAgfSkgfHwgewogICAgICBpZDogJycsCiAgICAgIG5hbWU6ICcnLAogICAgICByZWZlcmVuY2U6ICcnCiAgICB9LAogICAgICAgIGlkID0gX3JlZjIuaWQsCiAgICAgICAgcmVmZXJlbmNlID0gX3JlZjIucmVmZXJlbmNlLAogICAgICAgIG5hbWUgPSBfcmVmMi5uYW1lOwoKICAgIGZpZWxkLnNldFZhbHVlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzLnNsaWNlKDAsIGluZGV4KSksIFtfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZXNbaW5kZXhdLCB7CiAgICAgIHRhY3RpYzogewogICAgICAgIGlkOiBpZCwKICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSwKICAgICAgICBuYW1lOiBuYW1lCiAgICAgIH0sCiAgICAgIHRlY2huaXF1ZTogW10KICAgIH0pXSwgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5zbGljZShpbmRleCArIDEpKSkpOwogIH0sIFtmaWVsZF0pOwogIHZhciB1cGRhdGVUZWNobmlxdWVzID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGluZGV4LCBzZWxlY3RlZE9wdGlvbnMpIHsKICAgIGZpZWxkLnNldFZhbHVlKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzLnNsaWNlKDAsIGluZGV4KSksIFtfb2JqZWN0U3ByZWFkKHt9LCB2YWx1ZXNbaW5kZXhdLCB7CiAgICAgIHRlY2huaXF1ZTogc2VsZWN0ZWRPcHRpb25zCiAgICB9KV0sIF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZXMuc2xpY2UoaW5kZXggKyAxKSkpKTsKICB9LCBbZmllbGRdKTsKICB2YXIgdmFsdWVzID0gZmllbGQudmFsdWU7CgogIHZhciBnZXRTZWxlY3RUYWN0aWMgPSBmdW5jdGlvbiBnZXRTZWxlY3RUYWN0aWModGFjdGljTmFtZSwgaW5kZXgsIGRpc2FibGVkKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNeUV1aVN1cGVyU2VsZWN0LCB7CiAgICAgIGlkOiAic2VsZWN0RG9jRXhhbXBsZSIsCiAgICAgIG9wdGlvbnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGFjdGljTmFtZSA9PT0gJ25vbmUnID8gW3sKICAgICAgICBpbnB1dERpc3BsYXk6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIG51bGwsIGkxOG4uVEFDVElDX1BMQUNFSE9MREVSKSwKICAgICAgICB2YWx1ZTogJ25vbmUnLAogICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZAogICAgICB9XSA6IFtdKSwgX3RvQ29uc3VtYWJsZUFycmF5KF9taXRyZV90YWN0aWNzX3RlY2huaXF1ZXMudGFjdGljc09wdGlvbnMubWFwKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlucHV0RGlzcGxheTogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgdC50ZXh0KSwKICAgICAgICAgIHZhbHVlOiB0LnZhbHVlLAogICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkCiAgICAgICAgfTsKICAgICAgfSkpKSwKICAgICAgImFyaWEtbGFiZWwiOiAiIiwKICAgICAgb25DaGFuZ2U6IHVwZGF0ZVRhY3RpYy5iaW5kKG51bGwsIGluZGV4KSwKICAgICAgZnVsbFdpZHRoOiBmYWxzZSwKICAgICAgdmFsdWVPZlNlbGVjdGVkOiAoMCwgX2ZwLmNhbWVsQ2FzZSkodGFjdGljTmFtZSksCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJtaXRyZVRhY3RpYyIKICAgIH0pOwogIH07CgogIHZhciBnZXRTZWxlY3RUZWNobmlxdWVzID0gZnVuY3Rpb24gZ2V0U2VsZWN0VGVjaG5pcXVlcyhpdGVtLCBpbmRleCwgZGlzYWJsZWQpIHsKICAgIHZhciBpbnZhbGlkID0gKDAsIF9oZWxwZXJzLmlzTWl0cmVBdHRhY2tJbnZhbGlkKShpdGVtLnRhY3RpYy5uYW1lLCBpdGVtLnRlY2huaXF1ZSk7CgogICAgdmFyIG9wdGlvbnMgPSBfbWl0cmVfdGFjdGljc190ZWNobmlxdWVzLnRlY2huaXF1ZXNPcHRpb25zLmZpbHRlcihmdW5jdGlvbiAodCkgewogICAgICByZXR1cm4gdC50YWN0aWNzLmluY2x1ZGVzKCgwLCBfZnAua2ViYWJDYXNlKShpdGVtLnRhY3RpYy5uYW1lKSk7CiAgICB9KTsKCiAgICB2YXIgc2VsZWN0ZWRPcHRpb25zID0gaXRlbS50ZWNobmlxdWUubWFwKGZ1bmN0aW9uICh0ZWNobmljKSB7CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCB0ZWNobmljLCB7CiAgICAgICAgbGFiZWw6ICIiLmNvbmNhdCh0ZWNobmljLm5hbWUsICIgKCIpLmNvbmNhdCh0ZWNobmljLmlkLCAiKSIpIC8vIEFQSSBkb2Vzbid0IGFsbG93IGZvciBsYWJlbCBmaWVsZAoKICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIGd1dHRlclNpemU6ICJzIiwKICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICBncm93OiB0cnVlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIm1pdHJlVGVjaG5pcXVlcyIsCiAgICAgIHBsYWNlaG9sZGVyOiBpdGVtLnRhY3RpYy5uYW1lID09PSAnbm9uZScgPyAnJyA6IGkxOG4uVEVDSE5JUVVFU19QTEFDRUhPTERFUiwKICAgICAgb3B0aW9uczogb3B0aW9ucywKICAgICAgc2VsZWN0ZWRPcHRpb25zOiBzZWxlY3RlZE9wdGlvbnMsCiAgICAgIG9uQ2hhbmdlOiB1cGRhdGVUZWNobmlxdWVzLmJpbmQobnVsbCwgaW5kZXgpLAogICAgICBpc0Rpc2FibGVkOiBkaXNhYmxlZCB8fCBpdGVtLnRhY3RpYy5uYW1lID09PSAnbm9uZScsCiAgICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgICAgaXNJbnZhbGlkOiBzaG93VmFsaWRhdGlvbiAmJiBpbnZhbGlkLAogICAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgICByZXR1cm4gc2V0U2hvd1ZhbGlkYXRpb24odHJ1ZSk7CiAgICAgIH0KICAgIH0pLCBzaG93VmFsaWRhdGlvbiAmJiBpbnZhbGlkICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgc2l6ZTogInhzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIGVycm9yTWVzc2FnZSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgIGljb25UeXBlOiAidHJhc2giLAogICAgICBpc0Rpc2FibGVkOiBkaXNhYmxlZCB8fCBpdGVtLnRhY3RpYy5uYW1lID09PSAnbm9uZScsCiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgcmV0dXJuIHJlbW92ZUl0ZW0oaW5kZXgpOwogICAgICB9LAogICAgICAiYXJpYS1sYWJlbCI6IFJ1bGVpMThuLkRFTEVURQogICAgfSkpKTsKICB9OwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChNaXRyZUNvbnRhaW5lciwgbnVsbCwgdmFsdWVzLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgIGtleTogaW5kZXgKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgZ3V0dGVyU2l6ZTogInMiLAogICAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQmV0d2VlbiIsCiAgICAgIGFsaWduSXRlbXM6ICJmbGV4U3RhcnQiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgZ3JvdzogZmFsc2UKICAgIH0sIGluZGV4ID09PSAwID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgbGFiZWw6ICIiLmNvbmNhdChmaWVsZC5sYWJlbCwgIiAiKS5jb25jYXQoaTE4bi5UQUNUSUMpLAogICAgICBsYWJlbEFwcGVuZDogZmllbGQubGFiZWxBcHBlbmQsCiAgICAgIGRlc2NyaWJlZEJ5SWRzOiBpZEFyaWEgPyBbIiIuY29uY2F0KGlkQXJpYSwgIiAiKS5jb25jYXQoaTE4bi5UQUNUSUMpXSA6IHVuZGVmaW5lZAogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgZ2V0U2VsZWN0VGFjdGljKGl0ZW0udGFjdGljLm5hbWUsIGluZGV4LCBpc0Rpc2FibGVkKSkpIDogZ2V0U2VsZWN0VGFjdGljKGl0ZW0udGFjdGljLm5hbWUsIGluZGV4LCBpc0Rpc2FibGVkKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICBncm93OiB0cnVlCiAgICB9LCBpbmRleCA9PT0gMCA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgIGxhYmVsOiAiIi5jb25jYXQoZmllbGQubGFiZWwsICIgIikuY29uY2F0KGkxOG4uVEVDSE5JUVVFKSwKICAgICAgaXNJbnZhbGlkOiBzaG93VmFsaWRhdGlvbiAmJiBpc0ludmFsaWQsCiAgICAgIGZ1bGxXaWR0aDogdHJ1ZSwKICAgICAgZGVzY3JpYmVkQnlJZHM6IGlkQXJpYSA/IFsiIi5jb25jYXQoaWRBcmlhLCAiICIpLmNvbmNhdChpMThuLlRFQ0hOSVFVRSldIDogdW5kZWZpbmVkCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBnZXRTZWxlY3RUZWNobmlxdWVzKGl0ZW0sIGluZGV4LCBpc0Rpc2FibGVkKSkpIDogZ2V0U2VsZWN0VGVjaG5pcXVlcyhpdGVtLCBpbmRleCwgaXNEaXNhYmxlZCkpKSwgdmFsdWVzLmxlbmd0aCAtIDEgIT09IGluZGV4ICYmIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogInMiCiAgICB9KSk7CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FkZF9pdGVtX2Zvcm0uTXlBZGRJdGVtQnV0dG9uLCB7CiAgICAiZGF0YS10ZXN0LXN1YmoiOiAiYWRkTWl0cmUiLAogICAgb25DbGljazogYWRkSXRlbSwKICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQKICB9LCBpMThuLkFERF9NSVRSRV9BVFRBQ0spKTsKfTsKCmV4cG9ydHMuQWRkTWl0cmVUaHJlYXQgPSBBZGRNaXRyZVRocmVhdDs="},null]}