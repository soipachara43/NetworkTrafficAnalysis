{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/kibana_react/public/code_editor/code_editor.js","dependencies":[{"path":"src/plugins/kibana_react/public/code_editor/code_editor.js","mtime":1589249550943},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuQ29kZUVkaXRvciA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdFJlc2l6ZURldGVjdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdC1yZXNpemUtZGV0ZWN0b3IiKSk7Cgp2YXIgX3JlYWN0TW9uYWNvRWRpdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdC1tb25hY28tZWRpdG9yIikpOwoKdmFyIF9tb25hY28gPSByZXF1aXJlKCJAa2JuL3VpLXNoYXJlZC1kZXBzL21vbmFjbyIpOwoKdmFyIF9lZGl0b3JfdGhlbWUgPSByZXF1aXJlKCIuL2VkaXRvcl90aGVtZSIpOwoKcmVxdWlyZSgiLi9lZGl0b3Iuc2NzcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgQ29kZUVkaXRvciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoQ29kZUVkaXRvciwgX1JlYWN0JENvbXBvbmVudCk7CgogIGZ1bmN0aW9uIENvZGVFZGl0b3IoKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvZGVFZGl0b3IpOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoQ29kZUVkaXRvcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIl9lZGl0b3IiLCBudWxsKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZWRpdG9yV2lsbE1vdW50IiwgZnVuY3Rpb24gKF9fbW9uYWNvKSB7CiAgICAgIGlmIChfX21vbmFjbyAhPT0gX21vbmFjby5tb25hY28pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWN0LW1vbmFjby1lZGl0b3IgaXMgdXNpbmcgYSBkaWZmZXJlbnQgdmVyc2lvbiBvZiBtb25hY28nKTsKICAgICAgfQoKICAgICAgaWYgKF90aGlzLnByb3BzLm92ZXJyaWRlRWRpdG9yV2lsbE1vdW50KSB7CiAgICAgICAgX3RoaXMucHJvcHMub3ZlcnJpZGVFZGl0b3JXaWxsTW91bnQoKTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoX3RoaXMucHJvcHMuZWRpdG9yV2lsbE1vdW50KSB7CiAgICAgICAgX3RoaXMucHJvcHMuZWRpdG9yV2lsbE1vdW50KCk7CiAgICAgIH0KCiAgICAgIF9tb25hY28ubW9uYWNvLmxhbmd1YWdlcy5vbkxhbmd1YWdlKF90aGlzLnByb3BzLmxhbmd1YWdlSWQsIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoX3RoaXMucHJvcHMuc3VnZ2VzdGlvblByb3ZpZGVyKSB7CiAgICAgICAgICBfbW9uYWNvLm1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJDb21wbGV0aW9uSXRlbVByb3ZpZGVyKF90aGlzLnByb3BzLmxhbmd1YWdlSWQsIF90aGlzLnByb3BzLnN1Z2dlc3Rpb25Qcm92aWRlcik7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXMucHJvcHMuc2lnbmF0dXJlUHJvdmlkZXIpIHsKICAgICAgICAgIF9tb25hY28ubW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlclNpZ25hdHVyZUhlbHBQcm92aWRlcihfdGhpcy5wcm9wcy5sYW5ndWFnZUlkLCBfdGhpcy5wcm9wcy5zaWduYXR1cmVQcm92aWRlcik7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXMucHJvcHMuaG92ZXJQcm92aWRlcikgewogICAgICAgICAgX21vbmFjby5tb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcihfdGhpcy5wcm9wcy5sYW5ndWFnZUlkLCBfdGhpcy5wcm9wcy5ob3ZlclByb3ZpZGVyKTsKICAgICAgICB9CgogICAgICAgIGlmIChfdGhpcy5wcm9wcy5sYW5ndWFnZUNvbmZpZ3VyYXRpb24pIHsKICAgICAgICAgIF9tb25hY28ubW9uYWNvLmxhbmd1YWdlcy5zZXRMYW5ndWFnZUNvbmZpZ3VyYXRpb24oX3RoaXMucHJvcHMubGFuZ3VhZ2VJZCwgX3RoaXMucHJvcHMubGFuZ3VhZ2VDb25maWd1cmF0aW9uKTsKICAgICAgICB9CiAgICAgIH0pOyAvLyBSZWdpc3RlciB0aGUgdGhlbWUKCgogICAgICBfbW9uYWNvLm1vbmFjby5lZGl0b3IuZGVmaW5lVGhlbWUoJ2V1aUNvbG9ycycsIF90aGlzLnByb3BzLnVzZURhcmtUaGVtZSA/IF9lZGl0b3JfdGhlbWUuREFSS19USEVNRSA6IF9lZGl0b3JfdGhlbWUuTElHSFRfVEhFTUUpOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX2VkaXRvckRpZE1vdW50IiwgZnVuY3Rpb24gKGVkaXRvciwgX19tb25hY28pIHsKICAgICAgaWYgKF9fbW9uYWNvICE9PSBfbW9uYWNvLm1vbmFjbykgewogICAgICAgIHRocm93IG5ldyBFcnJvcigncmVhY3QtbW9uYWNvLWVkaXRvciBpcyB1c2luZyBhIGRpZmZlcmVudCB2ZXJzaW9uIG9mIG1vbmFjbycpOwogICAgICB9CgogICAgICBfdGhpcy5fZWRpdG9yID0gZWRpdG9yOwoKICAgICAgaWYgKF90aGlzLnByb3BzLmVkaXRvckRpZE1vdW50KSB7CiAgICAgICAgX3RoaXMucHJvcHMuZWRpdG9yRGlkTW91bnQoZWRpdG9yKTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX3VwZGF0ZURpbWVuc2lvbnMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5fZWRpdG9yKSB7CiAgICAgICAgX3RoaXMuX2VkaXRvci5sYXlvdXQoKTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENvZGVFZGl0b3IsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIGxhbmd1YWdlSWQgPSBfdGhpcyRwcm9wcy5sYW5ndWFnZUlkLAogICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZSwKICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsCiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzLndpZHRoLAogICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkcHJvcHMuaGVpZ2h0LAogICAgICAgICAgb3B0aW9ucyA9IF90aGlzJHByb3BzLm9wdGlvbnM7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdE1vbmFjb0VkaXRvci5kZWZhdWx0LCB7CiAgICAgICAgdGhlbWU6ICJldWlDb2xvcnMiLAogICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZUlkLAogICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsCiAgICAgICAgZWRpdG9yV2lsbE1vdW50OiB0aGlzLl9lZGl0b3JXaWxsTW91bnQsCiAgICAgICAgZWRpdG9yRGlkTW91bnQ6IHRoaXMuX2VkaXRvckRpZE1vdW50LAogICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICBoZWlnaHQ6IGhlaWdodCwKICAgICAgICBvcHRpb25zOiBvcHRpb25zCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJlc2l6ZURldGVjdG9yLmRlZmF1bHQsIHsKICAgICAgICBoYW5kbGVXaWR0aDogdHJ1ZSwKICAgICAgICBoYW5kbGVIZWlnaHQ6IHRydWUsCiAgICAgICAgb25SZXNpemU6IHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENvZGVFZGl0b3I7Cn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuQ29kZUVkaXRvciA9IENvZGVFZGl0b3I7"},null]}