{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/components/logstash/pipeline_listing/pipeline_listing.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/components/logstash/pipeline_listing/pipeline_listing.js","mtime":1589249552548},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBpcGVsaW5lTGlzdGluZyA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJtb21lbnQiKSk7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZm9ybWF0X251bWJlciA9IHJlcXVpcmUoIi4uLy4uLy4uL2xpYi9mb3JtYXRfbnVtYmVyIik7Cgp2YXIgX2NsdXN0ZXJfc3RhdHVzID0gcmVxdWlyZSgiLi4vY2x1c3Rlcl9zdGF0dXMiKTsKCnZhciBfc3BhcmtsaW5lID0gcmVxdWlyZSgicGx1Z2lucy9tb25pdG9yaW5nL2NvbXBvbmVudHMvc3BhcmtsaW5lIik7Cgp2YXIgX3RhYmxlID0gcmVxdWlyZSgiLi4vLi4vdGFibGUiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCnZhciBQaXBlbGluZUxpc3RpbmcgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFBpcGVsaW5lTGlzdGluZywgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFBpcGVsaW5lTGlzdGluZygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaXBlbGluZUxpc3RpbmcpOwoKICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUGlwZWxpbmVMaXN0aW5nKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQaXBlbGluZUxpc3RpbmcsIFt7CiAgICBrZXk6ICJ0b29sdGlwWFZhbHVlRm9ybWF0dGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b29sdGlwWFZhbHVlRm9ybWF0dGVyKHhWYWx1ZSwgZGF0ZUZvcm1hdCkgewogICAgICByZXR1cm4gKDAsIF9tb21lbnQuZGVmYXVsdCkoeFZhbHVlKS5mb3JtYXQoZGF0ZUZvcm1hdCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidG9vbHRpcFlWYWx1ZUZvcm1hdHRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9vbHRpcFlWYWx1ZUZvcm1hdHRlcih5VmFsdWUsIGZvcm1hdCwgdW5pdHMpIHsKICAgICAgcmV0dXJuICgwLCBfZm9ybWF0X251bWJlci5mb3JtYXRNZXRyaWMpKHlWYWx1ZSwgZm9ybWF0LCB1bml0cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0Q29sdW1ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sdW1ucygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgICBvbkJydXNoID0gX3RoaXMkcHJvcHMub25CcnVzaCwKICAgICAgICAgIGRhdGVGb3JtYXQgPSBfdGhpcyRwcm9wcy5kYXRlRm9ybWF0OwogICAgICB2YXIgX3RoaXMkcHJvcHMkYW5ndWxhciA9IHRoaXMucHJvcHMuYW5ndWxhciwKICAgICAgICAgIGtiblVybCA9IF90aGlzJHByb3BzJGFuZ3VsYXIua2JuVXJsLAogICAgICAgICAgc2NvcGUgPSBfdGhpcyRwcm9wcyRhbmd1bGFyLnNjb3BlOwogICAgICByZXR1cm4gW3sKICAgICAgICBuYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5sb2dzdGFzaC5waXBlbGluZXMuaWRUaXRsZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnSUQnCiAgICAgICAgfSksCiAgICAgICAgZmllbGQ6ICdpZCcsCiAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaWQpIHsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiaWQiLAogICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAga2JuVXJsLmNoYW5nZVBhdGgoIi9sb2dzdGFzaC9waXBlbGluZXMvIi5jb25jYXQoaWQpKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgaWQpOwogICAgICAgIH0KICAgICAgfSwgewogICAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tb25pdG9yaW5nLmxvZ3N0YXNoLnBpcGVsaW5lcy5ldmVudHNFbWl0dGVkUmF0ZVRpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFdmVudHMgRW1pdHRlZCBSYXRlJwogICAgICAgIH0pLAogICAgICAgIGZpZWxkOiAnbGF0ZXN0VGhyb3VnaHB1dCcsCiAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIodmFsdWUsIHBpcGVsaW5lKSB7CiAgICAgICAgICB2YXIgdGhyb3VnaHB1dCA9IHBpcGVsaW5lLm1ldHJpY3MudGhyb3VnaHB1dDsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICAgIGd1dHRlclNpemU6ICJub25lIiwKICAgICAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3BhcmtsaW5lLlNwYXJrbGluZSwgewogICAgICAgICAgICBzZXJpZXM6IHRocm91Z2hwdXQuZGF0YSwKICAgICAgICAgICAgb25CcnVzaDogb25CcnVzaCwKICAgICAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgICAgIHhWYWx1ZUZvcm1hdHRlcjogZnVuY3Rpb24geFZhbHVlRm9ybWF0dGVyKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudG9vbHRpcFhWYWx1ZUZvcm1hdHRlcih2YWx1ZSwgZGF0ZUZvcm1hdCk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB5VmFsdWVGb3JtYXR0ZXI6ICgwLCBfbG9kYXNoLnBhcnRpYWxSaWdodCkoX3RoaXMudG9vbHRpcFlWYWx1ZUZvcm1hdHRlciwgdGhyb3VnaHB1dC5tZXRyaWMuZm9ybWF0LCB0aHJvdWdocHV0Lm1ldHJpYy51bml0cykKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgIHhheGlzOiB0aHJvdWdocHV0LnRpbWVSYW5nZQogICAgICAgICAgICB9CiAgICAgICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJtb25UYWJsZUNlbGxfX251bWJlciIsCiAgICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJldmVudHNFbWl0dGVkUmF0ZSIKICAgICAgICAgIH0sICgwLCBfZm9ybWF0X251bWJlci5mb3JtYXRNZXRyaWMpKHZhbHVlLCAnMC5bMF1hJywgdGhyb3VnaHB1dC5tZXRyaWMudW5pdHMpKSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAgbmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1vbml0b3JpbmcubG9nc3Rhc2gucGlwZWxpbmVzLm51bWJlck9mTm9kZXNUaXRsZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTnVtYmVyIG9mIE5vZGVzJwogICAgICAgIH0pLAogICAgICAgIGZpZWxkOiAnbGF0ZXN0Tm9kZXNDb3VudCcsCiAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIodmFsdWUsIHBpcGVsaW5lKSB7CiAgICAgICAgICB2YXIgbm9kZXNDb3VudCA9IHBpcGVsaW5lLm1ldHJpY3Mubm9kZXNDb3VudDsKICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICAgIGd1dHRlclNpemU6ICJub25lIiwKICAgICAgICAgICAgYWxpZ25JdGVtczogImNlbnRlciIKICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc3BhcmtsaW5lLlNwYXJrbGluZSwgewogICAgICAgICAgICBzZXJpZXM6IG5vZGVzQ291bnQuZGF0YSwKICAgICAgICAgICAgb25CcnVzaDogb25CcnVzaCwKICAgICAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgICAgIHhWYWx1ZUZvcm1hdHRlcjogZnVuY3Rpb24geFZhbHVlRm9ybWF0dGVyKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudG9vbHRpcFhWYWx1ZUZvcm1hdHRlcih2YWx1ZSwgZGF0ZUZvcm1hdCk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB5VmFsdWVGb3JtYXR0ZXI6ICgwLCBfbG9kYXNoLnBhcnRpYWxSaWdodCkoX3RoaXMudG9vbHRpcFlWYWx1ZUZvcm1hdHRlciwgbm9kZXNDb3VudC5tZXRyaWMuZm9ybWF0LCBub2Rlc0NvdW50Lm1ldHJpYy51bml0cykKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgIHhheGlzOiBub2Rlc0NvdW50LnRpbWVSYW5nZQogICAgICAgICAgICB9CiAgICAgICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgICBjbGFzc05hbWU6ICJtb25UYWJsZUNlbGxfX251bWJlciIsCiAgICAgICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJub2RlQ291bnQiCiAgICAgICAgICB9LCAoMCwgX2Zvcm1hdF9udW1iZXIuZm9ybWF0TWV0cmljKSh2YWx1ZSwgJzBhJykpKTsKICAgICAgICB9CiAgICAgIH1dOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclN0YXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJTdGF0cygpIHsKICAgICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzQ29tcG9uZW50KSB7CiAgICAgICAgdmFyIF9Db21wb25lbnQyID0gdGhpcy5wcm9wcy5zdGF0dXNDb21wb25lbnQ7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NvbXBvbmVudDIsIHsKICAgICAgICAgIHN0YXRzOiB0aGlzLnByb3BzLnN0YXRzCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jbHVzdGVyX3N0YXR1cy5DbHVzdGVyU3RhdHVzLCB7CiAgICAgICAgc3RhdHM6IHRoaXMucHJvcHMuc3RhdHMKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLAogICAgICAgICAgZGF0YSA9IF90aGlzJHByb3BzMi5kYXRhLAogICAgICAgICAgc29ydGluZyA9IF90aGlzJHByb3BzMi5zb3J0aW5nLAogICAgICAgICAgcGFnaW5hdGlvbiA9IF90aGlzJHByb3BzMi5wYWdpbmF0aW9uLAogICAgICAgICAgb25UYWJsZUNoYW5nZSA9IF90aGlzJHByb3BzMi5vblRhYmxlQ2hhbmdlLAogICAgICAgICAgZmV0Y2hNb3JlRGF0YSA9IF90aGlzJHByb3BzMi5mZXRjaE1vcmVEYXRhLAogICAgICAgICAgdXBncmFkZU1lc3NhZ2UgPSBfdGhpcyRwcm9wczIudXBncmFkZU1lc3NhZ2UsCiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lOwogICAgICB2YXIgc29ydGluZ09wdGlvbnMgPSBzb3J0aW5nIHx8IHsKICAgICAgICBmaWVsZDogJ2lkJywKICAgICAgICBkaXJlY3Rpb246ICdhc2MnCiAgICAgIH07CgogICAgICBpZiAoc29ydGluZ09wdGlvbnMuZmllbGQgPT09ICduYW1lJykgewogICAgICAgIHNvcnRpbmdPcHRpb25zLmZpZWxkID0gJ2lkJzsKICAgICAgfQoKICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmdldENvbHVtbnMoKTsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYWdlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnZUJvZHksIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgdGhpcy5yZW5kZXJTdGF0cygpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhZ2VDb250ZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF90YWJsZS5FdWlNb25pdG9yaW5nU1NQVGFibGUsIHsKICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSB8fCAnbG9nc3Rhc2hOb2Rlc1RhYmxlJywKICAgICAgICByb3dzOiBkYXRhLAogICAgICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICAgICAgc29ydGluZzogc29ydGluZ09wdGlvbnMsCiAgICAgICAgbWVzc2FnZTogdXBncmFkZU1lc3NhZ2UsCiAgICAgICAgcGFnaW5hdGlvbjogcGFnaW5hdGlvbiwKICAgICAgICBmZXRjaE1vcmVEYXRhOiBmZXRjaE1vcmVEYXRhLAogICAgICAgIHNlYXJjaDogewogICAgICAgICAgYm94OiB7CiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2subW9uaXRvcmluZy5sb2dzdGFzaC5maWx0ZXJQaXBlbGluZXNQbGFjZWhvbGRlcicsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0ZpbHRlciBQaXBlbGluZXPigKYnCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBvblRhYmxlQ2hhbmdlOiBvblRhYmxlQ2hhbmdlCiAgICAgIH0pKSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBpcGVsaW5lTGlzdGluZzsKfShfcmVhY3QuQ29tcG9uZW50KTsKCmV4cG9ydHMuUGlwZWxpbmVMaXN0aW5nID0gUGlwZWxpbmVMaXN0aW5nOw=="},null]}