{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/core/public/plugins/plugins_service.js","dependencies":[{"path":"src/core/public/plugins/plugins_service.js","mtime":1589249549326},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBsdWdpbnNTZXJ2aWNlID0gdm9pZCAwOwoKdmFyIF9wbHVnaW4gPSByZXF1aXJlKCIuL3BsdWdpbiIpOwoKdmFyIF9wbHVnaW5fY29udGV4dCA9IHJlcXVpcmUoIi4vcGx1Z2luX2NvbnRleHQiKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi91dGlscyIpOwoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIFNlYyA9IDEwMDA7Ci8qKiBAaW50ZXJuYWwgKi8KCi8qKgogKiBTZXJ2aWNlIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nIHBsdWdpbiBidW5kbGVzLCBpbml0aWFsaXppbmcgcGx1Z2lucywgYW5kIG1hbmFnaW5nIHRoZSBsaWZlY3ljbGUKICogb2YgYWxsIHBsdWdpbnMuCiAqCiAqIEBpbnRlcm5hbAogKi8KCnZhciBQbHVnaW5zU2VydmljZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIC8qKiBQbHVnaW4gd3JhcHBlcnMgaW4gdG9wb2xvZ2ljYWwgb3JkZXIuICovCiAgZnVuY3Rpb24gUGx1Z2luc1NlcnZpY2UoY29yZUNvbnRleHQsIHBsdWdpbnMpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdWdpbnNTZXJ2aWNlKTsKCiAgICB0aGlzLmNvcmVDb250ZXh0ID0gY29yZUNvbnRleHQ7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwbHVnaW5zIiwgbmV3IE1hcCgpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInBsdWdpbkRlcGVuZGVuY2llcyIsIG5ldyBNYXAoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzYXR1cFBsdWdpbnMiLCBbXSk7IC8vIEdlbmVyYXRlIG9wYXF1ZSBpZHMKCgogICAgdmFyIG9wYXF1ZUlkcyA9IG5ldyBNYXAocGx1Z2lucy5tYXAoZnVuY3Rpb24gKHApIHsKICAgICAgcmV0dXJuIFtwLmlkLCBTeW1ib2wocC5pZCldOwogICAgfSkpOyAvLyBTZXR1cCBkZXBlbmRlbmN5IG1hcCBhbmQgcGx1Z2luIHdyYXBwZXJzCgogICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciBpZCA9IF9yZWYuaWQsCiAgICAgICAgICBwbHVnaW4gPSBfcmVmLnBsdWdpbiwKICAgICAgICAgIF9yZWYkY29uZmlnID0gX3JlZi5jb25maWcsCiAgICAgICAgICBjb25maWcgPSBfcmVmJGNvbmZpZyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGNvbmZpZzsgLy8gU2V0dXAgbWFwIG9mIGRlcGVuZGVuY2llcwoKICAgICAgX3RoaXMucGx1Z2luRGVwZW5kZW5jaWVzLnNldChpZCwgW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwbHVnaW4ucmVxdWlyZWRQbHVnaW5zKSwgX3RvQ29uc3VtYWJsZUFycmF5KHBsdWdpbi5vcHRpb25hbFBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChvcHRQbHVnaW4pIHsKICAgICAgICByZXR1cm4gb3BhcXVlSWRzLmhhcyhvcHRQbHVnaW4pOwogICAgICB9KSkpKTsgLy8gQ29uc3RydWN0IHBsdWdpbiB3cmFwcGVycywgZGVwZW5kaW5nIG9uIHRoZSB0b3BvbG9naWNhbCBvcmRlciBzZXQgYnkgdGhlIHNlcnZlci4KCgogICAgICBfdGhpcy5wbHVnaW5zLnNldChpZCwgbmV3IF9wbHVnaW4uUGx1Z2luV3JhcHBlcihwbHVnaW4sIG9wYXF1ZUlkcy5nZXQoaWQpLCAoMCwgX3BsdWdpbl9jb250ZXh0LmNyZWF0ZVBsdWdpbkluaXRpYWxpemVyQ29udGV4dCkoX3RoaXMuY29yZUNvbnRleHQsIG9wYXF1ZUlkcy5nZXQoaWQpLCBwbHVnaW4sIGNvbmZpZykpKTsKICAgIH0pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBsdWdpbnNTZXJ2aWNlLCBbewogICAga2V5OiAiZ2V0T3BhcXVlSWRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcGFxdWVJZHMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOyAvLyBSZXR1cm4gZGVwZW5kZW5jeSBtYXAgb2Ygb3BhcXVlIGlkcwoKCiAgICAgIHJldHVybiBuZXcgTWFwKF90b0NvbnN1bWFibGVBcnJheSh0aGlzLnBsdWdpbkRlcGVuZGVuY2llcykubWFwKGZ1bmN0aW9uIChfcmVmMikgewogICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSwKICAgICAgICAgICAgaWQgPSBfcmVmM1swXSwKICAgICAgICAgICAgZGVwcyA9IF9yZWYzWzFdOwoKICAgICAgICByZXR1cm4gW190aGlzMi5wbHVnaW5zLmdldChpZCkub3BhcXVlSWQsIGRlcHMubWFwKGZ1bmN0aW9uIChkZXBJZCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5wbHVnaW5zLmdldChkZXBJZCkub3BhcXVlSWQ7CiAgICAgICAgfSldOwogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0dXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zZXR1cCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZGVwcykgewogICAgICAgIHZhciBjb250cmFjdHMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgX3N0ZXAkdmFsdWUsIHBsdWdpbk5hbWUsIHBsdWdpbiwgcGx1Z2luRGVwQ29udHJhY3RzLCBjb250cmFjdDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkUGx1Z2luQnVuZGxlcyhkZXBzLmh0dHAuYmFzZVBhdGgucHJlcGVuZCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIC8vIFNldHVwIGVhY2ggcGx1Z2luIHdpdGggcmVxdWlyZWQgYW5kIG9wdGlvbmFsIHBsdWdpbiBjb250cmFjdHMKICAgICAgICAgICAgICAgIGNvbnRyYWN0cyA9IG5ldyBNYXAoKTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSB0aGlzLnBsdWdpbnMuZW50cmllcygpW1N5bWJvbC5pdGVyYXRvcl0oKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgaWYgKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3N0ZXAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcC52YWx1ZSwgMiksIHBsdWdpbk5hbWUgPSBfc3RlcCR2YWx1ZVswXSwgcGx1Z2luID0gX3N0ZXAkdmFsdWVbMV07CiAgICAgICAgICAgICAgICBwbHVnaW5EZXBDb250cmFjdHMgPSBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wbHVnaW5EZXBlbmRlbmNpZXMuZ2V0KHBsdWdpbk5hbWUpKS5yZWR1Y2UoZnVuY3Rpb24gKGRlcENvbnRyYWN0cywgZGVwZW5kZW5jeU5hbWUpIHsKICAgICAgICAgICAgICAgICAgLy8gT25seSBzZXQgaWYgcHJlc2VudC4gQ291bGQgYmUgYWJzZW50IGlmIHBsdWdpbiBkb2VzIG5vdCBoYXZlIGNsaWVudC1zaWRlIGNvZGUgb3IgaXMgYQogICAgICAgICAgICAgICAgICAvLyBtaXNzaW5nIG9wdGlvbmFsIHBsdWdpbi4KICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyYWN0cy5oYXMoZGVwZW5kZW5jeU5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgZGVwQ29udHJhY3RzW2RlcGVuZGVuY3lOYW1lXSA9IGNvbnRyYWN0cy5nZXQoZGVwZW5kZW5jeU5hbWUpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gZGVwQ29udHJhY3RzOwogICAgICAgICAgICAgICAgfSwge30pOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbHMud2l0aFRpbWVvdXQpKHsKICAgICAgICAgICAgICAgICAgcHJvbWlzZTogcGx1Z2luLnNldHVwKCgwLCBfcGx1Z2luX2NvbnRleHQuY3JlYXRlUGx1Z2luU2V0dXBDb250ZXh0KSh0aGlzLmNvcmVDb250ZXh0LCBkZXBzLCBwbHVnaW4pLCBwbHVnaW5EZXBDb250cmFjdHMpLAogICAgICAgICAgICAgICAgICB0aW1lb3V0OiAzMCAqIFNlYywKICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiAiU2V0dXAgbGlmZWN5Y2xlIG9mIFwiIi5jb25jYXQocGx1Z2luTmFtZSwgIlwiIHBsdWdpbiB3YXNuJ3QgY29tcGxldGVkIGluIDMwc2VjLiBDb25zaWRlciBkaXNhYmxpbmcgdGhlIHBsdWdpbiBhbmQgcmUtc3RhcnQuIikKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgY29udHJhY3QgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgY29udHJhY3RzLnNldChwbHVnaW5OYW1lLCBjb250cmFjdCk7CiAgICAgICAgICAgICAgICB0aGlzLnNhdHVwUGx1Z2lucy5wdXNoKHBsdWdpbk5hbWUpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDYpOwogICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDsKCiAgICAgICAgICAgICAgY2FzZSAyNToKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNjsKCiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyODsKCiAgICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDI4KTsKCiAgICAgICAgICAgICAgY2FzZSAzMjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjUpOwoKICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBjb250cmFjdHM6IGNvbnRyYWN0cwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzYsIDIxLCAyNSwgMzNdLCBbMjYsLCAyOCwgMzJdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHNldHVwKF94KSB7CiAgICAgICAgcmV0dXJuIF9zZXR1cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2V0dXA7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N0YXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZGVwcykgewogICAgICAgIHZhciBjb250cmFjdHMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yLCBfZGlkSXRlcmF0b3JFcnJvcjIsIF9pdGVyYXRvckVycm9yMiwgX2l0ZXJhdG9yMiwgX3N0ZXAyLCBfc3RlcDIkdmFsdWUsIHBsdWdpbk5hbWUsIHBsdWdpbiwgcGx1Z2luRGVwQ29udHJhY3RzLCBjb250cmFjdDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIFNldHVwIGVhY2ggcGx1Z2luIHdpdGggcmVxdWlyZWQgYW5kIG9wdGlvbmFsIHBsdWdpbiBjb250cmFjdHMKICAgICAgICAgICAgICAgIGNvbnRyYWN0cyA9IG5ldyBNYXAoKTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA0OwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yMiA9IHRoaXMucGx1Z2lucy5lbnRyaWVzKClbU3ltYm9sLml0ZXJhdG9yXSgpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBpZiAoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3N0ZXAyJHZhbHVlID0gX3NsaWNlZFRvQXJyYXkoX3N0ZXAyLnZhbHVlLCAyKSwgcGx1Z2luTmFtZSA9IF9zdGVwMiR2YWx1ZVswXSwgcGx1Z2luID0gX3N0ZXAyJHZhbHVlWzFdOwogICAgICAgICAgICAgICAgcGx1Z2luRGVwQ29udHJhY3RzID0gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMucGx1Z2luRGVwZW5kZW5jaWVzLmdldChwbHVnaW5OYW1lKSkucmVkdWNlKGZ1bmN0aW9uIChkZXBDb250cmFjdHMsIGRlcGVuZGVuY3lOYW1lKSB7CiAgICAgICAgICAgICAgICAgIC8vIE9ubHkgc2V0IGlmIHByZXNlbnQuIENvdWxkIGJlIGFic2VudCBpZiBwbHVnaW4gZG9lcyBub3QgaGF2ZSBjbGllbnQtc2lkZSBjb2RlIG9yIGlzIGEKICAgICAgICAgICAgICAgICAgLy8gbWlzc2luZyBvcHRpb25hbCBwbHVnaW4uCiAgICAgICAgICAgICAgICAgIGlmIChjb250cmFjdHMuaGFzKGRlcGVuZGVuY3lOYW1lKSkgewogICAgICAgICAgICAgICAgICAgIGRlcENvbnRyYWN0c1tkZXBlbmRlbmN5TmFtZV0gPSBjb250cmFjdHMuZ2V0KGRlcGVuZGVuY3lOYW1lKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlcENvbnRyYWN0czsKICAgICAgICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlscy53aXRoVGltZW91dCkoewogICAgICAgICAgICAgICAgICBwcm9taXNlOiBwbHVnaW4uc3RhcnQoKDAsIF9wbHVnaW5fY29udGV4dC5jcmVhdGVQbHVnaW5TdGFydENvbnRleHQpKHRoaXMuY29yZUNvbnRleHQsIGRlcHMsIHBsdWdpbiksIHBsdWdpbkRlcENvbnRyYWN0cyksCiAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDMwICogU2VjLAogICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICJTdGFydCBsaWZlY3ljbGUgb2YgXCIiLmNvbmNhdChwbHVnaW5OYW1lLCAiXCIgcGx1Z2luIHdhc24ndCBjb21wbGV0ZWQgaW4gMzBzZWMuIENvbnNpZGVyIGRpc2FibGluZyB0aGUgcGx1Z2luIGFuZCByZS1zdGFydC4iKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBjb250cmFjdCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgY29udHJhY3RzLnNldChwbHVnaW5OYW1lLCBjb250cmFjdCk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oNCk7CiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gX2NvbnRleHQyLnQwOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjM7CgogICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDI1OwoKICAgICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IyKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjsKCiAgICAgICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDI1KTsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuZmluaXNoKDIyKTsKCiAgICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIGNvbnRyYWN0czogY29udHJhY3RzCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcywgW1s0LCAxOCwgMjIsIDMwXSwgWzIzLCwgMjUsIDI5XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzdGFydChfeDIpIHsKICAgICAgICByZXR1cm4gX3N0YXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzdGFydDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInN0b3AiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zdG9wID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zLCBfZGlkSXRlcmF0b3JFcnJvcjMsIF9pdGVyYXRvckVycm9yMywgX2l0ZXJhdG9yMywgX3N0ZXAzLCBwbHVnaW5OYW1lOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgLy8gU3RvcCBwbHVnaW5zIGluIHJldmVyc2UgdG9wb2xvZ2ljYWwgb3JkZXIuCiAgICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7CiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMzsKCiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMgPSB0aGlzLnNhdHVwUGx1Z2lucy5yZXZlcnNlKClbU3ltYm9sLml0ZXJhdG9yXSgpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgIHBsdWdpbk5hbWUgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucy5nZXQocGx1Z2luTmFtZSkuc3RvcCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA3OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IF9jb250ZXh0My50MDsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDEyOwoKICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxNDsKCiAgICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yMykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmZpbmlzaCgxNCk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmZpbmlzaCgxMSk7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMsIFtbMywgNywgMTEsIDE5XSwgWzEyLCwgMTQsIDE4XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzdG9wKCkgewogICAgICAgIHJldHVybiBfc3RvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc3RvcDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImxvYWRQbHVnaW5CdW5kbGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUGx1Z2luQnVuZGxlcyhhZGRCYXNlUGF0aCkgewogICAgICAvLyBMb2FkIGFsbCBidW5kbGVzIGluIHBhcmFsbGVsCiAgICAgIHJldHVybiBQcm9taXNlLmFsbChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wbHVnaW5zLnZhbHVlcygpKS5tYXAoZnVuY3Rpb24gKHBsdWdpbikgewogICAgICAgIHJldHVybiBwbHVnaW4ubG9hZChhZGRCYXNlUGF0aCk7CiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQbHVnaW5zU2VydmljZTsKfSgpOwoKZXhwb3J0cy5QbHVnaW5zU2VydmljZSA9IFBsdWdpbnNTZXJ2aWNlOw=="},null]}