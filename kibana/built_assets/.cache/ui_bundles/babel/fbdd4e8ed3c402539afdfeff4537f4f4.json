{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_vega/public/data_model/es_query_parser.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_vega/public/data_model/es_query_parser.js","mtime":1589249550082},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkVzUXVlcnlQYXJzZXIgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm1vbWVudCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uL3NlcnZpY2VzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIFRJTUVGSUxURVIgPSAnJXRpbWVmaWx0ZXIlJzsKdmFyIEFVVE9JTlRFUlZBTCA9ICclYXV0b2ludGVydmFsJSc7CnZhciBNVVNUX0NMQVVTRSA9ICclZGFzaGJvYXJkX2NvbnRleHQtbXVzdF9jbGF1c2UlJzsKdmFyIE1VU1RfTk9UX0NMQVVTRSA9ICclZGFzaGJvYXJkX2NvbnRleHQtbXVzdF9ub3RfY2xhdXNlJSc7IC8vIFRoZXNlIHZhbHVlcyBtYXkgYXBwZWFyIGluIHRoZSAgJ3VybCc6IHsgLi4uIH0gIG9iamVjdAoKdmFyIExFR0FDWV9DT05URVhUID0gJyVjb250ZXh0X3F1ZXJ5JSc7CnZhciBDT05URVhUID0gJyVjb250ZXh0JSc7CnZhciBUSU1FRklFTEQgPSAnJXRpbWVmaWVsZCUnOwovKioKICogVGhpcyBjbGFzcyBwYXJzZXMgRVMgcmVxdWVzdHMgc3BlY2lmaWVkIGluIHRoZSBkYXRhLnVybCBvYmplY3RzLgogKi8KCnZhciBFc1F1ZXJ5UGFyc2VyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRXNRdWVyeVBhcnNlcih0aW1lQ2FjaGUsIHNlYXJjaENhY2hlLCBmaWx0ZXJzLCBvbldhcm5pbmcpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVzUXVlcnlQYXJzZXIpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAibWFwUmVxdWVzdCIsIGZ1bmN0aW9uIChyZXF1ZXN0KSB7CiAgICAgIHZhciBlc1JlcXVlc3QgPSByZXF1ZXN0LnVybDsKCiAgICAgIGlmIChfdGhpcy5fZXNTaGFyZFRpbWVvdXQpIHsKICAgICAgICAvLyByZW1vdmUgcG9zc2libGUgdGltZW91dCBxdWVyeSBwYXJhbSB0byBwcmV2ZW50IHR3byBjb25mbGljdGluZyB0aW1lb3V0IHBhcmFtZXRlcnMKICAgICAgICB2YXIgX2VzUmVxdWVzdCRib2R5ID0gZXNSZXF1ZXN0LmJvZHksCiAgICAgICAgICAgIGJvZHkgPSBfZXNSZXF1ZXN0JGJvZHkgPT09IHZvaWQgMCA/IHt9IDogX2VzUmVxdWVzdCRib2R5LAogICAgICAgICAgICB0aW1lb3V0ID0gZXNSZXF1ZXN0LnRpbWVvdXQsCiAgICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZXNSZXF1ZXN0LCBbImJvZHkiLCAidGltZW91dCJdKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCgoKICAgICAgICBib2R5LnRpbWVvdXQgPSAiIi5jb25jYXQoX3RoaXMuX2VzU2hhcmRUaW1lb3V0LCAibXMiKTsKICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7CiAgICAgICAgICBib2R5OiBib2R5CiAgICAgICAgfSwgcmVzdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGVzUmVxdWVzdDsKICAgICAgfQogICAgfSk7CgogICAgdGhpcy5fdGltZUNhY2hlID0gdGltZUNhY2hlOwogICAgdGhpcy5fc2VhcmNoQ2FjaGUgPSBzZWFyY2hDYWNoZTsKICAgIHRoaXMuX2ZpbHRlcnMgPSBmaWx0ZXJzOwogICAgdGhpcy5fb25XYXJuaW5nID0gb25XYXJuaW5nOwogICAgdGhpcy5fZXNTaGFyZFRpbWVvdXQgPSAoMCwgX3NlcnZpY2VzLmdldEVzU2hhcmRUaW1lb3V0KSgpOwogIH0gLy8gbm9pbnNwZWN0aW9uIEpTTWV0aG9kQ2FuQmVTdGF0aWMKCiAgLyoqCiAgICogVXBkYXRlIHJlcXVlc3Qgb2JqZWN0LCBleHBhbmRpbmcgYW55IGNvbnRleHQtYXdhcmUga2V5d29yZHMKICAgKi8KCgogIF9jcmVhdGVDbGFzcyhFc1F1ZXJ5UGFyc2VyLCBbewogICAga2V5OiAicGFyc2VVcmwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlVXJsKGRhdGFPYmplY3QsIHVybCkgewogICAgICB2YXIgYm9keSA9IHVybC5ib2R5OwogICAgICB2YXIgY29udGV4dCA9IHVybFtDT05URVhUXTsKICAgICAgZGVsZXRlIHVybFtDT05URVhUXTsKICAgICAgdmFyIHRpbWVmaWVsZCA9IHVybFtUSU1FRklFTERdOwogICAgICBkZWxldGUgdXJsW1RJTUVGSUVMRF07CiAgICAgIHZhciB1c2VzQ29udGV4dCA9IGNvbnRleHQgIT09IHVuZGVmaW5lZCB8fCB0aW1lZmllbGQgIT09IHVuZGVmaW5lZDsKCiAgICAgIGlmIChib2R5ID09PSB1bmRlZmluZWQpIHsKICAgICAgICB1cmwuYm9keSA9IGJvZHkgPSB7fTsKICAgICAgfSBlbHNlIGlmICghX2xvZGFzaC5kZWZhdWx0LmlzUGxhaW5PYmplY3QoYm9keSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIudXJsQm9keVZhbHVlVHlwZUVycm9yTWVzc2FnZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAne2NvbmZpZ05hbWV9IG11c3QgYmUgYW4gb2JqZWN0JywKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBjb25maWdOYW1lOiAndXJsLmJvZHknCiAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgICB9IC8vIE1pZ3JhdGUgbGVnYWN5ICVjb250ZXh0X3F1ZXJ5JSBpbnRvIGNvbnRleHQgJiB0aW1lZmllbGQgdmFsdWVzCgoKICAgICAgdmFyIGxlZ2FjeUNvbnRleHQgPSB1cmxbTEVHQUNZX0NPTlRFWFRdOwogICAgICBkZWxldGUgdXJsW0xFR0FDWV9DT05URVhUXTsKCiAgICAgIGlmIChsZWdhY3lDb250ZXh0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoYm9keS5xdWVyeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIuZGF0YVVybE11c3ROb3RIYXZlTGVnYWN5QW5kQm9keVF1ZXJ5VmFsdWVzQXRUaGVTYW1lVGltZUVycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICd7ZGF0YVVybFBhcmFtfSBtdXN0IG5vdCBoYXZlIGxlZ2FjeSB7bGVnYWN5Q29udGV4dH0gYW5kIHtib2R5UXVlcnlDb25maWdOYW1lfSB2YWx1ZXMgYXQgdGhlIHNhbWUgdGltZScsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIGxlZ2FjeUNvbnRleHQ6ICJcIiIuY29uY2F0KExFR0FDWV9DT05URVhULCAiXCIiKSwKICAgICAgICAgICAgICBib2R5UXVlcnlDb25maWdOYW1lOiAnImJvZHkucXVlcnkiJywKICAgICAgICAgICAgICBkYXRhVXJsUGFyYW06ICciZGF0YS51cmwiJwogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfSBlbHNlIGlmICh1c2VzQ29udGV4dCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVmVnYS5lc1F1ZXJ5UGFyc2VyLmRhdGFVcmxNdXN0Tm90SGF2ZUxlZ2FjeUNvbnRleHRUb2dldGhlcldpdGhDb250ZXh0T3JUaW1lZmllbGRFcnJvck1lc3NhZ2UnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAne2RhdGFVcmxQYXJhbX0gbXVzdCBub3QgaGF2ZSB7bGVnYWN5Q29udGV4dH0gdG9nZXRoZXIgd2l0aCB7Y29udGV4dH0gb3Ige3RpbWVmaWVsZH0nLAogICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICBsZWdhY3lDb250ZXh0OiAiXCIiLmNvbmNhdChMRUdBQ1lfQ09OVEVYVCwgIlwiIiksCiAgICAgICAgICAgICAgY29udGV4dDogIlwiIi5jb25jYXQoQ09OVEVYVCwgIlwiIiksCiAgICAgICAgICAgICAgdGltZWZpZWxkOiAiXCIiLmNvbmNhdChUSU1FRklFTEQsICJcIiIpLAogICAgICAgICAgICAgIGRhdGFVcmxQYXJhbTogJyJkYXRhLnVybCInCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKTsKICAgICAgICB9IGVsc2UgaWYgKGxlZ2FjeUNvbnRleHQgIT09IHRydWUgJiYgKHR5cGVvZiBsZWdhY3lDb250ZXh0ICE9PSAnc3RyaW5nJyB8fCBsZWdhY3lDb250ZXh0Lmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfaTE4bi5pMThuLnRyYW5zbGF0ZSgndmlzVHlwZVZlZ2EuZXNRdWVyeVBhcnNlci5sZWdhY3lDb250ZXh0Q2FuQmVUcnVlRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlZ2FjeSB7bGVnYWN5Q29udGV4dH0gY2FuIGVpdGhlciBiZSB7dHJ1ZVZhbHVlfSAoaWdub3JlcyB0aW1lIHJhbmdlIHBpY2tlciksIG9yIGl0IGNhbiBiZSB0aGUgbmFtZSBvZiB0aGUgdGltZSBmaWVsZCwgZS5nLiB7dGltZXN0YW1wUGFyYW19JywKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgbGVnYWN5Q29udGV4dDogIlwiIi5jb25jYXQoTEVHQUNZX0NPTlRFWFQsICJcIiIpLAogICAgICAgICAgICAgIHRydWVWYWx1ZTogJ3RydWUnLAogICAgICAgICAgICAgIHRpbWVzdGFtcFBhcmFtOiAnIkB0aW1lc3RhbXAiJwogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICB1c2VzQ29udGV4dCA9IHRydWU7CiAgICAgICAgY29udGV4dCA9IHRydWU7CiAgICAgICAgdmFyIHJlc3VsdCA9ICJcInVybFwiOiB7XCIiLmNvbmNhdChDT05URVhULCAiXCI6IHRydWUiKTsKCiAgICAgICAgaWYgKHR5cGVvZiBsZWdhY3lDb250ZXh0ID09PSAnc3RyaW5nJykgewogICAgICAgICAgdGltZWZpZWxkID0gbGVnYWN5Q29udGV4dDsKICAgICAgICAgIHJlc3VsdCArPSAiLCBcIiIuY29uY2F0KFRJTUVGSUVMRCwgIlwiOiAiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkodGltZWZpZWxkKSk7CiAgICAgICAgfQoKICAgICAgICByZXN1bHQgKz0gJ30nOwoKICAgICAgICB0aGlzLl9vbldhcm5pbmcoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIubGVnYWN5VXJsU2hvdWxkQ2hhbmdlVG9XYXJuaW5nTWVzc2FnZScsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVnYWN5IHt1cmxQYXJhbX06IHtsZWdhY3lVcmx9IHNob3VsZCBjaGFuZ2UgdG8ge3Jlc3VsdH0nLAogICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgIGxlZ2FjeVVybDogIlwiIi5jb25jYXQoTEVHQUNZX0NPTlRFWFQsICJcIjogIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KGxlZ2FjeUNvbnRleHQpKSwKICAgICAgICAgICAgcmVzdWx0OiByZXN1bHQsCiAgICAgICAgICAgIHVybFBhcmFtOiAnInVybCInCiAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgICB9CgogICAgICBpZiAoYm9keS5xdWVyeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKHVzZXNDb250ZXh0KSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIudXJsQ29udGV4dEFuZFVybFRpbWVmaWVsZE11c3ROb3RCZVVzZWRFcnJvck1lc3NhZ2UnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAne3VybENvbnRleHR9IGFuZCB7dGltZWZpZWxkfSBtdXN0IG5vdCBiZSB1c2VkIHdoZW4ge3F1ZXJ5UGFyYW19IGlzIHNldCcsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIHRpbWVmaWVsZDogInVybC4iLmNvbmNhdChUSU1FRklFTEQpLAogICAgICAgICAgICAgIHVybENvbnRleHQ6ICJ1cmwuIi5jb25jYXQoQ09OVEVYVCksCiAgICAgICAgICAgICAgcXVlcnlQYXJhbTogJ3VybC5ib2R5LnF1ZXJ5JwogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9pbmplY3RDb250ZXh0VmFycyhib2R5LnF1ZXJ5LCB0cnVlKTsKICAgICAgfSBlbHNlIGlmICh1c2VzQ29udGV4dCkgewogICAgICAgIGlmICh0aW1lZmllbGQpIHsKICAgICAgICAgIC8vIEluamVjdCByYW5nZSBmaWx0ZXIgYmFzZWQgb24gdGhlIHRpbWVmaWx0ZXIgdmFsdWVzCiAgICAgICAgICBib2R5LnF1ZXJ5ID0gewogICAgICAgICAgICByYW5nZTogX2RlZmluZVByb3BlcnR5KHt9LCB0aW1lZmllbGQsIHRoaXMuX2NyZWF0ZVJhbmdlRmlsdGVyKF9kZWZpbmVQcm9wZXJ0eSh7fSwgVElNRUZJTFRFUiwgdHJ1ZSkpKQogICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGlmIChjb250ZXh0KSB7CiAgICAgICAgICAvLyBVc2UgZGFzaGJvYXJkIGNvbnRleHQKICAgICAgICAgIHZhciBuZXdRdWVyeSA9IF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAodGhpcy5fZmlsdGVycyk7CgogICAgICAgICAgaWYgKHRpbWVmaWVsZCkgewogICAgICAgICAgICBuZXdRdWVyeS5ib29sLm11c3QucHVzaChib2R5LnF1ZXJ5KTsKICAgICAgICAgIH0KCiAgICAgICAgICBib2R5LnF1ZXJ5ID0gbmV3UXVlcnk7CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLl9pbmplY3RDb250ZXh0VmFycyhib2R5LmFnZ3MsIGZhbHNlKTsKCiAgICAgIHJldHVybiB7CiAgICAgICAgZGF0YU9iamVjdDogZGF0YU9iamVjdCwKICAgICAgICB1cmw6IHVybAogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInBvcHVsYXRlRGF0YSIsCgogICAgLyoqCiAgICAgKiBQcm9jZXNzIGl0ZW1zIGdlbmVyYXRlZCBieSBwYXJzZVVybCgpCiAgICAgKiBAcGFyYW0ge29iamVjdFtdfSByZXF1ZXN0cyBlYWNoIG9iamVjdCBpcyBnZW5lcmF0ZWQgYnkgcGFyc2VVcmwoKQogICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59CiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcG9wdWxhdGVEYXRhID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXF1ZXN0cykgewogICAgICAgIHZhciBlc1NlYXJjaGVzLCByZXN1bHRzLCBpOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVzU2VhcmNoZXMgPSByZXF1ZXN0cy5tYXAodGhpcy5tYXBSZXF1ZXN0KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlYXJjaENhY2hlLnNlYXJjaChlc1NlYXJjaGVzKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzdWx0cyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlcXVlc3RzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2ldLmRhdGFPYmplY3QudmFsdWVzID0gcmVzdWx0c1tpXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHBvcHVsYXRlRGF0YShfeCkgewogICAgICAgIHJldHVybiBfcG9wdWxhdGVEYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwb3B1bGF0ZURhdGE7CiAgICB9KCkKICAgIC8qKgogICAgICogTW9kaWZ5IEVTIHJlcXVlc3QgYnkgcHJvY2Vzc2luZyBtYWdpYyBrZXl3b3JkcwogICAgICogQHBhcmFtIHsqfSBvYmoKICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNRdWVyeSAtIGlmIHRydWUsIHRoZSBgb2JqYCBiZWxvbmdzIHRvIHRoZSByZXEncyBxdWVyeSBwb3J0aW9uCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2luamVjdENvbnRleHRWYXJzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5qZWN0Q29udGV4dFZhcnMob2JqLCBpc1F1ZXJ5KSB7CiAgICAgIGlmIChvYmogJiYgX3R5cGVvZihvYmopID09PSAnb2JqZWN0JykgewogICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHsKICAgICAgICAgIC8vIEZvciBhcnJheXMsIHJlcGxhY2UgTVVTVF9DTEFVU0UgYW5kIE1VU1RfTk9UX0NMQVVTRSBzdHJpbmcgZWxlbWVudHMKICAgICAgICAgIGZvciAodmFyIHBvcyA9IDA7IHBvcyA8IG9iai5sZW5ndGg7KSB7CiAgICAgICAgICAgIHZhciBpdGVtID0gb2JqW3Bvc107CgogICAgICAgICAgICBpZiAoaXNRdWVyeSAmJiAoaXRlbSA9PT0gTVVTVF9DTEFVU0UgfHwgaXRlbSA9PT0gTVVTVF9OT1RfQ0xBVVNFKSkgewogICAgICAgICAgICAgIHZhciBjdHhUYWcgPSBpdGVtID09PSBNVVNUX0NMQVVTRSA/ICdtdXN0JyA6ICdtdXN0X25vdCc7CgogICAgICAgICAgICAgIHZhciBjdHggPSBfbG9kYXNoLmRlZmF1bHQuY2xvbmVEZWVwKHRoaXMuX2ZpbHRlcnMpOwoKICAgICAgICAgICAgICBpZiAoY3R4ICYmIGN0eC5ib29sICYmIGN0eC5ib29sW2N0eFRhZ10pIHsKICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGN0eC5ib29sW2N0eFRhZ10pKSB7CiAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2Ugb25lIHZhbHVlIHdpdGggYW4gYXJyYXkgb2YgdmFsdWVzCiAgICAgICAgICAgICAgICAgIG9iai5zcGxpY2UuYXBwbHkob2JqLCBbcG9zLCAxXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGN0eC5ib29sW2N0eFRhZ10pKSk7CiAgICAgICAgICAgICAgICAgIHBvcyArPSBjdHguYm9vbFtjdHhUYWddLmxlbmd0aDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG9ialtwb3MrK10gPSBjdHguYm9vbFtjdHhUYWddOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBvYmouc3BsaWNlKHBvcywgMSk7IC8vIHJlbW92ZSBpdGVtLCBrZWVwIHBvcyBhdCB0aGUgc2FtZSBwb3NpdGlvbgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLl9pbmplY3RDb250ZXh0VmFycyhpdGVtLCBpc1F1ZXJ5KTsKCiAgICAgICAgICAgICAgcG9zKys7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyhvYmopOyBfaSA8IF9PYmplY3Qka2V5cy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgICAgdmFyIHByb3AgPSBfT2JqZWN0JGtleXNbX2ldOwogICAgICAgICAgICB2YXIgc3ViT2JqID0gb2JqW3Byb3BdOwogICAgICAgICAgICBpZiAoIXN1Yk9iaiB8fCBfdHlwZW9mKG9iaikgIT09ICdvYmplY3QnKSBjb250aW51ZTsgLy8gcmVwbGFjZSAiaW50ZXJ2YWwiOiB7ICIlYXV0b2ludGVydmFsJSI6IHRydWV8aW50ZWdlciB9IHdpdGgKICAgICAgICAgICAgLy8gYXV0by1nZW5lcmF0ZWQgcmFuZ2UgYmFzZWQgb24gdGhlIHRpbWVwaWNrZXIKCiAgICAgICAgICAgIGlmIChwcm9wID09PSAnaW50ZXJ2YWwnICYmIHN1Yk9ialtBVVRPSU5URVJWQUxdKSB7CiAgICAgICAgICAgICAgdmFyIHNpemUgPSBzdWJPYmpbQVVUT0lOVEVSVkFMXTsKCiAgICAgICAgICAgICAgaWYgKHNpemUgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHNpemUgPSA1MDsgLy8gYnkgZGVmYXVsdCwgdHJ5IHRvIGdldCB+ODAgdmFsdWVzCiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihfaTE4bi5pMThuLnRyYW5zbGF0ZSgndmlzVHlwZVZlZ2EuZXNRdWVyeVBhcnNlci5hdXRvaW50ZXJ2YWxWYWx1ZVR5cGVFcnJvck1lc3NhZ2UnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAne2F1dG9pbnRlcnZhbH0gbXVzdCBiZSBlaXRoZXIge3RydWVWYWx1ZX0gb3IgYSBudW1iZXInLAogICAgICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgICAgICBhdXRvaW50ZXJ2YWw6ICJcIiIuY29uY2F0KEFVVE9JTlRFUlZBTCwgIlwiIiksCiAgICAgICAgICAgICAgICAgICAgdHJ1ZVZhbHVlOiAndHJ1ZScKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IHRoaXMuX3RpbWVDYWNoZS5nZXRUaW1lQm91bmRzKCk7CgogICAgICAgICAgICAgIG9iai5pbnRlcnZhbCA9IEVzUXVlcnlQYXJzZXIuX3JvdW5kSW50ZXJ2YWwoKGJvdW5kcy5tYXggLSBib3VuZHMubWluKSAvIHNpemUpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9IC8vIGhhbmRsZSAldGltZWZpbHRlciUKCgogICAgICAgICAgICBzd2l0Y2ggKHN1Yk9ialtUSU1FRklMVEVSXSkgewogICAgICAgICAgICAgIGNhc2UgJ21pbic6CiAgICAgICAgICAgICAgY2FzZSAnbWF4JzoKICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgeyIldGltZWZpbHRlciUiOiAibWlufG1heCIsIC4uLn0gb2JqZWN0IHdpdGggYSB0aW1lc3RhbXAKICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHRoaXMuX2dldFRpbWVCb3VuZChzdWJPYmosIHN1Yk9ialtUSU1FRklMVEVSXSk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKCiAgICAgICAgICAgICAgY2FzZSB0cnVlOgogICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB7IiV0aW1lZmlsdGVyJSI6IHRydWUsIC4uLn0gb2JqZWN0IHdpdGggdGhlICJyYW5nZSIgb2JqZWN0CiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVSYW5nZUZpbHRlcihzdWJPYmopOwoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwoKICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgICAgICAgICAgIHRoaXMuX2luamVjdENvbnRleHRWYXJzKHN1Yk9iaiwgaXNRdWVyeSk7CgogICAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIudGltZWZpbHRlclZhbHVlRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3t0aW1lZmlsdGVyfSBwcm9wZXJ0eSBtdXN0IGJlIHNldCB0byB7dHJ1ZVZhbHVlfSwge21pblZhbHVlfSwgb3Ige21heFZhbHVlfScsCiAgICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICAgIHRpbWVmaWx0ZXI6ICJcIiIuY29uY2F0KFRJTUVGSUxURVIsICJcIiIpLAogICAgICAgICAgICAgICAgICAgIHRydWVWYWx1ZTogJ3RydWUnLAogICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiAnIm1pbiInLAogICAgICAgICAgICAgICAgICAgIG1heFZhbHVlOiAnIm1heCInCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogICAgLyoqCiAgICAgKiByZXBsYWNlcyBnaXZlbiBvYmplY3QgdGhhdCBjb250YWlucyBgJXRpbWVmaWx0ZXIlYCBrZXkgd2l0aCB0aGUgdGltZWZpbHRlciBib3VuZHMgYW5kIG9wdGlvbmFsIHNoaWZ0ICYgdW5pdCBwYXJhbWV0ZXJzCiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqCiAgICAgKiBAcmV0dXJuIHtvYmplY3R9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX2NyZWF0ZVJhbmdlRmlsdGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUmFuZ2VGaWx0ZXIob2JqKSB7CiAgICAgIG9iai5ndGUgPSAoMCwgX21vbWVudC5kZWZhdWx0KSh0aGlzLl9nZXRUaW1lQm91bmQob2JqLCAnbWluJykpLnRvSVNPU3RyaW5nKCk7CiAgICAgIG9iai5sdGUgPSAoMCwgX21vbWVudC5kZWZhdWx0KSh0aGlzLl9nZXRUaW1lQm91bmQob2JqLCAnbWF4JykpLnRvSVNPU3RyaW5nKCk7CiAgICAgIG9iai5mb3JtYXQgPSAnc3RyaWN0X2RhdGVfb3B0aW9uYWxfdGltZSc7CiAgICAgIGRlbGV0ZSBvYmpbVElNRUZJTFRFUl07CiAgICAgIGRlbGV0ZSBvYmouc2hpZnQ7CiAgICAgIGRlbGV0ZSBvYmoudW5pdDsKICAgICAgcmV0dXJuIG9iajsKICAgIH0KICAgIC8qKgogICAgICoKICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMuc2hpZnRdCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMudW5pdF0KICAgICAqIEBwYXJhbSB7J21pbid8J21heCd9IHR5cGUKICAgICAqIEByZXR1cm5zIHsqfQogICAgICovCgogIH0sIHsKICAgIGtleTogIl9nZXRUaW1lQm91bmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRUaW1lQm91bmQob3B0cywgdHlwZSkgewogICAgICB2YXIgYm91bmRzID0gdGhpcy5fdGltZUNhY2hlLmdldFRpbWVCb3VuZHMoKTsKCiAgICAgIHZhciByZXN1bHQgPSBib3VuZHNbdHlwZV07CgogICAgICBpZiAob3B0cy5zaGlmdCkgewogICAgICAgIHZhciBzaGlmdCA9IG9wdHMuc2hpZnQ7CgogICAgICAgIGlmICh0eXBlb2Ygc2hpZnQgIT09ICdudW1iZXInKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIuc2hpZnRNdXN0VmFsdWVUeXBlRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3tzaGlmdFBhcmFtfSBtdXN0IGJlIGEgbnVtZXJpYyB2YWx1ZScsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIHNoaWZ0UGFyYW06ICcic2hpZnQiJwogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgbXVsdGlwbGllcjsKCiAgICAgICAgc3dpdGNoIChvcHRzLnVuaXQgfHwgJ2QnKSB7CiAgICAgICAgICBjYXNlICd3JzoKICAgICAgICAgIGNhc2UgJ3dlZWsnOgogICAgICAgICAgICBtdWx0aXBsaWVyID0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDc7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ2QnOgogICAgICAgICAgY2FzZSAnZGF5JzoKICAgICAgICAgICAgbXVsdGlwbGllciA9IDEwMDAgKiA2MCAqIDYwICogMjQ7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ2gnOgogICAgICAgICAgY2FzZSAnaG91cic6CiAgICAgICAgICAgIG11bHRpcGxpZXIgPSAxMDAwICogNjAgKiA2MDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAnbSc6CiAgICAgICAgICBjYXNlICdtaW51dGUnOgogICAgICAgICAgICBtdWx0aXBsaWVyID0gMTAwMCAqIDYwOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICdzJzoKICAgICAgICAgIGNhc2UgJ3NlY29uZCc6CiAgICAgICAgICAgIG11bHRpcGxpZXIgPSAxMDAwOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLmVzUXVlcnlQYXJzZXIudW5rbm93blVuaXRWYWx1ZUVycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1Vua25vd24ge3VuaXRQYXJhbU5hbWV9IHZhbHVlLiBNdXN0IGJlIG9uZSBvZjogW3t1bml0UGFyYW1WYWx1ZXN9XScsCiAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICB1bml0UGFyYW1OYW1lOiAnInVuaXQiJywKICAgICAgICAgICAgICAgIHVuaXRQYXJhbVZhbHVlczogJyJ3ZWVrIiwgImRheSIsICJob3VyIiwgIm1pbnV0ZSIsICJzZWNvbmQiJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwogICAgICAgIH0KCiAgICAgICAgcmVzdWx0ICs9IHNoaWZ0ICogbXVsdGlwbGllcjsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIC8qKgogICAgICogQWRhcHRlZCBmcm9tIHNyYy9sZWdhY3kvY29yZV9wbHVnaW5zL3RpbWVsaW9uL2NvbW1vbi9saWIvY2FsY3VsYXRlX2ludGVydmFsLmpzCiAgICAgKiBAcGFyYW0gaW50ZXJ2YWwgKG1zKQogICAgICogQHJldHVybnMge3N0cmluZ30KICAgICAqLwoKICB9XSwgW3sKICAgIGtleTogIl9yb3VuZEludGVydmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcm91bmRJbnRlcnZhbChpbnRlcnZhbCkgewogICAgICBzd2l0Y2ggKHRydWUpIHsKICAgICAgICBjYXNlIGludGVydmFsIDw9IDUwMDoKICAgICAgICAgIC8vIDw9IDAuNXMKICAgICAgICAgIHJldHVybiAnMTAwbXMnOwoKICAgICAgICBjYXNlIGludGVydmFsIDw9IDUwMDA6CiAgICAgICAgICAvLyA8PSA1cwogICAgICAgICAgcmV0dXJuICcxcyc7CgogICAgICAgIGNhc2UgaW50ZXJ2YWwgPD0gNzUwMDoKICAgICAgICAgIC8vIDw9IDcuNXMKICAgICAgICAgIHJldHVybiAnNXMnOwoKICAgICAgICBjYXNlIGludGVydmFsIDw9IDE1MDAwOgogICAgICAgICAgLy8gPD0gMTVzCiAgICAgICAgICByZXR1cm4gJzEwcyc7CgogICAgICAgIGNhc2UgaW50ZXJ2YWwgPD0gNDUwMDA6CiAgICAgICAgICAvLyA8PSA0NXMKICAgICAgICAgIHJldHVybiAnMzBzJzsKCiAgICAgICAgY2FzZSBpbnRlcnZhbCA8PSAxODAwMDA6CiAgICAgICAgICAvLyA8PSAzbQogICAgICAgICAgcmV0dXJuICcxbSc7CgogICAgICAgIGNhc2UgaW50ZXJ2YWwgPD0gNDUwMDAwOgogICAgICAgICAgLy8gPD0gOW0KICAgICAgICAgIHJldHVybiAnNW0nOwoKICAgICAgICBjYXNlIGludGVydmFsIDw9IDEyMDAwMDA6CiAgICAgICAgICAvLyA8PSAyMG0KICAgICAgICAgIHJldHVybiAnMTBtJzsKCiAgICAgICAgY2FzZSBpbnRlcnZhbCA8PSAyNzAwMDAwOgogICAgICAgICAgLy8gPD0gNDVtCiAgICAgICAgICByZXR1cm4gJzMwbSc7CgogICAgICAgIGNhc2UgaW50ZXJ2YWwgPD0gNzIwMDAwMDoKICAgICAgICAgIC8vIDw9IDJoCiAgICAgICAgICByZXR1cm4gJzFoJzsKCiAgICAgICAgY2FzZSBpbnRlcnZhbCA8PSAyMTYwMDAwMDoKICAgICAgICAgIC8vIDw9IDZoCiAgICAgICAgICByZXR1cm4gJzNoJzsKCiAgICAgICAgY2FzZSBpbnRlcnZhbCA8PSA4NjQwMDAwMDoKICAgICAgICAgIC8vIDw9IDI0aAogICAgICAgICAgcmV0dXJuICcxMmgnOwoKICAgICAgICBjYXNlIGludGVydmFsIDw9IDYwNDgwMDAwMDoKICAgICAgICAgIC8vIDw9IDF3CiAgICAgICAgICByZXR1cm4gJzI0aCc7CgogICAgICAgIGNhc2UgaW50ZXJ2YWwgPD0gMTgxNDQwMDAwMDoKICAgICAgICAgIC8vIDw9IDN3CiAgICAgICAgICByZXR1cm4gJzF3JzsKCiAgICAgICAgY2FzZSBpbnRlcnZhbCA8IDM2Mjg4MDAwMDA6CiAgICAgICAgICAvLyA8ICAyeQogICAgICAgICAgcmV0dXJuICczMGQnOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmV0dXJuICcxeSc7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBFc1F1ZXJ5UGFyc2VyOwp9KCk7CgpleHBvcnRzLkVzUXVlcnlQYXJzZXIgPSBFc1F1ZXJ5UGFyc2VyOw=="},null]}