{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/sources/es_agg_source.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/sources/es_agg_source.js","mtime":1589249552440},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFic3RyYWN0RVNBZ2dTb3VyY2UgPSBleHBvcnRzLkFHR19ERUxJTUlURVIgPSB2b2lkIDA7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfZXNfc291cmNlID0gcmVxdWlyZSgiLi9lc19zb3VyY2UiKTsKCnZhciBfZXNfYWdnX2ZpZWxkID0gcmVxdWlyZSgiLi4vZmllbGRzL2VzX2FnZ19maWVsZCIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKdmFyIEFHR19ERUxJTUlURVIgPSAnX29mXyc7CmV4cG9ydHMuQUdHX0RFTElNSVRFUiA9IEFHR19ERUxJTUlURVI7Cgp2YXIgQWJzdHJhY3RFU0FnZ1NvdXJjZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9BYnN0cmFjdEVTU291cmNlKSB7CiAgX2luaGVyaXRzKEFic3RyYWN0RVNBZ2dTb3VyY2UsIF9BYnN0cmFjdEVTU291cmNlKTsKCiAgZnVuY3Rpb24gQWJzdHJhY3RFU0FnZ1NvdXJjZShkZXNjcmlwdG9yLCBpbnNwZWN0b3JBZGFwdGVycykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYnN0cmFjdEVTQWdnU291cmNlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEVTQWdnU291cmNlKS5jYWxsKHRoaXMsIGRlc2NyaXB0b3IsIGluc3BlY3RvckFkYXB0ZXJzKSk7CiAgICBfdGhpcy5fbWV0cmljRmllbGRzID0gW107CgogICAgaWYgKF90aGlzLl9kZXNjcmlwdG9yLm1ldHJpY3MpIHsKICAgICAgX3RoaXMuX2Rlc2NyaXB0b3IubWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChhZ2dEZXNjcmlwdG9yKSB7CiAgICAgICAgdmFyIF90aGlzJF9tZXRyaWNGaWVsZHM7CgogICAgICAgIChfdGhpcyRfbWV0cmljRmllbGRzID0gX3RoaXMuX21ldHJpY0ZpZWxkcykucHVzaC5hcHBseShfdGhpcyRfbWV0cmljRmllbGRzLCBfdG9Db25zdW1hYmxlQXJyYXkoKDAsIF9lc19hZ2dfZmllbGQuZXNBZ2dGaWVsZHNGYWN0b3J5KShhZ2dEZXNjcmlwdG9yLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgX3RoaXMuZ2V0T3JpZ2luRm9yRmllbGQoKSkpKTsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFic3RyYWN0RVNBZ2dTb3VyY2UsIFt7CiAgICBrZXk6ICJnZXRGaWVsZEJ5TmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmllbGRCeU5hbWUobmFtZSkgewogICAgICByZXR1cm4gdGhpcy5nZXRNZXRyaWNGaWVsZEZvck5hbWUobmFtZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUZpZWxkKCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjcmVhdGUgYSBuZXcgZmllbGQgZnJvbSBqdXN0IGEgZmllbGRuYW1lIGZvciBhbiBlc19hZ2dfc291cmNlLicpOwogICAgfQogIH0sIHsKICAgIGtleTogImhhc01hdGNoaW5nTWV0cmljRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc01hdGNoaW5nTWV0cmljRmllbGQoZmllbGROYW1lKSB7CiAgICAgIHZhciBtYXRjaGluZ0ZpZWxkID0gdGhpcy5nZXRNZXRyaWNGaWVsZEZvck5hbWUoZmllbGROYW1lKTsKICAgICAgcmV0dXJuICEhbWF0Y2hpbmdGaWVsZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNZXRyaWNGaWVsZEZvck5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1ldHJpY0ZpZWxkRm9yTmFtZShmaWVsZE5hbWUpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0cmljRmllbGRzKCkuZmluZChmdW5jdGlvbiAobWV0cmljRmllbGQpIHsKICAgICAgICByZXR1cm4gbWV0cmljRmllbGQuZ2V0TmFtZSgpID09PSBmaWVsZE5hbWU7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE9yaWdpbkZvckZpZWxkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcmlnaW5Gb3JGaWVsZCgpIHsKICAgICAgcmV0dXJuIF9jb25zdGFudHMuRklFTERfT1JJR0lOLlNPVVJDRTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNZXRyaWNGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1ldHJpY0ZpZWxkcygpIHsKICAgICAgdmFyIG1ldHJpY3MgPSB0aGlzLl9tZXRyaWNGaWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChlc0FnZ0ZpZWxkKSB7CiAgICAgICAgcmV0dXJuIGVzQWdnRmllbGQuaXNWYWxpZCgpOwogICAgICB9KTsKCiAgICAgIHJldHVybiBtZXRyaWNzLmxlbmd0aCA9PT0gMCA/ICgwLCBfZXNfYWdnX2ZpZWxkLmVzQWdnRmllbGRzRmFjdG9yeSkoewogICAgICAgIHR5cGU6IF9jb25zdGFudHMuQUdHX1RZUEUuQ09VTlQKICAgICAgfSwgdGhpcywgdGhpcy5nZXRPcmlnaW5Gb3JGaWVsZCgpKSA6IG1ldHJpY3M7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QWdnS2V5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBZ2dLZXkoYWdnVHlwZSwgZmllbGROYW1lKSB7CiAgICAgIHJldHVybiBhZ2dUeXBlICE9PSBfY29uc3RhbnRzLkFHR19UWVBFLkNPVU5UID8gIiIuY29uY2F0KGFnZ1R5cGUpLmNvbmNhdChBR0dfREVMSU1JVEVSKS5jb25jYXQoZmllbGROYW1lKSA6IF9jb25zdGFudHMuQ09VTlRfUFJPUF9OQU1FOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEFnZ0xhYmVsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBZ2dMYWJlbChhZ2dUeXBlLCBmaWVsZE5hbWUpIHsKICAgICAgc3dpdGNoIChhZ2dUeXBlKSB7CiAgICAgICAgY2FzZSBfY29uc3RhbnRzLkFHR19UWVBFLkNPVU5UOgogICAgICAgICAgcmV0dXJuIF9jb25zdGFudHMuQ09VTlRfUFJPUF9MQUJFTDsKCiAgICAgICAgY2FzZSBfY29uc3RhbnRzLkFHR19UWVBFLlRFUk1TOgogICAgICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLnNvdXJjZS5lc0FnZ1NvdXJjZS50b3BUZXJtTGFiZWwnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVG9wIHtmaWVsZE5hbWV9IiwKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgZmllbGROYW1lOiBmaWVsZE5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gIiIuY29uY2F0KGFnZ1R5cGUsICIgIikuY29uY2F0KGZpZWxkTmFtZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRGaWVsZHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuZ2V0TWV0cmljRmllbGRzKCkpOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0RmllbGRzKCkgewogICAgICAgIHJldHVybiBfZ2V0RmllbGRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRGaWVsZHM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRWYWx1ZUFnZ3NEc2wiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlQWdnc0RzbChpbmRleFBhdHRlcm4pIHsKICAgICAgdmFyIHZhbHVlQWdnc0RzbCA9IHt9OwogICAgICB0aGlzLmdldE1ldHJpY0ZpZWxkcygpLmZvckVhY2goZnVuY3Rpb24gKGVzQWdnTWV0cmljKSB7CiAgICAgICAgdmFyIGFnZ0RzbCA9IGVzQWdnTWV0cmljLmdldFZhbHVlQWdnRHNsKGluZGV4UGF0dGVybik7CgogICAgICAgIGlmIChhZ2dEc2wpIHsKICAgICAgICAgIHZhbHVlQWdnc0RzbFtlc0FnZ01ldHJpYy5nZXROYW1lKCldID0gZXNBZ2dNZXRyaWMuZ2V0VmFsdWVBZ2dEc2woaW5kZXhQYXR0ZXJuKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gdmFsdWVBZ2dzRHNsOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbHRlckFuZEZvcm1hdFByb3BlcnRpZXNUb0h0bWxGb3JNZXRyaWNGaWVsZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9maWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sRm9yTWV0cmljRmllbGRzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocHJvcGVydGllcykgewogICAgICAgIHZhciBtZXRyaWNGaWVsZHMsIHRvb2x0aXBQcm9wZXJ0aWVzUHJvbWlzZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG1ldHJpY0ZpZWxkcyA9IHRoaXMuZ2V0TWV0cmljRmllbGRzKCk7CiAgICAgICAgICAgICAgICB0b29sdGlwUHJvcGVydGllc1Byb21pc2VzID0gW107CiAgICAgICAgICAgICAgICBtZXRyaWNGaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0cmljRmllbGQpIHsKICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlOwoKICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG1ldHJpY0ZpZWxkLmdldE5hbWUoKSA9PT0ga2V5KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIHRvb2x0aXBQcm9taXNlID0gbWV0cmljRmllbGQuY3JlYXRlVG9vbHRpcFByb3BlcnR5KHZhbHVlKTsKICAgICAgICAgICAgICAgICAgdG9vbHRpcFByb3BlcnRpZXNQcm9taXNlcy5wdXNoKHRvb2x0aXBQcm9taXNlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRvb2x0aXBQcm9wZXJ0aWVzUHJvbWlzZXMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQyLnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmaWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sRm9yTWV0cmljRmllbGRzKF94KSB7CiAgICAgICAgcmV0dXJuIF9maWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sRm9yTWV0cmljRmllbGRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmaWx0ZXJBbmRGb3JtYXRQcm9wZXJ0aWVzVG9IdG1sRm9yTWV0cmljRmllbGRzOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQWJzdHJhY3RFU0FnZ1NvdXJjZTsKfShfZXNfc291cmNlLkFic3RyYWN0RVNTb3VyY2UpOwoKZXhwb3J0cy5BYnN0cmFjdEVTQWdnU291cmNlID0gQWJzdHJhY3RFU0FnZ1NvdXJjZTs="},null]}