{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/tile_map/public/geohash_layer.js","dependencies":[{"path":"src/legacy/core_plugins/tile_map/public/geohash_layer.js","mtime":1589249549910},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkdlb2hhc2hMYXllciA9IHZvaWQgMDsKCnZhciBfbGVhZmxldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibGVhZmxldCIpKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfa2liYW5hX21hcF9sYXllciA9IHJlcXVpcmUoInVpL3Zpcy9tYXAva2liYW5hX21hcF9sYXllciIpOwoKdmFyIF9oZWF0bWFwID0gcmVxdWlyZSgiLi9tYXJrZXJzL2hlYXRtYXAiKTsKCnZhciBfc2NhbGVkX2NpcmNsZXMgPSByZXF1aXJlKCIuL21hcmtlcnMvc2NhbGVkX2NpcmNsZXMiKTsKCnZhciBfc2hhZGVkX2NpcmNsZXMgPSByZXF1aXJlKCIuL21hcmtlcnMvc2hhZGVkX2NpcmNsZXMiKTsKCnZhciBfZ2VvaGFzaF9ncmlkID0gcmVxdWlyZSgiLi9tYXJrZXJzL2dlb2hhc2hfZ3JpZCIpOwoKdmFyIF9tYXBfdHlwZXMgPSByZXF1aXJlKCIuL21hcF90eXBlcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9Cgp2YXIgR2VvaGFzaExheWVyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0tpYmFuYU1hcExheWVyKSB7CiAgX2luaGVyaXRzKEdlb2hhc2hMYXllciwgX0tpYmFuYU1hcExheWVyKTsKCiAgZnVuY3Rpb24gR2VvaGFzaExheWVyKGZlYXR1cmVDb2xsZWN0aW9uLCBmZWF0dXJlQ29sbGVjdGlvbk1ldGFEYXRhLCBvcHRpb25zLCB6b29tLCBraWJhbmFNYXApIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2VvaGFzaExheWVyKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihHZW9oYXNoTGF5ZXIpLmNhbGwodGhpcykpOwogICAgX3RoaXMuX2ZlYXR1cmVDb2xsZWN0aW9uID0gZmVhdHVyZUNvbGxlY3Rpb247CiAgICBfdGhpcy5fZmVhdHVyZUNvbGxlY3Rpb25NZXRhRGF0YSA9IGZlYXR1cmVDb2xsZWN0aW9uTWV0YURhdGE7CiAgICBfdGhpcy5fZ2VvaGFzaE9wdGlvbnMgPSBvcHRpb25zOwogICAgX3RoaXMuX3pvb20gPSB6b29tOwogICAgX3RoaXMuX2tpYmFuYU1hcCA9IGtpYmFuYU1hcDsKCiAgICB2YXIgZ2VvanNvbiA9IF9sZWFmbGV0LmRlZmF1bHQuZ2VvSnNvbihfdGhpcy5fZmVhdHVyZUNvbGxlY3Rpb24pOwoKICAgIF90aGlzLl9ib3VuZHMgPSBnZW9qc29uLmdldEJvdW5kcygpOwoKICAgIF90aGlzLl9jcmVhdGVHZW9oYXNoTWFya2VycygpOwoKICAgIF90aGlzLl9sYXN0Qm91bmRzID0gbnVsbDsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhHZW9oYXNoTGF5ZXIsIFt7CiAgICBrZXk6ICJfY3JlYXRlR2VvaGFzaE1hcmtlcnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVHZW9oYXNoTWFya2VycygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgbWFya2VyT3B0aW9ucyA9IHsKICAgICAgICBpc0ZpbHRlcmVkQnlDb2xsYXI6IHRoaXMuX2dlb2hhc2hPcHRpb25zLmlzRmlsdGVyZWRCeUNvbGxhciwKICAgICAgICB2YWx1ZUZvcm1hdHRlcjogdGhpcy5fZ2VvaGFzaE9wdGlvbnMudmFsdWVGb3JtYXR0ZXIsCiAgICAgICAgdG9vbHRpcEZvcm1hdHRlcjogdGhpcy5fZ2VvaGFzaE9wdGlvbnMudG9vbHRpcEZvcm1hdHRlciwKICAgICAgICBsYWJlbDogdGhpcy5fZ2VvaGFzaE9wdGlvbnMubGFiZWwsCiAgICAgICAgY29sb3JSYW1wOiB0aGlzLl9nZW9oYXNoT3B0aW9ucy5jb2xvclJhbXAKICAgICAgfTsKCiAgICAgIHN3aXRjaCAodGhpcy5fZ2VvaGFzaE9wdGlvbnMubWFwVHlwZSkgewogICAgICAgIGNhc2UgX21hcF90eXBlcy5NYXBUeXBlcy5TY2FsZWRDaXJjbGVNYXJrZXJzOgogICAgICAgICAgdGhpcy5fZ2VvaGFzaE1hcmtlcnMgPSBuZXcgX3NjYWxlZF9jaXJjbGVzLlNjYWxlZENpcmNsZXNNYXJrZXJzKHRoaXMuX2ZlYXR1cmVDb2xsZWN0aW9uLCB0aGlzLl9mZWF0dXJlQ29sbGVjdGlvbk1ldGFEYXRhLCBtYXJrZXJPcHRpb25zLCB0aGlzLl96b29tLCB0aGlzLl9raWJhbmFNYXApOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgX21hcF90eXBlcy5NYXBUeXBlcy5TaGFkZWRDaXJjbGVNYXJrZXJzOgogICAgICAgICAgdGhpcy5fZ2VvaGFzaE1hcmtlcnMgPSBuZXcgX3NoYWRlZF9jaXJjbGVzLlNoYWRlZENpcmNsZXNNYXJrZXJzKHRoaXMuX2ZlYXR1cmVDb2xsZWN0aW9uLCB0aGlzLl9mZWF0dXJlQ29sbGVjdGlvbk1ldGFEYXRhLCBtYXJrZXJPcHRpb25zLCB0aGlzLl96b29tLCB0aGlzLl9raWJhbmFNYXApOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgX21hcF90eXBlcy5NYXBUeXBlcy5TaGFkZWRHZW9oYXNoR3JpZDoKICAgICAgICAgIHRoaXMuX2dlb2hhc2hNYXJrZXJzID0gbmV3IF9nZW9oYXNoX2dyaWQuR2VvaGFzaEdyaWRNYXJrZXJzKHRoaXMuX2ZlYXR1cmVDb2xsZWN0aW9uLCB0aGlzLl9mZWF0dXJlQ29sbGVjdGlvbk1ldGFEYXRhLCBtYXJrZXJPcHRpb25zLCB0aGlzLl96b29tLCB0aGlzLl9raWJhbmFNYXApOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgX21hcF90eXBlcy5NYXBUeXBlcy5IZWF0bWFwOgogICAgICAgICAgdmFyIHJhZGl1cyA9IDE1OwoKICAgICAgICAgIGlmICh0aGlzLl9mZWF0dXJlQ29sbGVjdGlvbk1ldGFEYXRhLmdlb2hhc2hHcmlkRGltZW5zaW9uc0F0RXF1YXRvcikgewogICAgICAgICAgICB2YXIgbWluR3JpZExlbmd0aCA9ICgwLCBfbG9kYXNoLm1pbikodGhpcy5fZmVhdHVyZUNvbGxlY3Rpb25NZXRhRGF0YS5nZW9oYXNoR3JpZERpbWVuc2lvbnNBdEVxdWF0b3IpOwoKICAgICAgICAgICAgdmFyIG1ldGVyc1BlclBpeGVsID0gdGhpcy5fa2liYW5hTWFwLmdldE1ldGVyc1BlclBpeGVsKCk7CgogICAgICAgICAgICByYWRpdXMgPSBtaW5HcmlkTGVuZ3RoIC8gbWV0ZXJzUGVyUGl4ZWwgLyAyOwogICAgICAgICAgfQoKICAgICAgICAgIHJhZGl1cyA9IHJhZGl1cyAqIHBhcnNlRmxvYXQodGhpcy5fZ2VvaGFzaE9wdGlvbnMuaGVhdG1hcC5oZWF0Q2x1c3RlclNpemUpOwogICAgICAgICAgdGhpcy5fZ2VvaGFzaE1hcmtlcnMgPSBuZXcgX2hlYXRtYXAuSGVhdG1hcE1hcmtlcnModGhpcy5fZmVhdHVyZUNvbGxlY3Rpb24sIHsKICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsCiAgICAgICAgICAgIGJsdXI6IHJhZGl1cywKICAgICAgICAgICAgbWF4Wm9vbTogdGhpcy5fa2liYW5hTWFwLmdldFpvb21MZXZlbCgpLAogICAgICAgICAgICBtaW5PcGFjaXR5OiAwLjEsCiAgICAgICAgICAgIHRvb2x0aXBGb3JtYXR0ZXI6IHRoaXMuX2dlb2hhc2hPcHRpb25zLnRvb2x0aXBGb3JtYXR0ZXIKICAgICAgICAgIH0sIHRoaXMuX3pvb20sIHRoaXMuX2ZlYXR1cmVDb2xsZWN0aW9uTWV0YURhdGEubWF4KTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd0aWxlTWFwLmdlb2hhc2hMYXllci5tYXBUaXRsZScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICd7bWFwVHlwZX0gbWFwVHlwZSBub3QgcmVjb2duaXplZCcsCiAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgIG1hcFR5cGU6IHRoaXMuX2dlb2hhc2hPcHRpb25zLm1hcFR5cGUKICAgICAgICAgICAgfQogICAgICAgICAgfSkpOwogICAgICB9CgogICAgICB0aGlzLl9nZW9oYXNoTWFya2Vycy5vbignc2hvd1Rvb2x0aXAnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLmVtaXQoJ3Nob3dUb29sdGlwJywgZXZlbnQpOwogICAgICB9KTsKCiAgICAgIHRoaXMuX2dlb2hhc2hNYXJrZXJzLm9uKCdoaWRlVG9vbHRpcCcsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIHJldHVybiBfdGhpczIuZW1pdCgnaGlkZVRvb2x0aXAnLCBldmVudCk7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fbGVhZmxldExheWVyID0gdGhpcy5fZ2VvaGFzaE1hcmtlcnMuZ2V0TGVhZmxldExheWVyKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYXBwZW5kTGVnZW5kQ29udGVudHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZExlZ2VuZENvbnRlbnRzKGpxdWVyeURpdikgewogICAgICByZXR1cm4gdGhpcy5fZ2VvaGFzaE1hcmtlcnMuYXBwZW5kTGVnZW5kQ29udGVudHMoanF1ZXJ5RGl2KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtb3ZlUG9pbnRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVBvaW50ZXIoKSB7CiAgICAgIHZhciBfdGhpcyRfZ2VvaGFzaE1hcmtlcnM7CgogICAgICAoX3RoaXMkX2dlb2hhc2hNYXJrZXJzID0gdGhpcy5fZ2VvaGFzaE1hcmtlcnMpLm1vdmVQb2ludGVyLmFwcGx5KF90aGlzJF9nZW9oYXNoTWFya2VycywgYXJndW1lbnRzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRCb3VuZHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRCb3VuZHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBnZW9IYXNoQm91bmRzLCBub3J0aEVhc3QsIHNvdXRoV2VzdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dlb2hhc2hPcHRpb25zLmZldGNoQm91bmRzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW9oYXNoT3B0aW9ucy5mZXRjaEJvdW5kcygpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBnZW9IYXNoQm91bmRzID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIWdlb0hhc2hCb3VuZHMpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG5vcnRoRWFzdCA9IF9sZWFmbGV0LmRlZmF1bHQubGF0TG5nKGdlb0hhc2hCb3VuZHMudG9wX2xlZnQubGF0LCBnZW9IYXNoQm91bmRzLmJvdHRvbV9yaWdodC5sb24pOwogICAgICAgICAgICAgICAgc291dGhXZXN0ID0gX2xlYWZsZXQuZGVmYXVsdC5sYXRMbmcoZ2VvSGFzaEJvdW5kcy5ib3R0b21fcmlnaHQubGF0LCBnZW9IYXNoQm91bmRzLnRvcF9sZWZ0Lmxvbik7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfbGVhZmxldC5kZWZhdWx0LmxhdExuZ0JvdW5kcyhzb3V0aFdlc3QsIG5vcnRoRWFzdCkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLl9ib3VuZHMpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0Qm91bmRzKCkgewogICAgICAgIHJldHVybiBfZ2V0Qm91bmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRCb3VuZHM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJ1cGRhdGVFeHRlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUV4dGVudCgpIHsKICAgICAgLy8gQ2xpZW50LXNpZGUgZmlsdGVyaW5nIGlzIG9ubHkgZW5hYmxlZCB3aGVuIHNlcnZlci1zaWRlIGZpbHRlciBpcyBub3QgdXNlZAogICAgICBpZiAoIXRoaXMuX2dlb2hhc2hPcHRpb25zLmlzRmlsdGVyZWRCeUNvbGxhcikgewogICAgICAgIHZhciBib3VuZHMgPSB0aGlzLl9raWJhbmFNYXAuZ2V0TGVhZmxldEJvdW5kcygpOwoKICAgICAgICBpZiAoIXRoaXMuX2xhc3RCb3VuZHMgfHwgIXRoaXMuX2xhc3RCb3VuZHMuZXF1YWxzKGJvdW5kcykpIHsKICAgICAgICAgIC8vdGhpcyByZW1vdmFsIGlzIHJlcXVpcmVkIHRvIHRyaWdnZXIgdGhlIGJvdW5kcyBmaWx0ZXIgYWdhaW4KICAgICAgICAgIHRoaXMuX2tpYmFuYU1hcC5yZW1vdmVMYXllcih0aGlzKTsKCiAgICAgICAgICB0aGlzLl9jcmVhdGVHZW9oYXNoTWFya2VycygpOwoKICAgICAgICAgIHRoaXMuX2tpYmFuYU1hcC5hZGRMYXllcih0aGlzKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX2xhc3RCb3VuZHMgPSBib3VuZHM7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1JldXNhYmxlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1JldXNhYmxlKG9wdGlvbnMpIHsKICAgICAgaWYgKCgwLCBfbG9kYXNoLmlzRXF1YWwpKHRoaXMuX2dlb2hhc2hPcHRpb25zLCBvcHRpb25zKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IC8vY2hlY2sgaWYgYW55IGltcGFjdHMgbGVhZmxldCBzdHlsZXIgZnVuY3Rpb24KCgogICAgICBpZiAodGhpcy5fZ2VvaGFzaE9wdGlvbnMuY29sb3JSYW1wICE9PSBvcHRpb25zLmNvbG9yUmFtcCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIGlmICh0aGlzLl9nZW9oYXNoT3B0aW9ucy5tYXBUeXBlICE9PSBvcHRpb25zLm1hcFR5cGUpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fZ2VvaGFzaE9wdGlvbnMubWFwVHlwZSA9PT0gJ0hlYXRtYXAnICYmICEoMCwgX2xvZGFzaC5pc0VxdWFsKSh0aGlzLl9nZW9oYXNoT3B0aW9ucy5oZWF0bWFwLCBvcHRpb25zKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIEdlb2hhc2hMYXllcjsKfShfa2liYW5hX21hcF9sYXllci5LaWJhbmFNYXBMYXllcik7CgpleHBvcnRzLkdlb2hhc2hMYXllciA9IEdlb2hhc2hMYXllcjs="},null]}