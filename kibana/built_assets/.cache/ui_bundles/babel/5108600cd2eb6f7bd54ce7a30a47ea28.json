{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/case/use_post_push_to_service.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/case/use_post_push_to_service.js","mtime":1589249553220},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZVBvc3RQdXNoVG9TZXJ2aWNlID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX3RvYXN0ZXJzID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cy90b2FzdGVycyIpOwoKdmFyIF9hcGkgPSByZXF1aXJlKCIuL2FwaSIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBkYXRhRmV0Y2hSZWR1Y2VyID0gZnVuY3Rpb24gZGF0YUZldGNoUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7CiAgdmFyIF9hY3Rpb24kcGF5bG9hZCwgX2FjdGlvbiRwYXlsb2FkMjsKCiAgc3dpdGNoIChhY3Rpb24udHlwZSkgewogICAgY2FzZSAnRkVUQ0hfSU5JVCc6CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGlzTG9hZGluZzogdHJ1ZSwKICAgICAgICBpc0Vycm9yOiBmYWxzZQogICAgICB9KTsKCiAgICBjYXNlICdGRVRDSF9TVUNDRVNTX1BVU0hfU0VSVklDRSc6CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgaXNFcnJvcjogZmFsc2UsCiAgICAgICAgc2VydmljZURhdGE6IChfYWN0aW9uJHBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZCkgIT09IG51bGwgJiYgX2FjdGlvbiRwYXlsb2FkICE9PSB2b2lkIDAgPyBfYWN0aW9uJHBheWxvYWQgOiBudWxsCiAgICAgIH0pOwoKICAgIGNhc2UgJ0ZFVENIX1NVQ0NFU1NfUFVTSF9DQVNFJzoKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgICBpc0Vycm9yOiBmYWxzZSwKICAgICAgICBwdXNoZWRDYXNlRGF0YTogKF9hY3Rpb24kcGF5bG9hZDIgPSBhY3Rpb24ucGF5bG9hZCkgIT09IG51bGwgJiYgX2FjdGlvbiRwYXlsb2FkMiAhPT0gdm9pZCAwID8gX2FjdGlvbiRwYXlsb2FkMiA6IG51bGwKICAgICAgfSk7CgogICAgY2FzZSAnRkVUQ0hfRkFJTFVSRSc6CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgaXNFcnJvcjogdHJ1ZQogICAgICB9KTsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gc3RhdGU7CiAgfQp9OwoKdmFyIHVzZVBvc3RQdXNoVG9TZXJ2aWNlID0gZnVuY3Rpb24gdXNlUG9zdFB1c2hUb1NlcnZpY2UoKSB7CiAgdmFyIF91c2VSZWR1Y2VyID0gKDAsIF9yZWFjdC51c2VSZWR1Y2VyKShkYXRhRmV0Y2hSZWR1Y2VyLCB7CiAgICBzZXJ2aWNlRGF0YTogbnVsbCwKICAgIHB1c2hlZENhc2VEYXRhOiBudWxsLAogICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgIGlzRXJyb3I6IGZhbHNlCiAgfSksCiAgICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSwKICAgICAgc3RhdGUgPSBfdXNlUmVkdWNlcjJbMF0sCiAgICAgIGRpc3BhdGNoID0gX3VzZVJlZHVjZXIyWzFdOwoKICB2YXIgX3VzZVN0YXRlVG9hc3RlciA9ICgwLCBfdG9hc3RlcnMudXNlU3RhdGVUb2FzdGVyKSgpLAogICAgICBfdXNlU3RhdGVUb2FzdGVyMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZVRvYXN0ZXIsIDIpLAogICAgICBkaXNwYXRjaFRvYXN0ZXIgPSBfdXNlU3RhdGVUb2FzdGVyMlsxXTsKCiAgdmFyIHBvc3RQdXNoVG9TZXJ2aWNlID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoCiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKF9yZWYyKSB7CiAgICAgIHZhciBjYXNlSWQsIGNvbm5lY3RvcklkLCBjb25uZWN0b3JOYW1lLCB1cGRhdGVDYXNlLCBjYW5jZWwsIGFib3J0Q3RybCwgY2FzZVB1c2hEYXRhLCByZXNwb25zZVNlcnZpY2UsIHJlc3BvbnNlQ2FzZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNhc2VJZCA9IF9yZWYyLmNhc2VJZCwgY29ubmVjdG9ySWQgPSBfcmVmMi5jb25uZWN0b3JJZCwgY29ubmVjdG9yTmFtZSA9IF9yZWYyLmNvbm5lY3Rvck5hbWUsIHVwZGF0ZUNhc2UgPSBfcmVmMi51cGRhdGVDYXNlOwogICAgICAgICAgICAgIGNhbmNlbCA9IGZhbHNlOwogICAgICAgICAgICAgIGFib3J0Q3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTsKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzsKICAgICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgICB0eXBlOiAnRkVUQ0hfSU5JVCcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICByZXR1cm4gKDAsIF9hcGkuZ2V0Q2FzZSkoY2FzZUlkLCB0cnVlLCBhYm9ydEN0cmwuc2lnbmFsKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlUHVzaERhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICByZXR1cm4gKDAsIF9hcGkucHVzaFRvU2VydmljZSkoY29ubmVjdG9ySWQsIGZvcm1hdFNlcnZpY2VSZXF1ZXN0RGF0YShjYXNlUHVzaERhdGEpLCBhYm9ydEN0cmwuc2lnbmFsKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgcmVzcG9uc2VTZXJ2aWNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgcmV0dXJuICgwLCBfYXBpLnB1c2hDYXNlKShjYXNlSWQsIHsKICAgICAgICAgICAgICAgIGNvbm5lY3Rvcl9pZDogY29ubmVjdG9ySWQsCiAgICAgICAgICAgICAgICBjb25uZWN0b3JfbmFtZTogY29ubmVjdG9yTmFtZSwKICAgICAgICAgICAgICAgIGV4dGVybmFsX2lkOiByZXNwb25zZVNlcnZpY2UuaW5jaWRlbnRJZCwKICAgICAgICAgICAgICAgIGV4dGVybmFsX3RpdGxlOiByZXNwb25zZVNlcnZpY2UubnVtYmVyLAogICAgICAgICAgICAgICAgZXh0ZXJuYWxfdXJsOiByZXNwb25zZVNlcnZpY2UudXJsCiAgICAgICAgICAgICAgfSwgYWJvcnRDdHJsLnNpZ25hbCk7CgogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgIHJlc3BvbnNlQ2FzZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICghY2FuY2VsKSB7CiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9TVUNDRVNTX1BVU0hfU0VSVklDRScsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHJlc3BvbnNlU2VydmljZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9TVUNDRVNTX1BVU0hfQ0FTRScsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHJlc3BvbnNlQ2FzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB1cGRhdGVDYXNlKHJlc3BvbnNlQ2FzZSk7CiAgICAgICAgICAgICAgICAoMCwgX3RvYXN0ZXJzLmRpc3BsYXlTdWNjZXNzVG9hc3QpKGkxOG4uU1VDQ0VTU19TRU5EX1RPX0VYVEVSTkFMX1NFUlZJQ0UsIGRpc3BhdGNoVG9hc3Rlcik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNzsKICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDMpOwoKICAgICAgICAgICAgICBpZiAoIWNhbmNlbCkgewogICAgICAgICAgICAgICAgKDAsIF90b2FzdGVycy5lcnJvclRvVG9hc3RlcikoewogICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bi5FUlJPUl9USVRMRSwKICAgICAgICAgICAgICAgICAgZXJyb3I6IF9jb250ZXh0LnQwLmJvZHkgJiYgX2NvbnRleHQudDAuYm9keS5tZXNzYWdlID8gbmV3IEVycm9yKF9jb250ZXh0LnQwLmJvZHkubWVzc2FnZSkgOiBfY29udGV4dC50MCwKICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hUb2FzdGVyOiBkaXNwYXRjaFRvYXN0ZXIKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goewogICAgICAgICAgICAgICAgICB0eXBlOiAnRkVUQ0hfRkFJTFVSRScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgY2FuY2VsID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGFib3J0Q3RybC5hYm9ydCgpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1szLCAxN11dKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKSwgW10pOwogIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgcG9zdFB1c2hUb1NlcnZpY2U6IHBvc3RQdXNoVG9TZXJ2aWNlCiAgfSk7Cn07CgpleHBvcnRzLnVzZVBvc3RQdXNoVG9TZXJ2aWNlID0gdXNlUG9zdFB1c2hUb1NlcnZpY2U7Cgp2YXIgZm9ybWF0U2VydmljZVJlcXVlc3REYXRhID0gZnVuY3Rpb24gZm9ybWF0U2VydmljZVJlcXVlc3REYXRhKG15Q2FzZSkgewogIHZhciBfY3JlYXRlZEJ5JGZ1bGxOYW1lLCBfcmVmMywgX3JlZjQsIF91cGRhdGVkQnkkZnVsbE5hbWUsIF91cGRhdGVkQnkkdXNlcm5hbWU7CgogIHZhciBjYXNlSWQgPSBteUNhc2UuaWQsCiAgICAgIGNyZWF0ZWRBdCA9IG15Q2FzZS5jcmVhdGVkQXQsCiAgICAgIGNyZWF0ZWRCeSA9IG15Q2FzZS5jcmVhdGVkQnksCiAgICAgIGNvbW1lbnRzID0gbXlDYXNlLmNvbW1lbnRzLAogICAgICBkZXNjcmlwdGlvbiA9IG15Q2FzZS5kZXNjcmlwdGlvbiwKICAgICAgZXh0ZXJuYWxTZXJ2aWNlID0gbXlDYXNlLmV4dGVybmFsU2VydmljZSwKICAgICAgdGl0bGUgPSBteUNhc2UudGl0bGUsCiAgICAgIHVwZGF0ZWRBdCA9IG15Q2FzZS51cGRhdGVkQXQsCiAgICAgIHVwZGF0ZWRCeSA9IG15Q2FzZS51cGRhdGVkQnk7CiAgcmV0dXJuIHsKICAgIGNhc2VJZDogY2FzZUlkLAogICAgY3JlYXRlZEF0OiBjcmVhdGVkQXQsCiAgICBjcmVhdGVkQnk6IHsKICAgICAgZnVsbE5hbWU6IChfY3JlYXRlZEJ5JGZ1bGxOYW1lID0gY3JlYXRlZEJ5LmZ1bGxOYW1lKSAhPT0gbnVsbCAmJiBfY3JlYXRlZEJ5JGZ1bGxOYW1lICE9PSB2b2lkIDAgPyBfY3JlYXRlZEJ5JGZ1bGxOYW1lIDogbnVsbCwKICAgICAgdXNlcm5hbWU6IChfcmVmMyA9IGNyZWF0ZWRCeSA9PT0gbnVsbCB8fCBjcmVhdGVkQnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNyZWF0ZWRCeS51c2VybmFtZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogJycKICAgIH0sCiAgICBjb21tZW50czogY29tbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7CiAgICAgIHZhciBsYXN0UHVzaCA9IGMucHVzaGVkQXQgIT0gbnVsbCA/IG5ldyBEYXRlKGMucHVzaGVkQXQpIDogbnVsbDsKICAgICAgdmFyIGxhc3RVcGRhdGUgPSBjLnVwZGF0ZWRBdCAhPSBudWxsID8gbmV3IERhdGUoYy51cGRhdGVkQXQpIDogbnVsbDsKCiAgICAgIGlmIChsYXN0UHVzaCA9PT0gbnVsbCB8fCBsYXN0UHVzaCAhPSBudWxsICYmIGxhc3RVcGRhdGUgIT0gbnVsbCAmJiBsYXN0UHVzaC5nZXRUaW1lKCkgPCAobGFzdFVwZGF0ZSA9PT0gbnVsbCB8fCBsYXN0VXBkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXN0VXBkYXRlLmdldFRpbWUoKSkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSkubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgIHZhciBfYyRjcmVhdGVkQnkkZnVsbE5hbWUsIF9jJGNyZWF0ZWRCeSR1c2VybmFtZSwgX2MkdXBkYXRlZEJ5JGZ1bGxOYW1lLCBfYyR1cGRhdGVkQnkkdXNlcm5hbWU7CgogICAgICByZXR1cm4gewogICAgICAgIGNvbW1lbnRJZDogYy5pZCwKICAgICAgICBjb21tZW50OiBjLmNvbW1lbnQsCiAgICAgICAgY3JlYXRlZEF0OiBjLmNyZWF0ZWRBdCwKICAgICAgICBjcmVhdGVkQnk6IHsKICAgICAgICAgIGZ1bGxOYW1lOiAoX2MkY3JlYXRlZEJ5JGZ1bGxOYW1lID0gYy5jcmVhdGVkQnkuZnVsbE5hbWUpICE9PSBudWxsICYmIF9jJGNyZWF0ZWRCeSRmdWxsTmFtZSAhPT0gdm9pZCAwID8gX2MkY3JlYXRlZEJ5JGZ1bGxOYW1lIDogbnVsbCwKICAgICAgICAgIHVzZXJuYW1lOiAoX2MkY3JlYXRlZEJ5JHVzZXJuYW1lID0gYy5jcmVhdGVkQnkudXNlcm5hbWUpICE9PSBudWxsICYmIF9jJGNyZWF0ZWRCeSR1c2VybmFtZSAhPT0gdm9pZCAwID8gX2MkY3JlYXRlZEJ5JHVzZXJuYW1lIDogJycKICAgICAgICB9LAogICAgICAgIHVwZGF0ZWRBdDogYy51cGRhdGVkQXQsCiAgICAgICAgdXBkYXRlZEJ5OiBjLnVwZGF0ZWRCeSAhPSBudWxsID8gewogICAgICAgICAgZnVsbE5hbWU6IChfYyR1cGRhdGVkQnkkZnVsbE5hbWUgPSBjLnVwZGF0ZWRCeS5mdWxsTmFtZSkgIT09IG51bGwgJiYgX2MkdXBkYXRlZEJ5JGZ1bGxOYW1lICE9PSB2b2lkIDAgPyBfYyR1cGRhdGVkQnkkZnVsbE5hbWUgOiBudWxsLAogICAgICAgICAgdXNlcm5hbWU6IChfYyR1cGRhdGVkQnkkdXNlcm5hbWUgPSBjLnVwZGF0ZWRCeS51c2VybmFtZSkgIT09IG51bGwgJiYgX2MkdXBkYXRlZEJ5JHVzZXJuYW1lICE9PSB2b2lkIDAgPyBfYyR1cGRhdGVkQnkkdXNlcm5hbWUgOiAnJwogICAgICAgIH0gOiBudWxsCiAgICAgIH07CiAgICB9KSwKICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiwKICAgIGluY2lkZW50SWQ6IChfcmVmNCA9IGV4dGVybmFsU2VydmljZSA9PT0gbnVsbCB8fCBleHRlcm5hbFNlcnZpY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dGVybmFsU2VydmljZS5leHRlcm5hbElkKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBudWxsLAogICAgdGl0bGU6IHRpdGxlLAogICAgdXBkYXRlZEF0OiB1cGRhdGVkQXQsCiAgICB1cGRhdGVkQnk6IHVwZGF0ZWRCeSAhPSBudWxsID8gewogICAgICBmdWxsTmFtZTogKF91cGRhdGVkQnkkZnVsbE5hbWUgPSB1cGRhdGVkQnkuZnVsbE5hbWUpICE9PSBudWxsICYmIF91cGRhdGVkQnkkZnVsbE5hbWUgIT09IHZvaWQgMCA/IF91cGRhdGVkQnkkZnVsbE5hbWUgOiBudWxsLAogICAgICB1c2VybmFtZTogKF91cGRhdGVkQnkkdXNlcm5hbWUgPSB1cGRhdGVkQnkudXNlcm5hbWUpICE9PSBudWxsICYmIF91cGRhdGVkQnkkdXNlcm5hbWUgIT09IHZvaWQgMCA/IF91cGRhdGVkQnkkdXNlcm5hbWUgOiAnJwogICAgfSA6IG51bGwKICB9Owp9Ow=="},null]}