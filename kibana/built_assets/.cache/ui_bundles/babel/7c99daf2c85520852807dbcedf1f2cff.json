{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/index_lifecycle_management/public/np_ready/application/services/api.js","dependencies":[{"path":"x-pack/legacy/plugins/index_lifecycle_management/public/np_ready/application/services/api.js","mtime":1589249552256},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmxvYWROb2RlcyA9IGxvYWROb2RlczsKZXhwb3J0cy5sb2FkTm9kZURldGFpbHMgPSBsb2FkTm9kZURldGFpbHM7CmV4cG9ydHMubG9hZEluZGV4VGVtcGxhdGVzID0gbG9hZEluZGV4VGVtcGxhdGVzOwpleHBvcnRzLmxvYWRJbmRleFRlbXBsYXRlID0gbG9hZEluZGV4VGVtcGxhdGU7CmV4cG9ydHMubG9hZFBvbGljaWVzID0gbG9hZFBvbGljaWVzOwpleHBvcnRzLnNhdmVQb2xpY3kgPSBzYXZlUG9saWN5OwpleHBvcnRzLmRlbGV0ZVBvbGljeSA9IGRlbGV0ZVBvbGljeTsKZXhwb3J0cy5hZGRMaWZlY3ljbGVQb2xpY3lUb1RlbXBsYXRlID0gZXhwb3J0cy5hZGRMaWZlY3ljbGVQb2xpY3lUb0luZGV4ID0gZXhwb3J0cy5yZW1vdmVMaWZlY3ljbGVGb3JJbmRleCA9IGV4cG9ydHMucmV0cnlMaWZlY3ljbGVGb3JJbmRleCA9IHZvaWQgMDsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vY29uc3RhbnRzIik7Cgp2YXIgX3VpX21ldHJpYyA9IHJlcXVpcmUoIi4vdWlfbWV0cmljIik7Cgp2YXIgX2h0dHAgPSByZXF1aXJlKCIuL2h0dHAiKTsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgovLyBUaGUgZXh0ZW5kX2luZGV4X21hbmFnZW1lbnQgbW9kdWxlIHRoYXQgd2Ugc3VwcG9ydCBhbiBpbmplY3RlZCBodHRwQ2xpZW50IGhlcmUuCmZ1bmN0aW9uIGxvYWROb2RlcyhfeCkgewogIHJldHVybiBfbG9hZE5vZGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkTm9kZXMoKSB7CiAgX2xvYWROb2RlcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShodHRwQ2xpZW50KSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2h0dHAuc2VuZEdldCkoIm5vZGVzL2xpc3QiLCBodHRwQ2xpZW50KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDUuc2VudCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNSk7CiAgfSkpOwogIHJldHVybiBfbG9hZE5vZGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGxvYWROb2RlRGV0YWlscyhfeDIsIF94MykgewogIHJldHVybiBfbG9hZE5vZGVEZXRhaWxzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkTm9kZURldGFpbHMoKSB7CiAgX2xvYWROb2RlRGV0YWlscyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNihzZWxlY3RlZE5vZGVBdHRycywgaHR0cENsaWVudCkgewogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRHZXQpKCJub2Rlcy8iLmNvbmNhdChzZWxlY3RlZE5vZGVBdHRycywgIi9kZXRhaWxzIiksIGh0dHBDbGllbnQpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Ni5zZW50KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU2KTsKICB9KSk7CiAgcmV0dXJuIF9sb2FkTm9kZURldGFpbHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gbG9hZEluZGV4VGVtcGxhdGVzKF94NCkgewogIHJldHVybiBfbG9hZEluZGV4VGVtcGxhdGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkSW5kZXhUZW1wbGF0ZXMoKSB7CiAgX2xvYWRJbmRleFRlbXBsYXRlcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNyhodHRwQ2xpZW50KSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2h0dHAuc2VuZEdldCkoInRlbXBsYXRlcyIsIGh0dHBDbGllbnQpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Ny5zZW50KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU3KTsKICB9KSk7CiAgcmV0dXJuIF9sb2FkSW5kZXhUZW1wbGF0ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gbG9hZEluZGV4VGVtcGxhdGUoX3g1LCBfeDYpIHsKICByZXR1cm4gX2xvYWRJbmRleFRlbXBsYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkSW5kZXhUZW1wbGF0ZSgpIHsKICBfbG9hZEluZGV4VGVtcGxhdGUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTgodGVtcGxhdGVOYW1lLCBodHRwQ2xpZW50KSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZiAodGVtcGxhdGVOYW1lKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA0OwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRHZXQpKCJ0ZW1wbGF0ZXMvIi5jb25jYXQodGVtcGxhdGVOYW1lKSwgaHR0cENsaWVudCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ4LnNlbnQpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTgpOwogIH0pKTsKICByZXR1cm4gX2xvYWRJbmRleFRlbXBsYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGxvYWRQb2xpY2llcyhfeDcsIF94OCkgewogIHJldHVybiBfbG9hZFBvbGljaWVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9sb2FkUG9saWNpZXMoKSB7CiAgX2xvYWRQb2xpY2llcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSh3aXRoSW5kaWNlcywgaHR0cENsaWVudCkgewogICAgdmFyIHF1ZXJ5OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OS5wcmV2ID0gX2NvbnRleHQ5Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcXVlcnkgPSB3aXRoSW5kaWNlcyA/ICc/d2l0aEluZGljZXM9dHJ1ZScgOiAnJzsKICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRHZXQpKCdwb2xpY2llcycsIHF1ZXJ5LCBodHRwQ2xpZW50KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDkuc2VudCk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlOSk7CiAgfSkpOwogIHJldHVybiBfbG9hZFBvbGljaWVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIHNhdmVQb2xpY3koX3g5LCBfeDEwKSB7CiAgcmV0dXJuIF9zYXZlUG9saWN5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9zYXZlUG9saWN5KCkgewogIF9zYXZlUG9saWN5ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMChwb2xpY3ksIGh0dHBDbGllbnQpIHsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTAkKF9jb250ZXh0MTApIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRQb3N0KSgicG9saWNpZXMiLCBwb2xpY3ksIGh0dHBDbGllbnQpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDEwLnNlbnQpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUxMCk7CiAgfSkpOwogIHJldHVybiBfc2F2ZVBvbGljeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBkZWxldGVQb2xpY3koX3gxMSwgX3gxMikgewogIHJldHVybiBfZGVsZXRlUG9saWN5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9kZWxldGVQb2xpY3koKSB7CiAgX2RlbGV0ZVBvbGljeSA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEocG9saWN5TmFtZSwgaHR0cENsaWVudCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQxMS5wcmV2ID0gX2NvbnRleHQxMS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2h0dHAuc2VuZERlbGV0ZSkoInBvbGljaWVzLyIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChwb2xpY3lOYW1lKSksIGh0dHBDbGllbnQpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDExLnNlbnQ7CiAgICAgICAgICAgIC8vIE9ubHkgdHJhY2sgc3VjY2Vzc2Z1bCBhY3Rpb25zLgogICAgICAgICAgICAoMCwgX3VpX21ldHJpYy50cmFja1VpTWV0cmljKSgnY291bnQnLCBfY29uc3RhbnRzLlVJTV9QT0xJQ1lfREVMRVRFKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTExKTsKICB9KSk7CiAgcmV0dXJuIF9kZWxldGVQb2xpY3kuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKdmFyIHJldHJ5TGlmZWN5Y2xlRm9ySW5kZXggPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGluZGV4TmFtZXMsIGh0dHBDbGllbnQpIHsKICAgIHZhciByZXNwb25zZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2h0dHAuc2VuZFBvc3QpKCJpbmRleC9yZXRyeSIsIHsKICAgICAgICAgICAgICBpbmRleE5hbWVzOiBpbmRleE5hbWVzCiAgICAgICAgICAgIH0sIGh0dHBDbGllbnQpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAvLyBPbmx5IHRyYWNrIHN1Y2Nlc3NmdWwgYWN0aW9ucy4KICAgICAgICAgICAgKDAsIF91aV9tZXRyaWMudHJhY2tVaU1ldHJpYykoJ2NvdW50JywgX2NvbnN0YW50cy5VSU1fSU5ERVhfUkVUUllfU1RFUCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gcmV0cnlMaWZlY3ljbGVGb3JJbmRleChfeDEzLCBfeDE0KSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmV4cG9ydHMucmV0cnlMaWZlY3ljbGVGb3JJbmRleCA9IHJldHJ5TGlmZWN5Y2xlRm9ySW5kZXg7Cgp2YXIgcmVtb3ZlTGlmZWN5Y2xlRm9ySW5kZXggPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoaW5kZXhOYW1lcywgaHR0cENsaWVudCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRQb3N0KSgiaW5kZXgvcmVtb3ZlIiwgewogICAgICAgICAgICAgIGluZGV4TmFtZXM6IGluZGV4TmFtZXMKICAgICAgICAgICAgfSwgaHR0cENsaWVudCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAvLyBPbmx5IHRyYWNrIHN1Y2Nlc3NmdWwgYWN0aW9ucy4KICAgICAgICAgICAgKDAsIF91aV9tZXRyaWMudHJhY2tVaU1ldHJpYykoJ2NvdW50JywgX2NvbnN0YW50cy5VSU1fUE9MSUNZX0RFVEFDSF9JTkRFWCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlTGlmZWN5Y2xlRm9ySW5kZXgoX3gxNSwgX3gxNikgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5yZW1vdmVMaWZlY3ljbGVGb3JJbmRleCA9IHJlbW92ZUxpZmVjeWNsZUZvckluZGV4OwoKdmFyIGFkZExpZmVjeWNsZVBvbGljeVRvSW5kZXggPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoYm9keSwgaHR0cENsaWVudCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRQb3N0KSgiaW5kZXgvYWRkIiwgYm9keSwgaHR0cENsaWVudCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAvLyBPbmx5IHRyYWNrIHN1Y2Nlc3NmdWwgYWN0aW9ucy4KICAgICAgICAgICAgKDAsIF91aV9tZXRyaWMudHJhY2tVaU1ldHJpYykoJ2NvdW50JywgX2NvbnN0YW50cy5VSU1fUE9MSUNZX0FUVEFDSF9JTkRFWCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gYWRkTGlmZWN5Y2xlUG9saWN5VG9JbmRleChfeDE3LCBfeDE4KSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7CgpleHBvcnRzLmFkZExpZmVjeWNsZVBvbGljeVRvSW5kZXggPSBhZGRMaWZlY3ljbGVQb2xpY3lUb0luZGV4OwoKdmFyIGFkZExpZmVjeWNsZVBvbGljeVRvVGVtcGxhdGUgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoYm9keSwgaHR0cENsaWVudCkgewogICAgdmFyIHJlc3BvbnNlOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gKDAsIF9odHRwLnNlbmRQb3N0KSgidGVtcGxhdGUiLCBib2R5LCBodHRwQ2xpZW50KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIC8vIE9ubHkgdHJhY2sgc3VjY2Vzc2Z1bCBhY3Rpb25zLgogICAgICAgICAgICAoMCwgX3VpX21ldHJpYy50cmFja1VpTWV0cmljKSgnY291bnQnLCBfY29uc3RhbnRzLlVJTV9QT0xJQ1lfQVRUQUNIX0lOREVYX1RFTVBMQVRFKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWU0KTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBhZGRMaWZlY3ljbGVQb2xpY3lUb1RlbXBsYXRlKF94MTksIF94MjApIHsKICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmV4cG9ydHMuYWRkTGlmZWN5Y2xlUG9saWN5VG9UZW1wbGF0ZSA9IGFkZExpZmVjeWNsZVBvbGljeVRvVGVtcGxhdGU7"},null]}