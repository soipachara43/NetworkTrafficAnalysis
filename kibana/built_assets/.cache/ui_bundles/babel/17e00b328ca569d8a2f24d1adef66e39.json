{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/network_top_n_flow/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/network_top_n_flow/index.js","mtime":1589249553240},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuTmV0d29ya1RvcE5GbG93UXVlcnkgPSB2b2lkIDA7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVhY3RBcG9sbG8gPSByZXF1aXJlKCJyZWFjdC1hcG9sbG8iKTsKCnZhciBfcmVhY3RSZWR1eCA9IHJlcXVpcmUoInJlYWN0LXJlZHV4Iik7Cgp2YXIgX3JlZHV4ID0gcmVxdWlyZSgicmVkdXgiKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKdmFyIF9raWJhbmEgPSByZXF1aXJlKCIuLi8uLi9saWIva2liYW5hIik7Cgp2YXIgX3N0b3JlID0gcmVxdWlyZSgiLi4vLi4vc3RvcmUiKTsKCnZhciBfaGVscGVycyA9IHJlcXVpcmUoIi4uLy4uL2NvbXBvbmVudHMvcGFnaW5hdGVkX3RhYmxlL2hlbHBlcnMiKTsKCnZhciBfaGVscGVyczIgPSByZXF1aXJlKCIuLi9oZWxwZXJzIik7Cgp2YXIgX3F1ZXJ5X3RlbXBsYXRlX3BhZ2luYXRlZCA9IHJlcXVpcmUoIi4uL3F1ZXJ5X3RlbXBsYXRlX3BhZ2luYXRlZCIpOwoKdmFyIF9pbmRleCA9IHJlcXVpcmUoIi4vaW5kZXguZ3FsX3F1ZXJ5Iik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgby5fX3Byb3RvX18gPSBwOwogICAgcmV0dXJuIG87CiAgfTsKCiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsKfQoKdmFyIElEID0gJ25ldHdvcmtUb3BORmxvd1F1ZXJ5JzsKCnZhciBOZXR3b3JrVG9wTkZsb3dDb21wb25lbnRRdWVyeSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9RdWVyeVRlbXBsYXRlUGFnaW5hdCkgewogIF9pbmhlcml0cyhOZXR3b3JrVG9wTkZsb3dDb21wb25lbnRRdWVyeSwgX1F1ZXJ5VGVtcGxhdGVQYWdpbmF0KTsKCiAgZnVuY3Rpb24gTmV0d29ya1RvcE5GbG93Q29tcG9uZW50UXVlcnkoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV0d29ya1RvcE5GbG93Q29tcG9uZW50UXVlcnkpOwoKICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTmV0d29ya1RvcE5GbG93Q29tcG9uZW50UXVlcnkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE5ldHdvcmtUb3BORmxvd0NvbXBvbmVudFF1ZXJ5LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgYWN0aXZlUGFnZSA9IF90aGlzJHByb3BzLmFjdGl2ZVBhZ2UsCiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLAogICAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzLmVuZERhdGUsCiAgICAgICAgICBmbG93VGFyZ2V0ID0gX3RoaXMkcHJvcHMuZmxvd1RhcmdldCwKICAgICAgICAgIGZpbHRlclF1ZXJ5ID0gX3RoaXMkcHJvcHMuZmlsdGVyUXVlcnksCiAgICAgICAgICBraWJhbmEgPSBfdGhpcyRwcm9wcy5raWJhbmEsCiAgICAgICAgICBfdGhpcyRwcm9wcyRpZCA9IF90aGlzJHByb3BzLmlkLAogICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcyRpZCA9PT0gdm9pZCAwID8gIiIuY29uY2F0KElELCAiLSIpLmNvbmNhdChmbG93VGFyZ2V0KSA6IF90aGlzJHByb3BzJGlkLAogICAgICAgICAgaXAgPSBfdGhpcyRwcm9wcy5pcCwKICAgICAgICAgIGlzSW5zcGVjdGVkID0gX3RoaXMkcHJvcHMuaXNJbnNwZWN0ZWQsCiAgICAgICAgICBsaW1pdCA9IF90aGlzJHByb3BzLmxpbWl0LAogICAgICAgICAgc2tpcCA9IF90aGlzJHByb3BzLnNraXAsCiAgICAgICAgICBzb3VyY2VJZCA9IF90aGlzJHByb3BzLnNvdXJjZUlkLAogICAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMuc3RhcnREYXRlLAogICAgICAgICAgc29ydCA9IF90aGlzJHByb3BzLnNvcnQ7CiAgICAgIHZhciB2YXJpYWJsZXMgPSB7CiAgICAgICAgZGVmYXVsdEluZGV4OiBraWJhbmEuc2VydmljZXMudWlTZXR0aW5ncy5nZXQoX2NvbnN0YW50cy5ERUZBVUxUX0lOREVYX0tFWSksCiAgICAgICAgZmlsdGVyUXVlcnk6ICgwLCBfaGVscGVyczIuY3JlYXRlRmlsdGVyKShmaWx0ZXJRdWVyeSksCiAgICAgICAgZmxvd1RhcmdldDogZmxvd1RhcmdldCwKICAgICAgICBpbnNwZWN0OiBpc0luc3BlY3RlZCwKICAgICAgICBpcDogaXAsCiAgICAgICAgcGFnaW5hdGlvbjogKDAsIF9oZWxwZXJzLmdlbmVyYXRlVGFibGVQYWdpbmF0aW9uT3B0aW9ucykoYWN0aXZlUGFnZSwgbGltaXQpLAogICAgICAgIHNvcnQ6IHNvcnQsCiAgICAgICAgc291cmNlSWQ6IHNvdXJjZUlkLAogICAgICAgIHRpbWVyYW5nZTogewogICAgICAgICAgaW50ZXJ2YWw6ICcxMmgnLAogICAgICAgICAgZnJvbTogc3RhcnREYXRlLAogICAgICAgICAgdG86IGVuZERhdGUKICAgICAgICB9CiAgICAgIH07CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEFwb2xsby5RdWVyeSwgewogICAgICAgIGZldGNoUG9saWN5OiAoMCwgX2hlbHBlcnMyLmdldERlZmF1bHRGZXRjaFBvbGljeSkoKSwKICAgICAgICBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U6IHRydWUsCiAgICAgICAgcXVlcnk6IF9pbmRleC5uZXR3b3JrVG9wTkZsb3dRdWVyeSwKICAgICAgICBza2lwOiBza2lwLAogICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzCiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIGRhdGEgPSBfcmVmLmRhdGEsCiAgICAgICAgICAgIGxvYWRpbmcgPSBfcmVmLmxvYWRpbmcsCiAgICAgICAgICAgIGZldGNoTW9yZSA9IF9yZWYuZmV0Y2hNb3JlLAogICAgICAgICAgICBuZXR3b3JrU3RhdHVzID0gX3JlZi5uZXR3b3JrU3RhdHVzLAogICAgICAgICAgICByZWZldGNoID0gX3JlZi5yZWZldGNoOwogICAgICAgIHZhciBuZXR3b3JrVG9wTkZsb3cgPSAoMCwgX2ZwLmdldE9yKShbXSwgInNvdXJjZS5OZXR3b3JrVG9wTkZsb3cuZWRnZXMiLCBkYXRhKTsKCiAgICAgICAgX3RoaXMuc2V0RmV0Y2hNb3JlKGZldGNoTW9yZSk7CgogICAgICAgIF90aGlzLnNldEZldGNoTW9yZU9wdGlvbnMoZnVuY3Rpb24gKG5ld0FjdGl2ZVBhZ2UpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHZhcmlhYmxlczogewogICAgICAgICAgICAgIHBhZ2luYXRpb246ICgwLCBfaGVscGVycy5nZW5lcmF0ZVRhYmxlUGFnaW5hdGlvbk9wdGlvbnMpKG5ld0FjdGl2ZVBhZ2UsIGxpbWl0KQogICAgICAgICAgICB9LAogICAgICAgICAgICB1cGRhdGVRdWVyeTogZnVuY3Rpb24gdXBkYXRlUXVlcnkocHJldiwgX3JlZjIpIHsKICAgICAgICAgICAgICB2YXIgZmV0Y2hNb3JlUmVzdWx0ID0gX3JlZjIuZmV0Y2hNb3JlUmVzdWx0OwoKICAgICAgICAgICAgICBpZiAoIWZldGNoTW9yZVJlc3VsdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgZmV0Y2hNb3JlUmVzdWx0LCB7CiAgICAgICAgICAgICAgICBzb3VyY2U6IF9vYmplY3RTcHJlYWQoe30sIGZldGNoTW9yZVJlc3VsdC5zb3VyY2UsIHsKICAgICAgICAgICAgICAgICAgTmV0d29ya1RvcE5GbG93OiBfb2JqZWN0U3ByZWFkKHt9LCBmZXRjaE1vcmVSZXN1bHQuc291cmNlLk5ldHdvcmtUb3BORmxvdywgewogICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBfdG9Db25zdW1hYmxlQXJyYXkoZmV0Y2hNb3JlUmVzdWx0LnNvdXJjZS5OZXR3b3JrVG9wTkZsb3cuZWRnZXMpCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0pOwoKICAgICAgICB2YXIgaXNMb2FkaW5nID0gX3RoaXMuaXNJdEFWYWxpZExvYWRpbmcobG9hZGluZywgdmFyaWFibGVzLCBuZXR3b3JrU3RhdHVzKTsKCiAgICAgICAgcmV0dXJuIGNoaWxkcmVuKHsKICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgIGluc3BlY3Q6ICgwLCBfZnAuZ2V0T3IpKG51bGwsICdzb3VyY2UuTmV0d29ya1RvcE5GbG93Lmluc3BlY3QnLCBkYXRhKSwKICAgICAgICAgIGlzSW5zcGVjdGVkOiBpc0luc3BlY3RlZCwKICAgICAgICAgIGxvYWRpbmc6IGlzTG9hZGluZywKICAgICAgICAgIGxvYWRQYWdlOiBfdGhpcy53cmFwcGVkTG9hZE1vcmUsCiAgICAgICAgICBuZXR3b3JrVG9wTkZsb3c6IG5ldHdvcmtUb3BORmxvdywKICAgICAgICAgIHBhZ2VJbmZvOiAoMCwgX2ZwLmdldE9yKSh7fSwgJ3NvdXJjZS5OZXR3b3JrVG9wTkZsb3cucGFnZUluZm8nLCBkYXRhKSwKICAgICAgICAgIHJlZmV0Y2g6IF90aGlzLm1lbW9pemVkUmVmZXRjaFF1ZXJ5KHZhcmlhYmxlcywgbGltaXQsIHJlZmV0Y2gpLAogICAgICAgICAgdG90YWxDb3VudDogKDAsIF9mcC5nZXRPcikoLTEsICdzb3VyY2UuTmV0d29ya1RvcE5GbG93LnRvdGFsQ291bnQnLCBkYXRhKQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBOZXR3b3JrVG9wTkZsb3dDb21wb25lbnRRdWVyeTsKfShfcXVlcnlfdGVtcGxhdGVfcGFnaW5hdGVkLlF1ZXJ5VGVtcGxhdGVQYWdpbmF0ZWQpOwoKdmFyIG1ha2VNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYWtlTWFwU3RhdGVUb1Byb3BzKCkgewogIHZhciBnZXRUb3BORmxvd1NlbGVjdG9yID0gX3N0b3JlLm5ldHdvcmtTZWxlY3RvcnMudG9wTkZsb3dTZWxlY3RvcigpOwoKICB2YXIgZ2V0UXVlcnkgPSBfc3RvcmUuaW5wdXRzU2VsZWN0b3JzLmdsb2JhbFF1ZXJ5QnlJZFNlbGVjdG9yKCk7CgogIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIF9yZWYzKSB7CiAgICB2YXIgZmxvd1RhcmdldCA9IF9yZWYzLmZsb3dUYXJnZXQsCiAgICAgICAgX3JlZjMkaWQgPSBfcmVmMy5pZCwKICAgICAgICBpZCA9IF9yZWYzJGlkID09PSB2b2lkIDAgPyAiIi5jb25jYXQoSUQsICItIikuY29uY2F0KGZsb3dUYXJnZXQpIDogX3JlZjMkaWQsCiAgICAgICAgdHlwZSA9IF9yZWYzLnR5cGU7CgogICAgdmFyIF9nZXRRdWVyeSA9IGdldFF1ZXJ5KHN0YXRlLCBpZCksCiAgICAgICAgaXNJbnNwZWN0ZWQgPSBfZ2V0UXVlcnkuaXNJbnNwZWN0ZWQ7CgogICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGdldFRvcE5GbG93U2VsZWN0b3Ioc3RhdGUsIHR5cGUsIGZsb3dUYXJnZXQpLCB7CiAgICAgIGlzSW5zcGVjdGVkOiBpc0luc3BlY3RlZAogICAgfSk7CiAgfTsKfTsKCnZhciBOZXR3b3JrVG9wTkZsb3dRdWVyeSA9ICgwLCBfcmVkdXguY29tcG9zZSkoKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1ha2VNYXBTdGF0ZVRvUHJvcHMpLCBfa2liYW5hLndpdGhLaWJhbmEpKE5ldHdvcmtUb3BORmxvd0NvbXBvbmVudFF1ZXJ5KTsKZXhwb3J0cy5OZXR3b3JrVG9wTkZsb3dRdWVyeSA9IE5ldHdvcmtUb3BORmxvd1F1ZXJ5Ow=="},null]}