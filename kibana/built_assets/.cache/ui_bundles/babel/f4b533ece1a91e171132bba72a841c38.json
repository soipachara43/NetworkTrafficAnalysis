{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/triggers_actions_ui/public/application/components/builtin_action_types/webhook.js","dependencies":[{"path":"x-pack/plugins/triggers_actions_ui/public/application/components/builtin_action_types/webhook.js","mtime":1589249555545},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldEFjdGlvblR5cGUgPSBnZXRBY3Rpb25UeXBlOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfYWRkX21lc3NhZ2VfdmFyaWFibGVzID0gcmVxdWlyZSgiLi4vYWRkX21lc3NhZ2VfdmFyaWFibGVzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsKICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgewogIHZhciBfYXJyID0gW107CiAgdmFyIF9uID0gdHJ1ZTsKICB2YXIgX2QgPSBmYWxzZTsKICB2YXIgX2UgPSB1bmRlZmluZWQ7CgogIHRyeSB7CiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7CiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7CgogICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBfZCA9IHRydWU7CiAgICBfZSA9IGVycjsKICB9IGZpbmFsbHkgewogICAgdHJ5IHsKICAgICAgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAoX2QpIHRocm93IF9lOwogICAgfQogIH0KCiAgcmV0dXJuIF9hcnI7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOwp9Cgp2YXIgSFRUUF9WRVJCUyA9IFsncG9zdCcsICdwdXQnXTsKCmZ1bmN0aW9uIGdldEFjdGlvblR5cGUoKSB7CiAgcmV0dXJuIHsKICAgIGlkOiAnLndlYmhvb2snLAogICAgaWNvbkNsYXNzOiAnbG9nb1dlYmhvb2snLAogICAgc2VsZWN0TWVzc2FnZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLmNvbXBvbmVudHMuYnVpbHRpbkFjdGlvblR5cGVzLndlYmhvb2tBY3Rpb24uc2VsZWN0TWVzc2FnZVRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VuZCBhIHJlcXVlc3QgdG8gYSB3ZWIgc2VydmljZS4nCiAgICB9KSwKICAgIGFjdGlvblR5cGVUaXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLmNvbXBvbmVudHMuYnVpbHRpbkFjdGlvblR5cGVzLndlYmhvb2tBY3Rpb24uYWN0aW9uVHlwZVRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1dlYmhvb2sgZGF0YScKICAgIH0pLAogICAgdmFsaWRhdGVDb25uZWN0b3I6IGZ1bmN0aW9uIHZhbGlkYXRlQ29ubmVjdG9yKGFjdGlvbikgewogICAgICB2YXIgdmFsaWRhdGlvblJlc3VsdCA9IHsKICAgICAgICBlcnJvcnM6IHt9CiAgICAgIH07CiAgICAgIHZhciBlcnJvcnMgPSB7CiAgICAgICAgdXJsOiBuZXcgQXJyYXkoKSwKICAgICAgICBtZXRob2Q6IG5ldyBBcnJheSgpLAogICAgICAgIHVzZXI6IG5ldyBBcnJheSgpLAogICAgICAgIHBhc3N3b3JkOiBuZXcgQXJyYXkoKQogICAgICB9OwogICAgICB2YWxpZGF0aW9uUmVzdWx0LmVycm9ycyA9IGVycm9yczsKCiAgICAgIGlmICghYWN0aW9uLmNvbmZpZy51cmwpIHsKICAgICAgICBlcnJvcnMudXJsLnB1c2goX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLmNvbXBvbmVudHMuYnVpbHRpbkFjdGlvblR5cGVzLndlYmhvb2tBY3Rpb24uZXJyb3IucmVxdWlyZWRVcmxUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVUkwgaXMgcmVxdWlyZWQuJwogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgaWYgKCFhY3Rpb24uY29uZmlnLm1ldGhvZCkgewogICAgICAgIGVycm9ycy5tZXRob2QucHVzaChfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuc2VjdGlvbnMuYWRkQWN0aW9uLndlYmhvb2tBY3Rpb24uZXJyb3IucmVxdWlyZWRNZXRob2RUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNZXRob2QgaXMgcmVxdWlyZWQuJwogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgaWYgKCFhY3Rpb24uc2VjcmV0cy51c2VyICYmIGFjdGlvbi5zZWNyZXRzLnBhc3N3b3JkKSB7CiAgICAgICAgZXJyb3JzLnVzZXIucHVzaChfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuc2VjdGlvbnMuYWRkQWN0aW9uLndlYmhvb2tBY3Rpb24uZXJyb3IucmVxdWlyZWRIb3N0VGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVXNlcm5hbWUgaXMgcmVxdWlyZWQuJwogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgaWYgKCFhY3Rpb24uc2VjcmV0cy5wYXNzd29yZCAmJiBhY3Rpb24uc2VjcmV0cy51c2VyKSB7CiAgICAgICAgZXJyb3JzLnBhc3N3b3JkLnB1c2goX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnRyaWdnZXJzQWN0aW9uc1VJLnNlY3Rpb25zLmFkZEFjdGlvbi53ZWJob29rQWN0aW9uLmVycm9yLnJlcXVpcmVkUGFzc3dvcmRUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdQYXNzd29yZCBpcyByZXF1aXJlZC4nCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDsKICAgIH0sCiAgICB2YWxpZGF0ZVBhcmFtczogZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMoYWN0aW9uUGFyYW1zKSB7CiAgICAgIHZhciBfYWN0aW9uUGFyYW1zJGJvZHk7CgogICAgICB2YXIgdmFsaWRhdGlvblJlc3VsdCA9IHsKICAgICAgICBlcnJvcnM6IHt9CiAgICAgIH07CiAgICAgIHZhciBlcnJvcnMgPSB7CiAgICAgICAgYm9keTogbmV3IEFycmF5KCkKICAgICAgfTsKICAgICAgdmFsaWRhdGlvblJlc3VsdC5lcnJvcnMgPSBlcnJvcnM7CgogICAgICBpZiAoISgoX2FjdGlvblBhcmFtcyRib2R5ID0gYWN0aW9uUGFyYW1zLmJvZHkpID09PSBudWxsIHx8IF9hY3Rpb25QYXJhbXMkYm9keSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FjdGlvblBhcmFtcyRib2R5Lmxlbmd0aCkpIHsKICAgICAgICBlcnJvcnMuYm9keS5wdXNoKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy5lcnJvci5yZXF1aXJlZFdlYmhvb2tCb2R5VGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQm9keSBpcyByZXF1aXJlZC4nCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDsKICAgIH0sCiAgICBhY3Rpb25Db25uZWN0b3JGaWVsZHM6IFdlYmhvb2tBY3Rpb25Db25uZWN0b3JGaWVsZHMsCiAgICBhY3Rpb25QYXJhbXNGaWVsZHM6IFdlYmhvb2tQYXJhbXNGaWVsZHMKICB9Owp9Cgp2YXIgV2ViaG9va0FjdGlvbkNvbm5lY3RvckZpZWxkcyA9IGZ1bmN0aW9uIFdlYmhvb2tBY3Rpb25Db25uZWN0b3JGaWVsZHMoX3JlZikgewogIHZhciBhY3Rpb24gPSBfcmVmLmFjdGlvbiwKICAgICAgZWRpdEFjdGlvbkNvbmZpZyA9IF9yZWYuZWRpdEFjdGlvbkNvbmZpZywKICAgICAgZWRpdEFjdGlvblNlY3JldHMgPSBfcmVmLmVkaXRBY3Rpb25TZWNyZXRzLAogICAgICBlcnJvcnMgPSBfcmVmLmVycm9yczsKCiAgdmFyIF91c2VTdGF0ZSA9ICgwLCBfcmVhY3QudXNlU3RhdGUpKCcnKSwKICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksCiAgICAgIGh0dHBIZWFkZXJLZXkgPSBfdXNlU3RhdGUyWzBdLAogICAgICBzZXRIdHRwSGVhZGVyS2V5ID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKSgnJyksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgaHR0cEhlYWRlclZhbHVlID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0SHR0cEhlYWRlclZhbHVlID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSksCiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSwKICAgICAgaGFzSGVhZGVycyA9IF91c2VTdGF0ZTZbMF0sCiAgICAgIHNldEhhc0hlYWRlcnMgPSBfdXNlU3RhdGU2WzFdOwoKICB2YXIgX2FjdGlvbiRzZWNyZXRzID0gYWN0aW9uLnNlY3JldHMsCiAgICAgIHVzZXIgPSBfYWN0aW9uJHNlY3JldHMudXNlciwKICAgICAgcGFzc3dvcmQgPSBfYWN0aW9uJHNlY3JldHMucGFzc3dvcmQ7CiAgdmFyIF9hY3Rpb24kY29uZmlnID0gYWN0aW9uLmNvbmZpZywKICAgICAgbWV0aG9kID0gX2FjdGlvbiRjb25maWcubWV0aG9kLAogICAgICB1cmwgPSBfYWN0aW9uJGNvbmZpZy51cmwsCiAgICAgIGhlYWRlcnMgPSBfYWN0aW9uJGNvbmZpZy5oZWFkZXJzOwogIGVkaXRBY3Rpb25Db25maWcoJ21ldGhvZCcsICdwb3N0Jyk7IC8vIHNldCBtZXRob2QgdG8gUE9TVCBieSBkZWZhdWx0CgogIHZhciBoZWFkZXJFcnJvcnMgPSB7CiAgICBrZXlIZWFkZXI6IG5ldyBBcnJheSgpLAogICAgdmFsdWVIZWFkZXI6IG5ldyBBcnJheSgpCiAgfTsKCiAgaWYgKCFodHRwSGVhZGVyS2V5ICYmIGh0dHBIZWFkZXJWYWx1ZSkgewogICAgaGVhZGVyRXJyb3JzLmtleUhlYWRlci5wdXNoKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hZGRBY3Rpb24ud2ViaG9va0FjdGlvbi5lcnJvci5yZXF1aXJlZEhlYWRlcktleVRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnS2V5IGlzIHJlcXVpcmVkLicKICAgIH0pKTsKICB9CgogIGlmIChodHRwSGVhZGVyS2V5ICYmICFodHRwSGVhZGVyVmFsdWUpIHsKICAgIGhlYWRlckVycm9ycy52YWx1ZUhlYWRlci5wdXNoKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5zZWN0aW9ucy5hZGRBY3Rpb24ud2ViaG9va0FjdGlvbi5lcnJvci5yZXF1aXJlZEhlYWRlclZhbHVlVGV4dCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdWYWx1ZSBpcyByZXF1aXJlZC4nCiAgICB9KSk7CiAgfQoKICB2YXIgaGFzSGVhZGVyRXJyb3JzID0gaGVhZGVyRXJyb3JzLmtleUhlYWRlci5sZW5ndGggPiAwIHx8IGhlYWRlckVycm9ycy52YWx1ZUhlYWRlci5sZW5ndGggPiAwOwoKICBmdW5jdGlvbiBhZGRIZWFkZXIoKSB7CiAgICBpZiAoaGVhZGVycyAmJiAhIU9iamVjdC5rZXlzKGhlYWRlcnMpLmZpbmQoZnVuY3Rpb24gKGtleSkgewogICAgICByZXR1cm4ga2V5ID09PSBodHRwSGVhZGVyS2V5OwogICAgfSkpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciB1cGRhdGVkSGVhZGVycyA9IGhlYWRlcnMgPyBfb2JqZWN0U3ByZWFkKHt9LCBoZWFkZXJzLCBfZGVmaW5lUHJvcGVydHkoe30sIGh0dHBIZWFkZXJLZXksIGh0dHBIZWFkZXJWYWx1ZSkpIDogX2RlZmluZVByb3BlcnR5KHt9LCBodHRwSGVhZGVyS2V5LCBodHRwSGVhZGVyVmFsdWUpOwogICAgZWRpdEFjdGlvbkNvbmZpZygnaGVhZGVycycsIHVwZGF0ZWRIZWFkZXJzKTsKICAgIHNldEh0dHBIZWFkZXJLZXkoJycpOwogICAgc2V0SHR0cEhlYWRlclZhbHVlKCcnKTsKICB9CgogIGZ1bmN0aW9uIHZpZXdIZWFkZXJzKCkgewogICAgc2V0SGFzSGVhZGVycyghaGFzSGVhZGVycyk7CgogICAgaWYgKCFoYXNIZWFkZXJzKSB7CiAgICAgIGVkaXRBY3Rpb25Db25maWcoJ2hlYWRlcnMnLCB7fSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiByZW1vdmVIZWFkZXIoa2V5VG9SZW1vdmUpIHsKICAgIHZhciB1cGRhdGVkSGVhZGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcnMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHJldHVybiBrZXkgIT09IGtleVRvUmVtb3ZlOwogICAgfSkucmVkdWNlKGZ1bmN0aW9uIChoZWFkZXJUb1JlbW92ZSwga2V5KSB7CiAgICAgIGhlYWRlclRvUmVtb3ZlW2tleV0gPSBoZWFkZXJzW2tleV07CiAgICAgIHJldHVybiBoZWFkZXJUb1JlbW92ZTsKICAgIH0sIHt9KTsKICAgIGVkaXRBY3Rpb25Db25maWcoJ2hlYWRlcnMnLCB1cGRhdGVkSGVhZGVycyk7CiAgfQoKICB2YXIgaGVhZGVyQ29udHJvbDsKCiAgaWYgKGhhc0hlYWRlcnMpIHsKICAgIGhlYWRlckNvbnRyb2wgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgIHNpemU6ICJ4eHMiCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNSIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQWRkIGhlYWRlciIsCiAgICAgIGlkOiAieHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5hZGRIZWFkZXIiCiAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgIHNpemU6ICJtIgogICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgZ3V0dGVyU2l6ZTogInMiLAogICAgICBhbGlnbkl0ZW1zOiAiZmxleFN0YXJ0IgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICBpZDogIndlYmhvb2tIZWFkZXJLZXkiLAogICAgICBmdWxsV2lkdGg6IHRydWUsCiAgICAgIGVycm9yOiBoZWFkZXJFcnJvcnMua2V5SGVhZGVyLAogICAgICBpc0ludmFsaWQ6IGhhc0hlYWRlckVycm9ycyAmJiBodHRwSGVhZGVyS2V5ICE9PSB1bmRlZmluZWQsCiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5rZXlUZXh0RmllbGRMYWJlbCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0tleScKICAgICAgfSkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICBpc0ludmFsaWQ6IGhhc0hlYWRlckVycm9ycyAmJiBodHRwSGVhZGVyS2V5ICE9PSB1bmRlZmluZWQsCiAgICAgIG5hbWU6ICJrZXlIZWFkZXIiLAogICAgICB2YWx1ZTogaHR0cEhlYWRlcktleSwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIndlYmhvb2tIZWFkZXJzS2V5SW5wdXQiLAogICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICAgIHNldEh0dHBIZWFkZXJLZXkoZS50YXJnZXQudmFsdWUpOwogICAgICB9CiAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgZ3JvdzogZmFsc2UKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgIGlkOiAid2ViaG9va0hlYWRlclZhbHVlIiwKICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICBlcnJvcjogaGVhZGVyRXJyb3JzLnZhbHVlSGVhZGVyLAogICAgICBpc0ludmFsaWQ6IGhhc0hlYWRlckVycm9ycyAmJiBodHRwSGVhZGVyVmFsdWUgIT09IHVuZGVmaW5lZCwKICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLnZhbHVlVGV4dEZpZWxkTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdWYWx1ZScKICAgICAgfSkKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgZnVsbFdpZHRoOiB0cnVlLAogICAgICBpc0ludmFsaWQ6IGhhc0hlYWRlckVycm9ycyAmJiBodHRwSGVhZGVyVmFsdWUgIT09IHVuZGVmaW5lZCwKICAgICAgbmFtZTogInZhbHVlSGVhZGVyIiwKICAgICAgdmFsdWU6IGh0dHBIZWFkZXJWYWx1ZSwKICAgICAgImRhdGEtdGVzdC1zdWJqIjogIndlYmhvb2tIZWFkZXJzVmFsdWVJbnB1dCIsCiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgICAgc2V0SHR0cEhlYWRlclZhbHVlKGUudGFyZ2V0LnZhbHVlKTsKICAgICAgfQogICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICBoYXNFbXB0eUxhYmVsU3BhY2U6IHRydWUKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgICBpc0Rpc2FibGVkOiBoYXNIZWFkZXJzICYmIChoYXNIZWFkZXJFcnJvcnMgfHwgIWh0dHBIZWFkZXJLZXkgfHwgIWh0dHBIZWFkZXJWYWx1ZSksCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3ZWJob29rQWRkSGVhZGVyQnV0dG9uIiwKICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICByZXR1cm4gYWRkSGVhZGVyKCk7CiAgICAgIH0KICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQWRkIiwKICAgICAgaWQ6ICJ4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLmFkZEhlYWRlckJ1dHRvbiIKICAgIH0pKSkpKSk7CiAgfQoKICB2YXIgaGVhZGVyc0xpc3QgPSBPYmplY3Qua2V5cyhoZWFkZXJzIHx8IHt9KS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAga2V5OiBrZXksCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3ZWJob29rSGVhZGVyVGV4dCIsCiAgICAgIGd1dHRlclNpemU6ICJzIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLmRlbGV0ZUhlYWRlckJ1dHRvbicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0RlbGV0ZScsCiAgICAgICAgZGVzY3JpcHRpb246ICdEZWxldGUgSFRUUCBoZWFkZXInCiAgICAgIH0pLAogICAgICBpY29uVHlwZTogInRyYXNoIiwKICAgICAgY29sb3I6ICJkYW5nZXIiLAogICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgIHJldHVybiByZW1vdmVIZWFkZXIoa2V5KTsKICAgICAgfQogICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgZ3JvdzogZmFsc2UKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlEZXNjcmlwdGlvbkxpc3QsIHsKICAgICAgY29tcHJlc3NlZDogdHJ1ZQogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aURlc2NyaXB0aW9uTGlzdFRpdGxlLCBudWxsLCBrZXkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRGVzY3JpcHRpb25MaXN0RGVzY3JpcHRpb24sIG51bGwsIGhlYWRlcnNba2V5XSkpKSk7CiAgfSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBqdXN0aWZ5Q29udGVudDogInNwYWNlQmV0d2VlbiIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5tZXRob2RUZXh0RmllbGRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdNZXRob2QnCiAgICB9KQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTZWxlY3QsIHsKICAgIG5hbWU6ICJtZXRob2QiLAogICAgdmFsdWU6IG1ldGhvZCB8fCAncG9zdCcsCiAgICAiZGF0YS10ZXN0LXN1YmoiOiAid2ViaG9va01ldGhvZFNlbGVjdCIsCiAgICBvcHRpb25zOiBIVFRQX1ZFUkJTLm1hcChmdW5jdGlvbiAodmVyYikgewogICAgICByZXR1cm4gewogICAgICAgIHRleHQ6IHZlcmIudG9VcHBlckNhc2UoKSwKICAgICAgICB2YWx1ZTogdmVyYgogICAgICB9OwogICAgfSksCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICBlZGl0QWN0aW9uQ29uZmlnKCdtZXRob2QnLCBlLnRhcmdldC52YWx1ZSk7CiAgICB9CiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgaWQ6ICJ1cmwiLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZXJyb3I6IGVycm9ycy51cmwsCiAgICBpc0ludmFsaWQ6IGVycm9ycy51cmwubGVuZ3RoID4gMCAmJiB1cmwgIT09IHVuZGVmaW5lZCwKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi51cmxUZXh0RmllbGRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVUkwnCiAgICB9KQogIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgIG5hbWU6ICJ1cmwiLAogICAgaXNJbnZhbGlkOiBlcnJvcnMudXJsLmxlbmd0aCA+IDAgJiYgdXJsICE9PSB1bmRlZmluZWQsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICB2YWx1ZTogdXJsIHx8ICcnLAogICAgImRhdGEtdGVzdC1zdWJqIjogIndlYmhvb2tVcmxUZXh0IiwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgIGVkaXRBY3Rpb25Db25maWcoJ3VybCcsIGUudGFyZ2V0LnZhbHVlKTsKICAgIH0sCiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgaWYgKCF1cmwpIHsKICAgICAgICBlZGl0QWN0aW9uQ29uZmlnKCd1cmwnLCAnJyk7CiAgICAgIH0KICAgIH0KICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgaWQ6ICJ3ZWJob29rVXNlciIsCiAgICBmdWxsV2lkdGg6IHRydWUsCiAgICBlcnJvcjogZXJyb3JzLnVzZXIsCiAgICBpc0ludmFsaWQ6IGVycm9ycy51c2VyLmxlbmd0aCA+IDAgJiYgdXNlciAhPT0gdW5kZWZpbmVkLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLnVzZXJUZXh0RmllbGRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVc2VybmFtZScKICAgIH0pCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgaXNJbnZhbGlkOiBlcnJvcnMudXNlci5sZW5ndGggPiAwICYmIHVzZXIgIT09IHVuZGVmaW5lZCwKICAgIG5hbWU6ICJ1c2VyIiwKICAgIHZhbHVlOiB1c2VyIHx8ICcnLAogICAgImRhdGEtdGVzdC1zdWJqIjogIndlYmhvb2tVc2VySW5wdXQiLAogICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgZWRpdEFjdGlvblNlY3JldHMoJ3VzZXInLCBlLnRhcmdldC52YWx1ZSk7CiAgICB9LAogICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgIGlmICghdXNlcikgewogICAgICAgIGVkaXRBY3Rpb25TZWNyZXRzKCd1c2VyJywgJycpOwogICAgICB9CiAgICB9CiAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgaWQ6ICJ3ZWJob29rUGFzc3dvcmQiLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZXJyb3I6IGVycm9ycy5wYXNzd29yZCwKICAgIGlzSW52YWxpZDogZXJyb3JzLnBhc3N3b3JkLmxlbmd0aCA+IDAgJiYgcGFzc3dvcmQgIT09IHVuZGVmaW5lZCwKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5wYXNzd29yZFRleHRGaWVsZExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1Bhc3N3b3JkJwogICAgfSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGRQYXNzd29yZCwgewogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgbmFtZTogInBhc3N3b3JkIiwKICAgIGlzSW52YWxpZDogZXJyb3JzLnBhc3N3b3JkLmxlbmd0aCA+IDAgJiYgcGFzc3dvcmQgIT09IHVuZGVmaW5lZCwKICAgIHZhbHVlOiBwYXNzd29yZCB8fCAnJywKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3ZWJob29rUGFzc3dvcmRJbnB1dCIsCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICBlZGl0QWN0aW9uU2VjcmV0cygncGFzc3dvcmQnLCBlLnRhcmdldC52YWx1ZSk7CiAgICB9LAogICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgIGlmICghcGFzc3dvcmQpIHsKICAgICAgICBlZGl0QWN0aW9uU2VjcmV0cygncGFzc3dvcmQnLCAnJyk7CiAgICAgIH0KICAgIH0KICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogIm0iCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTd2l0Y2gsIHsKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3ZWJob29rVmlld0hlYWRlcnNTd2l0Y2giLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLnZpZXdIZWFkZXJzU3dpdGNoJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0FkZCBIVFRQIGhlYWRlcicKICAgIH0pLAogICAgY2hlY2tlZDogaGFzSGVhZGVycywKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHsKICAgICAgcmV0dXJuIHZpZXdIZWFkZXJzKCk7CiAgICB9CiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJtIgogIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBoYXNIZWFkZXJzICYmIE9iamVjdC5rZXlzKGhlYWRlcnMgfHwge30pLmxlbmd0aCA+IDAgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogIm0iCiAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgc2l6ZTogInh4cyIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoNSIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogIkhlYWRlcnMgaW4gdXNlIiwKICAgIGlkOiAieHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5odHRwSGVhZGVyc1RpdGxlIgogIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgIHNpemU6ICJzIgogIH0pLCBoZWFkZXJzTGlzdCkgOiBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICBzaXplOiAibSIKICB9KSwgaGVhZGVyQ29udHJvbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgc2l6ZTogIm0iCiAgfSkpKTsKfTsKCnZhciBXZWJob29rUGFyYW1zRmllbGRzID0gZnVuY3Rpb24gV2ViaG9va1BhcmFtc0ZpZWxkcyhfcmVmMykgewogIHZhciBhY3Rpb25QYXJhbXMgPSBfcmVmMy5hY3Rpb25QYXJhbXMsCiAgICAgIGVkaXRBY3Rpb24gPSBfcmVmMy5lZGl0QWN0aW9uLAogICAgICBpbmRleCA9IF9yZWYzLmluZGV4LAogICAgICBtZXNzYWdlVmFyaWFibGVzID0gX3JlZjMubWVzc2FnZVZhcmlhYmxlcywKICAgICAgZXJyb3JzID0gX3JlZjMuZXJyb3JzOwogIHZhciBib2R5ID0gYWN0aW9uUGFyYW1zLmJvZHk7CgogIHZhciBvblNlbGVjdE1lc3NhZ2VWYXJpYWJsZSA9IGZ1bmN0aW9uIG9uU2VsZWN0TWVzc2FnZVZhcmlhYmxlKHBhcmFtc1Byb3BlcnR5LCB2YXJpYWJsZSkgewogICAgZWRpdEFjdGlvbihwYXJhbXNQcm9wZXJ0eSwgKGJvZHkgIT09IG51bGwgJiYgYm9keSAhPT0gdm9pZCAwID8gYm9keSA6ICcnKS5jb25jYXQoIiB7eyIuY29uY2F0KHZhcmlhYmxlLCAifX0iKSksIGluZGV4KTsKICB9OwoKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICBpZDogIndlYmhvb2tCb2R5IiwKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2sudHJpZ2dlcnNBY3Rpb25zVUkuY29tcG9uZW50cy5idWlsdGluQWN0aW9uVHlwZXMud2ViaG9va0FjdGlvbi5ib2R5RmllbGRMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdCb2R5JwogICAgfSksCiAgICBpc0ludmFsaWQ6IGVycm9ycy5ib2R5Lmxlbmd0aCA+IDAgJiYgYm9keSAhPT0gdW5kZWZpbmVkLAogICAgZnVsbFdpZHRoOiB0cnVlLAogICAgZXJyb3I6IGVycm9ycy5ib2R5LAogICAgbGFiZWxBcHBlbmQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2FkZF9tZXNzYWdlX3ZhcmlhYmxlcy5BZGRNZXNzYWdlVmFyaWFibGVzLCB7CiAgICAgIG1lc3NhZ2VWYXJpYWJsZXM6IG1lc3NhZ2VWYXJpYWJsZXMsCiAgICAgIG9uU2VsZWN0RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiBvblNlbGVjdEV2ZW50SGFuZGxlcih2YXJpYWJsZSkgewogICAgICAgIHJldHVybiBvblNlbGVjdE1lc3NhZ2VWYXJpYWJsZSgnYm9keScsIHZhcmlhYmxlKTsKICAgICAgfSwKICAgICAgcGFyYW1zUHJvcGVydHk6ICJib2R5IgogICAgfSkKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29kZUVkaXRvciwgewogICAgbW9kZTogImpzb24iLAogICAgd2lkdGg6ICIxMDAlIiwKICAgIGhlaWdodDogIjIwMHB4IiwKICAgIHRoZW1lOiAiZ2l0aHViIiwKICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ3ZWJob29rQm9keUVkaXRvciIsCiAgICAiYXJpYS1sYWJlbCI6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay50cmlnZ2Vyc0FjdGlvbnNVSS5jb21wb25lbnRzLmJ1aWx0aW5BY3Rpb25UeXBlcy53ZWJob29rQWN0aW9uLmJvZHlDb2RlRWRpdG9yQXJpYUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0NvZGUgZWRpdG9yJwogICAgfSksCiAgICB2YWx1ZTogYm9keSB8fCAnJywKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShqc29uKSB7CiAgICAgIGVkaXRBY3Rpb24oJ2JvZHknLCBqc29uLCBpbmRleCk7CiAgICB9CiAgfSkpKTsKfTs="},null]}