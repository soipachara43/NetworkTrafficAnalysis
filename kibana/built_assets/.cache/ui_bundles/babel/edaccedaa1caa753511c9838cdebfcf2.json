{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/core/public/http/fetch.js","dependencies":[{"path":"src/core/public/http/fetch.js","mtime":1589249549302},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRmV0Y2ggPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF91cmwgPSByZXF1aXJlKCJ1cmwiKTsKCnZhciBfcnhqcyA9IHJlcXVpcmUoInJ4anMiKTsKCnZhciBfaHR0cF9mZXRjaF9lcnJvciA9IHJlcXVpcmUoIi4vaHR0cF9mZXRjaF9lcnJvciIpOwoKdmFyIF9odHRwX2ludGVyY2VwdF9jb250cm9sbGVyID0gcmVxdWlyZSgiLi9odHRwX2ludGVyY2VwdF9jb250cm9sbGVyIik7Cgp2YXIgX2ludGVyY2VwdCA9IHJlcXVpcmUoIi4vaW50ZXJjZXB0Iik7Cgp2YXIgX2h0dHBfaW50ZXJjZXB0X2hhbHRfZXJyb3IgPSByZXF1aXJlKCIuL2h0dHBfaW50ZXJjZXB0X2hhbHRfZXJyb3IiKTsKCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CgogIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsKCiAgdmFyIGtleSwgaTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOwoKICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07CiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7CiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgdmFyIHRhcmdldCA9IHt9OwogIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsKICB2YXIga2V5LCBpOwoKICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgewogICAga2V5ID0gc291cmNlS2V5c1tpXTsKICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBKU09OX0NPTlRFTlQgPSAvXihhcHBsaWNhdGlvblwvKGpzb258eC1qYXZhc2NyaXB0KXx0ZXh0XC8oeC0pP2phdmFzY3JpcHR8eC1qc29uKSg7LiopPyQvOwp2YXIgTkRKU09OX0NPTlRFTlQgPSAvXihhcHBsaWNhdGlvblwvbmRqc29uKSg7LiopPyQvOwoKdmFyIEZldGNoID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRmV0Y2gocGFyYW1zKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGZXRjaCk7CgogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJpbnRlcmNlcHRvcnMiLCBuZXcgU2V0KCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicmVxdWVzdENvdW50JCIsIG5ldyBfcnhqcy5CZWhhdmlvclN1YmplY3QoMCkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiZGVsZXRlIiwgdGhpcy5zaG9ydGhhbmQoJ0RFTEVURScpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImdldCIsIHRoaXMuc2hvcnRoYW5kKCdHRVQnKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJoZWFkIiwgdGhpcy5zaG9ydGhhbmQoJ0hFQUQnKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJvcHRpb25zIiwgdGhpcy5zaG9ydGhhbmQoJ29wdGlvbnMnKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwYXRjaCIsIHRoaXMuc2hvcnRoYW5kKCdQQVRDSCcpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInBvc3QiLCB0aGlzLnNob3J0aGFuZCgnUE9TVCcpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInB1dCIsIHRoaXMuc2hvcnRoYW5kKCdQVVQnKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJmZXRjaCIsCiAgICAvKiNfX1BVUkVfXyovCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocGF0aE9yT3B0aW9ucywgb3B0aW9ucykgewogICAgICAgIHZhciBvcHRpb25zV2l0aFBhdGgsIGNvbnRyb2xsZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG9wdGlvbnNXaXRoUGF0aCA9IHZhbGlkYXRlRmV0Y2hBcmd1bWVudHMocGF0aE9yT3B0aW9ucywgb3B0aW9ucyk7CiAgICAgICAgICAgICAgICBjb250cm9sbGVyID0gbmV3IF9odHRwX2ludGVyY2VwdF9jb250cm9sbGVyLkh0dHBJbnRlcmNlcHRDb250cm9sbGVyKCk7IC8vIFdlIHdyYXAgdGhlIGludGVyY2VwdGlvbiBpbiBhIHNlcGFyYXRlIHByb21pc2UgdG8gZW5zdXJlIHRoYXQgd2hlbgogICAgICAgICAgICAgICAgLy8gYSBoYWx0IGlzIGNhbGxlZCB3ZSBkbyBub3QgcmVzb2x2ZSBvciByZWplY3QsIGhhbHRpbmcgaGFuZGxpbmcgb2YgdGhlIHByb21pc2UuCgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKAogICAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmNlcHRlZE9wdGlvbnMsIGluaXRpYWxSZXNwb25zZSwgaW50ZXJjZXB0ZWRSZXNwb25zZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0Q291bnQkLm5leHQoX3RoaXMucmVxdWVzdENvdW50JC52YWx1ZSArIDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfaW50ZXJjZXB0LmludGVyY2VwdFJlcXVlc3QpKG9wdGlvbnNXaXRoUGF0aCwgX3RoaXMuaW50ZXJjZXB0b3JzLCBjb250cm9sbGVyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjZXB0ZWRPcHRpb25zID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxSZXNwb25zZSA9IF90aGlzLmZldGNoUmVzcG9uc2UoaW50ZXJjZXB0ZWRPcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfaW50ZXJjZXB0LmludGVyY2VwdFJlc3BvbnNlKShpbnRlcmNlcHRlZE9wdGlvbnMsIGluaXRpYWxSZXNwb25zZSwgX3RoaXMuaW50ZXJjZXB0b3JzLCBjb250cm9sbGVyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjZXB0ZWRSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNXaXRoUGF0aC5hc1Jlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW50ZXJjZXB0ZWRSZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGludGVyY2VwdGVkUmVzcG9uc2UuYm9keSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0LnQwIGluc3RhbmNlb2YgX2h0dHBfaW50ZXJjZXB0X2hhbHRfZXJyb3IuSHR0cEludGVyY2VwdEhhbHRFcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KF9jb250ZXh0LnQwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXF1ZXN0Q291bnQkLm5leHQoX3RoaXMucmVxdWVzdENvdW50JC52YWx1ZSAtIDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCAxMiwgMTUsIDE4XV0pOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MywgX3g0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRmV0Y2gsIFt7CiAgICBrZXk6ICJpbnRlcmNlcHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGludGVyY2VwdChpbnRlcmNlcHRvcikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLmFkZChpbnRlcmNlcHRvcik7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyLmludGVyY2VwdG9ycy5kZWxldGUoaW50ZXJjZXB0b3IpOwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZUFsbEludGVyY2VwdG9ycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsSW50ZXJjZXB0b3JzKCkgewogICAgICB0aGlzLmludGVyY2VwdG9ycy5jbGVhcigpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJlcXVlc3RDb3VudCQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcXVlc3RDb3VudCQoKSB7CiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RDb3VudCQuYXNPYnNlcnZhYmxlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlUmVxdWVzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChvcHRpb25zKSB7CiAgICAgIC8vIE1lcmdlIGFuZCBkZXN0cnVjdHVyZSBvcHRpb25zIG91dCB0aGF0IGFyZSBub3QgYXBwbGljYWJsZSB0byB0aGUgRmV0Y2ggQVBJLgogICAgICB2YXIgX21lcmdlID0gKDAsIF9sb2Rhc2gubWVyZ2UpKHsKICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogICAgICAgIHByZXBlbmRCYXNlUGF0aDogdHJ1ZQogICAgICB9LCBvcHRpb25zLCB7CiAgICAgICAgaGVhZGVyczogX29iamVjdFNwcmVhZCh7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgfSwgb3B0aW9ucy5oZWFkZXJzLCB7CiAgICAgICAgICAna2JuLXZlcnNpb24nOiB0aGlzLnBhcmFtcy5raWJhbmFWZXJzaW9uCiAgICAgICAgfSkKICAgICAgfSksCiAgICAgICAgICBxdWVyeSA9IF9tZXJnZS5xdWVyeSwKICAgICAgICAgIHNob3VsZFByZXBlbmRCYXNlUGF0aCA9IF9tZXJnZS5wcmVwZW5kQmFzZVBhdGgsCiAgICAgICAgICBhc1Jlc3BvbnNlID0gX21lcmdlLmFzUmVzcG9uc2UsCiAgICAgICAgICBhc1N5c3RlbVJlcXVlc3QgPSBfbWVyZ2UuYXNTeXN0ZW1SZXF1ZXN0LAogICAgICAgICAgZmV0Y2hPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9tZXJnZSwgWyJxdWVyeSIsICJwcmVwZW5kQmFzZVBhdGgiLCAiYXNSZXNwb25zZSIsICJhc1N5c3RlbVJlcXVlc3QiXSk7CgogICAgICB2YXIgdXJsID0gKDAsIF91cmwuZm9ybWF0KSh7CiAgICAgICAgcGF0aG5hbWU6IHNob3VsZFByZXBlbmRCYXNlUGF0aCA/IHRoaXMucGFyYW1zLmJhc2VQYXRoLnByZXBlbmQob3B0aW9ucy5wYXRoKSA6IG9wdGlvbnMucGF0aCwKICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgfSk7IC8vIE1ha2Ugc3VyZSB0aGUgc3lzdGVtIHJlcXVlc3QgaGVhZGVyIGlzIG9ubHkgcHJlc2VudCBpZiBgYXNTeXN0ZW1SZXF1ZXN0YCBpcyB0cnVlLgoKICAgICAgaWYgKGFzU3lzdGVtUmVxdWVzdCkgewogICAgICAgIGZldGNoT3B0aW9ucy5oZWFkZXJzWydrYm4tc3lzdGVtLXJlcXVlc3QnXSA9ICd0cnVlJzsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgZmV0Y2hPcHRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmZXRjaFJlc3BvbnNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmV0Y2hSZXNwb25zZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGZldGNoT3B0aW9ucykgewogICAgICAgIHZhciByZXF1ZXN0LCByZXNwb25zZSwgYm9keSwgX2VyciRuYW1lLCBjb250ZW50VHlwZSwgdGV4dCwgX2VyciRuYW1lMjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJlcXVlc3QgPSB0aGlzLmNyZWF0ZVJlcXVlc3QoZmV0Y2hPcHRpb25zKTsKICAgICAgICAgICAgICAgIGJvZHkgPSBudWxsOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5mZXRjaChyZXF1ZXN0KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzWyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IF9odHRwX2ZldGNoX2Vycm9yLkh0dHBGZXRjaEVycm9yKF9jb250ZXh0My50MC5tZXNzYWdlLCAoX2VyciRuYW1lID0gX2NvbnRleHQzLnQwLm5hbWUpICE9PSBudWxsICYmIF9lcnIkbmFtZSAhPT0gdm9pZCAwID8gX2VyciRuYW1lIDogJ0Vycm9yJywgcmVxdWVzdCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSB8fCAnJzsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTI7CgogICAgICAgICAgICAgICAgaWYgKCFOREpTT05fQ09OVEVOVC50ZXN0KGNvbnRlbnRUeXBlKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIGJvZHkgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIGlmICghSlNPTl9DT05URU5ULnRlc3QoY29udGVudFR5cGUpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjU7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgYm9keSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyNzsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7CgogICAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgICB0ZXh0ID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgYm9keSA9IEpTT04ucGFyc2UodGV4dCk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgYm9keSA9IHRleHQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM0OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQxID0gX2NvbnRleHQzWyJjYXRjaCJdKDEyKTsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBfaHR0cF9mZXRjaF9lcnJvci5IdHRwRmV0Y2hFcnJvcihfY29udGV4dDMudDEubWVzc2FnZSwgKF9lcnIkbmFtZTIgPSBfY29udGV4dDMudDEubmFtZSkgIT09IG51bGwgJiYgX2VyciRuYW1lMiAhPT0gdm9pZCAwID8gX2VyciRuYW1lMiA6ICdFcnJvcicsIHJlcXVlc3QsIHJlc3BvbnNlLCBib2R5KTsKCiAgICAgICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX2h0dHBfZmV0Y2hfZXJyb3IuSHR0cEZldGNoRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgJ0Vycm9yJywgcmVxdWVzdCwgcmVzcG9uc2UsIGJvZHkpOwoKICAgICAgICAgICAgICBjYXNlIDM2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgZmV0Y2hPcHRpb25zOiBmZXRjaE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsCiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXNwb25zZSwKICAgICAgICAgICAgICAgICAgYm9keTogYm9keQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMsIFtbMiwgOF0sIFsxMiwgMzFdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoUmVzcG9uc2UoX3g1KSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaFJlc3BvbnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaFJlc3BvbnNlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAic2hvcnRoYW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaG9ydGhhbmQobWV0aG9kKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwYXRoT3JPcHRpb25zLCBvcHRpb25zKSB7CiAgICAgICAgdmFyIG9wdGlvbnNXaXRoUGF0aCA9IHZhbGlkYXRlRmV0Y2hBcmd1bWVudHMocGF0aE9yT3B0aW9ucywgb3B0aW9ucyk7CiAgICAgICAgcmV0dXJuIF90aGlzMy5mZXRjaChfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zV2l0aFBhdGgsIHsKICAgICAgICAgIG1ldGhvZDogbWV0aG9kCiAgICAgICAgfSkpOwogICAgICB9OwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZldGNoOwp9KCk7Ci8qKgogKiBFbnN1cmUgdGhhdCB0aGUgb3ZlcmxvYWRlZCBhcmd1bWVudHMgdG8gYEh0dHBIYW5kbGVyYCBhcmUgdmFsaWQuCiAqLwoKCmV4cG9ydHMuRmV0Y2ggPSBGZXRjaDsKCnZhciB2YWxpZGF0ZUZldGNoQXJndW1lbnRzID0gZnVuY3Rpb24gdmFsaWRhdGVGZXRjaEFyZ3VtZW50cyhwYXRoT3JPcHRpb25zLCBvcHRpb25zKSB7CiAgdmFyIF9mdWxsT3B0aW9ucyRoZWFkZXJzOwoKICB2YXIgZnVsbE9wdGlvbnM7CgogIGlmICh0eXBlb2YgcGF0aE9yT3B0aW9ucyA9PT0gJ3N0cmluZycgJiYgKF90eXBlb2Yob3B0aW9ucykgPT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IHVuZGVmaW5lZCkpIHsKICAgIGZ1bGxPcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywgewogICAgICBwYXRoOiBwYXRoT3JPcHRpb25zCiAgICB9KTsKICB9IGVsc2UgaWYgKF90eXBlb2YocGF0aE9yT3B0aW9ucykgPT09ICdvYmplY3QnICYmIG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgewogICAgZnVsbE9wdGlvbnMgPSBwYXRoT3JPcHRpb25zOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgZmV0Y2ggYXJndW1lbnRzLCBtdXN0IGVpdGhlciBiZSAoc3RyaW5nLCBvYmplY3QpIG9yIChvYmplY3QsIHVuZGVmaW5lZCksIHJlY2VpdmVkICgiLmNvbmNhdChfdHlwZW9mKHBhdGhPck9wdGlvbnMpLCAiLCAiKS5jb25jYXQoX3R5cGVvZihvcHRpb25zKSwgIikiKSk7CiAgfQoKICB2YXIgaW52YWxpZEhlYWRlcnMgPSBPYmplY3Qua2V5cygoX2Z1bGxPcHRpb25zJGhlYWRlcnMgPSBmdWxsT3B0aW9ucy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfZnVsbE9wdGlvbnMkaGVhZGVycyAhPT0gdm9pZCAwID8gX2Z1bGxPcHRpb25zJGhlYWRlcnMgOiB7fSkuZmlsdGVyKGZ1bmN0aW9uIChoZWFkZXJOYW1lKSB7CiAgICByZXR1cm4gaGVhZGVyTmFtZS5zdGFydHNXaXRoKCdrYm4tJyk7CiAgfSk7CgogIGlmIChpbnZhbGlkSGVhZGVycy5sZW5ndGgpIHsKICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBmZXRjaCBoZWFkZXJzLCBoZWFkZXJzIGJlZ2lubmluZyB3aXRoIFwia2JuLVwiIGFyZSBub3QgYWxsb3dlZDogWyIuY29uY2F0KGludmFsaWRIZWFkZXJzLmpvaW4oJywnKSwgIl0iKSk7CiAgfQoKICByZXR1cm4gZnVsbE9wdGlvbnM7Cn07"},null]}