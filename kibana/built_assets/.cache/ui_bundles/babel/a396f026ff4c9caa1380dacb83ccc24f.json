{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/containers/case/use_bulk_update_case.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/containers/case/use_bulk_update_case.js","mtime":1589249553216},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnVzZVVwZGF0ZUNhc2VzID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoInJlYWN0Iik7Cgp2YXIgX3RvYXN0ZXJzID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cy90b2FzdGVycyIpOwoKdmFyIGkxOG4gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuL3RyYW5zbGF0aW9ucyIpKTsKCnZhciBfYXBpID0gcmVxdWlyZSgiLi9hcGkiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBkYXRhRmV0Y2hSZWR1Y2VyID0gZnVuY3Rpb24gZGF0YUZldGNoUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7CiAgc3dpdGNoIChhY3Rpb24udHlwZSkgewogICAgY2FzZSAnRkVUQ0hfSU5JVCc6CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGlzTG9hZGluZzogdHJ1ZSwKICAgICAgICBpc0Vycm9yOiBmYWxzZQogICAgICB9KTsKCiAgICBjYXNlICdGRVRDSF9TVUNDRVNTJzoKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgICBpc0Vycm9yOiBmYWxzZSwKICAgICAgICBpc1VwZGF0ZWQ6IGFjdGlvbi5wYXlsb2FkCiAgICAgIH0pOwoKICAgIGNhc2UgJ0ZFVENIX0ZBSUxVUkUnOgogICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3RhdGUsIHsKICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICAgIGlzRXJyb3I6IHRydWUKICAgICAgfSk7CgogICAgY2FzZSAnUkVTRVRfSVNfVVBEQVRFRCc6CiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSwgewogICAgICAgIGlzVXBkYXRlZDogZmFsc2UKICAgICAgfSk7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHN0YXRlOwogIH0KfTsKCnZhciB1c2VVcGRhdGVDYXNlcyA9IGZ1bmN0aW9uIHVzZVVwZGF0ZUNhc2VzKCkgewogIHZhciBfdXNlUmVkdWNlciA9ICgwLCBfcmVhY3QudXNlUmVkdWNlcikoZGF0YUZldGNoUmVkdWNlciwgewogICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgIGlzRXJyb3I6IGZhbHNlLAogICAgaXNVcGRhdGVkOiBmYWxzZQogIH0pLAogICAgICBfdXNlUmVkdWNlcjIgPSBfc2xpY2VkVG9BcnJheShfdXNlUmVkdWNlciwgMiksCiAgICAgIHN0YXRlID0gX3VzZVJlZHVjZXIyWzBdLAogICAgICBkaXNwYXRjaCA9IF91c2VSZWR1Y2VyMlsxXTsKCiAgdmFyIF91c2VTdGF0ZVRvYXN0ZXIgPSAoMCwgX3RvYXN0ZXJzLnVzZVN0YXRlVG9hc3RlcikoKSwKICAgICAgX3VzZVN0YXRlVG9hc3RlcjIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGVUb2FzdGVyLCAyKSwKICAgICAgZGlzcGF0Y2hUb2FzdGVyID0gX3VzZVN0YXRlVG9hc3RlcjJbMV07CgogIHZhciBkaXNwYXRjaFVwZGF0ZUNhc2VzID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGNhc2VzKSB7CiAgICB2YXIgY2FuY2VsID0gZmFsc2U7CiAgICB2YXIgYWJvcnRDdHJsID0gbmV3IEFib3J0Q29udHJvbGxlcigpOwoKICAgIHZhciBwYXRjaERhdGEgPQogICAgLyojX19QVVJFX18qLwogICAgZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHBhdGNoUmVzcG9uc2UsIHJlc3VsdENvdW50LCBmaXJzdFRpdGxlLCBtZXNzYWdlQXJncywgbWVzc2FnZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZFVENIX0lOSVQnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfYXBpLnBhdGNoQ2FzZXNTdGF0dXMpKGNhc2VzLCBhYm9ydEN0cmwuc2lnbmFsKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcGF0Y2hSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFjYW5jZWwpIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0Q291bnQgPSBPYmplY3Qua2V5cyhwYXRjaFJlc3BvbnNlKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgIGZpcnN0VGl0bGUgPSBwYXRjaFJlc3BvbnNlWzBdLnRpdGxlOwogICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0ZFVENIX1NVQ0NFU1MnLAogICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHRydWUKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VBcmdzID0gewogICAgICAgICAgICAgICAgICAgIHRvdGFsQ2FzZXM6IHJlc3VsdENvdW50LAogICAgICAgICAgICAgICAgICAgIGNhc2VUaXRsZTogcmVzdWx0Q291bnQgPT09IDEgPyBmaXJzdFRpdGxlIDogJycKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHJlc3VsdENvdW50ICYmIHBhdGNoUmVzcG9uc2VbMF0uc3RhdHVzID09PSAnb3BlbicgPyBpMThuLlJFT1BFTkVEX0NBU0VTKG1lc3NhZ2VBcmdzKSA6IGkxOG4uQ0xPU0VEX0NBU0VTKG1lc3NhZ2VBcmdzKTsKICAgICAgICAgICAgICAgICAgKDAsIF90b2FzdGVycy5kaXNwbGF5U3VjY2Vzc1RvYXN0KShtZXNzYWdlLCBkaXNwYXRjaFRvYXN0ZXIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgICAgaWYgKCFjYW5jZWwpIHsKICAgICAgICAgICAgICAgICAgKDAsIF90b2FzdGVycy5lcnJvclRvVG9hc3RlcikoewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpMThuLkVSUk9SX1RJVExFLAogICAgICAgICAgICAgICAgICAgIGVycm9yOiBfY29udGV4dC50MC5ib2R5ICYmIF9jb250ZXh0LnQwLmJvZHkubWVzc2FnZSA/IG5ldyBFcnJvcihfY29udGV4dC50MC5ib2R5Lm1lc3NhZ2UpIDogX2NvbnRleHQudDAsCiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hUb2FzdGVyOiBkaXNwYXRjaFRvYXN0ZXIKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAnRkVUQ0hfRkFJTFVSRScKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDhdXSk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaERhdGEoKSB7CiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICBwYXRjaERhdGEoKTsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIGNhbmNlbCA9IHRydWU7CiAgICAgIGFib3J0Q3RybC5hYm9ydCgpOwogICAgfTsKICB9LCBbXSk7CiAgdmFyIGRpc3BhdGNoUmVzZXRJc1VwZGF0ZWQgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7CiAgICBkaXNwYXRjaCh7CiAgICAgIHR5cGU6ICdSRVNFVF9JU19VUERBVEVEJwogICAgfSk7CiAgfSwgW10pOwogIHZhciB1cGRhdGVCdWxrU3RhdHVzID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGNhc2VzLCBzdGF0dXMpIHsKICAgIHZhciB1cGRhdGVDYXNlc1N0YXR1cyA9IGNhc2VzLm1hcChmdW5jdGlvbiAodGhlQ2FzZSkgewogICAgICByZXR1cm4gewogICAgICAgIHN0YXR1czogc3RhdHVzLAogICAgICAgIGlkOiB0aGVDYXNlLmlkLAogICAgICAgIHZlcnNpb246IHRoZUNhc2UudmVyc2lvbgogICAgICB9OwogICAgfSk7CiAgICBkaXNwYXRjaFVwZGF0ZUNhc2VzKHVwZGF0ZUNhc2VzU3RhdHVzKTsKICB9LCBbXSk7CiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0YXRlLCB7CiAgICB1cGRhdGVCdWxrU3RhdHVzOiB1cGRhdGVCdWxrU3RhdHVzLAogICAgZGlzcGF0Y2hSZXNldElzVXBkYXRlZDogZGlzcGF0Y2hSZXNldElzVXBkYXRlZAogIH0pOwp9OwoKZXhwb3J0cy51c2VVcGRhdGVDYXNlcyA9IHVzZVVwZGF0ZUNhc2VzOw=="},null]}