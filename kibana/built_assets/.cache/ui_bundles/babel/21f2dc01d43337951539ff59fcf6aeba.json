{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/index_lifecycle_management/public/legacy.js","dependencies":[{"path":"x-pack/legacy/plugins/index_lifecycle_management/public/legacy.js","mtime":1589249552240},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9uZXdfcGxhdGZvcm0gPSByZXF1aXJlKCJ1aS9uZXdfcGxhdGZvcm0iKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX3JvdXRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvcm91dGVzIikpOwoKdmFyIF9tYW5hZ2VtZW50ID0gcmVxdWlyZSgidWkvbWFuYWdlbWVudCIpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi9zcmMvbGVnYWN5L2NvcmVfcGx1Z2lucy91aV9tZXRyaWMvcHVibGljIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uL2NvbW1vbi9jb25zdGFudHMiKTsKCnZhciBfbnBfcmVhZHkgPSByZXF1aXJlKCIuL25wX3JlYWR5Iik7Cgp2YXIgX2V4dGVuZF9pbmRleF9tYW5hZ2VtZW50ID0gcmVxdWlyZSgiLi9ucF9yZWFkeS9leHRlbmRfaW5kZXhfbWFuYWdlbWVudCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgppZiAoX2Nocm9tZS5kZWZhdWx0LmdldEluamVjdGVkKCdpbG1VaUVuYWJsZWQnKSkgewogIC8vIFdlIGhhdmUgdG8gaW5pdGlhbGl6ZSB0aGlzIG91dHNpZGUgb2YgdGhlIE5QIGxpZmVjeWNsZSwgb3RoZXJ3aXNlIHRoZXNlIGV4dGVuc2lvbnMgd29uJ3QKICAvLyBiZSBhdmFpbGFibGUgaW4gSW5kZXggTWFuYWdlbWVudCB1bmxlc3MgdGhlIHVzZXIgdmlzaXRzIElMTSBmaXJzdC4KICBpZiAoX25ld19wbGF0Zm9ybS5ucFNldHVwLnBsdWdpbnMuaW5kZXhNYW5hZ2VtZW50KSB7CiAgICAoMCwgX2V4dGVuZF9pbmRleF9tYW5hZ2VtZW50LmFkZEFsbEV4dGVuc2lvbnMpKF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5wbHVnaW5zLmluZGV4TWFuYWdlbWVudC5leHRlbnNpb25zU2VydmljZSk7CiAgfSAvLyBUaGlzIG1ldGhvZCBoYW5kbGVzIHRoZSBjbGVhbnVwIG5lZWRlZCB3aGVuIHJvdXRlIGlzIHNjb3BlIGlzIGRlc3Ryb3llZC4gIEl0IGFsc28gcHJldmVudHMgQW5ndWxhcgogIC8vIGZyb20gZGVzdHJveWluZyBzY29wZSB3aGVuIHJvdXRlIGNoYW5nZXMgYW5kIGJvdGggb2xkIHJvdXRlIGFuZCBuZXcgcm91dGUgYXJlIHRoaXMgc2FtZSByb3V0ZS4KCgogIHZhciBtYW5hZ2VBbmd1bGFyTGlmZWN5Y2xlID0gZnVuY3Rpb24gbWFuYWdlQW5ndWxhckxpZmVjeWNsZSgkc2NvcGUsICRyb3V0ZSwgdW5tb3VudCkgewogICAgdmFyIGxhc3RSb3V0ZSA9ICRyb3V0ZS5jdXJyZW50OwogICAgdmFyIGRlcmVnaXN0ZXIgPSAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKCkgewogICAgICB2YXIgY3VycmVudFJvdXRlID0gJHJvdXRlLmN1cnJlbnQ7IC8vIGlmIHRlbXBsYXRlcyBhcmUgdGhlIHNhbWUgd2UgYXJlIG9uIHRoZSBzYW1lIHJvdXRlCgogICAgICBpZiAobGFzdFJvdXRlLiQkcm91dGUudGVtcGxhdGUgPT09IGN1cnJlbnRSb3V0ZS4kJHJvdXRlLnRlbXBsYXRlKSB7CiAgICAgICAgLy8gdGhpcyBwcmV2ZW50cyBhbmd1bGFyIGZyb20gZGVzdHJveWluZyBzY29wZQogICAgICAgICRyb3V0ZS5jdXJyZW50ID0gbGFzdFJvdXRlOwogICAgICB9CiAgICB9KTsKICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgICBpZiAoZGVyZWdpc3RlcikgewogICAgICAgIGRlcmVnaXN0ZXIoKTsKICAgICAgfQoKICAgICAgdW5tb3VudCgpOwogICAgfSk7CiAgfTsgLy8gT25jZSB0aGlzIGFwcCBubyBsb25nZXIgZGVwZW5kcyB1cG9uIEFuZ3VsYXIncyByb3V0aW5nIChlLmcuIGZvciB0aGUgInJlZGlyZWN0IiBzZXJ2aWNlKSwgd2UgY2FuCiAgLy8gdXNlIHRoZSBNYW5hZ2VtZW50IHBsdWdpbidzIEFQSSB0byByZWdpc3RlciB0aGlzIGFwcCB3aXRoaW4gdGhlIEVsYXN0aWNzZWFyY2ggc2VjdGlvbi4KCgogIHZhciBlc1NlY3Rpb24gPSBfbWFuYWdlbWVudC5tYW5hZ2VtZW50LmdldFNlY3Rpb24oJ2VsYXN0aWNzZWFyY2gnKTsKCiAgZXNTZWN0aW9uLnJlZ2lzdGVyKCdpbmRleF9saWZlY3ljbGVfcG9saWNpZXMnLCB7CiAgICB2aXNpYmxlOiB0cnVlLAogICAgZGlzcGxheTogX2NvbnN0YW50cy5QTFVHSU4uVElUTEUsCiAgICBvcmRlcjogMiwKICAgIHVybDogIiMiLmNvbmNhdChfY29uc3RhbnRzLkJBU0VfUEFUSCwgInBvbGljaWVzIikKICB9KTsKICB2YXIgUkVBQ1RfUk9PVF9JRCA9ICdpbmRleExpZmVjeWNsZU1hbmFnZW1lbnRSZWFjdFJvb3QnOwogIHZhciB0ZW1wbGF0ZSA9ICI8a2JuLW1hbmFnZW1lbnQtYXBwIHNlY3Rpb249XCJlbGFzdGljc2VhcmNoL2luZGV4X2xpZmVjeWNsZV9wb2xpY2llc1wiPlxuICAgIDxkaXYgaWQ9XCIiLmNvbmNhdChSRUFDVF9ST09UX0lELCAiXCIgY2xhc3M9XCJwb2xpY3lUYWJsZV9faG9yaXpvbnRhbFNjcm9sbENvbnRhaW5lclwiLz5cbiAgPC9rYm4tbWFuYWdlbWVudC1hcHA+XG4gICIpOwoKICBfcm91dGVzLmRlZmF1bHQud2hlbigiIi5jb25jYXQoX2NvbnN0YW50cy5CQVNFX1BBVEgsICI6dmlldz8vOmFjdGlvbj8vOmlkPyIpLCB7CiAgICB0ZW1wbGF0ZTogdGVtcGxhdGUsCiAgICBjb250cm9sbGVyQXM6ICdpbmRleExpZmVjeWNsZU1hbmFnZW1lbnQnLAogICAgY29udHJvbGxlcjogZnVuY3Rpb24gSW5kZXhMaWZlY3ljbGVNYW5hZ2VtZW50Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSwga2JuVXJsLCAkcm9vdFNjb3BlKSB7CiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleExpZmVjeWNsZU1hbmFnZW1lbnRDb250cm9sbGVyKTsKCiAgICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUkVBQ1RfUk9PVF9JRCk7CiAgICAgICAgdmFyIGNvcmUgPSBfbmV3X3BsYXRmb3JtLm5wU2V0dXAuY29yZTsKCiAgICAgICAgdmFyIGNvcmVEZXBlbmRlbmNpZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBjb3JlLCB7CiAgICAgICAgICBhcHBsaWNhdGlvbjogX29iamVjdFNwcmVhZCh7fSwgY29yZS5hcHBsaWNhdGlvbiwgewogICAgICAgICAgICByZWdpc3RlcjogZnVuY3Rpb24gcmVnaXN0ZXIoYXBwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgICAgICAgICAgdmFyIHVubW91bnRBcHA7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwLm1vdW50KF9vYmplY3RTcHJlYWQoe30sIF9uZXdfcGxhdGZvcm0ubnBTdGFydCksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgIGFwcEJhc2VQYXRoOiAnJywKICAgICAgICAgICAgICAgICAgICAgICAgICBvbkFwcExlYXZlOiBmdW5jdGlvbiBvbkFwcExlYXZlKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGFkYXB0IHRvIHVzZSBDb3JlJ3MgU2NvcGVkSGlzdG9yeQogICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvcnk6IHt9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgdW5tb3VudEFwcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZUFuZ3VsYXJMaWZlY3ljbGUoJHNjb3BlLCAkcm91dGUsIHVubW91bnRBcHApOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICB9KSkoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICB9KTsgLy8gVGhlIFBsdWdpbiBpbnRlcmZhY2Ugd29uJ3QgYWxsb3cgdXMgdG8gcGFzcyBfX0xFR0FDWSBhcyBhIHRoaXJkIGFyZ3VtZW50LCBzbyB3ZSdsbCBqdXN0CiAgICAgICAgLy8gc25lYWsgaXQgaW5zaWRlIG9mIHRoZSBwbHVnaW5zIGFyZ3VtZW50IGZvciBub3cuCgoKICAgICAgICB2YXIgcGx1Z2luRGVwZW5kZW5jaWVzID0gewogICAgICAgICAgX19MRUdBQ1k6IHsKICAgICAgICAgICAgcmVkaXJlY3Q6IGZ1bmN0aW9uIHJlZGlyZWN0KHBhdGgpIHsKICAgICAgICAgICAgICAkc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBrYm5VcmwucmVkaXJlY3QocGF0aCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNyZWF0ZVVpU3RhdHNSZXBvcnRlcjogX3B1YmxpYy5jcmVhdGVVaVN0YXRzUmVwb3J0ZXIKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBwbHVnaW4gPSAoMCwgX25wX3JlYWR5LmNyZWF0ZVBsdWdpbikoe30pOwogICAgICAgIHBsdWdpbi5zZXR1cChjb3JlRGVwZW5kZW5jaWVzLCBwbHVnaW5EZXBlbmRlbmNpZXMpOwogICAgICB9KTsKICAgIH0KICB9KTsKfQ=="},null]}