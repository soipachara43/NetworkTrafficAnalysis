{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/index_lifecycle_management/public/np_ready/plugin.js","dependencies":[{"path":"x-pack/legacy/plugins/index_lifecycle_management/public/np_ready/plugin.js","mtime":1589249552240},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluZGV4TGlmZWN5Y2xlTWFuYWdlbWVudFBsdWdpbiA9IHZvaWQgMDsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCnZhciBJbmRleExpZmVjeWNsZU1hbmFnZW1lbnRQbHVnaW4gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBJbmRleExpZmVjeWNsZU1hbmFnZW1lbnRQbHVnaW4oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kZXhMaWZlY3ljbGVNYW5hZ2VtZW50UGx1Z2luKTsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmRleExpZmVjeWNsZU1hbmFnZW1lbnRQbHVnaW4sIFt7CiAgICBrZXk6ICJzZXR1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoY29yZSwgcGx1Z2lucykgewogICAgICAvLyBFeHRyYWN0IGluZGl2aWR1YWwgY29yZSBkZXBlbmRlbmNpZXMuCiAgICAgIHZhciBhcHBsaWNhdGlvbiA9IGNvcmUuYXBwbGljYXRpb24sCiAgICAgICAgICB0b2FzdHMgPSBjb3JlLm5vdGlmaWNhdGlvbnMudG9hc3RzLAogICAgICAgICAgZmF0YWxFcnJvcnMgPSBjb3JlLmZhdGFsRXJyb3JzLAogICAgICAgICAgaHR0cCA9IGNvcmUuaHR0cDsgLy8gVGhlIFBsdWdpbiBpbnRlcmZhY2Ugd29uJ3QgYWxsb3cgdXMgdG8gcGFzcyBfX0xFR0FDWSBhcyBhIHRoaXJkIGFyZ3VtZW50LCBzbyB3ZSdsbCBqdXN0CiAgICAgIC8vIHNuZWFrIGl0IGluc2lkZSBvZiB0aGUgcGx1Z2lucyBwYXJhbWV0ZXIgZm9yIG5vdy4KCiAgICAgIHZhciBfX0xFR0FDWSA9IHBsdWdpbnMuX19MRUdBQ1k7CiAgICAgIGFwcGxpY2F0aW9uLnJlZ2lzdGVyKHsKICAgICAgICBpZDogX2NvbnN0YW50cy5QTFVHSU4uSUQsCiAgICAgICAgdGl0bGU6IF9jb25zdGFudHMuUExVR0lOLlRJVExFLAogICAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudChjb25maWcsIG1vdW50UG9pbnQpIHsKICAgICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICAgIHZhciBfY29uZmlnJGNvcmUsIGRvY0xpbmtzLCBJMThuQ29udGV4dCwgZWxlbWVudCwgX3JlZiwgcmVuZGVyQXBwOwoKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIF9jb25maWckY29yZSA9IGNvbmZpZy5jb3JlLCBkb2NMaW5rcyA9IF9jb25maWckY29yZS5kb2NMaW5rcywgSTE4bkNvbnRleHQgPSBfY29uZmlnJGNvcmUuaTE4bi5Db250ZXh0OwogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBtb3VudFBvaW50LmVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGltcG9ydCgnLi9hcHBsaWNhdGlvbicpOwoKICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgIHJlbmRlckFwcCA9IF9yZWYucmVuZGVyQXBwOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlbmRlckFwcCh7CiAgICAgICAgICAgICAgICAgICAgICBsZWdhY3k6IF9vYmplY3RTcHJlYWQoe30sIF9fTEVHQUNZKSwKICAgICAgICAgICAgICAgICAgICAgIEkxOG5Db250ZXh0OiBJMThuQ29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgIGh0dHA6IGh0dHAsCiAgICAgICAgICAgICAgICAgICAgICB0b2FzdHM6IHRvYXN0cywKICAgICAgICAgICAgICAgICAgICAgIGZhdGFsRXJyb3JzOiBmYXRhbEVycm9ycywKICAgICAgICAgICAgICAgICAgICAgIGRvY0xpbmtzOiBkb2NMaW5rcywKICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgICAgfSkpKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoY29yZSwgcGx1Z2lucykge30KICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge30KICB9XSk7CgogIHJldHVybiBJbmRleExpZmVjeWNsZU1hbmFnZW1lbnRQbHVnaW47Cn0oKTsKCmV4cG9ydHMuSW5kZXhMaWZlY3ljbGVNYW5hZ2VtZW50UGx1Z2luID0gSW5kZXhMaWZlY3ljbGVNYW5hZ2VtZW50UGx1Z2luOw=="},null]}