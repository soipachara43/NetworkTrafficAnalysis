{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/input_control_vis/public/control/range_control_factory.js","dependencies":[{"path":"src/legacy/core_plugins/input_control_vis/public/control/range_control_factory.js","mtime":1589249549642},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMucmFuZ2VDb250cm9sRmFjdG9yeSA9IHJhbmdlQ29udHJvbEZhY3Rvcnk7CmV4cG9ydHMuUmFuZ2VDb250cm9sID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9jb250cm9sID0gcmVxdWlyZSgiLi9jb250cm9sIik7Cgp2YXIgX3JhbmdlX2ZpbHRlcl9tYW5hZ2VyID0gcmVxdWlyZSgiLi9maWx0ZXJfbWFuYWdlci9yYW5nZV9maWx0ZXJfbWFuYWdlciIpOwoKdmFyIF9jcmVhdGVfc2VhcmNoX3NvdXJjZSA9IHJlcXVpcmUoIi4vY3JlYXRlX3NlYXJjaF9zb3VyY2UiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsKICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7CiAgICByZXR1cm4gY2FsbDsKICB9CgogIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOwp9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOwogIH07CiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsKfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7CiAgaWYgKHNlbGYgPT09IHZvaWQgMCkgewogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsKICB9CgogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsKICB9CgogIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7Cn0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7CiAgICBvLl9fcHJvdG9fXyA9IHA7CiAgICByZXR1cm4gbzsKICB9OwoKICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIG1pbk1heEFnZyA9IGZ1bmN0aW9uIG1pbk1heEFnZyhmaWVsZCkgewogIHZhciBhZ2dCb2R5ID0ge307CgogIGlmIChmaWVsZCkgewogICAgaWYgKGZpZWxkLnNjcmlwdGVkKSB7CiAgICAgIGFnZ0JvZHkuc2NyaXB0ID0gewogICAgICAgIHNvdXJjZTogZmllbGQuc2NyaXB0LAogICAgICAgIGxhbmc6IGZpZWxkLmxhbmcKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGFnZ0JvZHkuZmllbGQgPSBmaWVsZC5uYW1lOwogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIG1heEFnZzogewogICAgICBtYXg6IGFnZ0JvZHkKICAgIH0sCiAgICBtaW5BZ2c6IHsKICAgICAgbWluOiBhZ2dCb2R5CiAgICB9CiAgfTsKfTsKCnZhciBSYW5nZUNvbnRyb2wgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29udHJvbCkgewogIF9pbmhlcml0cyhSYW5nZUNvbnRyb2wsIF9Db250cm9sKTsKCiAgZnVuY3Rpb24gUmFuZ2VDb250cm9sKGNvbnRyb2xQYXJhbXMsIGZpbHRlck1hbmFnZXIsIHVzZVRpbWVGaWx0ZXIsIFNlYXJjaFNvdXJjZSwgZGVwcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYW5nZUNvbnRyb2wpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFJhbmdlQ29udHJvbCkuY2FsbCh0aGlzLCBjb250cm9sUGFyYW1zLCBmaWx0ZXJNYW5hZ2VyLCB1c2VUaW1lRmlsdGVyLCBTZWFyY2hTb3VyY2UpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJ0aW1lZmlsdGVyIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJhYm9ydENvbnRyb2xsZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm1pbiIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAibWF4Iiwgdm9pZCAwKTsKCiAgICBfdGhpcy50aW1lZmlsdGVyID0gZGVwcy5kYXRhLnF1ZXJ5LnRpbWVmaWx0ZXIudGltZWZpbHRlcjsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhSYW5nZUNvbnRyb2wsIFt7CiAgICBrZXk6ICJmZXRjaCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgaW5kZXhQYXR0ZXJuLCBmaWVsZE5hbWUsIGFnZ3MsIHNlYXJjaFNvdXJjZSwgYWJvcnRTaWduYWwsIHJlc3AsIG1pbiwgbWF4OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBmZXRjaAogICAgICAgICAgICAgICAgaWYgKHRoaXMuYWJvcnRDb250cm9sbGVyKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuYWJvcnRDb250cm9sbGVyLmFib3J0KCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CiAgICAgICAgICAgICAgICBpbmRleFBhdHRlcm4gPSB0aGlzLmZpbHRlck1hbmFnZXIuZ2V0SW5kZXhQYXR0ZXJuKCk7CgogICAgICAgICAgICAgICAgaWYgKGluZGV4UGF0dGVybikgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlKCgwLCBfY29udHJvbC5ub0luZGV4UGF0dGVybk1zZykodGhpcy5jb250cm9sUGFyYW1zLmluZGV4UGF0dGVybikpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGZpZWxkTmFtZSA9IHRoaXMuZmlsdGVyTWFuYWdlci5maWVsZE5hbWU7CiAgICAgICAgICAgICAgICBhZ2dzID0gbWluTWF4QWdnKGluZGV4UGF0dGVybi5maWVsZHMuZ2V0QnlOYW1lKGZpZWxkTmFtZSkpOwogICAgICAgICAgICAgICAgc2VhcmNoU291cmNlID0gKDAsIF9jcmVhdGVfc2VhcmNoX3NvdXJjZS5jcmVhdGVTZWFyY2hTb3VyY2UpKHRoaXMuU2VhcmNoU291cmNlLCBudWxsLCBpbmRleFBhdHRlcm4sIGFnZ3MsIHRoaXMudXNlVGltZUZpbHRlciwgW10sIHRoaXMudGltZWZpbHRlcik7CiAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbCA9IHRoaXMuYWJvcnRDb250cm9sbGVyLnNpZ25hbDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBzZWFyY2hTb3VyY2UuZmV0Y2goewogICAgICAgICAgICAgICAgICBhYm9ydFNpZ25hbDogYWJvcnRTaWduYWwKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNjsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMTApOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0LnQwLm5hbWUgPT09ICdBYm9ydEVycm9yJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZShfaTE4bi5pMThuLnRyYW5zbGF0ZSgnaW5wdXRDb250cm9sLnJhbmdlQ29udHJvbC51bmFibGVUb0ZldGNoVG9vbHRpcCcsIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVbmFibGUgdG8gZmV0Y2ggcmFuZ2UgbWluIGFuZCBtYXgsIGVycm9yOiB7ZXJyb3JNZXNzYWdlfScsCiAgICAgICAgICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogX2NvbnRleHQudDAubWVzc2FnZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG1pbiA9IF9sb2Rhc2guZGVmYXVsdC5nZXQocmVzcCwgJ2FnZ3JlZ2F0aW9ucy5taW5BZ2cudmFsdWUnLCBudWxsKTsKICAgICAgICAgICAgICAgIG1heCA9IF9sb2Rhc2guZGVmYXVsdC5nZXQocmVzcCwgJ2FnZ3JlZ2F0aW9ucy5tYXhBZ2cudmFsdWUnLCBudWxsKTsKCiAgICAgICAgICAgICAgICBpZiAoIShtaW4gPT09IG51bGwgfHwgbWF4ID09PSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgoMCwgX2NvbnRyb2wubm9WYWx1ZXNEaXNhYmxlTXNnKShmaWVsZE5hbWUsIGluZGV4UGF0dGVybi50aXRsZSkpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjc6CiAgICAgICAgICAgICAgICB0aGlzLm1pbiA9IG1pbjsKICAgICAgICAgICAgICAgIHRoaXMubWF4ID0gbWF4OwogICAgICAgICAgICAgICAgdGhpcy5lbmFibGUgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1sxMCwgMTZdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoKCkgewogICAgICAgIHJldHVybiBfZmV0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgaWYgKHRoaXMuYWJvcnRDb250cm9sbGVyKSB0aGlzLmFib3J0Q29udHJvbGxlci5hYm9ydCgpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJhbmdlQ29udHJvbDsKfShfY29udHJvbC5Db250cm9sKTsKCmV4cG9ydHMuUmFuZ2VDb250cm9sID0gUmFuZ2VDb250cm9sOwoKZnVuY3Rpb24gcmFuZ2VDb250cm9sRmFjdG9yeShfeCwgX3gyLCBfeDMsIF94NCkgewogIHJldHVybiBfcmFuZ2VDb250cm9sRmFjdG9yeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfcmFuZ2VDb250cm9sRmFjdG9yeSgpIHsKICBfcmFuZ2VDb250cm9sRmFjdG9yeSA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihjb250cm9sUGFyYW1zLCB1c2VUaW1lRmlsdGVyLCBTZWFyY2hTb3VyY2UsIGRlcHMpIHsKICAgIHZhciBfcmVmLCBfcmVmMiwgZGF0YVBsdWdpblN0YXJ0LCBpbmRleFBhdHRlcm47CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZGVwcy5jb3JlLmdldFN0YXJ0U2VydmljZXMoKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKTsKICAgICAgICAgICAgZGF0YVBsdWdpblN0YXJ0ID0gX3JlZjJbMV0uZGF0YTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICByZXR1cm4gZGF0YVBsdWdpblN0YXJ0LmluZGV4UGF0dGVybnMuZ2V0KGNvbnRyb2xQYXJhbXMuaW5kZXhQYXR0ZXJuKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIGluZGV4UGF0dGVybiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgbmV3IFJhbmdlQ29udHJvbChjb250cm9sUGFyYW1zLCBuZXcgX3JhbmdlX2ZpbHRlcl9tYW5hZ2VyLlJhbmdlRmlsdGVyTWFuYWdlcihjb250cm9sUGFyYW1zLmlkLCBjb250cm9sUGFyYW1zLmZpZWxkTmFtZSwgaW5kZXhQYXR0ZXJuLCBkZXBzLmRhdGEucXVlcnkuZmlsdGVyTWFuYWdlciksIHVzZVRpbWVGaWx0ZXIsIFNlYXJjaFNvdXJjZSwgZGVwcykpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX3JhbmdlQ29udHJvbEZhY3RvcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},null]}