{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/core/public/plugins/plugin.js","dependencies":[{"path":"src/core/public/plugins/plugin.js","mtime":1589249549322},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBsdWdpbldyYXBwZXIgPSB2b2lkIDA7Cgp2YXIgX3J4anMgPSByZXF1aXJlKCJyeGpzIik7Cgp2YXIgX29wZXJhdG9ycyA9IHJlcXVpcmUoInJ4anMvb3BlcmF0b3JzIik7Cgp2YXIgX3BsdWdpbl9sb2FkZXIgPSByZXF1aXJlKCIuL3BsdWdpbl9sb2FkZXIiKTsKCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Ci8qKgogKiBMaWdodHdlaWdodCB3cmFwcGVyIGFyb3VuZCBkaXNjb3ZlcmVkIHBsdWdpbiB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBpbnN0YW50aWF0aW5nCiAqIHBsdWdpbiBhbmQgZGlzcGF0Y2hpbmcgcHJvcGVyIGNvbnRleHQgYW5kIGRlcGVuZGVuY2llcyBpbnRvIHBsdWdpbidzIGxpZmVjeWNsZSBob29rcy4KICoKICogQGludGVybmFsCiAqLwoKCnZhciBQbHVnaW5XcmFwcGVyID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUGx1Z2luV3JhcHBlcihkaXNjb3ZlcmVkUGx1Z2luLCBvcGFxdWVJZCwgaW5pdGlhbGl6ZXJDb250ZXh0KSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luV3JhcHBlcik7CgogICAgdGhpcy5kaXNjb3ZlcmVkUGx1Z2luID0gZGlzY292ZXJlZFBsdWdpbjsKICAgIHRoaXMub3BhcXVlSWQgPSBvcGFxdWVJZDsKICAgIHRoaXMuaW5pdGlhbGl6ZXJDb250ZXh0ID0gaW5pdGlhbGl6ZXJDb250ZXh0OwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAibmFtZSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJjb25maWdQYXRoIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInJlcXVpcmVkUGx1Z2lucyIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJvcHRpb25hbFBsdWdpbnMiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaW5pdGlhbGl6ZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiaW5zdGFuY2UiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic3RhcnREZXBlbmRlbmNpZXMkIiwgbmV3IF9yeGpzLlN1YmplY3QoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJzdGFydERlcGVuZGVuY2llcyIsIHRoaXMuc3RhcnREZXBlbmRlbmNpZXMkLnBpcGUoKDAsIF9vcGVyYXRvcnMuZmlyc3QpKCkpLnRvUHJvbWlzZSgpKTsKCiAgICB0aGlzLm5hbWUgPSBkaXNjb3ZlcmVkUGx1Z2luLmlkOwogICAgdGhpcy5jb25maWdQYXRoID0gZGlzY292ZXJlZFBsdWdpbi5jb25maWdQYXRoOwogICAgdGhpcy5yZXF1aXJlZFBsdWdpbnMgPSBkaXNjb3ZlcmVkUGx1Z2luLnJlcXVpcmVkUGx1Z2luczsKICAgIHRoaXMub3B0aW9uYWxQbHVnaW5zID0gZGlzY292ZXJlZFBsdWdpbi5vcHRpb25hbFBsdWdpbnM7CiAgfQogIC8qKgogICAqIExvYWRzIHRoZSBwbHVnaW4ncyBidW5kbGUgaW50byB0aGUgYnJvd3Nlci4gU2hvdWxkIGJlIGNhbGxlZCBpbiBwYXJhbGxlbCB3aXRoIGFsbCBwbHVnaW5zCiAgICogdXNpbmcgYFByb21pc2UuYWxsYC4gTXVzdCBiZSBjYWxsZWQgYmVmb3JlIGBzZXR1cGAuCiAgICogQHBhcmFtIGFkZEJhc2VQYXRoIEZ1bmN0aW9uIHRoYXQgYWRkcyB0aGUgYmFzZSBwYXRoIHRvIGEgc3RyaW5nIGZvciBwbHVnaW4gYnVuZGxlIHBhdGguCiAgICovCgoKICBfY3JlYXRlQ2xhc3MoUGx1Z2luV3JhcHBlciwgW3sKICAgIGtleTogImxvYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9sb2FkID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShhZGRCYXNlUGF0aCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfcGx1Z2luX2xvYWRlci5sb2FkUGx1Z2luQnVuZGxlKShhZGRCYXNlUGF0aCwgdGhpcy5uYW1lKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplciA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBsb2FkKF94KSB7CiAgICAgICAgcmV0dXJuIF9sb2FkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBsb2FkOwogICAgfSgpCiAgICAvKioKICAgICAqIEluc3RhbnRpYXRlcyBwbHVnaW4gYW5kIGNhbGxzIGBzZXR1cGAgZnVuY3Rpb24gZXhwb3NlZCBieSB0aGUgcGx1Z2luIGluaXRpYWxpemVyLgogICAgICogQHBhcmFtIHNldHVwQ29udGV4dCBDb250ZXh0IHRoYXQgY29uc2lzdHMgb2YgdmFyaW91cyBjb3JlIHNlcnZpY2VzIHRhaWxvcmVkIHNwZWNpZmljYWxseQogICAgICogZm9yIHRoZSBgc2V0dXBgIGxpZmVjeWNsZSBldmVudC4KICAgICAqIEBwYXJhbSBwbHVnaW5zIFRoZSBkaWN0aW9uYXJ5IHdoZXJlIHRoZSBrZXkgaXMgdGhlIGRlcGVuZGVuY3kgbmFtZSBhbmQgdGhlIHZhbHVlCiAgICAgKiBpcyB0aGUgY29udHJhY3QgcmV0dXJuZWQgYnkgdGhlIGRlcGVuZGVuY3kncyBgc2V0dXBgIGZ1bmN0aW9uLgogICAgICovCgogIH0sIHsKICAgIGtleTogInNldHVwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc2V0dXAgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihzZXR1cENvbnRleHQsIHBsdWdpbnMpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUGx1Z2luSW5zdGFuY2UoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2Uuc2V0dXAoc2V0dXBDb250ZXh0LCBwbHVnaW5zKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gc2V0dXAoX3gyLCBfeDMpIHsKICAgICAgICByZXR1cm4gX3NldHVwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZXR1cDsKICAgIH0oKQogICAgLyoqCiAgICAgKiBDYWxscyBgc2V0dXBgIGZ1bmN0aW9uIGV4cG9zZWQgYnkgdGhlIGluaXRpYWxpemVkIHBsdWdpbi4KICAgICAqIEBwYXJhbSBzdGFydENvbnRleHQgQ29udGV4dCB0aGF0IGNvbnNpc3RzIG9mIHZhcmlvdXMgY29yZSBzZXJ2aWNlcyB0YWlsb3JlZCBzcGVjaWZpY2FsbHkKICAgICAqIGZvciB0aGUgYHN0YXJ0YCBsaWZlY3ljbGUgZXZlbnQuCiAgICAgKiBAcGFyYW0gcGx1Z2lucyBUaGUgZGljdGlvbmFyeSB3aGVyZSB0aGUga2V5IGlzIHRoZSBkZXBlbmRlbmN5IG5hbWUgYW5kIHRoZSB2YWx1ZQogICAgICogaXMgdGhlIGNvbnRyYWN0IHJldHVybmVkIGJ5IHRoZSBkZXBlbmRlbmN5J3MgYHN0YXJ0YCBmdW5jdGlvbi4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N0YXJ0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoc3RhcnRDb250ZXh0LCBwbHVnaW5zKSB7CiAgICAgICAgdmFyIHN0YXJ0Q29udHJhY3Q7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMuaW5zdGFuY2UgPT09IHVuZGVmaW5lZCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlBsdWdpbiBcIiIuY29uY2F0KHRoaXMubmFtZSwgIlwiIGNhbid0IGJlIHN0YXJ0ZWQgc2luY2UgaXQgaXNuJ3Qgc2V0IHVwLiIpKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2Uuc3RhcnQoc3RhcnRDb250ZXh0LCBwbHVnaW5zKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgc3RhcnRDb250cmFjdCA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgdGhpcy5zdGFydERlcGVuZGVuY2llcyQubmV4dChbc3RhcnRDb250ZXh0LCBwbHVnaW5zXSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgc3RhcnRDb250cmFjdCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHN0YXJ0KF94NCwgX3g1KSB7CiAgICAgICAgcmV0dXJuIF9zdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc3RhcnQ7CiAgICB9KCkKICAgIC8qKgogICAgICogQ2FsbHMgb3B0aW9uYWwgYHN0b3BgIGZ1bmN0aW9uIGV4cG9zZWQgYnkgdGhlIHBsdWdpbiBpbml0aWFsaXplci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJzdG9wIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgewogICAgICBpZiAodGhpcy5pbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJQbHVnaW4gXCIiLmNvbmNhdCh0aGlzLm5hbWUsICJcIiBjYW4ndCBiZSBzdG9wcGVkIHNpbmNlIGl0IGlzbid0IHNldCB1cC4iKSk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2YgdGhpcy5pbnN0YW5jZS5zdG9wID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdGhpcy5pbnN0YW5jZS5zdG9wKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuaW5zdGFuY2UgPSB1bmRlZmluZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlUGx1Z2luSW5zdGFuY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9jcmVhdGVQbHVnaW5JbnN0YW5jZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBpbnN0YW5jZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5pbml0aWFsaXplciA9PT0gdW5kZWZpbmVkKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiUGx1Z2luIFwiIi5jb25jYXQodGhpcy5uYW1lLCAiXCIgY2FuJ3QgYmUgc2V0dXAgc2luY2UgaXRzIGJ1bmRsZSBpc24ndCBsb2FkZWQuIikpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuaW5pdGlhbGl6ZXIodGhpcy5pbml0aWFsaXplckNvbnRleHQpOwoKICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBpbnN0YW5jZS5zZXR1cCAhPT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkluc3RhbmNlIG9mIHBsdWdpbiBcIiIuY29uY2F0KHRoaXMubmFtZSwgIlwiIGRvZXMgbm90IGRlZmluZSBcInNldHVwXCIgZnVuY3Rpb24uIikpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgaW5zdGFuY2Uuc3RhcnQgIT09ICdmdW5jdGlvbicpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnN0YW5jZSBvZiBwbHVnaW4gXCIiLmNvbmNhdCh0aGlzLm5hbWUsICJcIiBkb2VzIG5vdCBkZWZpbmUgXCJzdGFydFwiIGZ1bmN0aW9uLiIpKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIGluc3RhbmNlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNyZWF0ZVBsdWdpbkluc3RhbmNlKCkgewogICAgICAgIHJldHVybiBfY3JlYXRlUGx1Z2luSW5zdGFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZVBsdWdpbkluc3RhbmNlOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gUGx1Z2luV3JhcHBlcjsKfSgpOwoKZXhwb3J0cy5QbHVnaW5XcmFwcGVyID0gUGx1Z2luV3JhcHBlcjs="},null]}