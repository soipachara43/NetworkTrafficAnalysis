{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/monitoring/public/views/logstash/pipelines/index.js","dependencies":[{"path":"x-pack/legacy/plugins/monitoring/public/views/logstash/pipelines/index.js","mtime":1589249552636},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX3JvdXRlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicGx1Z2lucy9tb25pdG9yaW5nL25wX2ltcG9ydHMvdWkvcm91dGVzIikpOwoKdmFyIF9hamF4X2Vycm9yX2hhbmRsZXIgPSByZXF1aXJlKCJwbHVnaW5zL21vbml0b3JpbmcvbGliL2FqYXhfZXJyb3JfaGFuZGxlciIpOwoKdmFyIF9yb3V0ZV9pbml0ID0gcmVxdWlyZSgicGx1Z2lucy9tb25pdG9yaW5nL2xpYi9yb3V0ZV9pbml0Iik7Cgp2YXIgX3BpcGVsaW5lcyA9IHJlcXVpcmUoInBsdWdpbnMvbW9uaXRvcmluZy9saWIvbG9nc3Rhc2gvcGlwZWxpbmVzIik7Cgp2YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL2luZGV4Lmh0bWwiKSk7Cgp2YXIgX3RpbWVmaWx0ZXIgPSByZXF1aXJlKCJwbHVnaW5zL21vbml0b3JpbmcvbnBfaW1wb3J0cy91aS90aW1lZmlsdGVyIik7Cgp2YXIgX2kxOG4yID0gcmVxdWlyZSgidWkvaTE4biIpOwoKdmFyIF9waXBlbGluZV9saXN0aW5nID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tcG9uZW50cy9sb2dzdGFzaC9waXBlbGluZV9saXN0aW5nL3BpcGVsaW5lX2xpc3RpbmciKTsKCnZhciBfID0gcmVxdWlyZSgiLi4vLi4iKTsKCnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50cyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICJ1bmRlZmluZWQiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfQoKZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKLyoKICogTG9nc3Rhc2ggUGlwZWxpbmVzIExpc3RpbmcgcGFnZQogKi8KdmFyIGdldFBhZ2VEYXRhID0gZnVuY3Rpb24gZ2V0UGFnZURhdGEoJGluamVjdG9yKSB7CiAgdmFyIF9hcGkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKCiAgdmFyIHJvdXRlT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgX2FwaTsgLy8gdG8gZml4IGVzbGludAoKICB2YXIgJGh0dHAgPSAkaW5qZWN0b3IuZ2V0KCckaHR0cCcpOwogIHZhciBnbG9iYWxTdGF0ZSA9ICRpbmplY3Rvci5nZXQoJ2dsb2JhbFN0YXRlJyk7CiAgdmFyIFByaXZhdGUgPSAkaW5qZWN0b3IuZ2V0KCdQcml2YXRlJyk7CiAgdmFyIHVybCA9ICIuLi9hcGkvbW9uaXRvcmluZy92MS9jbHVzdGVycy8iLmNvbmNhdChnbG9iYWxTdGF0ZS5jbHVzdGVyX3V1aWQsICIvbG9nc3Rhc2gvcGlwZWxpbmVzIik7CgogIHZhciB0aW1lQm91bmRzID0gX3RpbWVmaWx0ZXIudGltZWZpbHRlci5nZXRCb3VuZHMoKTsKCiAgcmV0dXJuICRodHRwLnBvc3QodXJsLCBfb2JqZWN0U3ByZWFkKHsKICAgIGNjczogZ2xvYmFsU3RhdGUuY2NzLAogICAgdGltZVJhbmdlOiB7CiAgICAgIG1pbjogdGltZUJvdW5kcy5taW4udG9JU09TdHJpbmcoKSwKICAgICAgbWF4OiB0aW1lQm91bmRzLm1heC50b0lTT1N0cmluZygpCiAgICB9CiAgfSwgcm91dGVPcHRpb25zKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgIHJldHVybiByZXNwb25zZS5kYXRhOwogIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgIHZhciBhamF4RXJyb3JIYW5kbGVycyA9IFByaXZhdGUoX2FqYXhfZXJyb3JfaGFuZGxlci5hamF4RXJyb3JIYW5kbGVyc1Byb3ZpZGVyKTsKICAgIHJldHVybiBhamF4RXJyb3JIYW5kbGVycyhlcnIpOwogIH0pOwp9OwoKZnVuY3Rpb24gbWFrZVVwZ3JhZGVNZXNzYWdlKGxvZ3N0YXNoVmVyc2lvbnMpIHsKICBpZiAoIUFycmF5LmlzQXJyYXkobG9nc3Rhc2hWZXJzaW9ucykgfHwgbG9nc3Rhc2hWZXJzaW9ucy5sZW5ndGggPT09IDAgfHwgbG9nc3Rhc2hWZXJzaW9ucy5zb21lKF9waXBlbGluZXMuaXNQaXBlbGluZU1vbml0b3JpbmdTdXBwb3J0ZWRJblZlcnNpb24pKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHJldHVybiAnUGlwZWxpbmUgbW9uaXRvcmluZyBpcyBvbmx5IGF2YWlsYWJsZSBpbiBMb2dzdGFzaCB2ZXJzaW9uIDYuMC4wIG9yIGhpZ2hlci4nOwp9Cgpfcm91dGVzLmRlZmF1bHQud2hlbignL2xvZ3N0YXNoL3BpcGVsaW5lcycsIHsKICB0ZW1wbGF0ZTogX2luZGV4LmRlZmF1bHQsCiAgcmVzb2x2ZTogewogICAgY2x1c3RlcnM6IGZ1bmN0aW9uIGNsdXN0ZXJzKFByaXZhdGUpIHsKICAgICAgdmFyIHJvdXRlSW5pdCA9IFByaXZhdGUoX3JvdXRlX2luaXQucm91dGVJbml0UHJvdmlkZXIpOwogICAgICByZXR1cm4gcm91dGVJbml0KHsKICAgICAgICBjb2RlUGF0aHM6IFtfY29uc3RhbnRzLkNPREVfUEFUSF9MT0dTVEFTSF0KICAgICAgfSk7CiAgICB9CiAgfSwKICBjb250cm9sbGVyOgogIC8qI19fUFVSRV9fKi8KICBmdW5jdGlvbiAoX01vbml0b3JpbmdWaWV3QmFzZUV1KSB7CiAgICBfaW5oZXJpdHMoTG9nc3Rhc2hQaXBlbGluZXNMaXN0LCBfTW9uaXRvcmluZ1ZpZXdCYXNlRXUpOwoKICAgIGZ1bmN0aW9uIExvZ3N0YXNoUGlwZWxpbmVzTGlzdCgkaW5qZWN0b3IsICRzY29wZSkgewogICAgICB2YXIgX3RoaXM7CgogICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nc3Rhc2hQaXBlbGluZXNMaXN0KTsKCiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKExvZ3N0YXNoUGlwZWxpbmVzTGlzdCkuY2FsbCh0aGlzLCB7CiAgICAgICAgdGl0bGU6ICdMb2dzdGFzaCBQaXBlbGluZXMnLAogICAgICAgIHN0b3JhZ2VLZXk6ICdsb2dzdGFzaC5waXBlbGluZXMnLAogICAgICAgIGdldFBhZ2VEYXRhOiBnZXRQYWdlRGF0YSwKICAgICAgICByZWFjdE5vZGVJZDogJ21vbml0b3JpbmdMb2dzdGFzaFBpcGVsaW5lc0FwcCcsCiAgICAgICAgJHNjb3BlOiAkc2NvcGUsCiAgICAgICAgJGluamVjdG9yOiAkaW5qZWN0b3IsCiAgICAgICAgZmV0Y2hEYXRhSW1tZWRpYXRlbHk6IGZhbHNlIC8vIFdlIHdhbnQgdG8gYXBwbHkgcGFnaW5hdGlvbiBiZWZvcmUgc2VuZGluZyB0aGUgZmlyc3QgcmVxdWVzdAoKICAgICAgfSkpOwogICAgICB2YXIgJHJvdXRlID0gJGluamVjdG9yLmdldCgnJHJvdXRlJyk7CiAgICAgIHZhciBrYm5VcmwgPSAkaW5qZWN0b3IuZ2V0KCdrYm5VcmwnKTsKICAgICAgdmFyIGNvbmZpZyA9ICRpbmplY3Rvci5nZXQoJ2NvbmZpZycpOwogICAgICBfdGhpcy5kYXRhID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLnBhZ2VEYXRhOwogICAgICB2YXIgZ2xvYmFsU3RhdGUgPSAkaW5qZWN0b3IuZ2V0KCdnbG9iYWxTdGF0ZScpOwogICAgICAkc2NvcGUuY2x1c3RlciA9ICgwLCBfbG9kYXNoLmZpbmQpKCRyb3V0ZS5jdXJyZW50LmxvY2Fscy5jbHVzdGVycywgewogICAgICAgIGNsdXN0ZXJfdXVpZDogZ2xvYmFsU3RhdGUuY2x1c3Rlcl91dWlkCiAgICAgIH0pOwoKICAgICAgdmFyIHJlbmRlclJlYWN0ID0gZnVuY3Rpb24gcmVuZGVyUmVhY3QocGFnZURhdGEpIHsKICAgICAgICBpZiAoIXBhZ2VEYXRhKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgdXBncmFkZU1lc3NhZ2UgPSBwYWdlRGF0YSA/IG1ha2VVcGdyYWRlTWVzc2FnZShwYWdlRGF0YS5jbHVzdGVyU3RhdHVzLnZlcnNpb25zLCBfaTE4bi5pMThuKSA6IG51bGw7CgogICAgICAgIHZhciBwYWdpbmF0aW9uID0gX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucGFnaW5hdGlvbiwgewogICAgICAgICAgdG90YWxJdGVtQ291bnQ6IHBhZ2VEYXRhLnRvdGFsUGlwZWxpbmVDb3VudAogICAgICAgIH0pOwoKICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihMb2dzdGFzaFBpcGVsaW5lc0xpc3QucHJvdG90eXBlKSwgInJlbmRlclJlYWN0IiwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLmNhbGwoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2kxOG4yLkkxOG5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9waXBlbGluZV9saXN0aW5nLlBpcGVsaW5lTGlzdGluZywgX2V4dGVuZHMoewogICAgICAgICAgY2xhc3NOYW1lOiAibW9uaXRvcmluZ0xvZ3N0YXNoUGlwZWxpbmVzVGFibGUiLAogICAgICAgICAgb25CcnVzaDogZnVuY3Rpb24gb25CcnVzaCh4YXhpcykgewogICAgICAgICAgICByZXR1cm4gX3RoaXMub25CcnVzaCh7CiAgICAgICAgICAgICAgeGF4aXM6IHhheGlzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHN0YXRzOiBwYWdlRGF0YS5jbHVzdGVyU3RhdHVzLAogICAgICAgICAgZGF0YTogcGFnZURhdGEucGlwZWxpbmVzCiAgICAgICAgfSwgX3RoaXMuZ2V0UGFnaW5hdGlvblRhYmxlUHJvcHMocGFnaW5hdGlvbiksIHsKICAgICAgICAgIHVwZ3JhZGVNZXNzYWdlOiB1cGdyYWRlTWVzc2FnZSwKICAgICAgICAgIGRhdGVGb3JtYXQ6IGNvbmZpZy5nZXQoJ2RhdGVGb3JtYXQnKSwKICAgICAgICAgIGFuZ3VsYXI6IHsKICAgICAgICAgICAga2JuVXJsOiBrYm5VcmwsCiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUKICAgICAgICAgIH0KICAgICAgICB9KSkpKTsKICAgICAgfTsKCiAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpcy5kYXRhOwogICAgICB9LCBmdW5jdGlvbiAocGFnZURhdGEpIHsKICAgICAgICByZW5kZXJSZWFjdChwYWdlRGF0YSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gX3RoaXM7CiAgICB9CgogICAgcmV0dXJuIExvZ3N0YXNoUGlwZWxpbmVzTGlzdDsKICB9KF8uTW9uaXRvcmluZ1ZpZXdCYXNlRXVpVGFibGVDb250cm9sbGVyKQp9KTs="},null]}