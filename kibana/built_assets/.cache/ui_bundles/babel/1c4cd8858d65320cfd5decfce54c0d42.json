{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/document_fields/fields/field_types/token_count_type.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/document_fields/fields/field_types/token_count_type.js","mtime":1589249554116},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRva2VuQ291bnRUeXBlID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfZG9jdW1lbnRhdGlvbiA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NlcnZpY2VzL2RvY3VtZW50YXRpb24iKTsKCnZhciBfbGliID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vbGliIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbnN0YW50cyIpOwoKdmFyIF9zaGFyZWRfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL3NoYXJlZF9pbXBvcnRzIik7Cgp2YXIgX2ZpZWxkX3BhcmFtZXRlcnMgPSByZXF1aXJlKCIuLi8uLi9maWVsZF9wYXJhbWV0ZXJzIik7Cgp2YXIgX2VkaXRfZmllbGQgPSByZXF1aXJlKCIuLi9lZGl0X2ZpZWxkIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIGdldERlZmF1bHRUb2dnbGVWYWx1ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRUb2dnbGVWYWx1ZShwYXJhbSwgZmllbGQpIHsKICBzd2l0Y2ggKHBhcmFtKSB7CiAgICBjYXNlICdhbmFseXplcic6CiAgICBjYXNlICdib29zdCc6CiAgICAgIHsKICAgICAgICByZXR1cm4gZmllbGRbcGFyYW1dICE9PSB1bmRlZmluZWQgJiYgZmllbGRbcGFyYW1dICE9PSAoMCwgX2xpYi5nZXRGaWVsZENvbmZpZykocGFyYW0pLmRlZmF1bHRWYWx1ZTsKICAgICAgfQoKICAgIGNhc2UgJ251bGxfdmFsdWUnOgogICAgICB7CiAgICAgICAgcmV0dXJuIGZpZWxkLm51bGxfdmFsdWUgIT09IHVuZGVmaW5lZCAmJiBmaWVsZC5udWxsX3ZhbHVlICE9PSAnJzsKICAgICAgfQoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBmYWxzZTsKICB9Cn07Cgp2YXIgVG9rZW5Db3VudFR5cGUgPSBmdW5jdGlvbiBUb2tlbkNvdW50VHlwZShfcmVmKSB7CiAgdmFyIGZpZWxkID0gX3JlZi5maWVsZDsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZWRpdF9maWVsZC5CYXNpY1BhcmFtZXRlcnNTZWN0aW9uLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9lZGl0X2ZpZWxkLkVkaXRGaWVsZEZvcm1Sb3csIHsKICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suaWR4TWdtdC5tYXBwaW5nc0VkaXRvci50b2tlbkNvdW50LmFuYWx5emVyU2VjdGlvblRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0FuYWx5emVyJwogICAgfSksCiAgICBkb2NMaW5rOiB7CiAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLnRva2VuQ291bnQuYW5hbHl6ZXJMaW5rVGV4dCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0FuYWx5emVyIGRvY3VtZW50YXRpb24nCiAgICAgIH0pLAogICAgICBocmVmOiBfZG9jdW1lbnRhdGlvbi5kb2N1bWVudGF0aW9uU2VydmljZS5nZXRBbmFseXplckxpbmsoKQogICAgfSwKICAgIHdpdGhUb2dnbGU6IGZhbHNlCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmllbGRfcGFyYW1ldGVycy5BbmFseXplclBhcmFtZXRlciwgewogICAgcGF0aDogImFuYWx5emVyIiwKICAgIGNvbmZpZzogX29iamVjdFNwcmVhZCh7fSwgKDAsIF9saWIuZ2V0RmllbGRDb25maWcpKCdhbmFseXplcicpLCB7CiAgICAgIGRlZmF1bHRWYWx1ZTogX2NvbnN0YW50cy5TVEFOREFSRAogICAgfSkgLy8gSWYgImZpZWxkLnNvdXJjZS5hbmFseXplciIgaXMgdW5kZWZpbmVkLCBkZWZhdWx0cyB0byAic3RhbmRhcmQiIGFuYWx5emVyCiAgICAsCiAgICBkZWZhdWx0VmFsdWU6IGZpZWxkLnNvdXJjZS5hbmFseXplciwKICAgIGFsbG93c0luZGV4RGVmYXVsdE9wdGlvbjogZmFsc2UKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpZWxkX3BhcmFtZXRlcnMuSW5kZXhQYXJhbWV0ZXIsIHsKICAgIGhhc0luZGV4T3B0aW9uczogZmFsc2UKICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2VkaXRfZmllbGQuQWR2YW5jZWRQYXJhbWV0ZXJzU2VjdGlvbiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZWRpdF9maWVsZC5FZGl0RmllbGRGb3JtUm93LCB7CiAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IudG9rZW5Db3VudC5lbmFibGVQb3NpdGlvbkluY3JlbWVudHNGaWVsZFRpdGxlJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0VuYWJsZSBwb3NpdGlvbiBpbmNyZW1lbnRzJwogICAgfSksCiAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLmlkeE1nbXQubWFwcGluZ3NFZGl0b3IudG9rZW5Db3VudC5lbmFibGVQb3NpdGlvbkluY3JlbWVudHNGaWVsZERlc2NyaXB0aW9uJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1doZXRoZXIgdG8gY291bnQgcG9zaXRpb24gaW5jcmVtZW50cy4nCiAgICB9KSwKICAgIGZvcm1GaWVsZFBhdGg6ICJlbmFibGVfcG9zaXRpb25faW5jcmVtZW50cyIKICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmllbGRfcGFyYW1ldGVycy5Eb2NWYWx1ZXNQYXJhbWV0ZXIsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9maWVsZF9wYXJhbWV0ZXJzLk51bGxWYWx1ZVBhcmFtZXRlciwgewogICAgZGVmYXVsdFRvZ2dsZVZhbHVlOiBnZXREZWZhdWx0VG9nZ2xlVmFsdWUoJ251bGxfdmFsdWUnLCBmaWVsZC5zb3VyY2UpLAogICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5pZHhNZ210Lm1hcHBpbmdzRWRpdG9yLnRva2VuQ291bnQubnVsbFZhbHVlRmllbGREZXNjcmlwdGlvbicsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBY2NlcHRzIGEgbnVtZXJpYyB2YWx1ZSBvZiB0aGUgc2FtZSB0eXBlIGFzIHRoZSBmaWVsZCB3aGljaCBpcyBzdWJzdGl0dXRlZCBmb3IgYW55IGV4cGxpY2l0IG51bGwgdmFsdWVzLicKICAgIH0pCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc2hhcmVkX2ltcG9ydHMuVXNlRmllbGQsIHsKICAgIHBhdGg6ICJudWxsX3ZhbHVlIiwKICAgIGNvbXBvbmVudDogX3NoYXJlZF9pbXBvcnRzLk51bWVyaWNGaWVsZCwKICAgIGNvbmZpZzogKDAsIF9saWIuZ2V0RmllbGRDb25maWcpKCdudWxsX3ZhbHVlX251bWVyaWMnKQogIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZmllbGRfcGFyYW1ldGVycy5TdG9yZVBhcmFtZXRlciwgbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2ZpZWxkX3BhcmFtZXRlcnMuQm9vc3RQYXJhbWV0ZXIsIHsKICAgIGRlZmF1bHRUb2dnbGVWYWx1ZTogZ2V0RGVmYXVsdFRvZ2dsZVZhbHVlKCdib29zdCcsIGZpZWxkLnNvdXJjZSkKICB9KSkpOwp9OwoKZXhwb3J0cy5Ub2tlbkNvdW50VHlwZSA9IFRva2VuQ291bnRUeXBlOw=="},null]}