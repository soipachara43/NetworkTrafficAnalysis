{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/reporting/public/share_context_menu/register_csv_reporting.js","dependencies":[{"path":"x-pack/plugins/reporting/public/share_context_menu/register_csv_reporting.js","mtime":1589249555137},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNzdlJlcG9ydGluZ1Byb3ZpZGVyID0gdm9pZCAwOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcmVwb3J0aW5nX3BhbmVsX2NvbnRlbnQgPSByZXF1aXJlKCIuLi9jb21wb25lbnRzL3JlcG9ydGluZ19wYW5lbF9jb250ZW50Iik7Cgp2YXIgX2xpY2Vuc2VfY2hlY2sgPSByZXF1aXJlKCIuLi9saWIvbGljZW5zZV9jaGVjayIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBjc3ZSZXBvcnRpbmdQcm92aWRlciA9IGZ1bmN0aW9uIGNzdlJlcG9ydGluZ1Byb3ZpZGVyKF9yZWYpIHsKICB2YXIgYXBpQ2xpZW50ID0gX3JlZi5hcGlDbGllbnQsCiAgICAgIHRvYXN0cyA9IF9yZWYudG9hc3RzLAogICAgICBsaWNlbnNlJCA9IF9yZWYubGljZW5zZSQ7CiAgdmFyIHRvb2xUaXBDb250ZW50ID0gJyc7CiAgdmFyIGRpc2FibGVkID0gdHJ1ZTsKICB2YXIgaGFzQ1NWUmVwb3J0aW5nID0gZmFsc2U7CiAgbGljZW5zZSQuc3Vic2NyaWJlKGZ1bmN0aW9uIChsaWNlbnNlKSB7CiAgICB2YXIgX2NoZWNrTGljZW5zZSA9ICgwLCBfbGljZW5zZV9jaGVjay5jaGVja0xpY2Vuc2UpKGxpY2Vuc2UuY2hlY2soJ3JlcG9ydGluZycsICdiYXNpYycpKSwKICAgICAgICBlbmFibGVMaW5rcyA9IF9jaGVja0xpY2Vuc2UuZW5hYmxlTGlua3MsCiAgICAgICAgc2hvd0xpbmtzID0gX2NoZWNrTGljZW5zZS5zaG93TGlua3MsCiAgICAgICAgbWVzc2FnZSA9IF9jaGVja0xpY2Vuc2UubWVzc2FnZTsKCiAgICB0b29sVGlwQ29udGVudCA9IG1lc3NhZ2U7CiAgICBoYXNDU1ZSZXBvcnRpbmcgPSBzaG93TGlua3M7CiAgICBkaXNhYmxlZCA9ICFlbmFibGVMaW5rczsKICB9KTsKCiAgdmFyIGdldFNoYXJlTWVudUl0ZW1zID0gZnVuY3Rpb24gZ2V0U2hhcmVNZW51SXRlbXMoX3JlZjIpIHsKICAgIHZhciBvYmplY3RUeXBlID0gX3JlZjIub2JqZWN0VHlwZSwKICAgICAgICBvYmplY3RJZCA9IF9yZWYyLm9iamVjdElkLAogICAgICAgIHNoYXJpbmdEYXRhID0gX3JlZjIuc2hhcmluZ0RhdGEsCiAgICAgICAgaXNEaXJ0eSA9IF9yZWYyLmlzRGlydHksCiAgICAgICAgb25DbG9zZSA9IF9yZWYyLm9uQ2xvc2U7CgogICAgaWYgKCdzZWFyY2gnICE9PSBvYmplY3RUeXBlKSB7CiAgICAgIHJldHVybiBbXTsKICAgIH0KCiAgICB2YXIgZ2V0Sm9iUGFyYW1zID0gZnVuY3Rpb24gZ2V0Sm9iUGFyYW1zKCkgewogICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc2hhcmluZ0RhdGEsIHsKICAgICAgICB0eXBlOiBvYmplY3RUeXBlCiAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgc2hhcmVBY3Rpb25zID0gW107CgogICAgaWYgKGhhc0NTVlJlcG9ydGluZykgewogICAgICB2YXIgX3NoYXJlTWVudUl0ZW07CgogICAgICB2YXIgcGFuZWxUaXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5yZXBvcnRpbmcuc2hhcmVDb250ZXh0TWVudS5jc3ZSZXBvcnRzQnV0dG9uTGFiZWwnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdDU1YgUmVwb3J0cycKICAgICAgfSk7CgogICAgICBzaGFyZUFjdGlvbnMucHVzaCh7CiAgICAgICAgc2hhcmVNZW51SXRlbTogKF9zaGFyZU1lbnVJdGVtID0gewogICAgICAgICAgbmFtZTogcGFuZWxUaXRsZSwKICAgICAgICAgIGljb246ICdkb2N1bWVudCcsCiAgICAgICAgICB0b29sVGlwQ29udGVudDogdG9vbFRpcENvbnRlbnQsCiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQKICAgICAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3NoYXJlTWVudUl0ZW0sICdkYXRhLXRlc3Qtc3ViaicsICdjc3ZSZXBvcnRNZW51SXRlbScpLCBfZGVmaW5lUHJvcGVydHkoX3NoYXJlTWVudUl0ZW0sICJzb3J0T3JkZXIiLCAxKSwgX3NoYXJlTWVudUl0ZW0pLAogICAgICAgIHBhbmVsOiB7CiAgICAgICAgICBpZDogJ2NzdlJlcG9ydGluZ1BhbmVsJywKICAgICAgICAgIHRpdGxlOiBwYW5lbFRpdGxlLAogICAgICAgICAgY29udGVudDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVwb3J0aW5nX3BhbmVsX2NvbnRlbnQuUmVwb3J0aW5nUGFuZWxDb250ZW50LCB7CiAgICAgICAgICAgIGFwaUNsaWVudDogYXBpQ2xpZW50LAogICAgICAgICAgICB0b2FzdHM6IHRvYXN0cywKICAgICAgICAgICAgcmVwb3J0VHlwZTogImNzdiIsCiAgICAgICAgICAgIGxheW91dElkOiB1bmRlZmluZWQsCiAgICAgICAgICAgIG9iamVjdFR5cGU6IG9iamVjdFR5cGUsCiAgICAgICAgICAgIG9iamVjdElkOiBvYmplY3RJZCwKICAgICAgICAgICAgZ2V0Sm9iUGFyYW1zOiBnZXRKb2JQYXJhbXMsCiAgICAgICAgICAgIGlzRGlydHk6IGlzRGlydHksCiAgICAgICAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UKICAgICAgICAgIH0pCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gc2hhcmVBY3Rpb25zOwogIH07CgogIHJldHVybiB7CiAgICBpZDogJ2NzdlJlcG9ydHMnLAogICAgZ2V0U2hhcmVNZW51SXRlbXM6IGdldFNoYXJlTWVudUl0ZW1zCiAgfTsKfTsKCmV4cG9ydHMuY3N2UmVwb3J0aW5nUHJvdmlkZXIgPSBjc3ZSZXBvcnRpbmdQcm92aWRlcjs="},null]}