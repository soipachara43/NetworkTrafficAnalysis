{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/saved_objects/public/saved_object/saved_object_loader.js","dependencies":[{"path":"src/plugins/saved_objects/public/saved_object/saved_object_loader.js","mtime":1589249551007},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNhdmVkT2JqZWN0TG9hZGVyID0gdm9pZCAwOwoKdmFyIF9zdHJpbmdfdXRpbHMgPSByZXF1aXJlKCIuL2hlbHBlcnMvc3RyaW5nX3V0aWxzIik7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQovKioKICogVGhlIFNhdmVkT2JqZWN0TG9hZGVyIGNsYXNzIHByb3ZpZGVzIHNvbWUgY29udmVuaWVuY2UgZnVuY3Rpb25zCiAqIHRvIGxvYWQgYW5kIHNhdmUgb25lIGtpbmQgb2Ygc2F2ZWQgb2JqZWN0cyAoc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3RvcikuCiAqCiAqIEl0IGlzIGJhc2VkIG9uIHRoZSBTYXZlZE9iamVjdENsaWVudCB3aGljaCBpbXBsZW1lbnRzIGxvYWRpbmcgYW5kIHNhdmluZwogKiBpbiBhbiBhYnN0cmFjdCwgdHlwZS1hZ25vc3RpYyB3YXkuIElmIHBvc3NpYmxlLCB1c2UgU2F2ZWRPYmplY3RDbGllbnQgZGlyZWN0bHkKICogdG8gYXZvaWQgcHVsbGluZyBpbiBleHRyYSBmdW5jdGlvbmFsaXR5IHdoaWNoIGlzbid0IHVzZWQuCiAqLwoKCnZhciBTYXZlZE9iamVjdExvYWRlciA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNhdmVkT2JqZWN0TG9hZGVyKFNhdmVkT2JqZWN0Q2xhc3MsIHNhdmVkT2JqZWN0c0NsaWVudCwgY2hyb21lKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F2ZWRPYmplY3RMb2FkZXIpOwoKICAgIHRoaXMuc2F2ZWRPYmplY3RzQ2xpZW50ID0gc2F2ZWRPYmplY3RzQ2xpZW50OwogICAgdGhpcy5jaHJvbWUgPSBjaHJvbWU7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJDbGFzcyIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ0eXBlIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgImxvd2VyY2FzZVR5cGUiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAibG9hZGVyUHJvcGVydGllcyIsIHZvaWQgMCk7CgogICAgdGhpcy50eXBlID0gU2F2ZWRPYmplY3RDbGFzcy50eXBlOwogICAgdGhpcy5DbGFzcyA9IFNhdmVkT2JqZWN0Q2xhc3M7CiAgICB0aGlzLmxvd2VyY2FzZVR5cGUgPSB0aGlzLnR5cGUudG9Mb3dlckNhc2UoKTsKICAgIHRoaXMubG9hZGVyUHJvcGVydGllcyA9IHsKICAgICAgbmFtZTogIiIuY29uY2F0KHRoaXMubG93ZXJjYXNlVHlwZSwgInMiKSwKICAgICAgbm91bjogX3N0cmluZ191dGlscy5TdHJpbmdVdGlscy51cHBlckZpcnN0KHRoaXMudHlwZSksCiAgICAgIG5vdW5zOiAiIi5jb25jYXQodGhpcy5sb3dlcmNhc2VUeXBlLCAicyIpCiAgICB9OwogIH0KICAvKioKICAgKiBSZXRyaWV2ZSBhIHNhdmVkIG9iamVjdCBieSBpZC4gUmV0dXJucyBhIHByb21pc2UgdGhhdCBjb21wbGV0ZXMgd2hlbiB0aGUgb2JqZWN0IGZpbmlzaGVzCiAgICogaW5pdGlhbGl6aW5nLgogICAqIEBwYXJhbSBpZAogICAqIEByZXR1cm5zIHtQcm9taXNlPFNhdmVkT2JqZWN0Pn0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhTYXZlZE9iamVjdExvYWRlciwgW3sKICAgIGtleTogImdldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoaWQpIHsKICAgICAgICB2YXIgb2JqOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUKICAgICAgICAgICAgICAgIG9iaiA9IG5ldyB0aGlzLkNsYXNzKGlkKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG9iai5pbml0KCkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0KF94KSB7CiAgICAgICAgcmV0dXJuIF9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInVybEZvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXJsRm9yKGlkKSB7CiAgICAgIHJldHVybiAiIy8iLmNvbmNhdCh0aGlzLmxvd2VyY2FzZVR5cGUsICIvIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChpZCkpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2RlbGV0ZTIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihpZHMpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB2YXIgaWRzVXNlZCwgZGVsZXRpb25zLCBjb3JlTmF2TGlua3M7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlkc1VzZWQgPSAhQXJyYXkuaXNBcnJheShpZHMpID8gW2lkc10gOiBpZHM7CiAgICAgICAgICAgICAgICBkZWxldGlvbnMgPSBpZHNVc2VkLm1hcChmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZQogICAgICAgICAgICAgICAgICB2YXIgc2F2ZWRPYmplY3QgPSBuZXcgX3RoaXMuQ2xhc3MoaWQpOwogICAgICAgICAgICAgICAgICByZXR1cm4gc2F2ZWRPYmplY3QuZGVsZXRlKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChkZWxldGlvbnMpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBjb3JlTmF2TGlua3MgPSB0aGlzLmNocm9tZS5uYXZMaW5rczsKICAgICAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgICAgICogTW9kaWZ5IGxhc3QgdXJsIGZvciBkZWxldGVkIHNhdmVkIG9iamVjdHMgdG8gYXZvaWQgbG9hZGluZyBwYWdlcyB3aXRoICJDb3VsZCBub3QgbG9jYXRlLi4uIgogICAgICAgICAgICAgICAgICovCgogICAgICAgICAgICAgICAgY29yZU5hdkxpbmtzLmdldEFsbCgpLmZpbHRlcihmdW5jdGlvbiAobGluaykgewogICAgICAgICAgICAgICAgICByZXR1cm4gbGluay5saW5rVG9MYXN0U3ViVXJsICYmIGlkc1VzZWQuZmluZChmdW5jdGlvbiAoZGVsZXRlZElkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmsudXJsICYmIGxpbmsudXJsLmluY2x1ZGVzKGRlbGV0ZWRJZCk7CiAgICAgICAgICAgICAgICAgIH0pICE9PSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb3JlTmF2TGlua3MudXBkYXRlKGxpbmsuaWQsIHsKICAgICAgICAgICAgICAgICAgICB1cmw6IGxpbmsuYmFzZVVybAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBfZGVsZXRlKF94MikgewogICAgICAgIHJldHVybiBfZGVsZXRlMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gX2RlbGV0ZTsKICAgIH0oKQogICAgLyoqCiAgICAgKiBVcGRhdGVzIHNvdXJjZSB0byBjb250YWluIGFuIGlkIGFuZCB1cmwgZmllbGQsIGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkCiAgICAgKiBzb3VyY2Ugb2JqZWN0LgogICAgICogQHBhcmFtIHNvdXJjZQogICAgICogQHBhcmFtIGlkCiAgICAgKiBAcmV0dXJucyB7c291cmNlfSBUaGUgbW9kaWZpZWQgc291cmNlIG9iamVjdCwgd2l0aCBhbiBpZCBhbmQgdXJsIGZpZWxkLgogICAgICovCgogIH0sIHsKICAgIGtleTogIm1hcEhpdFNvdXJjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwSGl0U291cmNlKHNvdXJjZSwgaWQpIHsKICAgICAgc291cmNlLmlkID0gaWQ7CiAgICAgIHNvdXJjZS51cmwgPSB0aGlzLnVybEZvcihpZCk7CiAgICAgIHJldHVybiBzb3VyY2U7CiAgICB9CiAgICAvKioKICAgICAqIFVwZGF0ZXMgaGl0LmF0dHJpYnV0ZXMgdG8gY29udGFpbiBhbiBpZCBhbmQgdXJsIGZpZWxkLCBhbmQgcmV0dXJucyB0aGUgdXBkYXRlZAogICAgICogYXR0cmlidXRlcyBvYmplY3QuCiAgICAgKiBAcGFyYW0gaGl0CiAgICAgKiBAcmV0dXJucyB7aGl0LmF0dHJpYnV0ZXN9IFRoZSBtb2RpZmllZCBoaXQuYXR0cmlidXRlcyBvYmplY3QsIHdpdGggYW4gaWQgYW5kIHVybCBmaWVsZC4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJtYXBTYXZlZE9iamVjdEFwaUhpdHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1hcFNhdmVkT2JqZWN0QXBpSGl0cyhoaXQpIHsKICAgICAgcmV0dXJuIHRoaXMubWFwSGl0U291cmNlKGhpdC5hdHRyaWJ1dGVzLCBoaXQuaWQpOwogICAgfQogICAgLyoqCiAgICAgKiBUT0RPOiBSYXRoZXIgdGhhbiB1c2UgYSBoYXJkY29kZWQgbGltaXQsIGltcGxlbWVudCBwYWdpbmF0aW9uLiBTZWUKICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFzdGljL2tpYmFuYS9pc3N1ZXMvODA0NCBmb3IgcmVmZXJlbmNlLgogICAgICoKICAgICAqIEBwYXJhbSBzZWFyY2gKICAgICAqIEBwYXJhbSBzaXplCiAgICAgKiBAcGFyYW0gZmllbGRzCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmaW5kQWxsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQWxsKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBzZWFyY2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnOwogICAgICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwOwogICAgICB2YXIgZmllbGRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiB0aGlzLnNhdmVkT2JqZWN0c0NsaWVudC5maW5kKHsKICAgICAgICB0eXBlOiB0aGlzLmxvd2VyY2FzZVR5cGUsCiAgICAgICAgc2VhcmNoOiBzZWFyY2ggPyAiIi5jb25jYXQoc2VhcmNoLCAiKiIpIDogdW5kZWZpbmVkLAogICAgICAgIHBlclBhZ2U6IHNpemUsCiAgICAgICAgcGFnZTogMSwKICAgICAgICBzZWFyY2hGaWVsZHM6IFsndGl0bGVeMycsICdkZXNjcmlwdGlvbiddLAogICAgICAgIGRlZmF1bHRTZWFyY2hPcGVyYXRvcjogJ0FORCcsCiAgICAgICAgZmllbGRzOiBmaWVsZHMKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0b3RhbDogcmVzcC50b3RhbCwKICAgICAgICAgIGhpdHM6IHJlc3Auc2F2ZWRPYmplY3RzLm1hcChmdW5jdGlvbiAoc2F2ZWRPYmplY3QpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5tYXBTYXZlZE9iamVjdEFwaUhpdHMoc2F2ZWRPYmplY3QpOwogICAgICAgICAgfSkKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kKCkgewogICAgICB2YXIgc2VhcmNoID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJzsKICAgICAgdmFyIHNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEwMDsKICAgICAgcmV0dXJuIHRoaXMuZmluZEFsbChzZWFyY2gsIHNpemUpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdG90YWw6IHJlc3AudG90YWwsCiAgICAgICAgICBoaXRzOiByZXNwLmhpdHMuZmlsdGVyKGZ1bmN0aW9uIChzYXZlZE9iamVjdCkgewogICAgICAgICAgICByZXR1cm4gIXNhdmVkT2JqZWN0LmVycm9yOwogICAgICAgICAgfSkKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTYXZlZE9iamVjdExvYWRlcjsKfSgpOwoKZXhwb3J0cy5TYXZlZE9iamVjdExvYWRlciA9IFNhdmVkT2JqZWN0TG9hZGVyOw=="},null]}