{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/timeline/body/renderers/auditd/generic_details.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/timeline/body/renderers/auditd/generic_details.js","mtime":1589249553164},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkF1ZGl0ZEdlbmVyaWNEZXRhaWxzID0gZXhwb3J0cy5BdWRpdGRHZW5lcmljTGluZSA9IHZvaWQgMDsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2ZwID0gcmVxdWlyZSgibG9kYXNoL2ZwIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZHJhZ2dhYmxlcyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2RyYWdnYWJsZXMiKTsKCnZhciBpMThuID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgiLi90cmFuc2xhdGlvbnMiKSk7Cgp2YXIgX25ldGZsb3cgPSByZXF1aXJlKCIuLi9uZXRmbG93Iik7Cgp2YXIgX2hlbHBlcnMgPSByZXF1aXJlKCIuLi9oZWxwZXJzIik7Cgp2YXIgX3Byb2Nlc3NfZHJhZ2dhYmxlID0gcmVxdWlyZSgiLi4vcHJvY2Vzc19kcmFnZ2FibGUiKTsKCnZhciBfYXJncyA9IHJlcXVpcmUoIi4uL2FyZ3MiKTsKCnZhciBfc2Vzc2lvbl91c2VyX2hvc3Rfd29ya2luZ19kaXIgPSByZXF1aXJlKCIuL3Nlc3Npb25fdXNlcl9ob3N0X3dvcmtpbmdfZGlyIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KLyoKICogQ29weXJpZ2h0IEVsYXN0aWNzZWFyY2ggQi5WLiBhbmQvb3IgbGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZQogKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gTGljZW5zZWQgdW5kZXIgdGhlIEVsYXN0aWMgTGljZW5zZTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBFbGFzdGljIExpY2Vuc2UuCiAqLwoKCnZhciBBdWRpdGRHZW5lcmljTGluZSA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgaWQgPSBfcmVmLmlkLAogICAgICBjb250ZXh0SWQgPSBfcmVmLmNvbnRleHRJZCwKICAgICAgaG9zdE5hbWUgPSBfcmVmLmhvc3ROYW1lLAogICAgICB1c2VyTmFtZSA9IF9yZWYudXNlck5hbWUsCiAgICAgIHByaW1hcnkgPSBfcmVmLnByaW1hcnksCiAgICAgIHByb2Nlc3NOYW1lID0gX3JlZi5wcm9jZXNzTmFtZSwKICAgICAgcHJvY2Vzc1BpZCA9IF9yZWYucHJvY2Vzc1BpZCwKICAgICAgcHJvY2Vzc0V4ZWN1dGFibGUgPSBfcmVmLnByb2Nlc3NFeGVjdXRhYmxlLAogICAgICBwcm9jZXNzVGl0bGUgPSBfcmVmLnByb2Nlc3NUaXRsZSwKICAgICAgc2Vjb25kYXJ5ID0gX3JlZi5zZWNvbmRhcnksCiAgICAgIHdvcmtpbmdEaXJlY3RvcnkgPSBfcmVmLndvcmtpbmdEaXJlY3RvcnksCiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3MsCiAgICAgIHJlc3VsdCA9IF9yZWYucmVzdWx0LAogICAgICBzZXNzaW9uID0gX3JlZi5zZXNzaW9uLAogICAgICB0ZXh0ID0gX3JlZi50ZXh0OwogIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIiwKICAgIGp1c3RpZnlDb250ZW50OiAiY2VudGVyIiwKICAgIGd1dHRlclNpemU6ICJub25lIiwKICAgIHdyYXA6IHRydWUKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zZXNzaW9uX3VzZXJfaG9zdF93b3JraW5nX2Rpci5TZXNzaW9uVXNlckhvc3RXb3JraW5nRGlyLCB7CiAgICBldmVudElkOiBpZCwKICAgIGNvbnRleHRJZDogY29udGV4dElkLAogICAgaG9zdE5hbWU6IGhvc3ROYW1lLAogICAgdXNlck5hbWU6IHVzZXJOYW1lLAogICAgcHJpbWFyeTogcHJpbWFyeSwKICAgIHNlY29uZGFyeTogc2Vjb25kYXJ5LAogICAgd29ya2luZ0RpcmVjdG9yeTogd29ya2luZ0RpcmVjdG9yeSwKICAgIHNlc3Npb246IHNlc3Npb24KICB9KSwgcHJvY2Vzc0V4ZWN1dGFibGUgIT0gbnVsbCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9oZWxwZXJzLlRva2Vuc0ZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZSwKICAgIGNvbXBvbmVudDogInNwYW4iCiAgfSwgdGV4dCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2hlbHBlcnMuVG9rZW5zRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlLAogICAgY29tcG9uZW50OiAic3BhbiIKICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wcm9jZXNzX2RyYWdnYWJsZS5Qcm9jZXNzRHJhZ2dhYmxlLCB7CiAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCwKICAgIGVuZGdhbWVQaWQ6IHVuZGVmaW5lZCwKICAgIGVuZGdhbWVQcm9jZXNzTmFtZTogdW5kZWZpbmVkLAogICAgZXZlbnRJZDogaWQsCiAgICBwcm9jZXNzUGlkOiBwcm9jZXNzUGlkLAogICAgcHJvY2Vzc05hbWU6IHByb2Nlc3NOYW1lLAogICAgcHJvY2Vzc0V4ZWN1dGFibGU6IHByb2Nlc3NFeGVjdXRhYmxlCiAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hcmdzLkFyZ3MsIHsKICAgIGV2ZW50SWQ6IGlkLAogICAgYXJnczogYXJncywKICAgIGNvbnRleHRJZDogY29udGV4dElkLAogICAgcHJvY2Vzc1RpdGxlOiBwcm9jZXNzVGl0bGUKICB9KSwgcmVzdWx0ICE9IG51bGwgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaGVscGVycy5Ub2tlbnNGbGV4SXRlbSwgewogICAgZ3JvdzogZmFsc2UsCiAgICBjb21wb25lbnQ6ICJzcGFuIgogIH0sIGkxOG4uV0lUSF9SRVNVTFQpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9oZWxwZXJzLlRva2Vuc0ZsZXhJdGVtLCB7CiAgICBncm93OiBmYWxzZSwKICAgIGNvbXBvbmVudDogInNwYW4iCiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZHJhZ2dhYmxlcy5EcmFnZ2FibGVCYWRnZSwgewogICAgY29udGV4dElkOiBjb250ZXh0SWQsCiAgICBldmVudElkOiBpZCwKICAgIGZpZWxkOiAiYXVkaXRkLnJlc3VsdCIsCiAgICBxdWVyeVZhbHVlOiByZXN1bHQsCiAgICB2YWx1ZTogcmVzdWx0CiAgfSkpKTsKfSk7CgpleHBvcnRzLkF1ZGl0ZEdlbmVyaWNMaW5lID0gQXVkaXRkR2VuZXJpY0xpbmU7CkF1ZGl0ZEdlbmVyaWNMaW5lLmRpc3BsYXlOYW1lID0gJ0F1ZGl0ZEdlbmVyaWNMaW5lJzsKCnZhciBBdWRpdGRHZW5lcmljRGV0YWlscyA9IF9yZWFjdC5kZWZhdWx0Lm1lbW8oZnVuY3Rpb24gKF9yZWYyKSB7CiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhLAogICAgICBjb250ZXh0SWQgPSBfcmVmMi5jb250ZXh0SWQsCiAgICAgIHRleHQgPSBfcmVmMi50ZXh0LAogICAgICB0aW1lbGluZUlkID0gX3JlZjIudGltZWxpbmVJZDsKICB2YXIgaWQgPSBkYXRhLl9pZDsKICB2YXIgc2Vzc2lvbiA9ICgwLCBfZnAuZ2V0KSgnYXVkaXRkLnNlc3Npb25bMF0nLCBkYXRhKTsKICB2YXIgaG9zdE5hbWUgPSAoMCwgX2ZwLmdldCkoJ2hvc3QubmFtZVswXScsIGRhdGEpOwogIHZhciB1c2VyTmFtZSA9ICgwLCBfZnAuZ2V0KSgndXNlci5uYW1lWzBdJywgZGF0YSk7CiAgdmFyIHJlc3VsdCA9ICgwLCBfZnAuZ2V0KSgnYXVkaXRkLnJlc3VsdFswXScsIGRhdGEpOwogIHZhciBwcm9jZXNzUGlkID0gKDAsIF9mcC5nZXQpKCdwcm9jZXNzLnBpZFswXScsIGRhdGEpOwogIHZhciBwcm9jZXNzTmFtZSA9ICgwLCBfZnAuZ2V0KSgncHJvY2Vzcy5uYW1lWzBdJywgZGF0YSk7CiAgdmFyIHByb2Nlc3NFeGVjdXRhYmxlID0gKDAsIF9mcC5nZXQpKCdwcm9jZXNzLmV4ZWN1dGFibGVbMF0nLCBkYXRhKTsKICB2YXIgcHJvY2Vzc1RpdGxlID0gKDAsIF9mcC5nZXQpKCdwcm9jZXNzLnRpdGxlWzBdJywgZGF0YSk7CiAgdmFyIHdvcmtpbmdEaXJlY3RvcnkgPSAoMCwgX2ZwLmdldCkoJ3Byb2Nlc3Mud29ya2luZ19kaXJlY3RvcnlbMF0nLCBkYXRhKTsKICB2YXIgcHJpbWFyeSA9ICgwLCBfZnAuZ2V0KSgnYXVkaXRkLnN1bW1hcnkuYWN0b3IucHJpbWFyeVswXScsIGRhdGEpOwogIHZhciBzZWNvbmRhcnkgPSAoMCwgX2ZwLmdldCkoJ2F1ZGl0ZC5zdW1tYXJ5LmFjdG9yLnNlY29uZGFyeVswXScsIGRhdGEpOwogIHZhciBhcmdzID0gKDAsIF9mcC5nZXQpKCdwcm9jZXNzLmFyZ3MnLCBkYXRhKTsKCiAgaWYgKGRhdGEucHJvY2VzcyAhPSBudWxsKSB7CiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaGVscGVycy5EZXRhaWxzLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEF1ZGl0ZEdlbmVyaWNMaW5lLCB7CiAgICAgIGlkOiBpZCwKICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsCiAgICAgIHRleHQ6IHRleHQsCiAgICAgIGhvc3ROYW1lOiBob3N0TmFtZSwKICAgICAgdXNlck5hbWU6IHVzZXJOYW1lLAogICAgICBwcm9jZXNzTmFtZTogcHJvY2Vzc05hbWUsCiAgICAgIHByb2Nlc3NQaWQ6IHByb2Nlc3NQaWQsCiAgICAgIHByb2Nlc3NFeGVjdXRhYmxlOiBwcm9jZXNzRXhlY3V0YWJsZSwKICAgICAgcHJvY2Vzc1RpdGxlOiBwcm9jZXNzVGl0bGUsCiAgICAgIHdvcmtpbmdEaXJlY3Rvcnk6IHdvcmtpbmdEaXJlY3RvcnksCiAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgIHNlc3Npb246IHNlc3Npb24sCiAgICAgIHByaW1hcnk6IHByaW1hcnksCiAgICAgIHJlc3VsdDogcmVzdWx0LAogICAgICBzZWNvbmRhcnk6IHNlY29uZGFyeQogICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgc2l6ZTogInMiCiAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbmV0Zmxvdy5OZXRmbG93UmVuZGVyZXIsIHsKICAgICAgZGF0YTogZGF0YSwKICAgICAgdGltZWxpbmVJZDogdGltZWxpbmVJZAogICAgfSkpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gbnVsbDsKICB9Cn0pOwoKZXhwb3J0cy5BdWRpdGRHZW5lcmljRGV0YWlscyA9IEF1ZGl0ZEdlbmVyaWNEZXRhaWxzOwpBdWRpdGRHZW5lcmljRGV0YWlscy5kaXNwbGF5TmFtZSA9ICdBdWRpdGRHZW5lcmljRGV0YWlscyc7"},null]}