{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/saved_objects/public/saved_object/helpers/serialize_saved_object.js","dependencies":[{"path":"src/plugins/saved_objects/public/saved_object/helpers/serialize_saved_object.js","mtime":1589249551011},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnNlcmlhbGl6ZVNhdmVkT2JqZWN0ID0gc2VyaWFsaXplU2F2ZWRPYmplY3Q7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9hbmd1bGFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJhbmd1bGFyIikpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9raWJhbmFfdXRpbHMvcHVibGljIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7CgogIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsKICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsKICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7CiAgICB9KTsKICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsKICB9CgogIHJldHVybiBrZXlzOwp9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgewogIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsKCiAgICBpZiAoaSAlIDIpIHsKICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsKICAgIH0gZWxzZSB7CiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgICAgfSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKZnVuY3Rpb24gc2VyaWFsaXplU2F2ZWRPYmplY3Qoc2F2ZWRPYmplY3QsIGNvbmZpZykgewogIC8vIG1hcHBpbmcgZGVmaW5pdGlvbiBmb3IgdGhlIGZpZWxkcyB0aGF0IHRoaXMgb2JqZWN0IHdpbGwgZXhwb3NlCiAgdmFyIG1hcHBpbmcgPSAoMCwgX3B1YmxpYy5leHBhbmRTaG9ydGhhbmQpKGNvbmZpZy5tYXBwaW5nKTsKICB2YXIgYXR0cmlidXRlcyA9IHt9OwogIHZhciByZWZlcmVuY2VzID0gW107CgogIF9sb2Rhc2guZGVmYXVsdC5mb3JPd24obWFwcGluZywgZnVuY3Rpb24gKGZpZWxkTWFwcGluZywgZmllbGROYW1lKSB7CiAgICBpZiAodHlwZW9mIGZpZWxkTmFtZSAhPT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyBAdHMtaWdub3JlCgoKICAgIHZhciBzYXZlZE9iamVjdEZpZWxkVmFsID0gc2F2ZWRPYmplY3RbZmllbGROYW1lXTsKCiAgICBpZiAoc2F2ZWRPYmplY3RGaWVsZFZhbCAhPSBudWxsKSB7CiAgICAgIGF0dHJpYnV0ZXNbZmllbGROYW1lXSA9IGZpZWxkTWFwcGluZy5fc2VyaWFsaXplID8gZmllbGRNYXBwaW5nLl9zZXJpYWxpemUoc2F2ZWRPYmplY3RGaWVsZFZhbCkgOiBzYXZlZE9iamVjdEZpZWxkVmFsOwogICAgfQogIH0pOwoKICBpZiAoc2F2ZWRPYmplY3Quc2VhcmNoU291cmNlKSB7CiAgICB2YXIgc2VhcmNoU291cmNlRmllbGRzID0gX2xvZGFzaC5kZWZhdWx0Lm9taXQoc2F2ZWRPYmplY3Quc2VhcmNoU291cmNlLmdldEZpZWxkcygpLCBbJ3NvcnQnLCAnc2l6ZSddKTsKCiAgICBpZiAoc2VhcmNoU291cmNlRmllbGRzLmluZGV4KSB7CiAgICAgIC8vIHNlYXJjaFNvdXJjZUZpZWxkcy5pbmRleCB3aWxsIG5vcm1hbGx5IGJlIGFuIEluZGV4UGF0dGVybiwgYnV0IGNhbiBiZSBhIHN0cmluZyBpbiB0d28gc2NlbmFyaW9zOgogICAgICAvLyAoMSkgYGluaXQoKWAgKGFuZCBieSBleHRlbnNpb24gYGh5ZHJhdGVJbmRleFBhdHRlcm4oKWApIGhhc24ndCBiZWVuIGNhbGxlZCBvbiAgU2F2ZWQgT2JqZWN0CiAgICAgIC8vICgyKSBUaGUgSW5kZXhQYXR0ZXJuIGRvZXNuJ3QgZXhpc3QsIHNvIHdlIGZhaWwgdG8gcmVzb2x2ZSBpdCBpbiBgaHlkcmF0ZUluZGV4UGF0dGVybigpYAogICAgICB2YXIgaW5kZXhJZCA9IHR5cGVvZiBzZWFyY2hTb3VyY2VGaWVsZHMuaW5kZXggPT09ICdzdHJpbmcnID8gc2VhcmNoU291cmNlRmllbGRzLmluZGV4IDogc2VhcmNoU291cmNlRmllbGRzLmluZGV4LmlkOwogICAgICB2YXIgcmVmTmFtZSA9ICdraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleCc7CiAgICAgIHJlZmVyZW5jZXMucHVzaCh7CiAgICAgICAgbmFtZTogcmVmTmFtZSwKICAgICAgICB0eXBlOiAnaW5kZXgtcGF0dGVybicsCiAgICAgICAgaWQ6IGluZGV4SWQKICAgICAgfSk7CiAgICAgIHNlYXJjaFNvdXJjZUZpZWxkcyA9IF9vYmplY3RTcHJlYWQoe30sIHNlYXJjaFNvdXJjZUZpZWxkcywgewogICAgICAgIGluZGV4UmVmTmFtZTogcmVmTmFtZSwKICAgICAgICBpbmRleDogdW5kZWZpbmVkCiAgICAgIH0pOwogICAgfQoKICAgIGlmIChzZWFyY2hTb3VyY2VGaWVsZHMuZmlsdGVyKSB7CiAgICAgIHNlYXJjaFNvdXJjZUZpZWxkcyA9IF9vYmplY3RTcHJlYWQoe30sIHNlYXJjaFNvdXJjZUZpZWxkcywgewogICAgICAgIGZpbHRlcjogc2VhcmNoU291cmNlRmllbGRzLmZpbHRlci5tYXAoZnVuY3Rpb24gKGZpbHRlclJvdywgaSkgewogICAgICAgICAgaWYgKCFmaWx0ZXJSb3cubWV0YSB8fCAhZmlsdGVyUm93Lm1ldGEuaW5kZXgpIHsKICAgICAgICAgICAgcmV0dXJuIGZpbHRlclJvdzsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcmVmTmFtZSA9ICJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5maWx0ZXJbIi5jb25jYXQoaSwgIl0ubWV0YS5pbmRleCIpOwogICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKHsKICAgICAgICAgICAgbmFtZTogcmVmTmFtZSwKICAgICAgICAgICAgdHlwZTogJ2luZGV4LXBhdHRlcm4nLAogICAgICAgICAgICBpZDogZmlsdGVyUm93Lm1ldGEuaW5kZXgKICAgICAgICAgIH0pOwogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGZpbHRlclJvdywgewogICAgICAgICAgICBtZXRhOiBfb2JqZWN0U3ByZWFkKHt9LCBmaWx0ZXJSb3cubWV0YSwgewogICAgICAgICAgICAgIGluZGV4UmVmTmFtZTogcmVmTmFtZSwKICAgICAgICAgICAgICBpbmRleDogdW5kZWZpbmVkCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICB9KTsKICAgIH0KCiAgICBhdHRyaWJ1dGVzLmtpYmFuYVNhdmVkT2JqZWN0TWV0YSA9IHsKICAgICAgc2VhcmNoU291cmNlSlNPTjogX2FuZ3VsYXIuZGVmYXVsdC50b0pzb24oc2VhcmNoU291cmNlRmllbGRzKQogICAgfTsKICB9CgogIHJldHVybiB7CiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLAogICAgcmVmZXJlbmNlczogcmVmZXJlbmNlcwogIH07Cn0="},null]}