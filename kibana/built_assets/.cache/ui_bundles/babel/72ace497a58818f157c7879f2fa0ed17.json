{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/components/step_index_pattern/components/indices_list/indices_list.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/components/step_index_pattern/components/indices_list/indices_list.js","mtime":1589249549810},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuSW5kaWNlc0xpc3QgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb25zdGFudHMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CgogIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsKCiAgdmFyIGtleSwgaTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOwoKICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07CiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7CiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICB9CiAgfQoKICByZXR1cm4gdGFyZ2V0Owp9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7CiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgdmFyIHRhcmdldCA9IHt9OwogIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsKICB2YXIga2V5LCBpOwoKICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgewogICAga2V5ID0gc291cmNlS2V5c1tpXTsKICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgSW5kaWNlc0xpc3QgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKEluZGljZXNMaXN0LCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gSW5kaWNlc0xpc3QocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kaWNlc0xpc3QpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEluZGljZXNMaXN0KS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicGFnZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlc2V0UGFnZVRvMCIsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF90aGlzLm9uQ2hhbmdlUGFnZSgwKTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ2hhbmdlUGFnZSIsIGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgIF90aGlzLnBhZ2VyLmdvVG9QYWdlSW5kZXgocGFnZSk7CgogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgcGFnZTogcGFnZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uQ2hhbmdlUGVyUGFnZSIsIGZ1bmN0aW9uIChwZXJQYWdlKSB7CiAgICAgIF90aGlzLnBhZ2VyLnNldEl0ZW1zUGVyUGFnZShwZXJQYWdlKTsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBwZXJQYWdlOiBwZXJQYWdlCiAgICAgIH0pOwoKICAgICAgX3RoaXMucmVzZXRQYWdlVG8wKCk7CgogICAgICBfdGhpcy5jbG9zZVBlclBhZ2VDb250cm9sKCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvcGVuUGVyUGFnZUNvbnRyb2wiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1BlclBhZ2VDb250cm9sT3BlbjogdHJ1ZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNsb3NlUGVyUGFnZUNvbnRyb2wiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBpc1BlclBhZ2VDb250cm9sT3BlbjogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgcGFnZTogMCwKICAgICAgcGVyUGFnZTogX2NvbnN0YW50cy5QRVJfUEFHRV9JTkNSRU1FTlRTWzFdLAogICAgICBpc1BlclBhZ2VDb250cm9sT3BlbjogZmFsc2UKICAgIH07CiAgICBfdGhpcy5wYWdlciA9IG5ldyBfZXVpLlBhZ2VyKHByb3BzLmluZGljZXMubGVuZ3RoLCBfdGhpcy5zdGF0ZS5wZXJQYWdlLCBfdGhpcy5zdGF0ZS5wYWdlKTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmRpY2VzTGlzdCwgW3sKICAgIGtleTogIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHsKICAgICAgaWYgKG5leHRQcm9wcy5pbmRpY2VzLmxlbmd0aCAhPT0gdGhpcy5wcm9wcy5pbmRpY2VzLmxlbmd0aCkgewogICAgICAgIHRoaXMucGFnZXIuc2V0VG90YWxJdGVtcyhuZXh0UHJvcHMuaW5kaWNlcy5sZW5ndGgpOwogICAgICAgIHRoaXMucmVzZXRQYWdlVG8wKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJQYWdpbmF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQYWdpbmF0aW9uKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsCiAgICAgICAgICBwZXJQYWdlID0gX3RoaXMkc3RhdGUucGVyUGFnZSwKICAgICAgICAgIHBhZ2UgPSBfdGhpcyRzdGF0ZS5wYWdlLAogICAgICAgICAgaXNQZXJQYWdlQ29udHJvbE9wZW4gPSBfdGhpcyRzdGF0ZS5pc1BlclBhZ2VDb250cm9sT3BlbjsKCiAgICAgIHZhciBidXR0b24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uRW1wdHksIHsKICAgICAgICBzaXplOiAicyIsCiAgICAgICAgY29sb3I6ICJ0ZXh0IiwKICAgICAgICBpY29uVHlwZTogImFycm93RG93biIsCiAgICAgICAgaWNvblNpZGU6ICJyaWdodCIsCiAgICAgICAgb25DbGljazogdGhpcy5vcGVuUGVyUGFnZUNvbnRyb2wKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImtibi5tYW5hZ2VtZW50LmNyZWF0ZUluZGV4UGF0dGVybi5zdGVwLnBhZ2luZ0xhYmVsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlJvd3MgcGVyIHBhZ2U6IHtwZXJQYWdlfSIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBwZXJQYWdlOiBwZXJQYWdlCiAgICAgICAgfQogICAgICB9KSk7CgogICAgICB2YXIgaXRlbXMgPSBfY29uc3RhbnRzLlBFUl9QQUdFX0lOQ1JFTUVOVFMubWFwKGZ1bmN0aW9uIChpbmNyZW1lbnQpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51SXRlbSwgewogICAgICAgICAga2V5OiBpbmNyZW1lbnQsCiAgICAgICAgICBpY29uOiAiZW1wdHkiLAogICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5vbkNoYW5nZVBlclBhZ2UoaW5jcmVtZW50KTsKICAgICAgICAgIH0KICAgICAgICB9LCBpbmNyZW1lbnQpOwogICAgICB9KTsKCiAgICAgIHZhciBwYWdlQ291bnQgPSB0aGlzLnBhZ2VyLmdldFRvdGFsUGFnZXMoKTsKICAgICAgdmFyIHBhZ2luYXRpb25Db250cm9scyA9IHBhZ2VDb3VudCA+IDEgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpUGFnaW5hdGlvbiwgewogICAgICAgIHBhZ2VDb3VudDogcGFnZUNvdW50LAogICAgICAgIGFjdGl2ZVBhZ2U6IHBhZ2UsCiAgICAgICAgb25QYWdlQ2xpY2s6IHRoaXMub25DaGFuZ2VQYWdlCiAgICAgIH0pKSA6IG51bGw7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICJzcGFjZUJldHdlZW4iLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyLCB7CiAgICAgICAgaWQ6ICJjdXN0b21pemFibGVQYWdpbmF0aW9uIiwKICAgICAgICBidXR0b246IGJ1dHRvbiwKICAgICAgICBpc09wZW46IGlzUGVyUGFnZUNvbnRyb2xPcGVuLAogICAgICAgIGNsb3NlUG9wb3ZlcjogdGhpcy5jbG9zZVBlclBhZ2VDb250cm9sLAogICAgICAgIHBhbmVsUGFkZGluZ1NpemU6ICJub25lIiwKICAgICAgICB3aXRoVGl0bGU6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbnRleHRNZW51UGFuZWwsIHsKICAgICAgICBpdGVtczogaXRlbXMKICAgICAgfSkpKSwgcGFnaW5hdGlvbkNvbnRyb2xzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoaWdobGlnaHRJbmRleE5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhpZ2hsaWdodEluZGV4TmFtZShpbmRleE5hbWUsIHF1ZXJ5KSB7CiAgICAgIHZhciBxdWVyeUlkeCA9IGluZGV4TmFtZS5pbmRleE9mKHF1ZXJ5KTsKCiAgICAgIGlmICghcXVlcnkgfHwgcXVlcnlJZHggPT09IC0xKSB7CiAgICAgICAgcmV0dXJuIGluZGV4TmFtZTsKICAgICAgfQoKICAgICAgdmFyIHByZVN0ciA9IGluZGV4TmFtZS5zdWJzdHIoMCwgcXVlcnlJZHgpOwogICAgICB2YXIgcG9zdFN0ciA9IGluZGV4TmFtZS5zdWJzdHIocXVlcnlJZHggKyBxdWVyeS5sZW5ndGgpOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHByZVN0ciwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3Ryb25nIiwgbnVsbCwgcXVlcnkpLCBwb3N0U3RyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgaW5kaWNlcyA9IF90aGlzJHByb3BzLmluZGljZXMsCiAgICAgICAgICBxdWVyeSA9IF90aGlzJHByb3BzLnF1ZXJ5LAogICAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgWyJpbmRpY2VzIiwgInF1ZXJ5Il0pOwoKICAgICAgdmFyIHF1ZXJ5V2l0aG91dFdpbGRjYXJkID0gcXVlcnkuZW5kc1dpdGgoJyonKSA/IHF1ZXJ5LnN1YnN0cigwLCBxdWVyeS5sZW5ndGggLSAxKSA6IHF1ZXJ5OwogICAgICB2YXIgcGFnaW5hdGVkSW5kaWNlcyA9IGluZGljZXMuc2xpY2UodGhpcy5wYWdlci5maXJzdEl0ZW1JbmRleCwgdGhpcy5wYWdlci5sYXN0SXRlbUluZGV4ICsgMSk7CiAgICAgIHZhciByb3dzID0gcGFnaW5hdGVkSW5kaWNlcy5tYXAoZnVuY3Rpb24gKGluZGV4LCBrZXkpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlUm93LCB7CiAgICAgICAgICBrZXk6IGtleQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWJsZVJvd0NlbGwsIG51bGwsIF90aGlzMy5oaWdobGlnaHRJbmRleE5hbWUoaW5kZXgubmFtZSwgcXVlcnlXaXRob3V0V2lsZGNhcmQpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlUm93Q2VsbCwgbnVsbCwgaW5kZXgudGFncy5tYXAoZnVuY3Rpb24gKHRhZykgewogICAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCYWRnZSwgewogICAgICAgICAgICBrZXk6ICJpbmRleF8iLmNvbmNhdChrZXksICJfdGFnXyIpLmNvbmNhdCh0YWcua2V5KSwKICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IgogICAgICAgICAgfSwgdGFnLm5hbWUpOwogICAgICAgIH0pKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgcmVzdCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRhYmxlLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGFibGVCb2R5LCBudWxsLCByb3dzKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIHRoaXMucmVuZGVyUGFnaW5hdGlvbigpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJbmRpY2VzTGlzdDsKfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpOwoKZXhwb3J0cy5JbmRpY2VzTGlzdCA9IEluZGljZXNMaXN0Ow=="},null]}