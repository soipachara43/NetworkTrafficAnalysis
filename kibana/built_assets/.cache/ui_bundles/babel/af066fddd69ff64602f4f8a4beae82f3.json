{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/configuration_form.js","dependencies":[{"path":"x-pack/plugins/index_management/public/application/components/mappings_editor/components/configuration_form/configuration_form.js","mtime":1589249554096},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}