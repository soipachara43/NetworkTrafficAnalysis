{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_timeseries/public/components/add_delete_buttons.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_timeseries/public/components/add_delete_buttons.js","mtime":1589249550018},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFkZERlbGV0ZUJ1dHRvbnMgPSBBZGREZWxldGVCdXR0b25zOwoKdmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInByb3AtdHlwZXMiKSk7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCmZ1bmN0aW9uIEFkZERlbGV0ZUJ1dHRvbnMocHJvcHMpIHsKICB2YXIgdGVzdFN1YmogPSBwcm9wcy50ZXN0U3ViajsKCiAgdmFyIGNyZWF0ZURlbGV0ZSA9IGZ1bmN0aW9uIGNyZWF0ZURlbGV0ZSgpIHsKICAgIGlmIChwcm9wcy5kaXNhYmxlRGVsZXRlKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgZ3JvdzogZmFsc2UKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAgIGNvbnRlbnQ6IHByb3BzLmRlbGV0ZVRvb2x0aXAKICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICIiLmNvbmNhdCh0ZXN0U3ViaiwgIkRlbGV0ZUJ0biIpLAogICAgICAiYXJpYS1sYWJlbCI6IHByb3BzLmRlbGV0ZVRvb2x0aXAsCiAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgaWNvblR5cGU6ICJ0cmFzaCIsCiAgICAgIG9uQ2xpY2s6IHByb3BzLm9uRGVsZXRlCiAgICB9KSkpOwogIH07CgogIHZhciBjcmVhdGVBZGQgPSBmdW5jdGlvbiBjcmVhdGVBZGQoKSB7CiAgICBpZiAocHJvcHMuZGlzYWJsZUFkZCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICBjb250ZW50OiBwcm9wcy5hZGRUb29sdGlwCiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uSWNvbiwgewogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiIi5jb25jYXQodGVzdFN1YmosICJBZGRCdG4iKSwKICAgICAgImFyaWEtbGFiZWwiOiBwcm9wcy5hZGRUb29sdGlwLAogICAgICBpY29uVHlwZTogInBsdXNJbkNpcmNsZSIsCiAgICAgIG9uQ2xpY2s6IHByb3BzLm9uQWRkCiAgICB9KSkpOwogIH07CgogIHZhciBjcmVhdGVDbG9uZSA9IGZ1bmN0aW9uIGNyZWF0ZUNsb25lKCkgewogICAgdmFyIGNsb25lQnRuID0gbnVsbDsKCiAgICBpZiAocHJvcHMub25DbG9uZSAmJiAhcHJvcHMuZGlzYWJsZUFkZCkgewogICAgICBjbG9uZUJ0biA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUb29sVGlwLCB7CiAgICAgICAgY29udGVudDogcHJvcHMuY2xvbmVUb29sdGlwCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25JY29uLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogIiIuY29uY2F0KHRlc3RTdWJqLCAiQ2xvbmVCdG4iKSwKICAgICAgICAiYXJpYS1sYWJlbCI6IHByb3BzLmNsb25lVG9vbHRpcCwKICAgICAgICBpY29uVHlwZTogImNvcHkiLAogICAgICAgIG9uQ2xpY2s6IHByb3BzLm9uQ2xvbmUKICAgICAgfSkpKTsKICAgIH0KCiAgICByZXR1cm4gY2xvbmVCdG47CiAgfTsKCiAgdmFyIGNyZWF0ZUFjdGl2YXRlUGFuZWwgPSBmdW5jdGlvbiBjcmVhdGVBY3RpdmF0ZVBhbmVsKCkgewogICAgdmFyIGFjdGl2YXRlUGFuZWxCdG4gPSBudWxsOwoKICAgIGlmICgoMCwgX2xvZGFzaC5pc0Jvb2xlYW4pKHByb3BzLmlzUGFuZWxBY3RpdmUpKSB7CiAgICAgIHZhciB0b29sdGlwID0gcHJvcHMuaXNQYW5lbEFjdGl2ZSA/IHByb3BzLmRlYWN0aXZhdGVQYW5lbFRvb2x0aXAgOiBwcm9wcy5hY3RpdmF0ZVBhbmVsVG9vbHRpcDsKICAgICAgdmFyIGljb25UeXBlID0gcHJvcHMuaXNQYW5lbEFjdGl2ZSA/ICdleWUnIDogJ2V5ZUNsb3NlZCc7CiAgICAgIGFjdGl2YXRlUGFuZWxCdG4gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVG9vbFRpcCwgewogICAgICAgIGNvbnRlbnQ6IHRvb2x0aXAKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUJ1dHRvbkljb24sIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiIi5jb25jYXQodGVzdFN1YmosICJBY3RpdmF0ZVBhbmVsQnRuIiksCiAgICAgICAgImFyaWEtbGFiZWwiOiB0b29sdGlwLAogICAgICAgIGljb25UeXBlOiBpY29uVHlwZSwKICAgICAgICBvbkNsaWNrOiBwcm9wcy50b2dnbGVQYW5lbEFjdGl2YXRpb24KICAgICAgfSkpKTsKICAgIH0KCiAgICByZXR1cm4gYWN0aXZhdGVQYW5lbEJ0bjsKICB9OwoKICB2YXIgZGVsZXRlQnRuID0gY3JlYXRlRGVsZXRlKCk7CiAgdmFyIGFkZEJ0biA9IGNyZWF0ZUFkZCgpOwogIHZhciBjbG9uZUJ0biA9IGNyZWF0ZUNsb25lKCk7CiAgdmFyIGFjdGl2YXRlUGFuZWxCdG4gPSBjcmVhdGVBY3RpdmF0ZVBhbmVsKCk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGd1dHRlclNpemU6ICJzIiwKICAgIHJlc3BvbnNpdmU6IHByb3BzLnJlc3BvbnNpdmUsCiAgICBqdXN0aWZ5Q29udGVudDogImZsZXhFbmQiCiAgfSwgYWN0aXZhdGVQYW5lbEJ0biwgY2xvbmVCdG4sIGFkZEJ0biwgZGVsZXRlQnRuKTsKfQoKQWRkRGVsZXRlQnV0dG9ucy5kZWZhdWx0UHJvcHMgPSB7CiAgdGVzdFN1Ymo6ICdBZGQnLAogIGFjdGl2ZVRvb2x0aXA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVGltZXNlcmllcy5hZGREZWxldGVCdXR0b25zLmFkZEJ1dHRvbkRlZmF1bHRUb29sdGlwJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdBZGQnCiAgfSksCiAgYWRkVG9vbHRpcDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVUaW1lc2VyaWVzLmFkZERlbGV0ZUJ1dHRvbnMuYWRkQnV0dG9uRGVmYXVsdFRvb2x0aXAnLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ0FkZCcKICB9KSwKICBkZWxldGVUb29sdGlwOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgndmlzVHlwZVRpbWVzZXJpZXMuYWRkRGVsZXRlQnV0dG9ucy5kZWxldGVCdXR0b25EZWZhdWx0VG9vbHRpcCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnRGVsZXRlJwogIH0pLAogIGNsb25lVG9vbHRpcDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVUaW1lc2VyaWVzLmFkZERlbGV0ZUJ1dHRvbnMuY2xvbmVCdXR0b25EZWZhdWx0VG9vbHRpcCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnQ2xvbmUnCiAgfSksCiAgYWN0aXZhdGVQYW5lbFRvb2x0aXA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVGltZXNlcmllcy5hZGREZWxldGVCdXR0b25zLnJlRW5hYmxlVG9vbHRpcCcsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnUmUtZW5hYmxlJwogIH0pLAogIGRlYWN0aXZhdGVQYW5lbFRvb2x0aXA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVGltZXNlcmllcy5hZGREZWxldGVCdXR0b25zLnRlbXBvcmFyaWx5RGlzYWJsZVRvb2x0aXAnLCB7CiAgICBkZWZhdWx0TWVzc2FnZTogJ1RlbXBvcmFyaWx5IERpc2FibGUnCiAgfSkKfTsKQWRkRGVsZXRlQnV0dG9ucy5wcm9wVHlwZXMgPSB7CiAgYWRkVG9vbHRpcDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBkZWxldGVUb29sdGlwOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIGNsb25lVG9vbHRpcDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBhY3RpdmF0ZVBhbmVsVG9vbHRpcDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywKICBkZWFjdGl2YXRlUGFuZWxUb29sdGlwOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHRvZ2dsZVBhbmVsQWN0aXZhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsCiAgaXNQYW5lbEFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsCiAgZGlzYWJsZUFkZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsCiAgZGlzYWJsZURlbGV0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsCiAgb25DbG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsCiAgb25BZGQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLAogIG9uRGVsZXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywKICByZXNwb25zaXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbAp9Ow=="},null]}