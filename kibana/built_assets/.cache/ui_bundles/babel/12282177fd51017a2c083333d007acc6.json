{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/embeddable/map_embeddable_factory.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/embeddable/map_embeddable_factory.js","mtime":1589249552428},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1hcEVtYmVkZGFibGVGYWN0b3J5ID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX2NhcGFiaWxpdGllcyA9IHJlcXVpcmUoInVpL2NhcGFiaWxpdGllcyIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9sZWdhY3kvY29yZV9wbHVnaW5zL2VtYmVkZGFibGVfYXBpL3B1YmxpYy9ucF9yZWFkeS9wdWJsaWMiKTsKCnZhciBfbGVnYWN5ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xlZ2FjeS9jb3JlX3BsdWdpbnMvZW1iZWRkYWJsZV9hcGkvcHVibGljL25wX3JlYWR5L3B1YmxpYy9sZWdhY3kiKTsKCnZhciBfbWFwX2VtYmVkZGFibGUgPSByZXF1aXJlKCIuL21hcF9lbWJlZGRhYmxlIik7Cgp2YXIgX2tpYmFuYV9zZXJ2aWNlcyA9IHJlcXVpcmUoIi4uL2tpYmFuYV9zZXJ2aWNlcyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX3N0b3JlID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vcGx1Z2lucy9tYXBzL3B1YmxpYy9yZWR1Y2Vycy9zdG9yZSIpOwoKdmFyIF9tYXBfYWN0aW9ucyA9IHJlcXVpcmUoIi4uL2FjdGlvbnMvbWFwX2FjdGlvbnMiKTsKCnZhciBfbWFwX3NlbGVjdG9ycyA9IHJlcXVpcmUoIi4uL3NlbGVjdG9ycy9tYXBfc2VsZWN0b3JzIik7Cgp2YXIgX2dldF9pbml0aWFsX2xheWVycyA9IHJlcXVpcmUoIi4uL2FuZ3VsYXIvZ2V0X2luaXRpYWxfbGF5ZXJzIik7Cgp2YXIgX21lcmdlX2lucHV0X3dpdGhfc2F2ZWRfbWFwID0gcmVxdWlyZSgiLi9tZXJnZV9pbnB1dF93aXRoX3NhdmVkX21hcCIpOwoKcmVxdWlyZSgiLi4vYW5ndWxhci9zZXJ2aWNlcy9naXNfbWFwX3NhdmVkX29iamVjdF9sb2FkZXIiKTsKCnZhciBfcGx1Z2luID0gcmVxdWlyZSgiLi4vcGx1Z2luIik7Cgp2YXIgX25ld19wbGF0Zm9ybSA9IHJlcXVpcmUoInVpL25ld19wbGF0Zm9ybSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQoKdmFyIE1hcEVtYmVkZGFibGVGYWN0b3J5ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0VtYmVkZGFibGVGYWN0b3J5KSB7CiAgX2luaGVyaXRzKE1hcEVtYmVkZGFibGVGYWN0b3J5LCBfRW1iZWRkYWJsZUZhY3RvcnkpOwoKICBmdW5jdGlvbiBNYXBFbWJlZGRhYmxlRmFjdG9yeSgpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFwRW1iZWRkYWJsZUZhY3RvcnkpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE1hcEVtYmVkZGFibGVGYWN0b3J5KS5jYWxsKHRoaXMsIHsKICAgICAgc2F2ZWRPYmplY3RNZXRhRGF0YTogewogICAgICAgIG5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcFNhdmVkT2JqZWN0TGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ01hcCcKICAgICAgICB9KSwKICAgICAgICB0eXBlOiBfY29uc3RhbnRzLk1BUF9TQVZFRF9PQkpFQ1RfVFlQRSwKICAgICAgICBnZXRJY29uRm9yU2F2ZWRPYmplY3Q6IGZ1bmN0aW9uIGdldEljb25Gb3JTYXZlZE9iamVjdCgpIHsKICAgICAgICAgIHJldHVybiBfY29uc3RhbnRzLkFQUF9JQ09OOwogICAgICAgIH0KICAgICAgfQogICAgfSkpOyAvLyBJbml0IHJlcXVpcmVkIHNlcnZpY2VzLiBOZWNlc3Nhcnkgd2hpbGUgaW4gbGVnYWN5CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidHlwZSIsIF9jb25zdGFudHMuTUFQX1NBVkVEX09CSkVDVF9UWVBFKTsKCiAgICAoMCwgX3BsdWdpbi5iaW5kU2V0dXBDb3JlQW5kUGx1Z2lucykoX25ld19wbGF0Zm9ybS5ucFNldHVwLmNvcmUsIF9uZXdfcGxhdGZvcm0ubnBTZXR1cC5wbHVnaW5zKTsKICAgICgwLCBfcGx1Z2luLmJpbmRTdGFydENvcmVBbmRQbHVnaW5zKShfbmV3X3BsYXRmb3JtLm5wU3RhcnQuY29yZSwgX25ld19wbGF0Zm9ybS5ucFN0YXJ0LnBsdWdpbnMpOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE1hcEVtYmVkZGFibGVGYWN0b3J5LCBbewogICAga2V5OiAiaXNFZGl0YWJsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNFZGl0YWJsZSgpIHsKICAgICAgcmV0dXJuIF9jYXBhYmlsaXRpZXMuY2FwYWJpbGl0aWVzLmdldCgpLm1hcHMuc2F2ZTsKICAgIH0gLy8gTm90IHN1cHBvcnRlZCB5ZXQgZm9yIG1hcHMgdHlwZXMuCgogIH0sIHsKICAgIGtleTogImNhbkNyZWF0ZU5ldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuQ3JlYXRlTmV3KCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RGlzcGxheU5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKCkgewogICAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLm1hcHMuZW1iZWRkYWJsZURpc3BsYXlOYW1lJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnbWFwJwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0SW5kZXhQYXR0ZXJucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dldEluZGV4UGF0dGVybnMyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobGF5ZXJMaXN0KSB7CiAgICAgICAgdmFyIHN0b3JlLCBxdWVyeWFibGVJbmRleFBhdHRlcm5JZHMsIHByb21pc2VzLCBpbmRleFBhdHRlcm5zOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGV4dHJhY3QgbGF5ZXJMaXN0IGZyb20gc3RvcmUgdG8gZ2V0IHF1ZXJ5YWJsZSBpbmRleCBwYXR0ZXJuIGlkcwogICAgICAgICAgICAgICAgc3RvcmUgPSAoMCwgX3N0b3JlLmNyZWF0ZU1hcFN0b3JlKSgpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxOwogICAgICAgICAgICAgICAgbGF5ZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKGxheWVyRGVzY3JpcHRvcikgewogICAgICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaCgoMCwgX21hcF9hY3Rpb25zLmFkZExheWVyV2l0aG91dERhdGFTeW5jKShsYXllckRlc2NyaXB0b3IpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcXVlcnlhYmxlSW5kZXhQYXR0ZXJuSWRzID0gKDAsIF9tYXBfc2VsZWN0b3JzLmdldFF1ZXJ5YWJsZVVuaXF1ZUluZGV4UGF0dGVybklkcykoc3RvcmUuZ2V0U3RhdGUoKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSA2OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyWyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcEVtYmVkZGFibGVGYWN0b3J5LmludmFsaWRMYXllckxpc3QnLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVW5hYmxlIHRvIGxvYWQgbWFwLCBtYWxmb3JtZWQgbGF5ZXIgbGlzdCcKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBxdWVyeWFibGVJbmRleFBhdHRlcm5JZHMubWFwKAogICAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoaW5kZXhQYXR0ZXJuSWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfa2liYW5hX3NlcnZpY2VzLmdldEluZGV4UGF0dGVyblNlcnZpY2UpKCkuZ2V0KGluZGV4UGF0dGVybklkKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG51bGwpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDZdXSk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIGluZGV4UGF0dGVybnMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfbG9kYXNoLmRlZmF1bHQuY29tcGFjdChpbmRleFBhdHRlcm5zKSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMSwgNl1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2dldEluZGV4UGF0dGVybnMoX3gpIHsKICAgICAgICByZXR1cm4gX2dldEluZGV4UGF0dGVybnMyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfZ2V0SW5kZXhQYXR0ZXJuczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9mZXRjaFNhdmVkTWFwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmV0Y2hTYXZlZE1hcDIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhzYXZlZE9iamVjdElkKSB7CiAgICAgICAgdmFyICRpbmplY3Rvciwgc2F2ZWRPYmplY3RMb2FkZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY2hyb21lLmRlZmF1bHQuZGFuZ2Vyb3VzbHlHZXRBY3RpdmVJbmplY3RvcigpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAkaW5qZWN0b3IgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIHNhdmVkT2JqZWN0TG9hZGVyID0gJGluamVjdG9yLmdldCgnZ2lzTWFwU2F2ZWRPYmplY3RMb2FkZXInKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBzYXZlZE9iamVjdExvYWRlci5nZXQoc2F2ZWRPYmplY3RJZCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDMuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIF9mZXRjaFNhdmVkTWFwKF94MykgewogICAgICAgIHJldHVybiBfZmV0Y2hTYXZlZE1hcDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9mZXRjaFNhdmVkTWFwOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlRnJvbVNhdmVkT2JqZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlRnJvbVNhdmVkT2JqZWN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoc2F2ZWRPYmplY3RJZCwgaW5wdXQsIHBhcmVudCkgewogICAgICAgIHZhciBzYXZlZE1hcCwgbGF5ZXJMaXN0LCBpbmRleFBhdHRlcm5zLCBlbWJlZGRhYmxlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2hTYXZlZE1hcChzYXZlZE9iamVjdElkKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgc2F2ZWRNYXAgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIGxheWVyTGlzdCA9ICgwLCBfZ2V0X2luaXRpYWxfbGF5ZXJzLmdldEluaXRpYWxMYXllcnMpKHNhdmVkTWFwLmxheWVyTGlzdEpTT04pOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluZGV4UGF0dGVybnMobGF5ZXJMaXN0KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJucyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgZW1iZWRkYWJsZSA9IG5ldyBfbWFwX2VtYmVkZGFibGUuTWFwRW1iZWRkYWJsZSh7CiAgICAgICAgICAgICAgICAgIGxheWVyTGlzdDogbGF5ZXJMaXN0LAogICAgICAgICAgICAgICAgICB0aXRsZTogc2F2ZWRNYXAudGl0bGUsCiAgICAgICAgICAgICAgICAgIGVkaXRVcmw6IF9jaHJvbWUuZGVmYXVsdC5hZGRCYXNlUGF0aCgoMCwgX2NvbnN0YW50cy5jcmVhdGVNYXBQYXRoKShzYXZlZE9iamVjdElkKSksCiAgICAgICAgICAgICAgICAgIGluZGV4UGF0dGVybnM6IGluZGV4UGF0dGVybnMsCiAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiB0aGlzLmlzRWRpdGFibGUoKQogICAgICAgICAgICAgICAgfSwgaW5wdXQsIHBhcmVudCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDg7CiAgICAgICAgICAgICAgICBlbWJlZGRhYmxlLnVwZGF0ZUlucHV0KCgwLCBfbWVyZ2VfaW5wdXRfd2l0aF9zYXZlZF9tYXAubWVyZ2VJbnB1dFdpdGhTYXZlZE1hcCkoaW5wdXQsIHNhdmVkTWFwKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDEyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDgpOwogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5tYXBzLm1hcEVtYmVkZGFibGVGYWN0b3J5LmludmFsaWRTYXZlZE9iamVjdCcsIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdVbmFibGUgdG8gbG9hZCBtYXAsIG1hbGZvcm1lZCBzYXZlZCBvYmplY3QnCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgZW1iZWRkYWJsZSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMsIFtbOCwgMTJdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21TYXZlZE9iamVjdChfeDQsIF94NSwgX3g2KSB7CiAgICAgICAgcmV0dXJuIF9jcmVhdGVGcm9tU2F2ZWRPYmplY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyZWF0ZUZyb21TYXZlZE9iamVjdDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNyZWF0ZUZyb21TdGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NyZWF0ZUZyb21TdGF0ZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KHN0YXRlLCBpbnB1dCwgcGFyZW50LCByZW5kZXJUb29sdGlwQ29udGVudCwgZXZlbnRIYW5kbGVycykgewogICAgICAgIHZhciBsYXllckxpc3QsIGluZGV4UGF0dGVybnM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGxheWVyTGlzdCA9IHN0YXRlICYmIHN0YXRlLmxheWVyTGlzdCA/IHN0YXRlLmxheWVyTGlzdCA6ICgwLCBfZ2V0X2luaXRpYWxfbGF5ZXJzLmdldEluaXRpYWxMYXllcnMpKCk7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5kZXhQYXR0ZXJucyhsYXllckxpc3QpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBpbmRleFBhdHRlcm5zID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgbmV3IF9tYXBfZW1iZWRkYWJsZS5NYXBFbWJlZGRhYmxlKHsKICAgICAgICAgICAgICAgICAgbGF5ZXJMaXN0OiBsYXllckxpc3QsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiBzdGF0ZSAmJiBzdGF0ZS50aXRsZSA/IHN0YXRlLnRpdGxlIDogJycsCiAgICAgICAgICAgICAgICAgIGVkaXRVcmw6IG51bGwsCiAgICAgICAgICAgICAgICAgIGluZGV4UGF0dGVybnM6IGluZGV4UGF0dGVybnMsCiAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZQogICAgICAgICAgICAgICAgfSwgaW5wdXQsIHBhcmVudCwgcmVuZGVyVG9vbHRpcENvbnRlbnQsIGV2ZW50SGFuZGxlcnMpKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gY3JlYXRlRnJvbVN0YXRlKF94NywgX3g4LCBfeDksIF94MTAsIF94MTEpIHsKICAgICAgICByZXR1cm4gX2NyZWF0ZUZyb21TdGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY3JlYXRlRnJvbVN0YXRlOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY3JlYXRlID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoaW5wdXQpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfY2hyb21lLmRlZmF1bHQuYWRkQmFzZVBhdGgoKDAsIF9jb25zdGFudHMuY3JlYXRlTWFwUGF0aCkoJycpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBuZXcgX3B1YmxpYy5FcnJvckVtYmVkZGFibGUoJ01hcHMgY2FuIG9ubHkgYmUgY3JlYXRlZCB3aXRoIGNyZWF0ZUZyb21TYXZlZE9iamVjdCBvciBjcmVhdGVGcm9tU3RhdGUnLCBpbnB1dCkpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBjcmVhdGUoX3gxMikgewogICAgICAgIHJldHVybiBfY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjcmVhdGU7CiAgICB9KCkKICB9XSk7CgogIHJldHVybiBNYXBFbWJlZGRhYmxlRmFjdG9yeTsKfShfcHVibGljLkVtYmVkZGFibGVGYWN0b3J5KTsKCmV4cG9ydHMuTWFwRW1iZWRkYWJsZUZhY3RvcnkgPSBNYXBFbWJlZGRhYmxlRmFjdG9yeTsKCl9sZWdhY3kuc2V0dXAucmVnaXN0ZXJFbWJlZGRhYmxlRmFjdG9yeShfY29uc3RhbnRzLk1BUF9TQVZFRF9PQkpFQ1RfVFlQRSwgbmV3IE1hcEVtYmVkZGFibGVGYWN0b3J5KCkpOw=="},null]}