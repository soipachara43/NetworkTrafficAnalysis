{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/data/public/ui/query_string_input/query_bar_top_row.js","dependencies":[{"path":"src/plugins/data/public/ui/query_string_input/query_bar_top_row.js","mtime":1589249550691},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlF1ZXJ5QmFyVG9wUm93ID0gUXVlcnlCYXJUb3BSb3c7Cgp2YXIgX2RhdGVtYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJAZWxhc3RpYy9kYXRlbWF0aCIpKTsKCnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiY2xhc3NuYW1lcyIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2tpYmFuYV9yZWFjdC9wdWJsaWMiKTsKCnZhciBfcXVlcnlfc3RyaW5nX2lucHV0ID0gcmVxdWlyZSgiLi9xdWVyeV9zdHJpbmdfaW5wdXQiKTsKCnZhciBfY29tbW9uID0gcmVxdWlyZSgiLi4vLi4vLi4vY29tbW9uIik7Cgp2YXIgX3F1ZXJ5ID0gcmVxdWlyZSgiLi4vLi4vcXVlcnkiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsKICB2YXIgX2FyciA9IFtdOwogIHZhciBfbiA9IHRydWU7CiAgdmFyIF9kID0gZmFsc2U7CiAgdmFyIF9lID0gdW5kZWZpbmVkOwoKICB0cnkgewogICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgewogICAgICBfYXJyLnB1c2goX3MudmFsdWUpOwoKICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2QgPSB0cnVlOwogICAgX2UgPSBlcnI7CiAgfSBmaW5hbGx5IHsKICAgIHRyeSB7CiAgICAgIGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOwogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKF9kKSB0aHJvdyBfZTsKICAgIH0KICB9CgogIHJldHVybiBfYXJyOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsKfQoKZnVuY3Rpb24gUXVlcnlCYXJUb3BSb3cocHJvcHMpIHsKICB2YXIgX3VzZVN0YXRlID0gKDAsIF9yZWFjdC51c2VTdGF0ZSkoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaXNEYXRlUmFuZ2VJbnZhbGlkID0gX3VzZVN0YXRlMlswXSwKICAgICAgc2V0SXNEYXRlUmFuZ2VJbnZhbGlkID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIGtpYmFuYSA9ICgwLCBfcHVibGljLnVzZUtpYmFuYSkoKTsKICB2YXIgX2tpYmFuYSRzZXJ2aWNlcyA9IGtpYmFuYS5zZXJ2aWNlcywKICAgICAgdWlTZXR0aW5ncyA9IF9raWJhbmEkc2VydmljZXMudWlTZXR0aW5ncywKICAgICAgbm90aWZpY2F0aW9ucyA9IF9raWJhbmEkc2VydmljZXMubm90aWZpY2F0aW9ucywKICAgICAgc3RvcmFnZSA9IF9raWJhbmEkc2VydmljZXMuc3RvcmFnZSwKICAgICAgYXBwTmFtZSA9IF9raWJhbmEkc2VydmljZXMuYXBwTmFtZSwKICAgICAgZG9jTGlua3MgPSBfa2liYW5hJHNlcnZpY2VzLmRvY0xpbmtzOwogIHZhciBrdWVyeVF1ZXJ5U3ludGF4TGluayA9IGRvY0xpbmtzLmxpbmtzLnF1ZXJ5Lmt1ZXJ5UXVlcnlTeW50YXg7CiAgdmFyIHF1ZXJ5TGFuZ3VhZ2UgPSBwcm9wcy5xdWVyeSAmJiBwcm9wcy5xdWVyeS5sYW5ndWFnZTsKCiAgdmFyIHBlcnNpc3RlZExvZyA9IF9yZWFjdC5kZWZhdWx0LnVzZU1lbW8oZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHF1ZXJ5TGFuZ3VhZ2UgJiYgdWlTZXR0aW5ncyAmJiBzdG9yYWdlICYmIGFwcE5hbWUgPyAoMCwgX3F1ZXJ5LmdldFF1ZXJ5TG9nKSh1aVNldHRpbmdzLCBzdG9yYWdlLCBhcHBOYW1lLCBxdWVyeUxhbmd1YWdlKSA6IHVuZGVmaW5lZDsKICB9LCBbYXBwTmFtZSwgcXVlcnlMYW5ndWFnZSwgdWlTZXR0aW5ncywgc3RvcmFnZV0pOwoKICBmdW5jdGlvbiBvbkNsaWNrU3VibWl0QnV0dG9uKGV2ZW50KSB7CiAgICBpZiAocGVyc2lzdGVkTG9nICYmIHByb3BzLnF1ZXJ5KSB7CiAgICAgIHBlcnNpc3RlZExvZy5hZGQocHJvcHMucXVlcnkucXVlcnkpOwogICAgfQoKICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICBvblN1Ym1pdCh7CiAgICAgIHF1ZXJ5OiBwcm9wcy5xdWVyeSwKICAgICAgZGF0ZVJhbmdlOiBnZXREYXRlUmFuZ2UoKQogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBnZXREYXRlUmFuZ2UoKSB7CiAgICB2YXIgZGVmYXVsdFRpbWVTZXR0aW5nID0gdWlTZXR0aW5ncy5nZXQoJ3RpbWVwaWNrZXI6dGltZURlZmF1bHRzJyk7CiAgICByZXR1cm4gewogICAgICBmcm9tOiBwcm9wcy5kYXRlUmFuZ2VGcm9tIHx8IGRlZmF1bHRUaW1lU2V0dGluZy5mcm9tLAogICAgICB0bzogcHJvcHMuZGF0ZVJhbmdlVG8gfHwgZGVmYXVsdFRpbWVTZXR0aW5nLnRvCiAgICB9OwogIH0KCiAgZnVuY3Rpb24gb25RdWVyeUNoYW5nZShxdWVyeSkgewogICAgcHJvcHMub25DaGFuZ2UoewogICAgICBxdWVyeTogcXVlcnksCiAgICAgIGRhdGVSYW5nZTogZ2V0RGF0ZVJhbmdlKCkKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gb25UaW1lQ2hhbmdlKF9yZWYpIHsKICAgIHZhciBzdGFydCA9IF9yZWYuc3RhcnQsCiAgICAgICAgZW5kID0gX3JlZi5lbmQsCiAgICAgICAgaXNJbnZhbGlkID0gX3JlZi5pc0ludmFsaWQsCiAgICAgICAgaXNRdWlja1NlbGVjdGlvbiA9IF9yZWYuaXNRdWlja1NlbGVjdGlvbjsKICAgIHNldElzRGF0ZVJhbmdlSW52YWxpZChpc0ludmFsaWQpOwogICAgdmFyIHJldFZhbCA9IHsKICAgICAgcXVlcnk6IHByb3BzLnF1ZXJ5LAogICAgICBkYXRlUmFuZ2U6IHsKICAgICAgICBmcm9tOiBzdGFydCwKICAgICAgICB0bzogZW5kCiAgICAgIH0KICAgIH07CgogICAgaWYgKGlzUXVpY2tTZWxlY3Rpb24pIHsKICAgICAgcHJvcHMub25TdWJtaXQocmV0VmFsKTsKICAgIH0gZWxzZSB7CiAgICAgIHByb3BzLm9uQ2hhbmdlKHJldFZhbCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBvblJlZnJlc2goX3JlZjIpIHsKICAgIHZhciBzdGFydCA9IF9yZWYyLnN0YXJ0LAogICAgICAgIGVuZCA9IF9yZWYyLmVuZDsKICAgIHZhciByZXRWYWwgPSB7CiAgICAgIGRhdGVSYW5nZTogewogICAgICAgIGZyb206IHN0YXJ0LAogICAgICAgIHRvOiBlbmQKICAgICAgfQogICAgfTsKCiAgICBpZiAocHJvcHMub25SZWZyZXNoKSB7CiAgICAgIHByb3BzLm9uUmVmcmVzaChyZXRWYWwpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gb25TdWJtaXQoX3JlZjMpIHsKICAgIHZhciBxdWVyeSA9IF9yZWYzLnF1ZXJ5LAogICAgICAgIGRhdGVSYW5nZSA9IF9yZWYzLmRhdGVSYW5nZTsKICAgIGhhbmRsZUx1Y2VuZVN5bnRheFdhcm5pbmcoKTsKCiAgICBpZiAocHJvcHMudGltZUhpc3RvcnkpIHsKICAgICAgcHJvcHMudGltZUhpc3RvcnkuYWRkKGRhdGVSYW5nZSk7CiAgICB9CgogICAgcHJvcHMub25TdWJtaXQoewogICAgICBxdWVyeTogcXVlcnksCiAgICAgIGRhdGVSYW5nZTogZGF0ZVJhbmdlCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG9uSW5wdXRTdWJtaXQocXVlcnkpIHsKICAgIG9uU3VibWl0KHsKICAgICAgcXVlcnk6IHF1ZXJ5LAogICAgICBkYXRlUmFuZ2U6IGdldERhdGVSYW5nZSgpCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHRvQWJzb2x1dGVTdHJpbmcodmFsdWUpIHsKICAgIHZhciByb3VuZFVwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsKCiAgICB2YXIgdmFsdWVBc01vbWVudCA9IF9kYXRlbWF0aC5kZWZhdWx0LnBhcnNlKHZhbHVlLCB7CiAgICAgIHJvdW5kVXA6IHJvdW5kVXAKICAgIH0pOwoKICAgIGlmICghdmFsdWVBc01vbWVudCkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CgogICAgcmV0dXJuIHZhbHVlQXNNb21lbnQudG9JU09TdHJpbmcoKTsKICB9CgogIGZ1bmN0aW9uIHJlbmRlclF1ZXJ5SW5wdXQoKSB7CiAgICBpZiAoIXNob3VsZFJlbmRlclF1ZXJ5SW5wdXQoKSkgcmV0dXJuOwogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcXVlcnlfc3RyaW5nX2lucHV0LlF1ZXJ5U3RyaW5nSW5wdXQsIHsKICAgICAgZGlzYWJsZUF1dG9Gb2N1czogcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cywKICAgICAgaW5kZXhQYXR0ZXJuczogcHJvcHMuaW5kZXhQYXR0ZXJucywKICAgICAgcHJlcGVuZDogcHJvcHMucHJlcGVuZCwKICAgICAgcXVlcnk6IHByb3BzLnF1ZXJ5LAogICAgICBzY3JlZW5UaXRsZTogcHJvcHMuc2NyZWVuVGl0bGUsCiAgICAgIG9uQ2hhbmdlOiBvblF1ZXJ5Q2hhbmdlLAogICAgICBvblN1Ym1pdDogb25JbnB1dFN1Ym1pdCwKICAgICAgcGVyc2lzdGVkTG9nOiBwZXJzaXN0ZWRMb2csCiAgICAgIGRhdGFUZXN0U3ViajogcHJvcHMuZGF0YVRlc3RTdWJqCiAgICB9KSk7CiAgfQoKICBmdW5jdGlvbiByZW5kZXJTaGFyaW5nTWV0YUZpZWxkcygpIHsKICAgIHZhciBfZ2V0RGF0ZVJhbmdlID0gZ2V0RGF0ZVJhbmdlKCksCiAgICAgICAgZnJvbSA9IF9nZXREYXRlUmFuZ2UuZnJvbSwKICAgICAgICB0byA9IF9nZXREYXRlUmFuZ2UudG87CgogICAgdmFyIGRhdGVSYW5nZVByZXR0eSA9ICgwLCBfZXVpLnByZXR0eUR1cmF0aW9uKSh0b0Fic29sdXRlU3RyaW5nKGZyb20pLCB0b0Fic29sdXRlU3RyaW5nKHRvKSwgW10sIHVpU2V0dGluZ3MuZ2V0KCdkYXRlRm9ybWF0JykpOwogICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgImRhdGEtc2hhcmVkLXRpbWVmaWx0ZXItZHVyYXRpb24iOiBkYXRlUmFuZ2VQcmV0dHksCiAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJkYXRhU2hhcmVkVGltZWZpbHRlckR1cmF0aW9uIgogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBzaG91bGRSZW5kZXJEYXRlUGlja2VyKCkgewogICAgcmV0dXJuIEJvb2xlYW4ocHJvcHMuc2hvd0RhdGVQaWNrZXIgfHwgcHJvcHMuc2hvd0F1dG9SZWZyZXNoT25seSk7CiAgfQoKICBmdW5jdGlvbiBzaG91bGRSZW5kZXJRdWVyeUlucHV0KCkgewogICAgcmV0dXJuIEJvb2xlYW4ocHJvcHMuc2hvd1F1ZXJ5SW5wdXQgJiYgcHJvcHMuaW5kZXhQYXR0ZXJucyAmJiBwcm9wcy5xdWVyeSAmJiBzdG9yYWdlKTsKICB9CgogIGZ1bmN0aW9uIHJlbmRlclVwZGF0ZUJ1dHRvbigpIHsKICAgIHZhciBidXR0b24gPSBwcm9wcy5jdXN0b21TdWJtaXRCdXR0b24gPyBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQocHJvcHMuY3VzdG9tU3VibWl0QnV0dG9uLCB7CiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tTdWJtaXRCdXR0b24KICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN1cGVyVXBkYXRlQnV0dG9uLCB7CiAgICAgIG5lZWRzVXBkYXRlOiBwcm9wcy5pc0RpcnR5LAogICAgICBpc0Rpc2FibGVkOiBpc0RhdGVSYW5nZUludmFsaWQsCiAgICAgIGlzTG9hZGluZzogcHJvcHMuaXNMb2FkaW5nLAogICAgICBvbkNsaWNrOiBvbkNsaWNrU3VibWl0QnV0dG9uLAogICAgICAiZGF0YS10ZXN0LXN1YmoiOiAicXVlcnlTdWJtaXRCdXR0b24iCiAgICB9KTsKCiAgICBpZiAoIXNob3VsZFJlbmRlckRhdGVQaWNrZXIoKSkgewogICAgICByZXR1cm4gYnV0dG9uOwogICAgfQoKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLAogICAgICBndXR0ZXJTaXplOiAicyIKICAgIH0sIHJlbmRlckRhdGVQaWNrZXIoKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgIGdyb3c6IGZhbHNlCiAgICB9LCBidXR0b24pKTsKICB9CgogIGZ1bmN0aW9uIHJlbmRlckRhdGVQaWNrZXIoKSB7CiAgICBpZiAoIXNob3VsZFJlbmRlckRhdGVQaWNrZXIoKSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICB2YXIgcmVjZW50bHlVc2VkUmFuZ2VzOwoKICAgIGlmIChwcm9wcy50aW1lSGlzdG9yeSkgewogICAgICByZWNlbnRseVVzZWRSYW5nZXMgPSBwcm9wcy50aW1lSGlzdG9yeS5nZXQoKS5tYXAoZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgICAgdmFyIGZyb20gPSBfcmVmNC5mcm9tLAogICAgICAgICAgICB0byA9IF9yZWY0LnRvOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBzdGFydDogZnJvbSwKICAgICAgICAgIGVuZDogdG8KICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICB2YXIgY29tbW9ubHlVc2VkUmFuZ2VzID0gdWlTZXR0aW5ncy5nZXQoJ3RpbWVwaWNrZXI6cXVpY2tSYW5nZXMnKS5tYXAoZnVuY3Rpb24gKF9yZWY1KSB7CiAgICAgIHZhciBmcm9tID0gX3JlZjUuZnJvbSwKICAgICAgICAgIHRvID0gX3JlZjUudG8sCiAgICAgICAgICBkaXNwbGF5ID0gX3JlZjUuZGlzcGxheTsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdGFydDogZnJvbSwKICAgICAgICBlbmQ6IHRvLAogICAgICAgIGxhYmVsOiBkaXNwbGF5CiAgICAgIH07CiAgICB9KTsKICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgY2xhc3NOYW1lOiAia2JuUXVlcnlCYXJfX2RhdGVQaWNrZXJXcmFwcGVyIgogICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN1cGVyRGF0ZVBpY2tlciwgewogICAgICBzdGFydDogcHJvcHMuZGF0ZVJhbmdlRnJvbSwKICAgICAgZW5kOiBwcm9wcy5kYXRlUmFuZ2VUbywKICAgICAgaXNQYXVzZWQ6IHByb3BzLmlzUmVmcmVzaFBhdXNlZCwKICAgICAgcmVmcmVzaEludGVydmFsOiBwcm9wcy5yZWZyZXNoSW50ZXJ2YWwsCiAgICAgIG9uVGltZUNoYW5nZTogb25UaW1lQ2hhbmdlLAogICAgICBvblJlZnJlc2g6IG9uUmVmcmVzaCwKICAgICAgb25SZWZyZXNoQ2hhbmdlOiBwcm9wcy5vblJlZnJlc2hDaGFuZ2UsCiAgICAgIHNob3dVcGRhdGVCdXR0b246IGZhbHNlLAogICAgICByZWNlbnRseVVzZWRSYW5nZXM6IHJlY2VudGx5VXNlZFJhbmdlcywKICAgICAgY29tbW9ubHlVc2VkUmFuZ2VzOiBjb21tb25seVVzZWRSYW5nZXMsCiAgICAgIGRhdGVGb3JtYXQ6IHVpU2V0dGluZ3MuZ2V0KCdkYXRlRm9ybWF0JyksCiAgICAgIGlzQXV0b1JlZnJlc2hPbmx5OiBwcm9wcy5zaG93QXV0b1JlZnJlc2hPbmx5CiAgICB9KSk7CiAgfQoKICBmdW5jdGlvbiBoYW5kbGVMdWNlbmVTeW50YXhXYXJuaW5nKCkgewogICAgaWYgKCFwcm9wcy5xdWVyeSkgcmV0dXJuOwogICAgdmFyIF9wcm9wcyRxdWVyeSA9IHByb3BzLnF1ZXJ5LAogICAgICAgIHF1ZXJ5ID0gX3Byb3BzJHF1ZXJ5LnF1ZXJ5LAogICAgICAgIGxhbmd1YWdlID0gX3Byb3BzJHF1ZXJ5Lmxhbmd1YWdlOwoKICAgIGlmIChsYW5ndWFnZSA9PT0gJ2t1ZXJ5JyAmJiB0eXBlb2YgcXVlcnkgPT09ICdzdHJpbmcnICYmICghc3RvcmFnZSB8fCAhc3RvcmFnZS5nZXQoJ2tpYmFuYS5sdWNlbmVTeW50YXhXYXJuaW5nT3B0T3V0JykpICYmICgwLCBfY29tbW9uLmRvZXNLdWVyeUV4cHJlc3Npb25IYXZlTHVjZW5lU3ludGF4RXJyb3IpKHF1ZXJ5KSkgewogICAgICB2YXIgdG9hc3QgPSBub3RpZmljYXRpb25zLnRvYXN0cy5hZGRXYXJuaW5nKHsKICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2RhdGEucXVlcnkucXVlcnlCYXIubHVjZW5lU3ludGF4V2FybmluZ1RpdGxlJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMdWNlbmUgc3ludGF4IHdhcm5pbmcnCiAgICAgICAgfSksCiAgICAgICAgdGV4dDogKDAsIF9wdWJsaWMudG9Nb3VudFBvaW50KShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiZGF0YS5xdWVyeS5xdWVyeUJhci5sdWNlbmVTeW50YXhXYXJuaW5nTWVzc2FnZSIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkl0IGxvb2tzIGxpa2UgeW91IG1heSBiZSB0cnlpbmcgdG8gdXNlIEx1Y2VuZSBxdWVyeSBzeW50YXgsIGFsdGhvdWdoIHlvdSBoYXZlIEtpYmFuYSBRdWVyeSBMYW5ndWFnZSAoS1FMKSBzZWxlY3RlZC4gUGxlYXNlIHJldmlldyB0aGUgS1FMIGRvY3Mge2xpbmt9LiIsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgbGluazogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgICAgICBocmVmOiBrdWVyeVF1ZXJ5U3ludGF4TGluaywKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgICAgaWQ6ICJkYXRhLnF1ZXJ5LnF1ZXJ5QmFyLnN5bnRheE9wdGlvbnNEZXNjcmlwdGlvbi5kb2NzTGlua1RleHQiLAogICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiaGVyZSIKICAgICAgICAgICAgfSkpCiAgICAgICAgICB9CiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogImZsZXhFbmQiLAogICAgICAgICAgZ3V0dGVyU2l6ZTogInMiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBncm93OiBmYWxzZQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b24sIHsKICAgICAgICAgIHNpemU6ICJzIiwKICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICAgIHJldHVybiBvbkx1Y2VuZVN5bnRheFdhcm5pbmdPcHRPdXQodG9hc3QpOwogICAgICAgICAgfQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImRhdGEucXVlcnkucXVlcnlCYXIubHVjZW5lU3ludGF4V2FybmluZ09wdE91dFRleHQiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEb24ndCBzaG93IGFnYWluIgogICAgICAgIH0pKSkpKSkKICAgICAgfSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBvbkx1Y2VuZVN5bnRheFdhcm5pbmdPcHRPdXQodG9hc3QpIHsKICAgIGlmICghc3RvcmFnZSkgcmV0dXJuOwogICAgc3RvcmFnZS5zZXQoJ2tpYmFuYS5sdWNlbmVTeW50YXhXYXJuaW5nT3B0T3V0JywgdHJ1ZSk7CiAgICBub3RpZmljYXRpb25zLnRvYXN0cy5yZW1vdmUodG9hc3QpOwogIH0KCiAgdmFyIGNsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoJ2tiblF1ZXJ5QmFyJywgewogICAgJ2tiblF1ZXJ5QmFyLS13aXRoRGF0ZVBpY2tlcic6IHByb3BzLnNob3dEYXRlUGlja2VyCiAgfSk7CiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgIGNsYXNzTmFtZTogY2xhc3NlcywKICAgIHJlc3BvbnNpdmU6ICEhcHJvcHMuc2hvd0RhdGVQaWNrZXIsCiAgICBndXR0ZXJTaXplOiAicyIsCiAgICBqdXN0aWZ5Q29udGVudDogImZsZXhFbmQiCiAgfSwgcmVuZGVyUXVlcnlJbnB1dCgpLCByZW5kZXJTaGFyaW5nTWV0YUZpZWxkcygpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgIGdyb3c6IGZhbHNlCiAgfSwgcmVuZGVyVXBkYXRlQnV0dG9uKCkpKTsKfQoKUXVlcnlCYXJUb3BSb3cuZGVmYXVsdFByb3BzID0gewogIHNob3dRdWVyeUlucHV0OiB0cnVlLAogIHNob3dEYXRlUGlja2VyOiB0cnVlLAogIHNob3dBdXRvUmVmcmVzaE9ubHk6IGZhbHNlCn07"},null]}