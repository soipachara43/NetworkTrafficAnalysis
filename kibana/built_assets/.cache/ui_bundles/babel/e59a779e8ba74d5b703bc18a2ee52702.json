{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/step_define_rule/schema.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/pages/detection_engine/rules/components/step_define_rule/schema.js","mtime":1589249553316},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnNjaGVtYSA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfZnAgPSByZXF1aXJlKCJsb2Rhc2gvZnAiKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9wdWJsaWMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGx1Z2lucy9kYXRhL3B1YmxpYyIpOwoKdmFyIF9tbF9oZWxwZXJzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vY29tbW9uL2RldGVjdGlvbl9lbmdpbmUvbWxfaGVscGVycyIpOwoKdmFyIF9zaGFyZWRfaW1wb3J0cyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uLy4uL3NoYXJlZF9pbXBvcnRzIik7Cgp2YXIgX3RyYW5zbGF0aW9ucyA9IHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9Ci8qCiAqIENvcHlyaWdodCBFbGFzdGljc2VhcmNoIEIuVi4gYW5kL29yIGxpY2Vuc2VkIHRvIEVsYXN0aWNzZWFyY2ggQi5WLiB1bmRlciBvbmUKICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIExpY2Vuc2VkIHVuZGVyIHRoZSBFbGFzdGljIExpY2Vuc2U7CiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgRWxhc3RpYyBMaWNlbnNlLgogKi8KCgp2YXIgc2NoZW1hID0gewogIGluZGV4OiB7CiAgICB0eXBlOiBfc2hhcmVkX2ltcG9ydHMuRklFTERfVFlQRVMuQ09NQk9fQk9YLAogICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5zaWVtLmRldGVjdGlvbkVuZ2luZS5jcmVhdGVSdWxlLnN0ZXBBYm91dFJ1bGUuZmllZEluZGV4UGF0dGVybnNMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdJbmRleCBwYXR0ZXJucycKICAgIH0pLAogICAgaGVscFRleHQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgIHNpemU6ICJ4cyIKICAgIH0sIF90cmFuc2xhdGlvbnMuSU5ERVhfSEVMUEVSX1RFWFQpLAogICAgdmFsaWRhdGlvbnM6IFt7CiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKCkgewogICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgICB9CgogICAgICAgIHZhciBmb3JtRGF0YSA9IGFyZ3NbMF0uZm9ybURhdGE7CiAgICAgICAgdmFyIG5lZWRzVmFsaWRhdGlvbiA9ICEoMCwgX21sX2hlbHBlcnMuaXNNbFJ1bGUpKGZvcm1EYXRhLnJ1bGVUeXBlKTsKCiAgICAgICAgaWYgKCFuZWVkc1ZhbGlkYXRpb24pIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHJldHVybiBfc2hhcmVkX2ltcG9ydHMuZmllbGRWYWxpZGF0b3JzLmVtcHR5RmllbGQoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNpZW0uZGV0ZWN0aW9uRW5naW5lLmNyZWF0ZVJ1bGUuc3RlcERlZmluZVJ1bGUub3V0cHV0SW5kaWNlTmFtZUZpZWxkUmVxdWlyZWRFcnJvcicsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQSBtaW5pbXVtIG9mIG9uZSBpbmRleCBwYXR0ZXJuIGlzIHJlcXVpcmVkLicKICAgICAgICB9KSkuYXBwbHkodm9pZCAwLCBhcmdzKTsKICAgICAgfQogICAgfV0KICB9LAogIHF1ZXJ5QmFyOiB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNpZW0uZGV0ZWN0aW9uRW5naW5lLmNyZWF0ZVJ1bGUuc3RlcERlZmluZVJ1bGUuZmllbGRRdWVyQmFyTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQ3VzdG9tIHF1ZXJ5JwogICAgfSksCiAgICB2YWxpZGF0aW9uczogW3sKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICAgICAgfQoKICAgICAgICB2YXIgX2FyZ3MkID0gYXJnc1swXSwKICAgICAgICAgICAgdmFsdWUgPSBfYXJncyQudmFsdWUsCiAgICAgICAgICAgIHBhdGggPSBfYXJncyQucGF0aCwKICAgICAgICAgICAgZm9ybURhdGEgPSBfYXJncyQuZm9ybURhdGE7CiAgICAgICAgdmFyIF9yZWYgPSB2YWx1ZSwKICAgICAgICAgICAgcXVlcnkgPSBfcmVmLnF1ZXJ5LAogICAgICAgICAgICBmaWx0ZXJzID0gX3JlZi5maWx0ZXJzOwogICAgICAgIHZhciBuZWVkc1ZhbGlkYXRpb24gPSAhKDAsIF9tbF9oZWxwZXJzLmlzTWxSdWxlKShmb3JtRGF0YS5ydWxlVHlwZSk7CgogICAgICAgIGlmICghbmVlZHNWYWxpZGF0aW9uKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKDAsIF9mcC5pc0VtcHR5KShxdWVyeS5xdWVyeSkgJiYgKDAsIF9mcC5pc0VtcHR5KShmaWx0ZXJzKSA/IHsKICAgICAgICAgIGNvZGU6ICdFUlJfRklFTERfTUlTU0lORycsCiAgICAgICAgICBwYXRoOiBwYXRoLAogICAgICAgICAgbWVzc2FnZTogX3RyYW5zbGF0aW9ucy5DVVNUT01fUVVFUllfUkVRVUlSRUQKICAgICAgICB9IDogdW5kZWZpbmVkOwogICAgICB9CiAgICB9LCB7CiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKCkgewogICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykgewogICAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9hcmdzJDIgPSBhcmdzWzBdLAogICAgICAgICAgICB2YWx1ZSA9IF9hcmdzJDIudmFsdWUsCiAgICAgICAgICAgIHBhdGggPSBfYXJncyQyLnBhdGgsCiAgICAgICAgICAgIGZvcm1EYXRhID0gX2FyZ3MkMi5mb3JtRGF0YTsKICAgICAgICB2YXIgX3JlZjIgPSB2YWx1ZSwKICAgICAgICAgICAgcXVlcnkgPSBfcmVmMi5xdWVyeTsKICAgICAgICB2YXIgbmVlZHNWYWxpZGF0aW9uID0gISgwLCBfbWxfaGVscGVycy5pc01sUnVsZSkoZm9ybURhdGEucnVsZVR5cGUpOwoKICAgICAgICBpZiAoIW5lZWRzVmFsaWRhdGlvbikgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKCEoMCwgX2ZwLmlzRW1wdHkpKHF1ZXJ5LnF1ZXJ5KSAmJiBxdWVyeS5sYW5ndWFnZSA9PT0gJ2t1ZXJ5JykgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgX3B1YmxpYy5lc0t1ZXJ5LmZyb21LdWVyeUV4cHJlc3Npb24ocXVlcnkucXVlcnkpOwogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgY29kZTogJ0VSUl9GSUVMRF9GT1JNQVQnLAogICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgbWVzc2FnZTogX3RyYW5zbGF0aW9ucy5JTlZBTElEX0NVU1RPTV9RVUVSWQogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfV0KICB9LAogIHJ1bGVUeXBlOiB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNpZW0uZGV0ZWN0aW9uRW5naW5lLmNyZWF0ZVJ1bGUuc3RlcERlZmluZVJ1bGUuZmllbGRSdWxlVHlwZUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1J1bGUgdHlwZScKICAgIH0pLAogICAgdmFsaWRhdGlvbnM6IFtdCiAgfSwKICBhbm9tYWx5VGhyZXNob2xkOiB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNpZW0uZGV0ZWN0aW9uRW5naW5lLmNyZWF0ZVJ1bGUuc3RlcERlZmluZVJ1bGUuZmllbGRBbm9tYWx5VGhyZXNob2xkTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnQW5vbWFseSBzY29yZSB0aHJlc2hvbGQnCiAgICB9KSwKICAgIHZhbGlkYXRpb25zOiBbXQogIH0sCiAgbWFjaGluZUxlYXJuaW5nSm9iSWQ6IHsKICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suc2llbS5kZXRlY3Rpb25FbmdpbmUuY3JlYXRlUnVsZS5zdGVwRGVmaW5lUnVsZS5maWVsZE1hY2hpbmVMZWFybmluZ0pvYklkTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTWFjaGluZSBMZWFybmluZyBqb2InCiAgICB9KSwKICAgIHZhbGlkYXRpb25zOiBbewogICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHsKICAgICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHsKICAgICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTsKICAgICAgICB9CgogICAgICAgIHZhciBmb3JtRGF0YSA9IGFyZ3NbMF0uZm9ybURhdGE7CiAgICAgICAgdmFyIG5lZWRzVmFsaWRhdGlvbiA9ICgwLCBfbWxfaGVscGVycy5pc01sUnVsZSkoZm9ybURhdGEucnVsZVR5cGUpOwoKICAgICAgICBpZiAoIW5lZWRzVmFsaWRhdGlvbikgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9zaGFyZWRfaW1wb3J0cy5maWVsZFZhbGlkYXRvcnMuZW1wdHlGaWVsZChfaTE4bi5pMThuLnRyYW5zbGF0ZSgneHBhY2suc2llbS5kZXRlY3Rpb25FbmdpbmUuY3JlYXRlUnVsZS5zdGVwRGVmaW5lUnVsZS5tYWNoaW5lTGVhcm5pbmdKb2JJZFJlcXVpcmVkJywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBIE1hY2hpbmUgTGVhcm5pbmcgam9iIGlzIHJlcXVpcmVkLicKICAgICAgICB9KSkuYXBwbHkodm9pZCAwLCBhcmdzKTsKICAgICAgfQogICAgfV0KICB9LAogIHRpbWVsaW5lOiB7CiAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3hwYWNrLnNpZW0uZGV0ZWN0aW9uRW5naW5lLmNyZWF0ZVJ1bGUuc3RlcEFib3V0UnVsZS5maWVsZFRpbWVsaW5lVGVtcGxhdGVMYWJlbCcsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdUaW1lbGluZSB0ZW1wbGF0ZScKICAgIH0pLAogICAgaGVscFRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd4cGFjay5zaWVtLmRldGVjdGlvbkVuZ2luZS5jcmVhdGVSdWxlLnN0ZXBBYm91dFJ1bGUuZmllbGRUaW1lbGluZVRlbXBsYXRlSGVscFRleHQnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2VsZWN0IGFuIGV4aXN0aW5nIHRpbWVsaW5lIHRvIHVzZSBhcyBhIHRlbXBsYXRlIHdoZW4gaW52ZXN0aWdhdGluZyBnZW5lcmF0ZWQgc2lnbmFscy4nCiAgICB9KQogIH0KfTsKZXhwb3J0cy5zY2hlbWEgPSBzY2hlbWE7"},null]}