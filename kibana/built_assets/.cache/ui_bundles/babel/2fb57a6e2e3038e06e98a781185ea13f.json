{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/field_editor/components/field_format_editor/editors/url/url.js","dependencies":[{"path":"src/legacy/ui/public/field_editor/components/field_format_editor/editors/url/url.js","mtime":1589249550315},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlVybEZvcm1hdEVkaXRvciA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2RlZmF1bHQgPSByZXF1aXJlKCIuLi9kZWZhdWx0Iik7Cgp2YXIgX3NhbXBsZXMgPSByZXF1aXJlKCIuLi8uLi9zYW1wbGVzIik7Cgp2YXIgX2xhYmVsX3RlbXBsYXRlX2ZseW91dCA9IHJlcXVpcmUoIi4vbGFiZWxfdGVtcGxhdGVfZmx5b3V0Iik7Cgp2YXIgX3VybF90ZW1wbGF0ZV9mbHlvdXQgPSByZXF1aXJlKCIuL3VybF90ZW1wbGF0ZV9mbHlvdXQiKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7CgpyZXF1aXJlKCIuL2ljb25zIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBVcmxGb3JtYXRFZGl0b3IgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfRGVmYXVsdEZvcm1hdEVkaXRvcikgewogIF9pbmhlcml0cyhVcmxGb3JtYXRFZGl0b3IsIF9EZWZhdWx0Rm9ybWF0RWRpdG9yKTsKCiAgZnVuY3Rpb24gVXJsRm9ybWF0RWRpdG9yKHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVybEZvcm1hdEVkaXRvcik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVXJsRm9ybWF0RWRpdG9yKS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic2FuaXRpemVOdW1lcmljVmFsdWUiLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgIHZhciBzYW5pdGl6ZWRWYWx1ZSA9IHBhcnNlSW50KHZhbCk7CgogICAgICBpZiAoaXNOYU4oc2FuaXRpemVkVmFsdWUpKSB7CiAgICAgICAgcmV0dXJuICcnOwogICAgICB9CgogICAgICByZXR1cm4gc2FuaXRpemVkVmFsdWU7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvblR5cGVDaGFuZ2UiLCBmdW5jdGlvbiAobmV3VHlwZSkgewogICAgICB2YXIgX3RoaXMkcHJvcHMkZm9ybWF0UGFyID0gX3RoaXMucHJvcHMuZm9ybWF0UGFyYW1zLAogICAgICAgICAgdXJsVGVtcGxhdGUgPSBfdGhpcyRwcm9wcyRmb3JtYXRQYXIudXJsVGVtcGxhdGUsCiAgICAgICAgICB3aWR0aCA9IF90aGlzJHByb3BzJGZvcm1hdFBhci53aWR0aCwKICAgICAgICAgIGhlaWdodCA9IF90aGlzJHByb3BzJGZvcm1hdFBhci5oZWlnaHQ7CiAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgdHlwZTogbmV3VHlwZQogICAgICB9OwoKICAgICAgaWYgKG5ld1R5cGUgPT09ICdpbWcnKSB7CiAgICAgICAgcGFyYW1zLndpZHRoID0gd2lkdGg7CiAgICAgICAgcGFyYW1zLmhlaWdodCA9IGhlaWdodDsKCiAgICAgICAgaWYgKCF1cmxUZW1wbGF0ZSkgewogICAgICAgICAgcGFyYW1zLnVybFRlbXBsYXRlID0gX3RoaXMuaWNvblBhdHRlcm47CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgKG5ld1R5cGUgIT09ICdpbWcnICYmIHVybFRlbXBsYXRlID09PSBfdGhpcy5pY29uUGF0dGVybikgewogICAgICAgIHBhcmFtcy51cmxUZW1wbGF0ZSA9IG51bGw7CiAgICAgIH0KCiAgICAgIF90aGlzLm9uQ2hhbmdlKHBhcmFtcyk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzaG93VXJsVGVtcGxhdGVIZWxwIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2hvd0xhYmVsVGVtcGxhdGVIZWxwOiBmYWxzZSwKICAgICAgICBzaG93VXJsVGVtcGxhdGVIZWxwOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGlkZVVybFRlbXBsYXRlSGVscCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHNob3dVcmxUZW1wbGF0ZUhlbHA6IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic2hvd0xhYmVsVGVtcGxhdGVIZWxwIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2hvd0xhYmVsVGVtcGxhdGVIZWxwOiB0cnVlLAogICAgICAgIHNob3dVcmxUZW1wbGF0ZUhlbHA6IGZhbHNlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGlkZUxhYmVsVGVtcGxhdGVIZWxwIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgc2hvd0xhYmVsVGVtcGxhdGVIZWxwOiBmYWxzZQogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbmRlcldpZHRoSGVpZ2h0UGFyYW1ldGVycyIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHdpZHRoID0gX3RoaXMuc2FuaXRpemVOdW1lcmljVmFsdWUoX3RoaXMucHJvcHMuZm9ybWF0UGFyYW1zLndpZHRoKTsKCiAgICAgIHZhciBoZWlnaHQgPSBfdGhpcy5zYW5pdGl6ZU51bWVyaWNWYWx1ZShfdGhpcy5wcm9wcy5mb3JtYXRQYXJhbXMuaGVpZ2h0KTsKCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC53aWR0aExhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiV2lkdGgiCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkTnVtYmVyLCB7CiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInVybEVkaXRvcldpZHRoIiwKICAgICAgICB2YWx1ZTogd2lkdGgsCiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHsKICAgICAgICAgIF90aGlzLm9uQ2hhbmdlKHsKICAgICAgICAgICAgd2lkdGg6IGUudGFyZ2V0LnZhbHVlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC5oZWlnaHRMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkhlaWdodCIKICAgICAgICB9KQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmllbGROdW1iZXIsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidXJsRWRpdG9ySGVpZ2h0IiwKICAgICAgICB2YWx1ZTogaGVpZ2h0LAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgICAgICBfdGhpcy5vbkNoYW5nZSh7CiAgICAgICAgICAgIGhlaWdodDogZS50YXJnZXQudmFsdWUKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSkpKTsKICAgIH0pOwoKICAgIHZhciBicCA9IF9jaHJvbWUuZGVmYXVsdC5nZXRCYXNlUGF0aCgpOwoKICAgIF90aGlzLmljb25QYXR0ZXJuID0gIiIuY29uY2F0KGJwLCAiL2J1bmRsZXMvc3JjL2xlZ2FjeS91aS9wdWJsaWMvZmllbGRfZWRpdG9yL2NvbXBvbmVudHMvZmllbGRfZm9ybWF0X2VkaXRvci9lZGl0b3JzL3VybC9pY29ucy97e3ZhbHVlfX0ucG5nIik7CiAgICBfdGhpcy5zdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnN0YXRlLCB7CiAgICAgIHNhbXBsZUlucHV0c0J5VHlwZTogewogICAgICAgIGE6IFsnam9obicsICcvc29tZS9wYXRobmFtZS9hc3NldC5wbmcnLCAxMjM0XSwKICAgICAgICBpbWc6IFsnZ28nLCAnc3RvcCcsIFsnZGUnLCAnbmUnLCAndXMnLCAnbmknXSwgJ2N2J10sCiAgICAgICAgYXVkaW86IFsnaGVsbG8ubXAzJ10KICAgICAgfSwKICAgICAgc2FtcGxlQ29udmVydGVyVHlwZTogJ2h0bWwnLAogICAgICBzaG93VXJsVGVtcGxhdGVIZWxwOiBmYWxzZSwKICAgICAgc2hvd0xhYmVsVGVtcGxhdGVIZWxwOiBmYWxzZQogICAgfSk7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVXJsRm9ybWF0RWRpdG9yLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIGZvcm1hdCA9IF90aGlzJHByb3BzLmZvcm1hdCwKICAgICAgICAgIGZvcm1hdFBhcmFtcyA9IF90aGlzJHByb3BzLmZvcm1hdFBhcmFtczsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGVycm9yID0gX3RoaXMkc3RhdGUuZXJyb3IsCiAgICAgICAgICBzYW1wbGVzID0gX3RoaXMkc3RhdGUuc2FtcGxlcywKICAgICAgICAgIHNhbXBsZUNvbnZlcnRlclR5cGUgPSBfdGhpcyRzdGF0ZS5zYW1wbGVDb252ZXJ0ZXJUeXBlOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xhYmVsX3RlbXBsYXRlX2ZseW91dC5MYWJlbFRlbXBsYXRlRmx5b3V0LCB7CiAgICAgICAgaXNWaXNpYmxlOiB0aGlzLnN0YXRlLnNob3dMYWJlbFRlbXBsYXRlSGVscCwKICAgICAgICBvbkNsb3NlOiB0aGlzLmhpZGVMYWJlbFRlbXBsYXRlSGVscAogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdXJsX3RlbXBsYXRlX2ZseW91dC5VcmxUZW1wbGF0ZUZseW91dCwgewogICAgICAgIGlzVmlzaWJsZTogdGhpcy5zdGF0ZS5zaG93VXJsVGVtcGxhdGVIZWxwLAogICAgICAgIG9uQ2xvc2U6IHRoaXMuaGlkZVVybFRlbXBsYXRlSGVscAogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC50eXBlTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUeXBlIgogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTZWxlY3QsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidXJsRWRpdG9yVHlwZSIsCiAgICAgICAgdmFsdWU6IGZvcm1hdFBhcmFtcy50eXBlLAogICAgICAgIG9wdGlvbnM6IGZvcm1hdC50eXBlLnVybFR5cGVzLm1hcChmdW5jdGlvbiAodHlwZSkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgdmFsdWU6IHR5cGUua2luZCwKICAgICAgICAgICAgdGV4dDogdHlwZS50ZXh0CiAgICAgICAgICB9OwogICAgICAgIH0pLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgICAgICBfdGhpczIub25UeXBlQ2hhbmdlKGUudGFyZ2V0LnZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pKSwgZm9ybWF0UGFyYW1zLnR5cGUgPT09ICdhJyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImNvbW1vbi51aS5maWVsZEVkaXRvci51cmwub3BlblRhYkxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiT3BlbiBpbiBhIG5ldyB0YWIiCiAgICAgICAgfSkKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN3aXRjaCwgewogICAgICAgIGxhYmVsOiBmb3JtYXRQYXJhbXMub3BlbkxpbmtJbkN1cnJlbnRUYWIgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJjb21tb24udWkuZmllbGRFZGl0b3IudXJsLm9mZkxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiT2ZmIgogICAgICAgIH0pIDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC5vbkxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiT24iCiAgICAgICAgfSksCiAgICAgICAgY2hlY2tlZDogIWZvcm1hdFBhcmFtcy5vcGVuTGlua0luQ3VycmVudFRhYiwKICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICAgICAgX3RoaXMyLm9uQ2hhbmdlKHsKICAgICAgICAgICAgb3BlbkxpbmtJbkN1cnJlbnRUYWI6ICFlLnRhcmdldC5jaGVja2VkCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pKSA6IG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImNvbW1vbi51aS5maWVsZEVkaXRvci51cmwudXJsVGVtcGxhdGVMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlVSTCB0ZW1wbGF0ZSIKICAgICAgICB9KSwKICAgICAgICBoZWxwVGV4dDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuc2hvd1VybFRlbXBsYXRlSGVscAogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImNvbW1vbi51aS5maWVsZEVkaXRvci51cmwudGVtcGxhdGUuaGVscExpbmtUZXh0IiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVVJMIHRlbXBsYXRlIGhlbHAiCiAgICAgICAgfSkpLAogICAgICAgIGlzSW52YWxpZDogISFlcnJvciwKICAgICAgICBlcnJvcjogZXJyb3IKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ1cmxFZGl0b3JVcmxUZW1wbGF0ZSIsCiAgICAgICAgdmFsdWU6IGZvcm1hdFBhcmFtcy51cmxUZW1wbGF0ZSB8fCAnJywKICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkgewogICAgICAgICAgX3RoaXMyLm9uQ2hhbmdlKHsKICAgICAgICAgICAgdXJsVGVtcGxhdGU6IGUudGFyZ2V0LnZhbHVlCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC5sYWJlbFRlbXBsYXRlTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMYWJlbCB0ZW1wbGF0ZSIKICAgICAgICB9KSwKICAgICAgICBoZWxwVGV4dDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUxpbmssIHsKICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuc2hvd0xhYmVsVGVtcGxhdGVIZWxwCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiY29tbW9uLnVpLmZpZWxkRWRpdG9yLnVybC5sYWJlbFRlbXBsYXRlSGVscFRleHQiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMYWJlbCB0ZW1wbGF0ZSBoZWxwIgogICAgICAgIH0pKSwKICAgICAgICBpc0ludmFsaWQ6ICEhZXJyb3IsCiAgICAgICAgZXJyb3I6IGVycm9yCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidXJsRWRpdG9yTGFiZWxUZW1wbGF0ZSIsCiAgICAgICAgdmFsdWU6IGZvcm1hdFBhcmFtcy5sYWJlbFRlbXBsYXRlIHx8ICcnLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7CiAgICAgICAgICBfdGhpczIub25DaGFuZ2UoewogICAgICAgICAgICBsYWJlbFRlbXBsYXRlOiBlLnRhcmdldC52YWx1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KSksIGZvcm1hdFBhcmFtcy50eXBlID09PSAnaW1nJyAmJiB0aGlzLnJlbmRlcldpZHRoSGVpZ2h0UGFyYW1ldGVycygpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9zYW1wbGVzLkZvcm1hdEVkaXRvclNhbXBsZXMsIHsKICAgICAgICBzYW1wbGVzOiBzYW1wbGVzLAogICAgICAgIHNhbXBsZVR5cGU6IHNhbXBsZUNvbnZlcnRlclR5cGUKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFVybEZvcm1hdEVkaXRvcjsKfShfZGVmYXVsdC5EZWZhdWx0Rm9ybWF0RWRpdG9yKTsKCmV4cG9ydHMuVXJsRm9ybWF0RWRpdG9yID0gVXJsRm9ybWF0RWRpdG9yOwoKX2RlZmluZVByb3BlcnR5KFVybEZvcm1hdEVkaXRvciwgImZvcm1hdElkIiwgJ3VybCcpOw=="},null]}