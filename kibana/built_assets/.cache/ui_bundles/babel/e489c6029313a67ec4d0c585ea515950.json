{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/siem/public/components/events_viewer/index.js","dependencies":[{"path":"x-pack/legacy/plugins/siem/public/components/events_viewer/index.js","mtime":1589249552940},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlN0YXRlZnVsRXZlbnRzVmlld2VyID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9yZWFjdFJlZHV4ID0gcmVxdWlyZSgicmVhY3QtcmVkdXgiKTsKCnZhciBfZmFzdERlZXBFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiZmFzdC1kZWVwLWVxdWFsIikpOwoKdmFyIF9zdG9yZSA9IHJlcXVpcmUoIi4uLy4uL3N0b3JlIik7Cgp2YXIgX2FjdGlvbnMgPSByZXF1aXJlKCIuLi8uLi9zdG9yZS9hY3Rpb25zIik7Cgp2YXIgX2tpYmFuYSA9IHJlcXVpcmUoIi4uLy4uL2xpYi9raWJhbmEiKTsKCnZhciBfZXZlbnRzX3ZpZXdlciA9IHJlcXVpcmUoIi4vZXZlbnRzX3ZpZXdlciIpOwoKdmFyIF9mZXRjaF9pbmRleF9wYXR0ZXJucyA9IHJlcXVpcmUoIi4uLy4uL2NvbnRhaW5lcnMvZGV0ZWN0aW9uX2VuZ2luZS9ydWxlcy9mZXRjaF9pbmRleF9wYXR0ZXJucyIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX2luc3BlY3QgPSByZXF1aXJlKCIuLi9pbnNwZWN0Iik7Cgp2YXIgaTE4biA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoIi4vdHJhbnNsYXRpb25zIikpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7CiAgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgewogICAgcmV0dXJuIG9iajsKICB9IGVsc2UgewogICAgdmFyIG5ld09iaiA9IHt9OwoKICAgIGlmIChvYmogIT0gbnVsbCkgewogICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OwoKICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgewogICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajsKICAgIHJldHVybiBuZXdPYmo7CiAgfQp9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7CiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsKfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlIik7Cn0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgewogICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsKICAgICAgYXJyMltpXSA9IGFycltpXTsKICAgIH0KCiAgICByZXR1cm4gYXJyMjsKICB9Cn0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0KCnZhciBkZWZhdWx0VGltZWxpbmVUeXBlQ29udGV4dCA9IHsKICBsb2FkaW5nVGV4dDogaTE4bi5MT0FESU5HX0VWRU5UUwp9OwoKdmFyIFN0YXRlZnVsRXZlbnRzVmlld2VyQ29tcG9uZW50ID0gZnVuY3Rpb24gU3RhdGVmdWxFdmVudHNWaWV3ZXJDb21wb25lbnQoX3JlZikgewogIHZhciBjcmVhdGVUaW1lbGluZSA9IF9yZWYuY3JlYXRlVGltZWxpbmUsCiAgICAgIGNvbHVtbnMgPSBfcmVmLmNvbHVtbnMsCiAgICAgIGRhdGFQcm92aWRlcnMgPSBfcmVmLmRhdGFQcm92aWRlcnMsCiAgICAgIGRlbGV0ZWRFdmVudElkcyA9IF9yZWYuZGVsZXRlZEV2ZW50SWRzLAogICAgICBkZWZhdWx0SW5kaWNlcyA9IF9yZWYuZGVmYXVsdEluZGljZXMsCiAgICAgIGRlbGV0ZUV2ZW50UXVlcnkgPSBfcmVmLmRlbGV0ZUV2ZW50UXVlcnksCiAgICAgIGVuZCA9IF9yZWYuZW5kLAogICAgICBmaWx0ZXJzID0gX3JlZi5maWx0ZXJzLAogICAgICBoZWFkZXJGaWx0ZXJHcm91cCA9IF9yZWYuaGVhZGVyRmlsdGVyR3JvdXAsCiAgICAgIGlkID0gX3JlZi5pZCwKICAgICAgaXNMaXZlID0gX3JlZi5pc0xpdmUsCiAgICAgIGl0ZW1zUGVyUGFnZSA9IF9yZWYuaXRlbXNQZXJQYWdlLAogICAgICBpdGVtc1BlclBhZ2VPcHRpb25zID0gX3JlZi5pdGVtc1BlclBhZ2VPcHRpb25zLAogICAgICBrcWxNb2RlID0gX3JlZi5rcWxNb2RlLAogICAgICBwYWdlRmlsdGVycyA9IF9yZWYucGFnZUZpbHRlcnMsCiAgICAgIHF1ZXJ5ID0gX3JlZi5xdWVyeSwKICAgICAgcmVtb3ZlQ29sdW1uID0gX3JlZi5yZW1vdmVDb2x1bW4sCiAgICAgIHN0YXJ0ID0gX3JlZi5zdGFydCwKICAgICAgc2hvd0NoZWNrYm94ZXMgPSBfcmVmLnNob3dDaGVja2JveGVzLAogICAgICBzaG93Um93UmVuZGVyZXJzID0gX3JlZi5zaG93Um93UmVuZGVyZXJzLAogICAgICBzb3J0ID0gX3JlZi5zb3J0LAogICAgICBfcmVmJHRpbWVsaW5lVHlwZUNvbnQgPSBfcmVmLnRpbWVsaW5lVHlwZUNvbnRleHQsCiAgICAgIHRpbWVsaW5lVHlwZUNvbnRleHQgPSBfcmVmJHRpbWVsaW5lVHlwZUNvbnQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lbGluZVR5cGVDb250ZXh0IDogX3JlZiR0aW1lbGluZVR5cGVDb250LAogICAgICB1cGRhdGVJdGVtc1BlclBhZ2UgPSBfcmVmLnVwZGF0ZUl0ZW1zUGVyUGFnZSwKICAgICAgdXBzZXJ0Q29sdW1uID0gX3JlZi51cHNlcnRDb2x1bW4sCiAgICAgIHV0aWxpdHlCYXIgPSBfcmVmLnV0aWxpdHlCYXI7CgogIHZhciBfdXNlRmV0Y2hJbmRleFBhdHRlcm4gPSAoMCwgX2ZldGNoX2luZGV4X3BhdHRlcm5zLnVzZUZldGNoSW5kZXhQYXR0ZXJucykoZGVmYXVsdEluZGljZXMgIT09IG51bGwgJiYgZGVmYXVsdEluZGljZXMgIT09IHZvaWQgMCA/IGRlZmF1bHRJbmRpY2VzIDogKDAsIF9raWJhbmEudXNlVWlTZXR0aW5nKShfY29uc3RhbnRzLkRFRkFVTFRfSU5ERVhfS0VZKSksCiAgICAgIF91c2VGZXRjaEluZGV4UGF0dGVybjIgPSBfc2xpY2VkVG9BcnJheShfdXNlRmV0Y2hJbmRleFBhdHRlcm4sIDEpLAogICAgICBfdXNlRmV0Y2hJbmRleFBhdHRlcm4zID0gX3VzZUZldGNoSW5kZXhQYXR0ZXJuMlswXSwKICAgICAgYnJvd3NlckZpZWxkcyA9IF91c2VGZXRjaEluZGV4UGF0dGVybjMuYnJvd3NlckZpZWxkcywKICAgICAgaW5kZXhQYXR0ZXJucyA9IF91c2VGZXRjaEluZGV4UGF0dGVybjMuaW5kZXhQYXR0ZXJuczsKCiAgKDAsIF9yZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgIGlmIChjcmVhdGVUaW1lbGluZSAhPSBudWxsKSB7CiAgICAgIGNyZWF0ZVRpbWVsaW5lKHsKICAgICAgICBpZDogaWQsCiAgICAgICAgY29sdW1uczogY29sdW1ucywKICAgICAgICBzb3J0OiBzb3J0LAogICAgICAgIGl0ZW1zUGVyUGFnZTogaXRlbXNQZXJQYWdlLAogICAgICAgIHNob3dDaGVja2JveGVzOiBzaG93Q2hlY2tib3hlcywKICAgICAgICBzaG93Um93UmVuZGVyZXJzOiBzaG93Um93UmVuZGVyZXJzCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIGRlbGV0ZUV2ZW50UXVlcnkoewogICAgICAgIGlkOiBpZCwKICAgICAgICBpbnB1dElkOiAnZ2xvYmFsJwogICAgICB9KTsKICAgIH07CiAgfSwgW10pOwogIHZhciBvbkNoYW5nZUl0ZW1zUGVyUGFnZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChpdGVtc0NoYW5nZWRQZXJQYWdlKSB7CiAgICByZXR1cm4gdXBkYXRlSXRlbXNQZXJQYWdlKHsKICAgICAgaWQ6IGlkLAogICAgICBpdGVtc1BlclBhZ2U6IGl0ZW1zQ2hhbmdlZFBlclBhZ2UKICAgIH0pOwogIH0sIFtpZCwgdXBkYXRlSXRlbXNQZXJQYWdlXSk7CiAgdmFyIHRvZ2dsZUNvbHVtbiA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKGZ1bmN0aW9uIChjb2x1bW4pIHsKICAgIHZhciBleGlzdHMgPSBjb2x1bW5zLmZpbmRJbmRleChmdW5jdGlvbiAoYykgewogICAgICByZXR1cm4gYy5pZCA9PT0gY29sdW1uLmlkOwogICAgfSkgIT09IC0xOwoKICAgIGlmICghZXhpc3RzICYmIHVwc2VydENvbHVtbiAhPSBudWxsKSB7CiAgICAgIHVwc2VydENvbHVtbih7CiAgICAgICAgY29sdW1uOiBjb2x1bW4sCiAgICAgICAgaWQ6IGlkLAogICAgICAgIGluZGV4OiAxCiAgICAgIH0pOwogICAgfQoKICAgIGlmIChleGlzdHMgJiYgcmVtb3ZlQ29sdW1uICE9IG51bGwpIHsKICAgICAgcmVtb3ZlQ29sdW1uKHsKICAgICAgICBjb2x1bW5JZDogY29sdW1uLmlkLAogICAgICAgIGlkOiBpZAogICAgICB9KTsKICAgIH0KICB9LCBbY29sdW1ucywgaWQsIHVwc2VydENvbHVtbiwgcmVtb3ZlQ29sdW1uXSk7CiAgdmFyIGdsb2JhbEZpbHRlcnMgPSAoMCwgX3JlYWN0LnVzZU1lbW8pKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGZpbHRlcnMpLCBfdG9Db25zdW1hYmxlQXJyYXkocGFnZUZpbHRlcnMgIT09IG51bGwgJiYgcGFnZUZpbHRlcnMgIT09IHZvaWQgMCA/IHBhZ2VGaWx0ZXJzIDogW10pKTsKICB9LCBbZmlsdGVycywgcGFnZUZpbHRlcnNdKTsKICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaW5zcGVjdC5JbnNwZWN0QnV0dG9uQ29udGFpbmVyLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldmVudHNfdmlld2VyLkV2ZW50c1ZpZXdlciwgewogICAgYnJvd3NlckZpZWxkczogYnJvd3NlckZpZWxkcywKICAgIGNvbHVtbnM6IGNvbHVtbnMsCiAgICBpZDogaWQsCiAgICBkYXRhUHJvdmlkZXJzOiBkYXRhUHJvdmlkZXJzLAogICAgZGVsZXRlZEV2ZW50SWRzOiBkZWxldGVkRXZlbnRJZHMsCiAgICBlbmQ6IGVuZCwKICAgIGZpbHRlcnM6IGdsb2JhbEZpbHRlcnMsCiAgICBoZWFkZXJGaWx0ZXJHcm91cDogaGVhZGVyRmlsdGVyR3JvdXAsCiAgICBpbmRleFBhdHRlcm46IGluZGV4UGF0dGVybnMsCiAgICBpc0xpdmU6IGlzTGl2ZSwKICAgIGl0ZW1zUGVyUGFnZTogaXRlbXNQZXJQYWdlLAogICAgaXRlbXNQZXJQYWdlT3B0aW9uczogaXRlbXNQZXJQYWdlT3B0aW9ucywKICAgIGtxbE1vZGU6IGtxbE1vZGUsCiAgICBvbkNoYW5nZUl0ZW1zUGVyUGFnZTogb25DaGFuZ2VJdGVtc1BlclBhZ2UsCiAgICBxdWVyeTogcXVlcnksCiAgICBzdGFydDogc3RhcnQsCiAgICBzb3J0OiBzb3J0LAogICAgdGltZWxpbmVUeXBlQ29udGV4dDogdGltZWxpbmVUeXBlQ29udGV4dCwKICAgIHRvZ2dsZUNvbHVtbjogdG9nZ2xlQ29sdW1uLAogICAgdXRpbGl0eUJhcjogdXRpbGl0eUJhcgogIH0pKTsKfTsKCnZhciBtYWtlTWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFrZU1hcFN0YXRlVG9Qcm9wcygpIHsKICB2YXIgZ2V0SW5wdXRzVGltZWxpbmUgPSBfc3RvcmUuaW5wdXRzU2VsZWN0b3JzLmdldFRpbWVsaW5lU2VsZWN0b3IoKTsKCiAgdmFyIGdldEdsb2JhbFF1ZXJ5U2VsZWN0b3IgPSBfc3RvcmUuaW5wdXRzU2VsZWN0b3JzLmdsb2JhbFF1ZXJ5U2VsZWN0b3IoKTsKCiAgdmFyIGdldEdsb2JhbEZpbHRlcnNRdWVyeVNlbGVjdG9yID0gX3N0b3JlLmlucHV0c1NlbGVjdG9ycy5nbG9iYWxGaWx0ZXJzUXVlcnlTZWxlY3RvcigpOwoKICB2YXIgZ2V0RXZlbnRzID0gX3N0b3JlLnRpbWVsaW5lU2VsZWN0b3JzLmdldEV2ZW50c0J5SWRTZWxlY3RvcigpOwoKICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBfcmVmMikgewogICAgdmFyIF9nZXRFdmVudHM7CgogICAgdmFyIGlkID0gX3JlZjIuaWQsCiAgICAgICAgZGVmYXVsdE1vZGVsID0gX3JlZjIuZGVmYXVsdE1vZGVsOwogICAgdmFyIGlucHV0ID0gZ2V0SW5wdXRzVGltZWxpbmUoc3RhdGUpOwogICAgdmFyIGV2ZW50cyA9IChfZ2V0RXZlbnRzID0gZ2V0RXZlbnRzKHN0YXRlLCBpZCkpICE9PSBudWxsICYmIF9nZXRFdmVudHMgIT09IHZvaWQgMCA/IF9nZXRFdmVudHMgOiBkZWZhdWx0TW9kZWw7CiAgICB2YXIgY29sdW1ucyA9IGV2ZW50cy5jb2x1bW5zLAogICAgICAgIGRhdGFQcm92aWRlcnMgPSBldmVudHMuZGF0YVByb3ZpZGVycywKICAgICAgICBkZWxldGVkRXZlbnRJZHMgPSBldmVudHMuZGVsZXRlZEV2ZW50SWRzLAogICAgICAgIGl0ZW1zUGVyUGFnZSA9IGV2ZW50cy5pdGVtc1BlclBhZ2UsCiAgICAgICAgaXRlbXNQZXJQYWdlT3B0aW9ucyA9IGV2ZW50cy5pdGVtc1BlclBhZ2VPcHRpb25zLAogICAgICAgIGtxbE1vZGUgPSBldmVudHMua3FsTW9kZSwKICAgICAgICBzb3J0ID0gZXZlbnRzLnNvcnQsCiAgICAgICAgc2hvd0NoZWNrYm94ZXMgPSBldmVudHMuc2hvd0NoZWNrYm94ZXMsCiAgICAgICAgc2hvd1Jvd1JlbmRlcmVycyA9IGV2ZW50cy5zaG93Um93UmVuZGVyZXJzOwogICAgcmV0dXJuIHsKICAgICAgY29sdW1uczogY29sdW1ucywKICAgICAgZGF0YVByb3ZpZGVyczogZGF0YVByb3ZpZGVycywKICAgICAgZGVsZXRlZEV2ZW50SWRzOiBkZWxldGVkRXZlbnRJZHMsCiAgICAgIGZpbHRlcnM6IGdldEdsb2JhbEZpbHRlcnNRdWVyeVNlbGVjdG9yKHN0YXRlKSwKICAgICAgaWQ6IGlkLAogICAgICBpc0xpdmU6IGlucHV0LnBvbGljeS5raW5kID09PSAnaW50ZXJ2YWwnLAogICAgICBpdGVtc1BlclBhZ2U6IGl0ZW1zUGVyUGFnZSwKICAgICAgaXRlbXNQZXJQYWdlT3B0aW9uczogaXRlbXNQZXJQYWdlT3B0aW9ucywKICAgICAga3FsTW9kZToga3FsTW9kZSwKICAgICAgcXVlcnk6IGdldEdsb2JhbFF1ZXJ5U2VsZWN0b3Ioc3RhdGUpLAogICAgICBzb3J0OiBzb3J0LAogICAgICBzaG93Q2hlY2tib3hlczogc2hvd0NoZWNrYm94ZXMsCiAgICAgIHNob3dSb3dSZW5kZXJlcnM6IHNob3dSb3dSZW5kZXJlcnMKICAgIH07CiAgfTsKCiAgcmV0dXJuIG1hcFN0YXRlVG9Qcm9wczsKfTsKCnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7CiAgY3JlYXRlVGltZWxpbmU6IF9hY3Rpb25zLnRpbWVsaW5lQWN0aW9ucy5jcmVhdGVUaW1lbGluZSwKICBkZWxldGVFdmVudFF1ZXJ5OiBfYWN0aW9ucy5pbnB1dHNBY3Rpb25zLmRlbGV0ZU9uZVF1ZXJ5LAogIHVwZGF0ZUl0ZW1zUGVyUGFnZTogX2FjdGlvbnMudGltZWxpbmVBY3Rpb25zLnVwZGF0ZUl0ZW1zUGVyUGFnZSwKICByZW1vdmVDb2x1bW46IF9hY3Rpb25zLnRpbWVsaW5lQWN0aW9ucy5yZW1vdmVDb2x1bW4sCiAgdXBzZXJ0Q29sdW1uOiBfYWN0aW9ucy50aW1lbGluZUFjdGlvbnMudXBzZXJ0Q29sdW1uCn07CnZhciBjb25uZWN0b3IgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkobWFrZU1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKTsKdmFyIFN0YXRlZnVsRXZlbnRzVmlld2VyID0gY29ubmVjdG9yKF9yZWFjdC5kZWZhdWx0Lm1lbW8oU3RhdGVmdWxFdmVudHNWaWV3ZXJDb21wb25lbnQsIGZ1bmN0aW9uIChwcmV2UHJvcHMsIG5leHRQcm9wcykgewogIHJldHVybiBwcmV2UHJvcHMuaWQgPT09IG5leHRQcm9wcy5pZCAmJiAoMCwgX2Zhc3REZWVwRXF1YWwuZGVmYXVsdCkocHJldlByb3BzLmNvbHVtbnMsIG5leHRQcm9wcy5jb2x1bW5zKSAmJiAoMCwgX2Zhc3REZWVwRXF1YWwuZGVmYXVsdCkocHJldlByb3BzLmRhdGFQcm92aWRlcnMsIG5leHRQcm9wcy5kYXRhUHJvdmlkZXJzKSAmJiBwcmV2UHJvcHMuZGVsZXRlZEV2ZW50SWRzID09PSBuZXh0UHJvcHMuZGVsZXRlZEV2ZW50SWRzICYmIHByZXZQcm9wcy5lbmQgPT09IG5leHRQcm9wcy5lbmQgJiYgKDAsIF9mYXN0RGVlcEVxdWFsLmRlZmF1bHQpKHByZXZQcm9wcy5maWx0ZXJzLCBuZXh0UHJvcHMuZmlsdGVycykgJiYgcHJldlByb3BzLmlzTGl2ZSA9PT0gbmV4dFByb3BzLmlzTGl2ZSAmJiBwcmV2UHJvcHMuaXRlbXNQZXJQYWdlID09PSBuZXh0UHJvcHMuaXRlbXNQZXJQYWdlICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMuaXRlbXNQZXJQYWdlT3B0aW9ucywgbmV4dFByb3BzLml0ZW1zUGVyUGFnZU9wdGlvbnMpICYmIHByZXZQcm9wcy5rcWxNb2RlID09PSBuZXh0UHJvcHMua3FsTW9kZSAmJiAoMCwgX2Zhc3REZWVwRXF1YWwuZGVmYXVsdCkocHJldlByb3BzLnF1ZXJ5LCBuZXh0UHJvcHMucXVlcnkpICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMuc29ydCwgbmV4dFByb3BzLnNvcnQpICYmIHByZXZQcm9wcy5zdGFydCA9PT0gbmV4dFByb3BzLnN0YXJ0ICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMucGFnZUZpbHRlcnMsIG5leHRQcm9wcy5wYWdlRmlsdGVycykgJiYgcHJldlByb3BzLnNob3dDaGVja2JveGVzID09PSBuZXh0UHJvcHMuc2hvd0NoZWNrYm94ZXMgJiYgcHJldlByb3BzLnNob3dSb3dSZW5kZXJlcnMgPT09IG5leHRQcm9wcy5zaG93Um93UmVuZGVyZXJzICYmIHByZXZQcm9wcy5zdGFydCA9PT0gbmV4dFByb3BzLnN0YXJ0ICYmICgwLCBfZmFzdERlZXBFcXVhbC5kZWZhdWx0KShwcmV2UHJvcHMudGltZWxpbmVUeXBlQ29udGV4dCwgbmV4dFByb3BzLnRpbWVsaW5lVHlwZUNvbnRleHQpICYmIHByZXZQcm9wcy51dGlsaXR5QmFyID09PSBuZXh0UHJvcHMudXRpbGl0eUJhcjsKfSkpOwpleHBvcnRzLlN0YXRlZnVsRXZlbnRzVmlld2VyID0gU3RhdGVmdWxFdmVudHNWaWV3ZXI7"},null]}