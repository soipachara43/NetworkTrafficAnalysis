{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!x-pack/legacy/plugins/maps/public/layers/styles/vector/vector_style.js","dependencies":[{"path":"x-pack/legacy/plugins/maps/public/layers/styles/vector/vector_style.js","mtime":1589249552464},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1589249605183},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1589249608558},{"path":"node_modules/babel-loader/lib/index.js","mtime":1589249591025}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlZlY3RvclN0eWxlID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF92ZWN0b3Jfc3R5bGVfZWRpdG9yID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL3ZlY3Rvcl9zdHlsZV9lZGl0b3IiKTsKCnZhciBfdmVjdG9yX3N0eWxlX2RlZmF1bHRzID0gcmVxdWlyZSgiLi92ZWN0b3Jfc3R5bGVfZGVmYXVsdHMiKTsKCnZhciBfYWJzdHJhY3Rfc3R5bGUgPSByZXF1aXJlKCIuLi9hYnN0cmFjdF9zdHlsZSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuLi8uLi8uLi8uLi9jb21tb24vY29uc3RhbnRzIik7Cgp2YXIgX3N0eWxlX21ldGEgPSByZXF1aXJlKCIuL3N0eWxlX21ldGEiKTsKCnZhciBfdmVjdG9yX2ljb24gPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbGVnZW5kL3ZlY3Rvcl9pY29uIik7Cgp2YXIgX3ZlY3Rvcl9zdHlsZV9sZWdlbmQgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbGVnZW5kL3ZlY3Rvcl9zdHlsZV9sZWdlbmQiKTsKCnZhciBfdmVjdG9yX2ZlYXR1cmVfdHlwZXMgPSByZXF1aXJlKCIuLi8uLi9zb3VyY2VzL3ZlY3Rvcl9mZWF0dXJlX3R5cGVzIik7Cgp2YXIgX3N0eWxlX3V0aWwgPSByZXF1aXJlKCIuL3N0eWxlX3V0aWwiKTsKCnZhciBfc3RhdGljX3N0eWxlX3Byb3BlcnR5ID0gcmVxdWlyZSgiLi9wcm9wZXJ0aWVzL3N0YXRpY19zdHlsZV9wcm9wZXJ0eSIpOwoKdmFyIF9keW5hbWljX3N0eWxlX3Byb3BlcnR5ID0gcmVxdWlyZSgiLi9wcm9wZXJ0aWVzL2R5bmFtaWNfc3R5bGVfcHJvcGVydHkiKTsKCnZhciBfZHluYW1pY19zaXplX3Byb3BlcnR5ID0gcmVxdWlyZSgiLi9wcm9wZXJ0aWVzL2R5bmFtaWNfc2l6ZV9wcm9wZXJ0eSIpOwoKdmFyIF9zdGF0aWNfc2l6ZV9wcm9wZXJ0eSA9IHJlcXVpcmUoIi4vcHJvcGVydGllcy9zdGF0aWNfc2l6ZV9wcm9wZXJ0eSIpOwoKdmFyIF9zdGF0aWNfY29sb3JfcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvc3RhdGljX2NvbG9yX3Byb3BlcnR5Iik7Cgp2YXIgX2R5bmFtaWNfY29sb3JfcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvZHluYW1pY19jb2xvcl9wcm9wZXJ0eSIpOwoKdmFyIF9zdGF0aWNfb3JpZW50YXRpb25fcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvc3RhdGljX29yaWVudGF0aW9uX3Byb3BlcnR5Iik7Cgp2YXIgX2R5bmFtaWNfb3JpZW50YXRpb25fcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvZHluYW1pY19vcmllbnRhdGlvbl9wcm9wZXJ0eSIpOwoKdmFyIF9zdGF0aWNfdGV4dF9wcm9wZXJ0eSA9IHJlcXVpcmUoIi4vcHJvcGVydGllcy9zdGF0aWNfdGV4dF9wcm9wZXJ0eSIpOwoKdmFyIF9keW5hbWljX3RleHRfcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvZHluYW1pY190ZXh0X3Byb3BlcnR5Iik7Cgp2YXIgX2xhYmVsX2JvcmRlcl9zaXplX3Byb3BlcnR5ID0gcmVxdWlyZSgiLi9wcm9wZXJ0aWVzL2xhYmVsX2JvcmRlcl9zaXplX3Byb3BlcnR5Iik7Cgp2YXIgX2V4dHJhY3RfY29sb3JfZnJvbV9zdHlsZV9wcm9wZXJ0eSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9sZWdlbmQvZXh0cmFjdF9jb2xvcl9mcm9tX3N0eWxlX3Byb3BlcnR5Iik7Cgp2YXIgX3N5bWJvbGl6ZV9hc19wcm9wZXJ0eSA9IHJlcXVpcmUoIi4vcHJvcGVydGllcy9zeW1ib2xpemVfYXNfcHJvcGVydHkiKTsKCnZhciBfc3RhdGljX2ljb25fcHJvcGVydHkgPSByZXF1aXJlKCIuL3Byb3BlcnRpZXMvc3RhdGljX2ljb25fcHJvcGVydHkiKTsKCnZhciBfZHluYW1pY19pY29uX3Byb3BlcnR5ID0gcmVxdWlyZSgiLi9wcm9wZXJ0aWVzL2R5bmFtaWNfaWNvbl9wcm9wZXJ0eSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgUE9JTlRTID0gW19jb25zdGFudHMuR0VPX0pTT05fVFlQRS5QT0lOVCwgX2NvbnN0YW50cy5HRU9fSlNPTl9UWVBFLk1VTFRJX1BPSU5UXTsKdmFyIExJTkVTID0gW19jb25zdGFudHMuR0VPX0pTT05fVFlQRS5MSU5FX1NUUklORywgX2NvbnN0YW50cy5HRU9fSlNPTl9UWVBFLk1VTFRJX0xJTkVfU1RSSU5HXTsKdmFyIFBPTFlHT05TID0gW19jb25zdGFudHMuR0VPX0pTT05fVFlQRS5QT0xZR09OLCBfY29uc3RhbnRzLkdFT19KU09OX1RZUEUuTVVMVElfUE9MWUdPTl07Cgp2YXIgVmVjdG9yU3R5bGUgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQWJzdHJhY3RTdHlsZSkgewogIF9pbmhlcml0cyhWZWN0b3JTdHlsZSwgX0Fic3RyYWN0U3R5bGUpOwoKICBfY3JlYXRlQ2xhc3MoVmVjdG9yU3R5bGUsIG51bGwsIFt7CiAgICBrZXk6ICJjcmVhdGVEZXNjcmlwdG9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9yKCkgewogICAgICB2YXIgcHJvcGVydGllcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CiAgICAgIHZhciBpc1RpbWVBd2FyZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTsKICAgICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiBWZWN0b3JTdHlsZS50eXBlLAogICAgICAgIHByb3BlcnRpZXM6IF9vYmplY3RTcHJlYWQoe30sICgwLCBfdmVjdG9yX3N0eWxlX2RlZmF1bHRzLmdldERlZmF1bHRQcm9wZXJ0aWVzKSgpLCB7fSwgcHJvcGVydGllcyksCiAgICAgICAgaXNUaW1lQXdhcmU6IGlzVGltZUF3YXJlCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiY3JlYXRlRGVmYXVsdFN0eWxlUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFN0eWxlUHJvcGVydGllcyhtYXBDb2xvcnMpIHsKICAgICAgcmV0dXJuICgwLCBfdmVjdG9yX3N0eWxlX2RlZmF1bHRzLmdldERlZmF1bHRQcm9wZXJ0aWVzKShtYXBDb2xvcnMpOwogICAgfQogIH1dKTsKCiAgZnVuY3Rpb24gVmVjdG9yU3R5bGUoKSB7CiAgICB2YXIgX3RoaXM7CgogICAgdmFyIGRlc2NyaXB0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgdmFyIGxheWVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZlY3RvclN0eWxlKTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihWZWN0b3JTdHlsZSkuY2FsbCh0aGlzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX2dldElzUG9pbnRzT25seSIsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF90aGlzLl9zdHlsZU1ldGEuaXNQb2ludHNPbmx5KCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0SXNMaW5lc09ubHkiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5fc3R5bGVNZXRhLmlzTGluZXNPbmx5KCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0SXNQb2x5Z29uc09ubHkiLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5fc3R5bGVNZXRhLmlzUG9seWdvbnNPbmx5KCk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0RmllbGRGb3JtYXR0ZXIiLCBmdW5jdGlvbiAoZmllbGROYW1lKSB7CiAgICAgIHZhciBkeW5hbWljUHJvcCA9IF90aGlzLl9nZXREeW5hbWljUHJvcGVydHlCeUZpZWxkTmFtZShmaWVsZE5hbWUpOwoKICAgICAgaWYgKCFkeW5hbWljUHJvcCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgZGF0YVJlcXVlc3RJZDsKCiAgICAgIGlmIChkeW5hbWljUHJvcC5nZXRGaWVsZE9yaWdpbigpID09PSBfY29uc3RhbnRzLkZJRUxEX09SSUdJTi5TT1VSQ0UpIHsKICAgICAgICBkYXRhUmVxdWVzdElkID0gX2NvbnN0YW50cy5TT1VSQ0VfRk9STUFUVEVSU19JRF9PUklHSU47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGpvaW4gPSBfdGhpcy5fbGF5ZXIuZ2V0VmFsaWRKb2lucygpLmZpbmQoZnVuY3Rpb24gKGpvaW4pIHsKICAgICAgICAgIHJldHVybiBqb2luLmdldFJpZ2h0Sm9pblNvdXJjZSgpLmhhc01hdGNoaW5nTWV0cmljRmllbGQoZmllbGROYW1lKTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKGpvaW4pIHsKICAgICAgICAgIGRhdGFSZXF1ZXN0SWQgPSBqb2luLmdldFNvdXJjZUZvcm1hdHRlcnNEYXRhUmVxdWVzdElkKCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoIWRhdGFSZXF1ZXN0SWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgdmFyIGZvcm1hdHRlcnNEYXRhUmVxdWVzdCA9IF90aGlzLl9sYXllci5nZXREYXRhUmVxdWVzdChkYXRhUmVxdWVzdElkKTsKCiAgICAgIGlmICghZm9ybWF0dGVyc0RhdGFSZXF1ZXN0IHx8ICFmb3JtYXR0ZXJzRGF0YVJlcXVlc3QuaGFzRGF0YSgpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBmb3JtYXR0ZXJzID0gZm9ybWF0dGVyc0RhdGFSZXF1ZXN0LmdldERhdGEoKTsKICAgICAgcmV0dXJuIGZvcm1hdHRlcnNbZmllbGROYW1lXTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImdldEljb24iLCBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBpc0xpbmVzT25seSA9IF90aGlzLl9nZXRJc0xpbmVzT25seSgpOwoKICAgICAgdmFyIHN0cm9rZUNvbG9yOwoKICAgICAgaWYgKGlzTGluZXNPbmx5KSB7CiAgICAgICAgc3Ryb2tlQ29sb3IgPSAoMCwgX2V4dHJhY3RfY29sb3JfZnJvbV9zdHlsZV9wcm9wZXJ0eS5leHRyYWN0Q29sb3JGcm9tU3R5bGVQcm9wZXJ0eSkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTElORV9DT0xPUl0sICdncmV5Jyk7CiAgICAgIH0gZWxzZSBpZiAoX3RoaXMuX2hhc0JvcmRlcigpKSB7CiAgICAgICAgc3Ryb2tlQ29sb3IgPSAoMCwgX2V4dHJhY3RfY29sb3JfZnJvbV9zdHlsZV9wcm9wZXJ0eS5leHRyYWN0Q29sb3JGcm9tU3R5bGVQcm9wZXJ0eSkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTElORV9DT0xPUl0sICdub25lJyk7CiAgICAgIH0KCiAgICAgIHZhciBmaWxsQ29sb3IgPSBpc0xpbmVzT25seSA/IG51bGwgOiAoMCwgX2V4dHJhY3RfY29sb3JfZnJvbV9zdHlsZV9wcm9wZXJ0eS5leHRyYWN0Q29sb3JGcm9tU3R5bGVQcm9wZXJ0eSkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuRklMTF9DT0xPUl0sICdncmV5Jyk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF92ZWN0b3JfaWNvbi5WZWN0b3JJY29uLCB7CiAgICAgICAgaXNQb2ludHNPbmx5OiBfdGhpcy5fZ2V0SXNQb2ludHNPbmx5KCksCiAgICAgICAgaXNMaW5lc09ubHk6IGlzTGluZXNPbmx5LAogICAgICAgIHN5bWJvbElkOiBfdGhpcy5fZ2V0U3ltYm9sSWQoKSwKICAgICAgICBzdHJva2VDb2xvcjogc3Ryb2tlQ29sb3IsCiAgICAgICAgZmlsbENvbG9yOiBmaWxsQ29sb3IKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfZ2V0TGVnZW5kRGV0YWlsU3R5bGVQcm9wZXJ0aWVzIiwgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RoaXMuZ2V0RHluYW1pY1Byb3BlcnRpZXNBcnJheSgpLmZpbHRlcihmdW5jdGlvbiAoc3R5bGVQcm9wZXJ0eSkgewogICAgICAgIHZhciBzdHlsZU5hbWUgPSBzdHlsZVByb3BlcnR5LmdldFN0eWxlTmFtZSgpOwoKICAgICAgICBpZiAoW19jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5JQ09OX09SSUVOVEFUSU9OLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfVEVYVF0uaW5jbHVkZXMoc3R5bGVOYW1lKSkgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKF90aGlzLl9nZXRJc0xpbmVzT25seSgpKSB7CiAgICAgICAgICByZXR1cm4gX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cy5MSU5FX1NUWUxFUy5pbmNsdWRlcyhzdHlsZU5hbWUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKF90aGlzLl9nZXRJc1BvbHlnb25zT25seSgpKSB7CiAgICAgICAgICByZXR1cm4gX3ZlY3Rvcl9zdHlsZV9kZWZhdWx0cy5QT0xZR09OX1NUWUxFUy5pbmNsdWRlcyhzdHlsZU5hbWUpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0pOwogICAgfSk7CgogICAgX3RoaXMuX3NvdXJjZSA9IHNvdXJjZTsKICAgIF90aGlzLl9sYXllciA9IGxheWVyOwogICAgX3RoaXMuX2Rlc2NyaXB0b3IgPSBfb2JqZWN0U3ByZWFkKHt9LCBkZXNjcmlwdG9yLCB7fSwgVmVjdG9yU3R5bGUuY3JlYXRlRGVzY3JpcHRvcihkZXNjcmlwdG9yLnByb3BlcnRpZXMsIGRlc2NyaXB0b3IuaXNUaW1lQXdhcmUpKTsKICAgIF90aGlzLl9zdHlsZU1ldGEgPSBuZXcgX3N0eWxlX21ldGEuU3R5bGVNZXRhKF90aGlzLl9kZXNjcmlwdG9yLl9fc3R5bGVNZXRhKTsKICAgIF90aGlzLl9zeW1ib2xpemVBc1N0eWxlUHJvcGVydHkgPSBuZXcgX3N5bWJvbGl6ZV9hc19wcm9wZXJ0eS5TeW1ib2xpemVBc1Byb3BlcnR5KF90aGlzLl9kZXNjcmlwdG9yLnByb3BlcnRpZXNbX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLlNZTUJPTElaRV9BU10ub3B0aW9ucywgX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLlNZTUJPTElaRV9BUyk7CiAgICBfdGhpcy5fbGluZUNvbG9yU3R5bGVQcm9wZXJ0eSA9IF90aGlzLl9tYWtlQ29sb3JQcm9wZXJ0eShfdGhpcy5fZGVzY3JpcHRvci5wcm9wZXJ0aWVzW19jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5MSU5FX0NPTE9SXSwgX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLkxJTkVfQ09MT1IpOwogICAgX3RoaXMuX2ZpbGxDb2xvclN0eWxlUHJvcGVydHkgPSBfdGhpcy5fbWFrZUNvbG9yUHJvcGVydHkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuRklMTF9DT0xPUl0sIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5GSUxMX0NPTE9SKTsKICAgIF90aGlzLl9saW5lV2lkdGhTdHlsZVByb3BlcnR5ID0gX3RoaXMuX21ha2VTaXplUHJvcGVydHkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTElORV9XSURUSF0sIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5MSU5FX1dJRFRIKTsKICAgIF90aGlzLl9pY29uU3R5bGVQcm9wZXJ0eSA9IF90aGlzLl9tYWtlSWNvblByb3BlcnR5KF90aGlzLl9kZXNjcmlwdG9yLnByb3BlcnRpZXNbX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLklDT05dKTsKICAgIF90aGlzLl9pY29uU2l6ZVN0eWxlUHJvcGVydHkgPSBfdGhpcy5fbWFrZVNpemVQcm9wZXJ0eShfdGhpcy5fZGVzY3JpcHRvci5wcm9wZXJ0aWVzW19jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5JQ09OX1NJWkVdLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuSUNPTl9TSVpFLCBfdGhpcy5fc3ltYm9saXplQXNTdHlsZVByb3BlcnR5LmlzU3ltYm9saXplZEFzSWNvbigpKTsKICAgIF90aGlzLl9pY29uT3JpZW50YXRpb25Qcm9wZXJ0eSA9IF90aGlzLl9tYWtlT3JpZW50YXRpb25Qcm9wZXJ0eShfdGhpcy5fZGVzY3JpcHRvci5wcm9wZXJ0aWVzW19jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5JQ09OX09SSUVOVEFUSU9OXSwgX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLklDT05fT1JJRU5UQVRJT04pOwogICAgX3RoaXMuX2xhYmVsU3R5bGVQcm9wZXJ0eSA9IF90aGlzLl9tYWtlTGFiZWxQcm9wZXJ0eShfdGhpcy5fZGVzY3JpcHRvci5wcm9wZXJ0aWVzW19jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5MQUJFTF9URVhUXSk7CiAgICBfdGhpcy5fbGFiZWxTaXplU3R5bGVQcm9wZXJ0eSA9IF90aGlzLl9tYWtlU2l6ZVByb3BlcnR5KF90aGlzLl9kZXNjcmlwdG9yLnByb3BlcnRpZXNbX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLkxBQkVMX1NJWkVdLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfU0laRSk7CiAgICBfdGhpcy5fbGFiZWxDb2xvclN0eWxlUHJvcGVydHkgPSBfdGhpcy5fbWFrZUNvbG9yUHJvcGVydHkoX3RoaXMuX2Rlc2NyaXB0b3IucHJvcGVydGllc1tfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfQ09MT1JdLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfQ09MT1IpOwogICAgX3RoaXMuX2xhYmVsQm9yZGVyQ29sb3JTdHlsZVByb3BlcnR5ID0gX3RoaXMuX21ha2VDb2xvclByb3BlcnR5KF90aGlzLl9kZXNjcmlwdG9yLnByb3BlcnRpZXNbX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLkxBQkVMX0JPUkRFUl9DT0xPUl0sIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5MQUJFTF9CT1JERVJfQ09MT1IpOwogICAgX3RoaXMuX2xhYmVsQm9yZGVyU2l6ZVN0eWxlUHJvcGVydHkgPSBuZXcgX2xhYmVsX2JvcmRlcl9zaXplX3Byb3BlcnR5LkxhYmVsQm9yZGVyU2l6ZVByb3BlcnR5KF90aGlzLl9kZXNjcmlwdG9yLnByb3BlcnRpZXNbX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLkxBQkVMX0JPUkRFUl9TSVpFXS5vcHRpb25zLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfQk9SREVSX1NJWkUsIF90aGlzLl9sYWJlbFNpemVTdHlsZVByb3BlcnR5KTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhWZWN0b3JTdHlsZSwgW3sKICAgIGtleTogImdldEFsbFN0eWxlUHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsU3R5bGVQcm9wZXJ0aWVzKCkgewogICAgICByZXR1cm4gW3RoaXMuX3N5bWJvbGl6ZUFzU3R5bGVQcm9wZXJ0eSwgdGhpcy5faWNvblN0eWxlUHJvcGVydHksIHRoaXMuX2xpbmVDb2xvclN0eWxlUHJvcGVydHksIHRoaXMuX2ZpbGxDb2xvclN0eWxlUHJvcGVydHksIHRoaXMuX2xpbmVXaWR0aFN0eWxlUHJvcGVydHksIHRoaXMuX2ljb25TaXplU3R5bGVQcm9wZXJ0eSwgdGhpcy5faWNvbk9yaWVudGF0aW9uUHJvcGVydHksIHRoaXMuX2xhYmVsU3R5bGVQcm9wZXJ0eSwgdGhpcy5fbGFiZWxTaXplU3R5bGVQcm9wZXJ0eSwgdGhpcy5fbGFiZWxDb2xvclN0eWxlUHJvcGVydHksIHRoaXMuX2xhYmVsQm9yZGVyQ29sb3JTdHlsZVByb3BlcnR5LCB0aGlzLl9sYWJlbEJvcmRlclNpemVTdHlsZVByb3BlcnR5XTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfaGFzQm9yZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFzQm9yZGVyKCkgewogICAgICByZXR1cm4gdGhpcy5fbGluZVdpZHRoU3R5bGVQcm9wZXJ0eS5pc0R5bmFtaWMoKSA/IHRoaXMuX2xpbmVXaWR0aFN0eWxlUHJvcGVydHkuaXNDb21wbGV0ZSgpIDogdGhpcy5fbGluZVdpZHRoU3R5bGVQcm9wZXJ0eS5nZXRPcHRpb25zKCkuc2l6ZSAhPT0gMDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXJFZGl0b3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckVkaXRvcihfcmVmKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGxheWVyID0gX3JlZi5sYXllciwKICAgICAgICAgIG9uU3R5bGVEZXNjcmlwdG9yQ2hhbmdlID0gX3JlZi5vblN0eWxlRGVzY3JpcHRvckNoYW5nZTsKICAgICAgdmFyIHJhd1Byb3BlcnRpZXMgPSB0aGlzLmdldFJhd1Byb3BlcnRpZXMoKTsKCiAgICAgIHZhciBoYW5kbGVQcm9wZXJ0eUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZVByb3BlcnR5Q2hhbmdlKHByb3BlcnR5TmFtZSwgc2V0dGluZ3MpIHsKICAgICAgICByYXdQcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gPSBzZXR0aW5nczsgLy9vdmVycmlkZSBzaW5nbGUgcHJvcGVydHksIGJ1dCBwcmVzZXJ2ZSB0aGUgcmVzdAoKICAgICAgICB2YXIgdmVjdG9yU3R5bGVEZXNjcmlwdG9yID0gVmVjdG9yU3R5bGUuY3JlYXRlRGVzY3JpcHRvcihyYXdQcm9wZXJ0aWVzLCBfdGhpczIuaXNUaW1lQXdhcmUoKSk7CiAgICAgICAgb25TdHlsZURlc2NyaXB0b3JDaGFuZ2UodmVjdG9yU3R5bGVEZXNjcmlwdG9yKTsKICAgICAgfTsKCiAgICAgIHZhciBvbklzVGltZUF3YXJlQ2hhbmdlID0gZnVuY3Rpb24gb25Jc1RpbWVBd2FyZUNoYW5nZShpc1RpbWVBd2FyZSkgewogICAgICAgIHZhciB2ZWN0b3JTdHlsZURlc2NyaXB0b3IgPSBWZWN0b3JTdHlsZS5jcmVhdGVEZXNjcmlwdG9yKHJhd1Byb3BlcnRpZXMsIGlzVGltZUF3YXJlKTsKICAgICAgICBvblN0eWxlRGVzY3JpcHRvckNoYW5nZSh2ZWN0b3JTdHlsZURlc2NyaXB0b3IpOwogICAgICB9OwoKICAgICAgdmFyIHByb3BlcnRpZXNXaXRoRmllbGRNZXRhID0gdGhpcy5nZXREeW5hbWljUHJvcGVydGllc0FycmF5KCkuZmlsdGVyKGZ1bmN0aW9uIChkeW5hbWljU3R5bGVQcm9wKSB7CiAgICAgICAgcmV0dXJuIGR5bmFtaWNTdHlsZVByb3AuaXNGaWVsZE1ldGFFbmFibGVkKCk7CiAgICAgIH0pOwogICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0ge307CiAgICAgIHRoaXMuZ2V0QWxsU3R5bGVQcm9wZXJ0aWVzKCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVQcm9wZXJ0eSkgewogICAgICAgIHN0eWxlUHJvcGVydGllc1tzdHlsZVByb3BlcnR5LmdldFN0eWxlTmFtZSgpXSA9IHN0eWxlUHJvcGVydHk7CiAgICAgIH0pOwogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfdmVjdG9yX3N0eWxlX2VkaXRvci5WZWN0b3JTdHlsZUVkaXRvciwgewogICAgICAgIGhhbmRsZVByb3BlcnR5Q2hhbmdlOiBoYW5kbGVQcm9wZXJ0eUNoYW5nZSwKICAgICAgICBzdHlsZVByb3BlcnRpZXM6IHN0eWxlUHJvcGVydGllcywKICAgICAgICBsYXllcjogbGF5ZXIsCiAgICAgICAgaXNQb2ludHNPbmx5OiB0aGlzLl9nZXRJc1BvaW50c09ubHkoKSwKICAgICAgICBpc0xpbmVzT25seTogdGhpcy5fZ2V0SXNMaW5lc09ubHkoKSwKICAgICAgICBvbklzVGltZUF3YXJlQ2hhbmdlOiBvbklzVGltZUF3YXJlQ2hhbmdlLAogICAgICAgIGlzVGltZUF3YXJlOiB0aGlzLmlzVGltZUF3YXJlKCksCiAgICAgICAgc2hvd0lzVGltZUF3YXJlOiBwcm9wZXJ0aWVzV2l0aEZpZWxkTWV0YS5sZW5ndGggPiAwLAogICAgICAgIGhhc0JvcmRlcjogdGhpcy5faGFzQm9yZGVyKCkKICAgICAgfSk7CiAgICB9CiAgICAvKgogICAgICogQ2hhbmdlcyB0byBzb3VyY2UgZGVzY3JpcHRvciBhbmQgam9pbiBkZXNjcmlwdG9yIHdpbGwgaW1wYWN0IHN0eWxlIHByb3BlcnRpZXMuCiAgICAgKiBGb3IgaW5zdGFuY2UsIGEgc3R5bGUgcHJvcGVydHkgbWF5IGJlIGR5bmFtaWNhbGx5IHRpZWQgdG8gdGhlIHZhbHVlIG9mIGFuIG9yZGluYWwgZmllbGQgZGVmaW5lZAogICAgICogYnkgYSBqb2luIG9yIGEgbWV0cmljIGFnZ3JlZ2F0aW9uLiBUaGUgbWV0cmljIGFnZ3JlZ2F0aW9uIG9yIGpvaW4gbWF5IGJlIGVkaXRlZCBvciByZW1vdmVkLgogICAgICogV2hlbiB0aGlzIGhhcHBlbnMsIHRoZSBzdHlsZSB3aWxsIGJlIGxpbmtlZCB0byBhIG5vLWxvbmdlci1leGlzdGluZyBvcmRpbmFsIGZpZWxkLgogICAgICogVGhpcyBtZXRob2QgcHJvdmlkZXMgYSB3YXkgZm9yIGEgc3R5bGUgdG8gY2xlYW4gaXRzZWxmIGFuZCByZXR1cm4gYSBkZXNjcmlwdG9yIHRoYXQgdW5zZXRzIGFueSBkeW5hbWljCiAgICAgKiBwcm9wZXJ0aWVzIHRoYXQgYXJlIHRpZWQgdG8gbWlzc2luZyBvcmlkaW5hbCBmaWVsZHMKICAgICAqCiAgICAgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB1cGRhdGUgaXRzIGRlc2NyaXB0b3IuIEl0IGp1c3QgcmV0dXJucyBhIG5ldyBkZXNjcmlwdG9yIHRoYXQgdGhlIGNhbGxlcgogICAgICogY2FuIHRoZW4gdXNlIHRvIHVwZGF0ZSBzdG9yZSBzdGF0ZSB2aWEgZGlzcGF0Y2guCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0RGVzY3JpcHRvcldpdGhNaXNzaW5nU3R5bGVQcm9wc1JlbW92ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlc2NyaXB0b3JXaXRoTWlzc2luZ1N0eWxlUHJvcHNSZW1vdmVkKG5leHRGaWVsZHMpIHsKICAgICAgdmFyIG9yaWdpbmFsUHJvcGVydGllcyA9IHRoaXMuZ2V0UmF3UHJvcGVydGllcygpOwogICAgICB2YXIgdXBkYXRlZFByb3BlcnRpZXMgPSB7fTsKICAgICAgdmFyIGR5bmFtaWNQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMob3JpZ2luYWxQcm9wZXJ0aWVzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgewogICAgICAgIHZhciBfcmVmMiA9IG9yaWdpbmFsUHJvcGVydGllc1trZXldIHx8IHt9LAogICAgICAgICAgICB0eXBlID0gX3JlZjIudHlwZSwKICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7CgogICAgICAgIHJldHVybiB0eXBlID09PSBfY29uc3RhbnRzLlNUWUxFX1RZUEUuRFlOQU1JQyAmJiBvcHRpb25zLmZpZWxkICYmIG9wdGlvbnMuZmllbGQubmFtZTsKICAgICAgfSk7CiAgICAgIGR5bmFtaWNQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIHZhciBkeW5hbWljUHJvcGVydHkgPSBvcmlnaW5hbFByb3BlcnRpZXNba2V5XTsKICAgICAgICB2YXIgZmllbGROYW1lID0gZHluYW1pY1Byb3BlcnR5ICYmIGR5bmFtaWNQcm9wZXJ0eS5vcHRpb25zLmZpZWxkICYmIGR5bmFtaWNQcm9wZXJ0eS5vcHRpb25zLmZpZWxkLm5hbWU7CgogICAgICAgIGlmICghZmllbGROYW1lKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB2YXIgbWF0Y2hpbmdPcmRpbmFsRmllbGQgPSBuZXh0RmllbGRzLmZpbmQoZnVuY3Rpb24gKG9yZGluYWxGaWVsZCkgewogICAgICAgICAgcmV0dXJuIGZpZWxkTmFtZSA9PT0gb3JkaW5hbEZpZWxkLmdldE5hbWUoKTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKG1hdGNoaW5nT3JkaW5hbEZpZWxkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB1cGRhdGVkUHJvcGVydGllc1trZXldID0gewogICAgICAgICAgdHlwZTogX2R5bmFtaWNfc3R5bGVfcHJvcGVydHkuRHluYW1pY1N0eWxlUHJvcGVydHkudHlwZSwKICAgICAgICAgIG9wdGlvbnM6IF9vYmplY3RTcHJlYWQoe30sIG9yaWdpbmFsUHJvcGVydGllc1trZXldLm9wdGlvbnMpCiAgICAgICAgfTsKICAgICAgICBkZWxldGUgdXBkYXRlZFByb3BlcnRpZXNba2V5XS5vcHRpb25zLmZpZWxkOwogICAgICB9KTsKCiAgICAgIGlmIChPYmplY3Qua2V5cyh1cGRhdGVkUHJvcGVydGllcykubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGhhc0NoYW5nZXM6IGZhbHNlLAogICAgICAgICAgbmV4dFN0eWxlRGVzY3JpcHRvcjogX29iamVjdFNwcmVhZCh7fSwgdGhpcy5fZGVzY3JpcHRvcikKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGhhc0NoYW5nZXM6IHRydWUsCiAgICAgICAgbmV4dFN0eWxlRGVzY3JpcHRvcjogVmVjdG9yU3R5bGUuY3JlYXRlRGVzY3JpcHRvcihfb2JqZWN0U3ByZWFkKHt9LCBvcmlnaW5hbFByb3BlcnRpZXMsIHt9LCB1cGRhdGVkUHJvcGVydGllcyksIHRoaXMuaXNUaW1lQXdhcmUoKSkKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwbHVja1N0eWxlTWV0YUZyb21Tb3VyY2VEYXRhUmVxdWVzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3BsdWNrU3R5bGVNZXRhRnJvbVNvdXJjZURhdGFSZXF1ZXN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShzb3VyY2VEYXRhUmVxdWVzdCkgewogICAgICAgIHZhciBfaGFzRmVhdHVyZVR5cGU7CgogICAgICAgIHZhciBmZWF0dXJlcywgc3VwcG9ydGVkRmVhdHVyZXMsIGhhc0ZlYXR1cmVUeXBlLCBpLCBmZWF0dXJlLCBzdHlsZU1ldGEsIGR5bmFtaWNQcm9wZXJ0aWVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gX2xvZGFzaC5kZWZhdWx0LmdldChzb3VyY2VEYXRhUmVxdWVzdC5nZXREYXRhKCksICdmZWF0dXJlcycsIFtdKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5nZXRTdXBwb3J0ZWRTaGFwZVR5cGVzKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHN1cHBvcnRlZEZlYXR1cmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGhhc0ZlYXR1cmVUeXBlID0gKF9oYXNGZWF0dXJlVHlwZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2hhc0ZlYXR1cmVUeXBlLCBfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLlBPSU5ULCBmYWxzZSksIF9kZWZpbmVQcm9wZXJ0eShfaGFzRmVhdHVyZVR5cGUsIF92ZWN0b3JfZmVhdHVyZV90eXBlcy5WRUNUT1JfU0hBUEVfVFlQRVMuTElORSwgZmFsc2UpLCBfZGVmaW5lUHJvcGVydHkoX2hhc0ZlYXR1cmVUeXBlLCBfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLlBPTFlHT04sIGZhbHNlKSwgX2hhc0ZlYXR1cmVUeXBlKTsKCiAgICAgICAgICAgICAgICBpZiAoc3VwcG9ydGVkRmVhdHVyZXMubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gZmVhdHVyZXNbaV07CgogICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmVhdHVyZVR5cGVbX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzLlZFQ1RPUl9TSEFQRV9UWVBFUy5QT0lOVF0gJiYgUE9JTlRTLmluY2x1ZGVzKGZlYXR1cmUuZ2VvbWV0cnkudHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgIGhhc0ZlYXR1cmVUeXBlW192ZWN0b3JfZmVhdHVyZV90eXBlcy5WRUNUT1JfU0hBUEVfVFlQRVMuUE9JTlRdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmVhdHVyZVR5cGVbX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzLlZFQ1RPUl9TSEFQRV9UWVBFUy5MSU5FXSAmJiBMSU5FUy5pbmNsdWRlcyhmZWF0dXJlLmdlb21ldHJ5LnR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICBoYXNGZWF0dXJlVHlwZVtfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLkxJTkVdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICghaGFzRmVhdHVyZVR5cGVbX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzLlZFQ1RPUl9TSEFQRV9UWVBFUy5QT0xZR09OXSAmJiBQT0xZR09OUy5pbmNsdWRlcyhmZWF0dXJlLmdlb21ldHJ5LnR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICBoYXNGZWF0dXJlVHlwZVtfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLlBPTFlHT05dID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzdHlsZU1ldGEgPSB7CiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5VHlwZXM6IHsKICAgICAgICAgICAgICAgICAgICBpc1BvaW50c09ubHk6ICgwLCBfc3R5bGVfdXRpbC5pc09ubHlTaW5nbGVGZWF0dXJlVHlwZSkoX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzLlZFQ1RPUl9TSEFQRV9UWVBFUy5QT0lOVCwgc3VwcG9ydGVkRmVhdHVyZXMsIGhhc0ZlYXR1cmVUeXBlKSwKICAgICAgICAgICAgICAgICAgICBpc0xpbmVzT25seTogKDAsIF9zdHlsZV91dGlsLmlzT25seVNpbmdsZUZlYXR1cmVUeXBlKShfdmVjdG9yX2ZlYXR1cmVfdHlwZXMuVkVDVE9SX1NIQVBFX1RZUEVTLkxJTkUsIHN1cHBvcnRlZEZlYXR1cmVzLCBoYXNGZWF0dXJlVHlwZSksCiAgICAgICAgICAgICAgICAgICAgaXNQb2x5Z29uc09ubHk6ICgwLCBfc3R5bGVfdXRpbC5pc09ubHlTaW5nbGVGZWF0dXJlVHlwZSkoX3ZlY3Rvcl9mZWF0dXJlX3R5cGVzLlZFQ1RPUl9TSEFQRV9UWVBFUy5QT0xZR09OLCBzdXBwb3J0ZWRGZWF0dXJlcywgaGFzRmVhdHVyZVR5cGUpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGZpZWxkTWV0YToge30KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBkeW5hbWljUHJvcGVydGllcyA9IHRoaXMuZ2V0RHluYW1pY1Byb3BlcnRpZXNBcnJheSgpOwoKICAgICAgICAgICAgICAgIGlmICghKGR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMCB8fCBmZWF0dXJlcy5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgc3R5bGVNZXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIGR5bmFtaWNQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGR5bmFtaWNQcm9wZXJ0eSkgewogICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcmljYWxTdHlsZU1ldGEgPSBkeW5hbWljUHJvcGVydHkucGx1Y2tDYXRlZ29yaWNhbFN0eWxlTWV0YUZyb21GZWF0dXJlcyhmZWF0dXJlcyk7CiAgICAgICAgICAgICAgICAgIHZhciBvcmRpbmFsU3R5bGVNZXRhID0gZHluYW1pY1Byb3BlcnR5LnBsdWNrT3JkaW5hbFN0eWxlTWV0YUZyb21GZWF0dXJlcyhmZWF0dXJlcyk7CiAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZHluYW1pY1Byb3BlcnR5LmdldEZpZWxkKCkuZ2V0TmFtZSgpOwoKICAgICAgICAgICAgICAgICAgaWYgKCFzdHlsZU1ldGEuZmllbGRNZXRhW25hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgc3R5bGVNZXRhLmZpZWxkTWV0YVtuYW1lXSA9IHt9OwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcmljYWxTdHlsZU1ldGEpIHsKICAgICAgICAgICAgICAgICAgICBzdHlsZU1ldGEuZmllbGRNZXRhW25hbWVdLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWNhbFN0eWxlTWV0YTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYgKG9yZGluYWxTdHlsZU1ldGEpIHsKICAgICAgICAgICAgICAgICAgICBzdHlsZU1ldGEuZmllbGRNZXRhW25hbWVdLnJhbmdlID0gb3JkaW5hbFN0eWxlTWV0YTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBzdHlsZU1ldGEpOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHBsdWNrU3R5bGVNZXRhRnJvbVNvdXJjZURhdGFSZXF1ZXN0KF94KSB7CiAgICAgICAgcmV0dXJuIF9wbHVja1N0eWxlTWV0YUZyb21Tb3VyY2VEYXRhUmVxdWVzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcGx1Y2tTdHlsZU1ldGFGcm9tU291cmNlRGF0YVJlcXVlc3Q7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRTb3VyY2VGaWVsZE5hbWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTb3VyY2VGaWVsZE5hbWVzKCkgewogICAgICB2YXIgZmllbGROYW1lcyA9IFtdOwogICAgICB0aGlzLmdldER5bmFtaWNQcm9wZXJ0aWVzQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZVByb3BlcnR5KSB7CiAgICAgICAgaWYgKHN0eWxlUHJvcGVydHkuZ2V0RmllbGRPcmlnaW4oKSA9PT0gX2NvbnN0YW50cy5GSUVMRF9PUklHSU4uU09VUkNFKSB7CiAgICAgICAgICBmaWVsZE5hbWVzLnB1c2goc3R5bGVQcm9wZXJ0eS5nZXRGaWVsZCgpLmdldE5hbWUoKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGZpZWxkTmFtZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNUaW1lQXdhcmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVGltZUF3YXJlKCkgewogICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRvci5pc1RpbWVBd2FyZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRSYXdQcm9wZXJ0aWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYXdQcm9wZXJ0aWVzKCkgewogICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRvci5wcm9wZXJ0aWVzIHx8IHt9OwogICAgfQogIH0sIHsKICAgIGtleTogImdldER5bmFtaWNQcm9wZXJ0aWVzQXJyYXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldER5bmFtaWNQcm9wZXJ0aWVzQXJyYXkoKSB7CiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSB0aGlzLmdldEFsbFN0eWxlUHJvcGVydGllcygpOwogICAgICByZXR1cm4gc3R5bGVQcm9wZXJ0aWVzLmZpbHRlcihmdW5jdGlvbiAoc3R5bGVQcm9wZXJ0eSkgewogICAgICAgIHJldHVybiBzdHlsZVByb3BlcnR5LmlzRHluYW1pYygpICYmIHN0eWxlUHJvcGVydHkuaXNDb21wbGV0ZSgpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZ2V0RHluYW1pY1Byb3BlcnR5QnlGaWVsZE5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREeW5hbWljUHJvcGVydHlCeUZpZWxkTmFtZShmaWVsZE5hbWUpIHsKICAgICAgdmFyIGR5bmFtaWNQcm9wcyA9IHRoaXMuZ2V0RHluYW1pY1Byb3BlcnRpZXNBcnJheSgpOwogICAgICByZXR1cm4gZHluYW1pY1Byb3BzLmZpbmQoZnVuY3Rpb24gKGR5bmFtaWNQcm9wKSB7CiAgICAgICAgcmV0dXJuIGZpZWxkTmFtZSA9PT0gZHluYW1pY1Byb3AuZ2V0RmllbGQoKS5nZXROYW1lKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFN0eWxlTWV0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3R5bGVNZXRhKCkgewogICAgICByZXR1cm4gdGhpcy5fc3R5bGVNZXRhOwogICAgfQogIH0sIHsKICAgIGtleTogIl9nZXRTeW1ib2xJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFN5bWJvbElkKCkgewogICAgICByZXR1cm4gdGhpcy5hcmVQb2ludHNTeW1ib2xpemVkQXNDaXJjbGVzKCkgPyB1bmRlZmluZWQgOiB0aGlzLl9pY29uU3R5bGVQcm9wZXJ0eS5nZXRPcHRpb25zKCkudmFsdWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFzTGVnZW5kRGV0YWlscyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2hhc0xlZ2VuZERldGFpbHMgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHRoaXMuX2dldExlZ2VuZERldGFpbFN0eWxlUHJvcGVydGllcygpLmxlbmd0aCA+IDApOwoKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBoYXNMZWdlbmREZXRhaWxzKCkgewogICAgICAgIHJldHVybiBfaGFzTGVnZW5kRGV0YWlscy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaGFzTGVnZW5kRGV0YWlsczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogInJlbmRlckxlZ2VuZERldGFpbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxlZ2VuZERldGFpbHMoKSB7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF92ZWN0b3Jfc3R5bGVfbGVnZW5kLlZlY3RvclN0eWxlTGVnZW5kLCB7CiAgICAgICAgc3R5bGVzOiB0aGlzLl9nZXRMZWdlbmREZXRhaWxTdHlsZVByb3BlcnRpZXMoKSwKICAgICAgICBpc1BvaW50c09ubHk6IHRoaXMuX2dldElzUG9pbnRzT25seSgpLAogICAgICAgIGlzTGluZXNPbmx5OiB0aGlzLl9nZXRJc0xpbmVzT25seSgpLAogICAgICAgIHN5bWJvbElkOiB0aGlzLl9nZXRTeW1ib2xJZCgpCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFyRmVhdHVyZVN0YXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckZlYXR1cmVTdGF0ZShmZWF0dXJlQ29sbGVjdGlvbiwgbWJNYXAsIHNvdXJjZUlkKSB7CiAgICAgIHZhciB0bXBGZWF0dXJlSWRlbnRpZmllciA9IHsKICAgICAgICBzb3VyY2U6IG51bGwsCiAgICAgICAgaWQ6IG51bGwKICAgICAgfTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVzW2ldOwogICAgICAgIHRtcEZlYXR1cmVJZGVudGlmaWVyLnNvdXJjZSA9IHNvdXJjZUlkOwogICAgICAgIHRtcEZlYXR1cmVJZGVudGlmaWVyLmlkID0gZmVhdHVyZS5pZDsKICAgICAgICBtYk1hcC5yZW1vdmVGZWF0dXJlU3RhdGUodG1wRmVhdHVyZUlkZW50aWZpZXIpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0RmVhdHVyZVN0YXRlQW5kU3R5bGVQcm9wcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmVhdHVyZVN0YXRlQW5kU3R5bGVQcm9wcyhmZWF0dXJlQ29sbGVjdGlvbiwgbWJNYXAsIG1iU291cmNlSWQpIHsKICAgICAgaWYgKCFmZWF0dXJlQ29sbGVjdGlvbikgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGR5bmFtaWNTdHlsZVByb3BzID0gdGhpcy5nZXREeW5hbWljUHJvcGVydGllc0FycmF5KCk7CgogICAgICBpZiAoZHluYW1pY1N0eWxlUHJvcHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgdG1wRmVhdHVyZUlkZW50aWZpZXIgPSB7CiAgICAgICAgc291cmNlOiBudWxsLAogICAgICAgIGlkOiBudWxsCiAgICAgIH07CiAgICAgIHZhciB0bXBGZWF0dXJlU3RhdGUgPSB7fTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZUNvbGxlY3Rpb24uZmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVDb2xsZWN0aW9uLmZlYXR1cmVzW2ldOwoKICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGR5bmFtaWNTdHlsZVByb3BzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICB2YXIgZHluYW1pY1N0eWxlUHJvcCA9IGR5bmFtaWNTdHlsZVByb3BzW2pdOwogICAgICAgICAgdmFyIG5hbWUgPSBkeW5hbWljU3R5bGVQcm9wLmdldEZpZWxkKCkuZ2V0TmFtZSgpOwogICAgICAgICAgdmFyIGNvbXB1dGVkTmFtZSA9ICgwLCBfc3R5bGVfdXRpbC5nZXRDb21wdXRlZEZpZWxkTmFtZSkoZHluYW1pY1N0eWxlUHJvcC5nZXRTdHlsZU5hbWUoKSwgbmFtZSk7CiAgICAgICAgICB2YXIgc3R5bGVWYWx1ZSA9IGR5bmFtaWNTdHlsZVByb3AuZ2V0TWJWYWx1ZShmZWF0dXJlLnByb3BlcnRpZXNbbmFtZV0pOwoKICAgICAgICAgIGlmIChkeW5hbWljU3R5bGVQcm9wLnN1cHBvcnRzTWJGZWF0dXJlU3RhdGUoKSkgewogICAgICAgICAgICB0bXBGZWF0dXJlU3RhdGVbY29tcHV0ZWROYW1lXSA9IHN0eWxlVmFsdWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNbY29tcHV0ZWROYW1lXSA9IHN0eWxlVmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0bXBGZWF0dXJlSWRlbnRpZmllci5zb3VyY2UgPSBtYlNvdXJjZUlkOwogICAgICAgIHRtcEZlYXR1cmVJZGVudGlmaWVyLmlkID0gZmVhdHVyZS5pZDsKICAgICAgICBtYk1hcC5zZXRGZWF0dXJlU3RhdGUodG1wRmVhdHVyZUlkZW50aWZpZXIsIHRtcEZlYXR1cmVTdGF0ZSk7CiAgICAgIH0gLy9yZXR1cm5zIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBzdHlsZXMgZG8gbm90IHN1cHBvcnQgZmVhdHVyZS1zdGF0ZSBhbmQgc29tZSB2YWx1ZXMgYXJlIHN0b3JlZCBpbiBnZW9qc29uIHByb3BlcnRpZXMKICAgICAgLy90aGlzIHJldHVybi12YWx1ZSBpcyB1c2VkIGluIGFuIG9wdGltaXphdGlvbiBmb3Igc3R5bGUtdXBkYXRlcyB3aXRoIG1hcGJveC1nbC4KICAgICAgLy9gdHJ1ZWAgaW5kaWNhdGVzIHRoZSBlbnRpcmUgZGF0YSBuZWVkcyB0byByZXNldCBvbiB0aGUgc291cmNlIChvdGhlcndpc2UgdGhlIHN0eWxlLXJ1bGVzIHdpbGwgbm90IGJlIHJlYXBwbGllZCkKICAgICAgLy9gZmFsc2VgIGluZGljYXRlcyB0aGUgZGF0YSBkb2VzIG5vdCBuZWVkIHRvIGJlIHJlc2V0IG9uIHRoZSBzdG9yZSwgYmVjYXVzZSBzdHlsZXMgYXJlIHJlLWV2YWx1YXRlZCBpZiB0aGV5IHVzZSBmZWF0dXJlU3RhdGUKCgogICAgICByZXR1cm4gZHluYW1pY1N0eWxlUHJvcHMuc29tZShmdW5jdGlvbiAoZHluYW1pY1N0eWxlUHJvcCkgewogICAgICAgIHJldHVybiAhZHluYW1pY1N0eWxlUHJvcC5zdXBwb3J0c01iRmVhdHVyZVN0YXRlKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImFyZVBvaW50c1N5bWJvbGl6ZWRBc0NpcmNsZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFyZVBvaW50c1N5bWJvbGl6ZWRBc0NpcmNsZXMoKSB7CiAgICAgIHJldHVybiAhdGhpcy5fc3ltYm9saXplQXNTdHlsZVByb3BlcnR5LmlzU3ltYm9saXplZEFzSWNvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogInNldE1CUGFpbnRQcm9wZXJ0aWVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNQlBhaW50UHJvcGVydGllcyhfcmVmMykgewogICAgICB2YXIgYWxwaGEgPSBfcmVmMy5hbHBoYSwKICAgICAgICAgIG1iTWFwID0gX3JlZjMubWJNYXAsCiAgICAgICAgICBmaWxsTGF5ZXJJZCA9IF9yZWYzLmZpbGxMYXllcklkLAogICAgICAgICAgbGluZUxheWVySWQgPSBfcmVmMy5saW5lTGF5ZXJJZDsKCiAgICAgIHRoaXMuX2ZpbGxDb2xvclN0eWxlUHJvcGVydHkuc3luY0ZpbGxDb2xvcldpdGhNYihmaWxsTGF5ZXJJZCwgbWJNYXAsIGFscGhhKTsKCiAgICAgIHRoaXMuX2xpbmVDb2xvclN0eWxlUHJvcGVydHkuc3luY0xpbmVDb2xvcldpdGhNYihsaW5lTGF5ZXJJZCwgbWJNYXAsIGFscGhhKTsKCiAgICAgIHRoaXMuX2xpbmVXaWR0aFN0eWxlUHJvcGVydHkuc3luY0xpbmVXaWR0aFdpdGhNYihsaW5lTGF5ZXJJZCwgbWJNYXApOwogICAgfQogIH0sIHsKICAgIGtleTogInNldE1CUGFpbnRQcm9wZXJ0aWVzRm9yUG9pbnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNQlBhaW50UHJvcGVydGllc0ZvclBvaW50cyhfcmVmNCkgewogICAgICB2YXIgYWxwaGEgPSBfcmVmNC5hbHBoYSwKICAgICAgICAgIG1iTWFwID0gX3JlZjQubWJNYXAsCiAgICAgICAgICBwb2ludExheWVySWQgPSBfcmVmNC5wb2ludExheWVySWQ7CgogICAgICB0aGlzLl9maWxsQ29sb3JTdHlsZVByb3BlcnR5LnN5bmNDaXJjbGVDb2xvcldpdGhNYihwb2ludExheWVySWQsIG1iTWFwLCBhbHBoYSk7CgogICAgICB0aGlzLl9saW5lQ29sb3JTdHlsZVByb3BlcnR5LnN5bmNDaXJjbGVTdHJva2VXaXRoTWIocG9pbnRMYXllcklkLCBtYk1hcCwgYWxwaGEpOwoKICAgICAgdGhpcy5fbGluZVdpZHRoU3R5bGVQcm9wZXJ0eS5zeW5jQ2lyY2xlU3Ryb2tlV2lkdGhXaXRoTWIocG9pbnRMYXllcklkLCBtYk1hcCk7CgogICAgICB0aGlzLl9pY29uU2l6ZVN0eWxlUHJvcGVydHkuc3luY0NpcmNsZVJhZGl1c1dpdGhNYihwb2ludExheWVySWQsIG1iTWFwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRNQlByb3BlcnRpZXNGb3JMYWJlbFRleHQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldE1CUHJvcGVydGllc0ZvckxhYmVsVGV4dChfcmVmNSkgewogICAgICB2YXIgYWxwaGEgPSBfcmVmNS5hbHBoYSwKICAgICAgICAgIG1iTWFwID0gX3JlZjUubWJNYXAsCiAgICAgICAgICB0ZXh0TGF5ZXJJZCA9IF9yZWY1LnRleHRMYXllcklkOwogICAgICBtYk1hcC5zZXRMYXlvdXRQcm9wZXJ0eSh0ZXh0TGF5ZXJJZCwgJ2ljb24tYWxsb3ctb3ZlcmxhcCcsIHRydWUpOwogICAgICBtYk1hcC5zZXRMYXlvdXRQcm9wZXJ0eSh0ZXh0TGF5ZXJJZCwgJ3RleHQtYWxsb3ctb3ZlcmxhcCcsIHRydWUpOwoKICAgICAgdGhpcy5fbGFiZWxTdHlsZVByb3BlcnR5LnN5bmNUZXh0RmllbGRXaXRoTWIodGV4dExheWVySWQsIG1iTWFwKTsKCiAgICAgIHRoaXMuX2xhYmVsQ29sb3JTdHlsZVByb3BlcnR5LnN5bmNMYWJlbENvbG9yV2l0aE1iKHRleHRMYXllcklkLCBtYk1hcCwgYWxwaGEpOwoKICAgICAgdGhpcy5fbGFiZWxTaXplU3R5bGVQcm9wZXJ0eS5zeW5jTGFiZWxTaXplV2l0aE1iKHRleHRMYXllcklkLCBtYk1hcCk7CgogICAgICB0aGlzLl9sYWJlbEJvcmRlclNpemVTdHlsZVByb3BlcnR5LnN5bmNMYWJlbEJvcmRlclNpemVXaXRoTWIodGV4dExheWVySWQsIG1iTWFwKTsKCiAgICAgIHRoaXMuX2xhYmVsQm9yZGVyQ29sb3JTdHlsZVByb3BlcnR5LnN5bmNMYWJlbEJvcmRlckNvbG9yV2l0aE1iKHRleHRMYXllcklkLCBtYk1hcCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0TUJTeW1ib2xQcm9wZXJ0aWVzRm9yUG9pbnRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNQlN5bWJvbFByb3BlcnRpZXNGb3JQb2ludHMoX3JlZjYpIHsKICAgICAgdmFyIG1iTWFwID0gX3JlZjYubWJNYXAsCiAgICAgICAgICBzeW1ib2xMYXllcklkID0gX3JlZjYuc3ltYm9sTGF5ZXJJZCwKICAgICAgICAgIGFscGhhID0gX3JlZjYuYWxwaGE7CiAgICAgIG1iTWFwLnNldExheW91dFByb3BlcnR5KHN5bWJvbExheWVySWQsICdpY29uLWlnbm9yZS1wbGFjZW1lbnQnLCB0cnVlKTsKICAgICAgbWJNYXAuc2V0UGFpbnRQcm9wZXJ0eShzeW1ib2xMYXllcklkLCAnaWNvbi1vcGFjaXR5JywgYWxwaGEpOwoKICAgICAgdGhpcy5faWNvblN0eWxlUHJvcGVydHkuc3luY0ljb25XaXRoTWIoc3ltYm9sTGF5ZXJJZCwgbWJNYXAsIHRoaXMuX2ljb25TaXplU3R5bGVQcm9wZXJ0eS5nZXRJY29uUGl4ZWxTaXplKCkpOyAvLyBpY29uLWNvbG9yIGlzIG9ubHkgc3VwcG9ydGVkIG9uIFNERiBpY29ucy4KCgogICAgICB0aGlzLl9maWxsQ29sb3JTdHlsZVByb3BlcnR5LnN5bmNJY29uQ29sb3JXaXRoTWIoc3ltYm9sTGF5ZXJJZCwgbWJNYXApOwoKICAgICAgdGhpcy5fbGluZUNvbG9yU3R5bGVQcm9wZXJ0eS5zeW5jSGFsb0JvcmRlckNvbG9yV2l0aE1iKHN5bWJvbExheWVySWQsIG1iTWFwKTsKCiAgICAgIHRoaXMuX2xpbmVXaWR0aFN0eWxlUHJvcGVydHkuc3luY0hhbG9XaWR0aFdpdGhNYihzeW1ib2xMYXllcklkLCBtYk1hcCk7CgogICAgICB0aGlzLl9pY29uU2l6ZVN0eWxlUHJvcGVydHkuc3luY0ljb25TaXplV2l0aE1iKHN5bWJvbExheWVySWQsIG1iTWFwKTsKCiAgICAgIHRoaXMuX2ljb25PcmllbnRhdGlvblByb3BlcnR5LnN5bmNJY29uUm90YXRpb25XaXRoTWIoc3ltYm9sTGF5ZXJJZCwgbWJNYXApOwogICAgfQogIH0sIHsKICAgIGtleTogIl9tYWtlRmllbGQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlRmllbGQoZmllbGREZXNjcmlwdG9yKSB7CiAgICAgIGlmICghZmllbGREZXNjcmlwdG9yIHx8ICFmaWVsZERlc2NyaXB0b3IubmFtZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9IC8vZmllbGREZXNjcmlwdG9yLmxhYmVsIGlzIGlnbm9yZWQuIFRoaXMgaXMgZXNzZW50aWFsbHkgY3J1ZnQgZHVwbGljYXRpbmcgbGFiZWwtaW5mbyBmcm9tIHRoZSBtZXRyaWMtc2VsZWN0aW9uCiAgICAgIC8vSWdub3JlIHRoaXMgY3VzdG9tIGxhYmVsCgoKICAgICAgaWYgKGZpZWxkRGVzY3JpcHRvci5vcmlnaW4gPT09IF9jb25zdGFudHMuRklFTERfT1JJR0lOLlNPVVJDRSkgewogICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UuZ2V0RmllbGRCeU5hbWUoZmllbGREZXNjcmlwdG9yLm5hbWUpOwogICAgICB9IGVsc2UgaWYgKGZpZWxkRGVzY3JpcHRvci5vcmlnaW4gPT09IF9jb25zdGFudHMuRklFTERfT1JJR0lOLkpPSU4pIHsKICAgICAgICB2YXIgam9pbiA9IHRoaXMuX2xheWVyLmdldFZhbGlkSm9pbnMoKS5maW5kKGZ1bmN0aW9uIChqb2luKSB7CiAgICAgICAgICByZXR1cm4gam9pbi5nZXRSaWdodEpvaW5Tb3VyY2UoKS5oYXNNYXRjaGluZ01ldHJpY0ZpZWxkKGZpZWxkRGVzY3JpcHRvci5uYW1lKTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIGpvaW4gPyBqb2luLmdldFJpZ2h0Sm9pblNvdXJjZSgpLmdldE1ldHJpY0ZpZWxkRm9yTmFtZShmaWVsZERlc2NyaXB0b3IubmFtZSkgOiBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBvcmlnaW4tdHlwZSAiLmNvbmNhdChmaWVsZERlc2NyaXB0b3Iub3JpZ2luKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfbWFrZVNpemVQcm9wZXJ0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX21ha2VTaXplUHJvcGVydHkoZGVzY3JpcHRvciwgc3R5bGVOYW1lLCBpc1N5bWJvbGl6ZWRBc0ljb24pIHsKICAgICAgaWYgKCFkZXNjcmlwdG9yIHx8ICFkZXNjcmlwdG9yLm9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gbmV3IF9zdGF0aWNfc2l6ZV9wcm9wZXJ0eS5TdGF0aWNTaXplUHJvcGVydHkoewogICAgICAgICAgc2l6ZTogMAogICAgICAgIH0sIHN0eWxlTmFtZSk7CiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci50eXBlID09PSBfc3RhdGljX3N0eWxlX3Byb3BlcnR5LlN0YXRpY1N0eWxlUHJvcGVydHkudHlwZSkgewogICAgICAgIHJldHVybiBuZXcgX3N0YXRpY19zaXplX3Byb3BlcnR5LlN0YXRpY1NpemVQcm9wZXJ0eShkZXNjcmlwdG9yLm9wdGlvbnMsIHN0eWxlTmFtZSk7CiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci50eXBlID09PSBfZHluYW1pY19zdHlsZV9wcm9wZXJ0eS5EeW5hbWljU3R5bGVQcm9wZXJ0eS50eXBlKSB7CiAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5fbWFrZUZpZWxkKGRlc2NyaXB0b3Iub3B0aW9ucy5maWVsZCk7CgogICAgICAgIHJldHVybiBuZXcgX2R5bmFtaWNfc2l6ZV9wcm9wZXJ0eS5EeW5hbWljU2l6ZVByb3BlcnR5KGRlc2NyaXB0b3Iub3B0aW9ucywgc3R5bGVOYW1lLCBmaWVsZCwgdGhpcy5fbGF5ZXIsIHRoaXMuX2dldEZpZWxkRm9ybWF0dGVyLCBpc1N5bWJvbGl6ZWRBc0ljb24pOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiIi5jb25jYXQoZGVzY3JpcHRvciwgIiBub3QgaW1wbGVtZW50ZWQiKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfbWFrZUNvbG9yUHJvcGVydHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlQ29sb3JQcm9wZXJ0eShkZXNjcmlwdG9yLCBzdHlsZU5hbWUpIHsKICAgICAgaWYgKCFkZXNjcmlwdG9yIHx8ICFkZXNjcmlwdG9yLm9wdGlvbnMpIHsKICAgICAgICByZXR1cm4gbmV3IF9zdGF0aWNfY29sb3JfcHJvcGVydHkuU3RhdGljQ29sb3JQcm9wZXJ0eSh7CiAgICAgICAgICBjb2xvcjogbnVsbAogICAgICAgIH0sIHN0eWxlTmFtZSk7CiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci50eXBlID09PSBfc3RhdGljX3N0eWxlX3Byb3BlcnR5LlN0YXRpY1N0eWxlUHJvcGVydHkudHlwZSkgewogICAgICAgIHJldHVybiBuZXcgX3N0YXRpY19jb2xvcl9wcm9wZXJ0eS5TdGF0aWNDb2xvclByb3BlcnR5KGRlc2NyaXB0b3Iub3B0aW9ucywgc3R5bGVOYW1lKTsKICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLnR5cGUgPT09IF9keW5hbWljX3N0eWxlX3Byb3BlcnR5LkR5bmFtaWNTdHlsZVByb3BlcnR5LnR5cGUpIHsKICAgICAgICB2YXIgZmllbGQgPSB0aGlzLl9tYWtlRmllbGQoZGVzY3JpcHRvci5vcHRpb25zLmZpZWxkKTsKCiAgICAgICAgcmV0dXJuIG5ldyBfZHluYW1pY19jb2xvcl9wcm9wZXJ0eS5EeW5hbWljQ29sb3JQcm9wZXJ0eShkZXNjcmlwdG9yLm9wdGlvbnMsIHN0eWxlTmFtZSwgZmllbGQsIHRoaXMuX2xheWVyLCB0aGlzLl9nZXRGaWVsZEZvcm1hdHRlcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCIiLmNvbmNhdChkZXNjcmlwdG9yLCAiIG5vdCBpbXBsZW1lbnRlZCIpKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9tYWtlT3JpZW50YXRpb25Qcm9wZXJ0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX21ha2VPcmllbnRhdGlvblByb3BlcnR5KGRlc2NyaXB0b3IsIHN0eWxlTmFtZSkgewogICAgICBpZiAoIWRlc2NyaXB0b3IgfHwgIWRlc2NyaXB0b3Iub3B0aW9ucykgewogICAgICAgIHJldHVybiBuZXcgX3N0YXRpY19vcmllbnRhdGlvbl9wcm9wZXJ0eS5TdGF0aWNPcmllbnRhdGlvblByb3BlcnR5KHsKICAgICAgICAgIG9yaWVudGF0aW9uOiAwCiAgICAgICAgfSwgc3R5bGVOYW1lKTsKICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLnR5cGUgPT09IF9zdGF0aWNfc3R5bGVfcHJvcGVydHkuU3RhdGljU3R5bGVQcm9wZXJ0eS50eXBlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBfc3RhdGljX29yaWVudGF0aW9uX3Byb3BlcnR5LlN0YXRpY09yaWVudGF0aW9uUHJvcGVydHkoZGVzY3JpcHRvci5vcHRpb25zLCBzdHlsZU5hbWUpOwogICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IudHlwZSA9PT0gX2R5bmFtaWNfc3R5bGVfcHJvcGVydHkuRHluYW1pY1N0eWxlUHJvcGVydHkudHlwZSkgewogICAgICAgIHZhciBmaWVsZCA9IHRoaXMuX21ha2VGaWVsZChkZXNjcmlwdG9yLm9wdGlvbnMuZmllbGQpOwoKICAgICAgICByZXR1cm4gbmV3IF9keW5hbWljX29yaWVudGF0aW9uX3Byb3BlcnR5LkR5bmFtaWNPcmllbnRhdGlvblByb3BlcnR5KGRlc2NyaXB0b3Iub3B0aW9ucywgc3R5bGVOYW1lLCBmaWVsZCwgdGhpcy5fbGF5ZXIsIHRoaXMuX2dldEZpZWxkRm9ybWF0dGVyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIiIuY29uY2F0KGRlc2NyaXB0b3IsICIgbm90IGltcGxlbWVudGVkIikpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX21ha2VMYWJlbFByb3BlcnR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZUxhYmVsUHJvcGVydHkoZGVzY3JpcHRvcikgewogICAgICBpZiAoIWRlc2NyaXB0b3IgfHwgIWRlc2NyaXB0b3Iub3B0aW9ucykgewogICAgICAgIHJldHVybiBuZXcgX3N0YXRpY190ZXh0X3Byb3BlcnR5LlN0YXRpY1RleHRQcm9wZXJ0eSh7CiAgICAgICAgICB2YWx1ZTogJycKICAgICAgICB9LCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfVEVYVCk7CiAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci50eXBlID09PSBfc3RhdGljX3N0eWxlX3Byb3BlcnR5LlN0YXRpY1N0eWxlUHJvcGVydHkudHlwZSkgewogICAgICAgIHJldHVybiBuZXcgX3N0YXRpY190ZXh0X3Byb3BlcnR5LlN0YXRpY1RleHRQcm9wZXJ0eShkZXNjcmlwdG9yLm9wdGlvbnMsIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5MQUJFTF9URVhUKTsKICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLnR5cGUgPT09IF9keW5hbWljX3N0eWxlX3Byb3BlcnR5LkR5bmFtaWNTdHlsZVByb3BlcnR5LnR5cGUpIHsKICAgICAgICB2YXIgZmllbGQgPSB0aGlzLl9tYWtlRmllbGQoZGVzY3JpcHRvci5vcHRpb25zLmZpZWxkKTsKCiAgICAgICAgcmV0dXJuIG5ldyBfZHluYW1pY190ZXh0X3Byb3BlcnR5LkR5bmFtaWNUZXh0UHJvcGVydHkoZGVzY3JpcHRvci5vcHRpb25zLCBfY29uc3RhbnRzLlZFQ1RPUl9TVFlMRVMuTEFCRUxfVEVYVCwgZmllbGQsIHRoaXMuX2xheWVyLCB0aGlzLl9nZXRGaWVsZEZvcm1hdHRlcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCIiLmNvbmNhdChkZXNjcmlwdG9yLCAiIG5vdCBpbXBsZW1lbnRlZCIpKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9tYWtlSWNvblByb3BlcnR5IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZUljb25Qcm9wZXJ0eShkZXNjcmlwdG9yKSB7CiAgICAgIGlmICghZGVzY3JpcHRvciB8fCAhZGVzY3JpcHRvci5vcHRpb25zKSB7CiAgICAgICAgcmV0dXJuIG5ldyBfc3RhdGljX2ljb25fcHJvcGVydHkuU3RhdGljSWNvblByb3BlcnR5KHsKICAgICAgICAgIHZhbHVlOiBfY29uc3RhbnRzLkRFRkFVTFRfSUNPTgogICAgICAgIH0sIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5JQ09OKTsKICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLnR5cGUgPT09IF9zdGF0aWNfc3R5bGVfcHJvcGVydHkuU3RhdGljU3R5bGVQcm9wZXJ0eS50eXBlKSB7CiAgICAgICAgcmV0dXJuIG5ldyBfc3RhdGljX2ljb25fcHJvcGVydHkuU3RhdGljSWNvblByb3BlcnR5KGRlc2NyaXB0b3Iub3B0aW9ucywgX2NvbnN0YW50cy5WRUNUT1JfU1RZTEVTLklDT04pOwogICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IudHlwZSA9PT0gX2R5bmFtaWNfc3R5bGVfcHJvcGVydHkuRHluYW1pY1N0eWxlUHJvcGVydHkudHlwZSkgewogICAgICAgIHZhciBmaWVsZCA9IHRoaXMuX21ha2VGaWVsZChkZXNjcmlwdG9yLm9wdGlvbnMuZmllbGQpOwoKICAgICAgICByZXR1cm4gbmV3IF9keW5hbWljX2ljb25fcHJvcGVydHkuRHluYW1pY0ljb25Qcm9wZXJ0eShkZXNjcmlwdG9yLm9wdGlvbnMsIF9jb25zdGFudHMuVkVDVE9SX1NUWUxFUy5JQ09OLCBmaWVsZCwgdGhpcy5fbGF5ZXIsIHRoaXMuX2dldEZpZWxkRm9ybWF0dGVyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIiIuY29uY2F0KGRlc2NyaXB0b3IsICIgbm90IGltcGxlbWVudGVkIikpOwogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVmVjdG9yU3R5bGU7Cn0oX2Fic3RyYWN0X3N0eWxlLkFic3RyYWN0U3R5bGUpOwoKZXhwb3J0cy5WZWN0b3JTdHlsZSA9IFZlY3RvclN0eWxlOwoKX2RlZmluZVByb3BlcnR5KFZlY3RvclN0eWxlLCAidHlwZSIsIF9jb25zdGFudHMuTEFZRVJfU1RZTEVfVFlQRS5WRUNUT1IpOw=="},null]}