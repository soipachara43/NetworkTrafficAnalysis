function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from "prop-types";
import classNames from 'classnames';
import { EuiNotificationBadge } from '../../badge/notification_badge/badge_notification';
export var EuiHeaderSectionItemButton = function EuiHeaderSectionItemButton(_ref) {
  var onClick = _ref.onClick,
      children = _ref.children,
      className = _ref.className,
      notification = _ref.notification,
      notificationColor = _ref.notificationColor,
      rest = _objectWithoutProperties(_ref, ["onClick", "children", "className", "notification", "notificationColor"]);

  var classes = classNames('euiHeaderSectionItem__button', className);
  var notificationBadge;

  if (notification) {
    notificationBadge = React.createElement(EuiNotificationBadge, {
      className: "euiHeaderSectionItemButton__notification",
      color: notificationColor
    }, notification);
  }

  return React.createElement("button", _extends({
    className: classes,
    onClick: onClick,
    type: "button"
  }, rest), children, notificationBadge);
};
EuiHeaderSectionItemButton.propTypes = {
  className: PropTypes.string,
  "aria-label": PropTypes.string,
  "data-test-subj": PropTypes.string,

  /**
       * Inserts the node into a EuiBadgeNotification and places it appropriately against the button
       */
  notification: PropTypes.node,

  /**
       * Changes the color of the notification background
       */
  notificationColor: PropTypes.oneOf(["accent", "subdued"])
};
EuiHeaderSectionItemButton.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiHeaderSectionItemButton",
  "props": {
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "aria-label": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "data-test-subj": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "notification": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Inserts the node into a EuiBadgeNotification and places it appropriately against the button"
    },
    "notificationColor": {
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"accent\"",
          "computed": false
        }, {
          "value": "\"subdued\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Changes the color of the notification background"
    }
  }
};