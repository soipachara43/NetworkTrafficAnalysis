"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiCodeBlockImpl = exports.PADDING_SIZES = exports.FONT_SIZES = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _classnames = _interopRequireDefault(require("classnames"));

var _highlight = _interopRequireDefault(require("highlight.js"));

var _copy = require("../copy");

var _button = require("../button");

var _overlay_mask = require("../overlay_mask");

var _focus_trap = require("../focus_trap");

var _services = require("../../services");

var _i18n = require("../i18n");

var _inner_text = require("../inner_text");

var _common = require("../common");

var fontSizeToClassNameMap = {
  s: 'euiCodeBlock--fontSmall',
  m: 'euiCodeBlock--fontMedium',
  l: 'euiCodeBlock--fontLarge'
};
var FONT_SIZES = (0, _common.keysOf)(fontSizeToClassNameMap);
exports.FONT_SIZES = FONT_SIZES;
var paddingSizeToClassNameMap = {
  none: '',
  s: 'euiCodeBlock--paddingSmall',
  m: 'euiCodeBlock--paddingMedium',
  l: 'euiCodeBlock--paddingLarge'
};
var PADDING_SIZES = (0, _common.keysOf)(paddingSizeToClassNameMap);
exports.PADDING_SIZES = PADDING_SIZES;

/**
 * This is the base component extended by EuiCode and EuiCodeBlock.
 * These components share the same propTypes definition with EuiCodeBlockImpl.
 */
var EuiCodeBlockImpl =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(EuiCodeBlockImpl, _Component);

  function EuiCodeBlockImpl(props) {
    var _this;

    (0, _classCallCheck2.default)(this, EuiCodeBlockImpl);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EuiCodeBlockImpl).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "codeTarget", document.createElement('div'));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "code", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "codeFullScreen", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "highlight", function () {
      /**
       * because React maintains a mapping between its Virtual DOM representation and the actual
       * DOM elements (including text nodes), and hljs modifies the DOM structure which leads
       * to React updating detached nodes, we render to a document fragment and
       * copy from that fragment into the target elements
       * (https://github.com/elastic/eui/issues/2322)
       */
      var html = _this.codeTarget.innerHTML;

      if (_this.code) {
        _this.code.innerHTML = html;
      }

      if (_this.codeFullScreen) {
        _this.codeFullScreen.innerHTML = html;
      }

      if (_this.props.language) {
        if (_this.code) {
          _highlight.default.highlightBlock(_this.code);
        }

        if (_this.codeFullScreen) {
          _highlight.default.highlightBlock(_this.codeFullScreen);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function (event) {
      if (event.keyCode === _services.keyCodes.ESCAPE) {
        event.preventDefault();
        event.stopPropagation();

        _this.closeFullScreen();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "toggleFullScreen", function () {
      _this.setState(function (prevState) {
        return {
          isFullScreen: !prevState.isFullScreen
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeFullScreen", function () {
      _this.setState({
        isFullScreen: false
      });
    });
    _this.state = {
      isFullScreen: false
    };
    return _this;
  }

  (0, _createClass2.default)(EuiCodeBlockImpl, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.highlight();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.highlight();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          inline = _this$props.inline,
          children = _this$props.children,
          className = _this$props.className,
          fontSize = _this$props.fontSize,
          language = _this$props.language,
          overflowHeight = _this$props.overflowHeight,
          paddingSize = _this$props.paddingSize,
          transparentBackground = _this$props.transparentBackground,
          isCopyable = _this$props.isCopyable,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, ["inline", "children", "className", "fontSize", "language", "overflowHeight", "paddingSize", "transparentBackground", "isCopyable"]);
      var classes = (0, _classnames.default)('euiCodeBlock', fontSizeToClassNameMap[fontSize], paddingSizeToClassNameMap[paddingSize], {
        'euiCodeBlock--transparentBackground': transparentBackground,
        'euiCodeBlock--inline': inline,
        'euiCodeBlock--hasControls': isCopyable || overflowHeight
      }, className);
      var codeClasses = (0, _classnames.default)('euiCodeBlock__code', language);
      var optionalStyles = {};

      if (overflowHeight) {
        optionalStyles.maxHeight = overflowHeight;
      }

      var codeSnippet = _react.default.createElement("code", (0, _extends2.default)({
        ref: function ref(_ref) {
          _this2.code = _ref;
        },
        className: codeClasses
      }, otherProps));

      var wrapperProps = {
        className: classes,
        style: optionalStyles
      };

      if (inline) {
        return _react.default.createElement(_react.default.Fragment, null, (0, _reactDom.createPortal)(children, this.codeTarget), _react.default.createElement("span", wrapperProps, codeSnippet));
      }

      var getCopyButton = function getCopyButton(textToCopy) {
        var copyButton;

        if (isCopyable && textToCopy) {
          copyButton = _react.default.createElement("div", {
            className: "euiCodeBlock__copyButton"
          }, _react.default.createElement(_i18n.EuiI18n, {
            token: "euiCodeBlock.copyButton",
            default: "Copy"
          }, function (copyButton) {
            return _react.default.createElement(_copy.EuiCopy, {
              textToCopy: textToCopy
            }, function (copy) {
              return _react.default.createElement(_button.EuiButtonIcon, {
                size: "s",
                onClick: copy,
                iconType: "copy",
                color: "text",
                "aria-label": copyButton
              });
            });
          }));
        }

        return copyButton;
      };

      var fullScreenButton;

      if (!inline && overflowHeight) {
        fullScreenButton = _react.default.createElement(_i18n.EuiI18n, {
          tokens: ['euiCodeBlock.fullscreenCollapse', 'euiCodeBlock.fullscreenExpand'],
          defaults: ['Collapse', 'Expand']
        }, function (_ref2) {
          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
              fullscreenCollapse = _ref3[0],
              fullscreenExpand = _ref3[1];

          return _react.default.createElement(_button.EuiButtonIcon, {
            className: "euiCodeBlock__fullScreenButton",
            size: "s",
            onClick: _this2.toggleFullScreen,
            iconType: _this2.state.isFullScreen ? 'cross' : 'fullScreen',
            color: "text",
            "aria-label": _this2.state.isFullScreen ? fullscreenCollapse : fullscreenExpand
          });
        });
      }

      var getCodeBlockControls = function getCodeBlockControls(textToCopy) {
        var codeBlockControls;
        var copyButton = getCopyButton(textToCopy);

        if (copyButton || fullScreenButton) {
          codeBlockControls = _react.default.createElement("div", {
            className: "euiCodeBlock__controls"
          }, fullScreenButton, copyButton);
        }

        return codeBlockControls;
      };

      var getFullScreenDisplay = function getFullScreenDisplay(codeBlockControls) {
        var fullScreenDisplay;

        if (_this2.state.isFullScreen) {
          // Force fullscreen to use large font and padding.
          var fullScreenClasses = (0, _classnames.default)('euiCodeBlock', fontSizeToClassNameMap[fontSize], 'euiCodeBlock-paddingLarge', 'euiCodeBlock-isFullScreen', className);
          fullScreenDisplay = _react.default.createElement(_overlay_mask.EuiOverlayMask, null, _react.default.createElement(_focus_trap.EuiFocusTrap, {
            clickOutsideDisables: true
          }, _react.default.createElement("div", {
            className: fullScreenClasses
          }, _react.default.createElement("pre", {
            className: "euiCodeBlock__pre"
          }, _react.default.createElement("code", {
            ref: function ref(_ref4) {
              _this2.codeFullScreen = _ref4;
            },
            className: codeClasses,
            tabIndex: 0,
            onKeyDown: _this2.onKeyDown
          })), codeBlockControls)));
        }

        return fullScreenDisplay;
      };

      return _react.default.createElement(_react.default.Fragment, null, (0, _reactDom.createPortal)(children, this.codeTarget), _react.default.createElement(_inner_text.EuiInnerText, {
        fallback: ""
      }, function (innerTextRef, innerText) {
        var codeBlockControls = getCodeBlockControls(innerText);
        return _react.default.createElement("div", wrapperProps, _react.default.createElement("pre", {
          ref: innerTextRef,
          style: optionalStyles,
          className: "euiCodeBlock__pre"
        }, codeSnippet), codeBlockControls, getFullScreenDisplay(codeBlockControls));
      }));
    }
  }]);
  return EuiCodeBlockImpl;
}(_react.Component);

exports.EuiCodeBlockImpl = EuiCodeBlockImpl;
(0, _defineProperty2.default)(EuiCodeBlockImpl, "defaultProps", {
  transparentBackground: false,
  paddingSize: 'l',
  fontSize: 's',
  isCopyable: false
});
EuiCodeBlockImpl.propTypes = {
  className: _propTypes.default.string,
  fontSize: _propTypes.default.oneOf(["s", "m", "l"]).isRequired,

  /**
     * Displays the passed code in an inline format. Also removes any margins set.
     */
  inline: _propTypes.default.bool,

  /**
     * Displays an icon button to copy the code snippet to the clipboard.
     */
  isCopyable: _propTypes.default.bool.isRequired,

  /**
     * Sets the syntax highlighting for a specific language
     */
  language: _propTypes.default.string,
  overflowHeight: _propTypes.default.number,
  paddingSize: _propTypes.default.oneOf(["none", "s", "m", "l"]).isRequired,
  transparentBackground: _propTypes.default.bool.isRequired
};
EuiCodeBlockImpl.__docgenInfo = {
  "description": "This is the base component extended by EuiCode and EuiCodeBlock.\nThese components share the same propTypes definition with EuiCodeBlockImpl.",
  "methods": [{
    "name": "highlight",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "onKeyDown",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "event",
      "type": null
    }],
    "returns": null
  }, {
    "name": "toggleFullScreen",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "closeFullScreen",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiCodeBlockImpl",
  "props": {
    "transparentBackground": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "paddingSize": {
      "defaultValue": {
        "value": "'l'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"none\"",
          "computed": false
        }, {
          "value": "\"s\"",
          "computed": false
        }, {
          "value": "\"m\"",
          "computed": false
        }, {
          "value": "\"l\"",
          "computed": false
        }]
      },
      "required": false,
      "description": ""
    },
    "fontSize": {
      "defaultValue": {
        "value": "'s'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"s\"",
          "computed": false
        }, {
          "value": "\"m\"",
          "computed": false
        }, {
          "value": "\"l\"",
          "computed": false
        }]
      },
      "required": false,
      "description": ""
    },
    "isCopyable": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Displays an icon button to copy the code snippet to the clipboard."
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "inline": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Displays the passed code in an inline format. Also removes any margins set."
    },
    "language": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Sets the syntax highlighting for a specific language"
    },
    "overflowHeight": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    }
  }
};