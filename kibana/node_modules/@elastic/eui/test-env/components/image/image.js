"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiImage = exports.SIZES = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _overlay_mask = require("../overlay_mask");

var _icon = require("../icon");

var _i18n = require("../i18n");

var _focus_trap = require("../focus_trap");

var _services = require("../../services");

var sizeToClassNameMap = {
  s: 'euiImage--small',
  m: 'euiImage--medium',
  l: 'euiImage--large',
  xl: 'euiImage--xlarge',
  fullWidth: 'euiImage--fullWidth',
  original: ''
};
var SIZES = Object.keys(sizeToClassNameMap);
exports.SIZES = SIZES;
var fullScreenIconColorMap = {
  light: 'ghost',
  dark: 'default'
};

var EuiImage =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(EuiImage, _Component);

  function EuiImage() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, EuiImage);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(EuiImage)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isFullScreenActive: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onKeyDown", function (event) {
      if (event.keyCode === _services.keyCodes.ESCAPE) {
        event.preventDefault();
        event.stopPropagation();

        _this.closeFullScreen();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "closeFullScreen", function () {
      _this.setState({
        isFullScreenActive: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "openFullScreen", function () {
      _this.setState({
        isFullScreenActive: true
      });
    });
    return _this;
  }

  (0, _createClass2.default)(EuiImage, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          url = _this$props.url,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? 'original' : _this$props$size,
          caption = _this$props.caption,
          hasShadow = _this$props.hasShadow,
          allowFullScreen = _this$props.allowFullScreen,
          _this$props$fullScree = _this$props.fullScreenIconColor,
          fullScreenIconColor = _this$props$fullScree === void 0 ? 'light' : _this$props$fullScree,
          alt = _this$props.alt,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["className", "url", "size", "caption", "hasShadow", "allowFullScreen", "fullScreenIconColor", "alt"]);
      var isFullScreenActive = this.state.isFullScreenActive;
      var classes = (0, _classnames.default)('euiImage', sizeToClassNameMap[size], {
        'euiImage--hasShadow': hasShadow,
        'euiImage--allowFullScreen': allowFullScreen
      }, className);
      var optionalCaption;

      if (caption) {
        optionalCaption = _react.default.createElement("figcaption", {
          className: "euiImage__caption"
        }, caption);
      }

      var allowFullScreenIcon = _react.default.createElement(_icon.EuiIcon, {
        type: "fullScreen",
        color: fullScreenIconColorMap[fullScreenIconColor],
        className: "euiImage__icon"
      });

      var fullScreenDisplay = _react.default.createElement(_overlay_mask.EuiOverlayMask, {
        onClick: this.closeFullScreen
      }, _react.default.createElement(_focus_trap.EuiFocusTrap, {
        clickOutsideDisables: true
      }, _react.default.createElement("figure", {
        className: "euiImage euiImage-isFullScreen",
        role: "figure",
        "aria-label": caption
      }, _react.default.createElement(_i18n.EuiI18n, {
        token: "euiImage.closeImage",
        values: {
          alt: alt
        },
        default: "Close full screen {alt} image"
      }, function (closeImage) {
        return _react.default.createElement("button", {
          type: "button",
          "aria-label": closeImage,
          className: "euiImage__button",
          onClick: _this2.closeFullScreen,
          onKeyDown: _this2.onKeyDown
        }, _react.default.createElement("img", (0, _extends2.default)({
          src: url,
          alt: alt,
          className: "euiImage-isFullScreen__img"
        }, rest)), _react.default.createElement(_icon.EuiIcon, {
          type: "cross",
          color: fullScreenIconColorMap[fullScreenIconColor],
          className: "euiImage-isFullScreen__icon"
        }));
      }), optionalCaption)));

      if (allowFullScreen) {
        return _react.default.createElement("figure", {
          className: classes,
          role: "figure",
          "aria-label": caption
        }, _react.default.createElement(_i18n.EuiI18n, {
          token: "euiImage.openImage",
          values: {
            alt: alt
          },
          default: "Open full screen {alt} image"
        }, function (openImage) {
          return _react.default.createElement("button", {
            type: "button",
            "aria-label": openImage,
            className: "euiImage__button",
            onClick: _this2.openFullScreen
          }, _react.default.createElement("img", (0, _extends2.default)({
            src: url,
            alt: alt,
            className: "euiImage__img"
          }, rest)), allowFullScreenIcon, isFullScreenActive && fullScreenDisplay);
        }), optionalCaption);
      } else {
        return _react.default.createElement("figure", {
          className: classes,
          role: "figure",
          "aria-label": caption
        }, _react.default.createElement("img", (0, _extends2.default)({
          src: url,
          className: "euiImage__img",
          alt: alt
        }, rest)), optionalCaption);
      }
    }
  }]);
  return EuiImage;
}(_react.Component);

exports.EuiImage = EuiImage;
EuiImage.propTypes = {
  alt: _propTypes.default.string.isRequired,
  size: _propTypes.default.oneOf(["s", "m", "l", "xl", "fullWidth", "original"]),
  fullScreenIconColor: _propTypes.default.oneOf(["light", "dark"]),
  url: _propTypes.default.string.isRequired,
  caption: _propTypes.default.string,
  hasShadow: _propTypes.default.bool,
  allowFullScreen: _propTypes.default.bool,
  className: _propTypes.default.string,
  "aria-label": _propTypes.default.string,
  "data-test-subj": _propTypes.default.string
};
EuiImage.__docgenInfo = {
  "description": "",
  "methods": [{
    "name": "onKeyDown",
    "docblock": null,
    "modifiers": [],
    "params": [{
      "name": "event",
      "type": null
    }],
    "returns": null
  }, {
    "name": "closeFullScreen",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }, {
    "name": "openFullScreen",
    "docblock": null,
    "modifiers": [],
    "params": [],
    "returns": null
  }],
  "displayName": "EuiImage",
  "props": {
    "alt": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "size": {
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"s\"",
          "computed": false
        }, {
          "value": "\"m\"",
          "computed": false
        }, {
          "value": "\"l\"",
          "computed": false
        }, {
          "value": "\"xl\"",
          "computed": false
        }, {
          "value": "\"fullWidth\"",
          "computed": false
        }, {
          "value": "\"original\"",
          "computed": false
        }]
      },
      "required": false,
      "description": ""
    },
    "fullScreenIconColor": {
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"light\"",
          "computed": false
        }, {
          "value": "\"dark\"",
          "computed": false
        }]
      },
      "required": false,
      "description": ""
    },
    "url": {
      "type": {
        "name": "string"
      },
      "required": true,
      "description": ""
    },
    "caption": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "hasShadow": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "allowFullScreen": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "aria-label": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "data-test-subj": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    }
  }
};