"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiNavDrawerGroup = exports.ATTR_SELECTOR = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _list_group = require("../list_group/list_group");

var _services = require("../../services");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ATTR_SELECTOR = 'data-name';
exports.ATTR_SELECTOR = ATTR_SELECTOR;

var EuiNavDrawerGroup = function EuiNavDrawerGroup(_ref) {
  var className = _ref.className,
      listItems = _ref.listItems,
      flyoutMenuButtonClick = _ref.flyoutMenuButtonClick,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["className", "listItems", "flyoutMenuButtonClick", "onClose"]);
  var classes = (0, _classnames.default)('euiNavDrawerGroup', className);
  var listItemsExists = listItems && !!listItems.length; // Alter listItems object with prop flyoutMenu and extra props

  var newListItems = !listItemsExists ? undefined : listItems.map(function (item) {
    // If the flyout menu exists, pass back the list of times and the title with the onClick handler of the item
    var flyoutMenu = item.flyoutMenu,
        onClick = item.onClick,
        itemProps = (0, _objectWithoutProperties2.default)(item, ["flyoutMenu", "onClick"]);

    if (flyoutMenu && flyoutMenuButtonClick) {
      var items = (0, _toConsumableArray2.default)(flyoutMenu.listItems);
      var title = "".concat(flyoutMenu.title);

      itemProps.onClick = function () {
        return flyoutMenuButtonClick(items, title, item);
      };

      itemProps['aria-expanded'] = false;
    } else {
      itemProps.onClick = function () {
        if (onClick) {
          onClick.apply(void 0, arguments);
        }

        onClose();
      };
    } // Make some declarations of props for the side nav implementation


    itemProps.className = (0, _classnames.default)('euiNavDrawerGroup__item', item.className);
    itemProps.size = item.size || 's';
    itemProps[ATTR_SELECTOR] = item.label;
    itemProps['aria-label'] = item['aria-label'] || item.label; // Add an avatar in place of non-existent icons

    var itemProvidesIcon = !!item.iconType || !!item.icon;

    if (!itemProvidesIcon) {
      itemProps.icon = _react.default.createElement("span", {
        className: "euiNavDrawerGroup__itemDefaultIcon"
      }, (0, _services.toInitials)(item.label));
    } // And return the item with conditional `onClick` and without `flyoutMenu`


    return _objectSpread({}, itemProps);
  });
  return _react.default.createElement(_list_group.EuiListGroup, (0, _extends2.default)({
    className: classes,
    listItems: newListItems
  }, rest));
};

exports.EuiNavDrawerGroup = EuiNavDrawerGroup;
EuiNavDrawerGroup.propTypes = {
  listItems: _propTypes.default.arrayOf(_propTypes.default.shape(_objectSpread({}, _list_group.EuiListGroup.propTypes.listItems[0], {
    flyoutMenu: _propTypes.default.shape({
      title: _propTypes.default.string.isRequired,
      listItems: _list_group.EuiListGroup.propTypes.listItems.isRequired
    })
  }))),

  /**
   * While not normally required, it is required to pass a function for handling
   * of the flyout menu button click
   */
  flyoutMenuButtonClick: _propTypes.default.func,

  /**
   * Passthrough function to be called when the flyout is closing
   * See ./nav_drawer.js
   */
  onClose: _propTypes.default.func
};
EuiNavDrawerGroup.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiNavDrawerGroup",
  "props": {
    "onClose": {
      "defaultValue": {
        "value": "() => {}",
        "computed": false
      },
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Passthrough function to be called when the flyout is closing\nSee ./nav_drawer.js"
    },
    "listItems": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "flyoutMenu": {
              "name": "shape",
              "value": {
                "title": {
                  "name": "string",
                  "required": true
                },
                "listItems": {
                  "name": "custom",
                  "raw": "EuiListGroup.propTypes.listItems.isRequired",
                  "required": true
                }
              },
              "required": false
            }
          }
        }
      },
      "required": false,
      "description": ""
    },
    "flyoutMenuButtonClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "While not normally required, it is required to pass a function for handling\nof the flyout menu button click"
    }
  }
};