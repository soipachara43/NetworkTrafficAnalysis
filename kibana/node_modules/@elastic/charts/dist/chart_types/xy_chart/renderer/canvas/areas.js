"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rendering_1 = require("../../rendering/rendering");
var canvas_1 = require("../../../../renderers/canvas");
var points_1 = require("./points");
var path_1 = require("./primitives/path");
var area_1 = require("./styles/area");
var line_1 = require("./styles/line");
function renderAreas(ctx, props) {
    canvas_1.withContext(ctx, function (ctx) {
        var sharedStyle = props.sharedStyle, highlightedLegendItem = props.highlightedLegendItem, areas = props.areas, clippings = props.clippings;
        canvas_1.withClip(ctx, clippings, function (ctx) {
            ctx.save();
            var _loop_2 = function (i) {
                var glyph = areas[i];
                var seriesAreaLineStyle = glyph.seriesAreaLineStyle, seriesAreaStyle = glyph.seriesAreaStyle;
                if (seriesAreaStyle.visible) {
                    canvas_1.withContext(ctx, function () {
                        renderArea(ctx, glyph, sharedStyle, highlightedLegendItem, clippings);
                    });
                }
                if (seriesAreaLineStyle.visible) {
                    canvas_1.withContext(ctx, function () {
                        renderAreaLines(ctx, glyph, sharedStyle, highlightedLegendItem, clippings);
                    });
                }
            };
            for (var i = 0; i < areas.length; i++) {
                _loop_2(i);
            }
            ctx.rect(clippings.x, clippings.y, clippings.width, clippings.height);
            ctx.clip();
            ctx.restore();
        });
        var _loop_1 = function (i) {
            var glyph = areas[i];
            var seriesPointStyle = glyph.seriesPointStyle, seriesIdentifier = glyph.seriesIdentifier;
            if (seriesPointStyle.visible) {
                var geometryStateStyle_1 = rendering_1.getGeometryStateStyle(seriesIdentifier, highlightedLegendItem, sharedStyle);
                canvas_1.withContext(ctx, function () {
                    points_1.renderPoints(ctx, glyph.points, seriesPointStyle, geometryStateStyle_1);
                });
            }
        };
        for (var i = 0; i < areas.length; i++) {
            _loop_1(i);
        }
    });
}
exports.renderAreas = renderAreas;
function renderArea(ctx, glyph, sharedStyle, highlightedLegendItem, clippings) {
    var area = glyph.area, color = glyph.color, transform = glyph.transform, seriesIdentifier = glyph.seriesIdentifier, seriesAreaStyle = glyph.seriesAreaStyle, clippedRanges = glyph.clippedRanges;
    var geometryStateStyle = rendering_1.getGeometryStateStyle(seriesIdentifier, highlightedLegendItem, sharedStyle);
    var fill = area_1.buildAreaStyles(color, seriesAreaStyle, geometryStateStyle);
    path_1.renderAreaPath(ctx, transform.x, area, fill, clippedRanges, clippings);
}
function renderAreaLines(ctx, glyph, sharedStyle, highlightedLegendItem, clippings) {
    var lines = glyph.lines, color = glyph.color, seriesIdentifier = glyph.seriesIdentifier, transform = glyph.transform, seriesAreaLineStyle = glyph.seriesAreaLineStyle, clippedRanges = glyph.clippedRanges;
    var geometryStateStyle = rendering_1.getGeometryStateStyle(seriesIdentifier, highlightedLegendItem, sharedStyle);
    var stroke = line_1.buildLineStyles(color, seriesAreaLineStyle, geometryStateStyle);
    path_1.renderLinePaths(ctx, transform.x, lines, stroke, clippedRanges, clippings);
}
//# sourceMappingURL=areas.js.map