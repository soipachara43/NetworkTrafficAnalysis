"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("../../../../../renderers/canvas");
var d3_utils_1 = require("../../../../partition_chart/layout/utils/d3_utils");
var line_1 = require("./line");
function renderLinePaths(ctx, transformX, linePaths, stroke, clippedRanges, clippings) {
    ctx.translate(transformX, 0);
    if (clippedRanges.length > 0) {
        canvas_1.withClipRanges(ctx, clippedRanges, clippings, false, function (ctx) {
            linePaths.map(function (path) {
                renderPathStroke(ctx, path, stroke);
            });
        });
        canvas_1.withClipRanges(ctx, clippedRanges, clippings, true, function (ctx) {
            linePaths.map(function (path) {
                renderPathStroke(ctx, path, __assign(__assign({}, stroke), { dash: [5, 5] }));
            });
        });
        return;
    }
    linePaths.map(function (path) {
        canvas_1.withContext(ctx, function (ctx) {
            renderPathStroke(ctx, path, stroke);
        });
    });
}
exports.renderLinePaths = renderLinePaths;
function renderAreaPath(ctx, transformX, area, fill, clippedRanges, clippings) {
    if (clippedRanges.length > 0) {
        canvas_1.withClipRanges(ctx, clippedRanges, clippings, false, function (ctx) {
            ctx.translate(transformX, 0);
            renderPathFill(ctx, area, fill);
        });
        canvas_1.withClipRanges(ctx, clippedRanges, clippings, true, function (ctx) {
            ctx.translate(transformX, 0);
            var opacity = fill.color.opacity;
            var color = __assign(__assign({}, fill.color), { opacity: opacity / 2 });
            renderPathFill(ctx, area, __assign(__assign({}, fill), { color: color }));
        });
        return;
    }
    canvas_1.withContext(ctx, function (ctx) {
        ctx.translate(transformX, 0);
        renderPathFill(ctx, area, fill);
    });
}
exports.renderAreaPath = renderAreaPath;
function renderPathStroke(ctx, path, stroke) {
    if (stroke.width < line_1.MIN_STROKE_WIDTH) {
        return;
    }
    var path2d = new Path2D(path);
    ctx.strokeStyle = d3_utils_1.RGBtoString(stroke.color);
    ctx.lineWidth = stroke.width;
    if (stroke.dash) {
        ctx.setLineDash(stroke.dash);
    }
    ctx.beginPath();
    ctx.stroke(path2d);
}
function renderPathFill(ctx, path, fill) {
    var path2d = new Path2D(path);
    ctx.fillStyle = d3_utils_1.RGBtoString(fill.color);
    ctx.beginPath();
    ctx.fill(path2d);
}
//# sourceMappingURL=path.js.map