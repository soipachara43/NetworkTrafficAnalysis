"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var canvas_1 = require("../../../../renderers/canvas");
var bars_1 = require("./bars");
var areas_1 = require("./areas");
var lines_1 = require("./lines");
var axes_1 = require("./axes");
var grids_1 = require("./grids");
var annotations_1 = require("./annotations");
var bar_1 = require("./values/bar");
var debug_1 = require("./utils/debug");
var d3_utils_1 = require("../../../partition_chart/layout/utils/d3_utils");
function renderXYChartCanvas2d(ctx, dpr, clippings, props) {
    canvas_1.withContext(ctx, function (ctx) {
        ctx.scale(dpr, dpr);
        var chartDimensions = props.chartDimensions, chartTransform = props.chartTransform, chartRotation = props.chartRotation, geometries = props.geometries, theme = props.theme, highlightedLegendItem = props.highlightedLegendItem, annotationDimensions = props.annotationDimensions, annotationSpecs = props.annotationSpecs, axisTickPositions = props.axisTickPositions, axesSpecs = props.axesSpecs, axesTicksDimensions = props.axesTicksDimensions, axesGridLinesPositions = props.axesGridLinesPositions, debug = props.debug;
        var transform = {
            x: chartDimensions.left + chartTransform.x,
            y: chartDimensions.top + chartTransform.y,
        };
        canvas_1.renderLayers(ctx, [
            function (ctx) { return canvas_1.clearCanvas(ctx, 200000, 200000); },
            function (ctx) {
                axes_1.renderAxes(ctx, {
                    axesPositions: axisTickPositions.axisPositions,
                    axesSpecs: axesSpecs,
                    axesTicksDimensions: axesTicksDimensions,
                    axesVisibleTicks: axisTickPositions.axisVisibleTicks,
                    chartDimensions: chartDimensions,
                    debug: debug,
                    axisStyle: theme.axes,
                });
            },
            function (ctx) {
                grids_1.renderGrids(ctx, {
                    axesSpecs: axesSpecs,
                    chartDimensions: chartDimensions,
                    axesGridLinesPositions: axesGridLinesPositions,
                    chartTheme: theme,
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    annotations_1.renderAnnotations(ctx, {
                        annotationDimensions: annotationDimensions,
                        annotationSpecs: annotationSpecs,
                    }, true);
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    bars_1.renderBars(ctx, geometries.bars, theme.sharedStyle, clippings, highlightedLegendItem);
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    areas_1.renderAreas(ctx, {
                        areas: geometries.areas,
                        clippings: clippings,
                        highlightedLegendItem: highlightedLegendItem || null,
                        sharedStyle: theme.sharedStyle,
                    });
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    lines_1.renderLines(ctx, {
                        lines: geometries.lines,
                        clippings: clippings,
                        highlightedLegendItem: highlightedLegendItem || null,
                        sharedStyle: theme.sharedStyle,
                    });
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    bar_1.renderBarValues(ctx, {
                        bars: geometries.bars,
                        chartDimensions: chartDimensions,
                        chartRotation: chartRotation,
                        debug: debug,
                        theme: theme,
                    });
                });
            },
            function (ctx) {
                canvas_1.withContext(ctx, function (ctx) {
                    ctx.translate(transform.x, transform.y);
                    ctx.rotate((chartRotation * Math.PI) / 180);
                    annotations_1.renderAnnotations(ctx, {
                        annotationDimensions: annotationDimensions,
                        annotationSpecs: annotationSpecs,
                    }, false);
                });
            },
            function (ctx) {
                if (!debug) {
                    return;
                }
                canvas_1.withContext(ctx, function (ctx) {
                    debug_1.renderDebugRect(ctx, {
                        x: chartDimensions.left,
                        y: chartDimensions.top,
                        width: chartDimensions.width,
                        height: chartDimensions.height,
                    }, {
                        color: d3_utils_1.stringToRGB('transparent'),
                    }, {
                        color: d3_utils_1.stringToRGB('red'),
                        width: 4,
                        dash: [4, 4],
                    });
                });
            },
        ]);
    });
}
exports.renderXYChartCanvas2d = renderXYChartCanvas2d;
//# sourceMappingURL=renderers.js.map