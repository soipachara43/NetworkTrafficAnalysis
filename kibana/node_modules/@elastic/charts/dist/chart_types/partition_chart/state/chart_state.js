"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var __1 = require("../..");
var partition_1 = require("../renderer/canvas/partition");
var is_tooltip_visible_1 = require("../state/selectors/is_tooltip_visible");
var tooltip_1 = require("../state/selectors/tooltip");
var tooltip_2 = require("../../../components/tooltip");
var on_element_click_caller_1 = require("./selectors/on_element_click_caller");
var on_element_over_caller_1 = require("./selectors/on_element_over_caller");
var on_element_out_caller_1 = require("./selectors/on_element_out_caller");
var EMPTY_MAP = new Map();
var PartitionState = (function () {
    function PartitionState() {
        this.chartType = __1.ChartTypes.Partition;
        this.onElementClickCaller = on_element_click_caller_1.createOnElementClickCaller();
        this.onElementOverCaller = on_element_over_caller_1.createOnElementOverCaller();
        this.onElementOutCaller = on_element_out_caller_1.createOnElementOutCaller();
    }
    PartitionState.prototype.isBrushAvailable = function () {
        return false;
    };
    PartitionState.prototype.isBrushing = function () {
        return false;
    };
    PartitionState.prototype.isChartEmpty = function () {
        return false;
    };
    PartitionState.prototype.getLegendItems = function () {
        return EMPTY_MAP;
    };
    PartitionState.prototype.getLegendItemsValues = function () {
        return EMPTY_MAP;
    };
    PartitionState.prototype.chartRenderer = function (containerRef) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(tooltip_2.Tooltip, { getChartContainerRef: containerRef }),
            react_1.default.createElement(partition_1.Partition, null)));
    };
    PartitionState.prototype.getPointerCursor = function () {
        return 'default';
    };
    PartitionState.prototype.isTooltipVisible = function (globalState) {
        return is_tooltip_visible_1.isTooltipVisibleSelector(globalState);
    };
    PartitionState.prototype.getTooltipInfo = function (globalState) {
        return tooltip_1.getTooltipInfoSelector(globalState);
    };
    PartitionState.prototype.getTooltipAnchor = function (state) {
        var position = state.interactions.pointer.current.position;
        return {
            isRotated: false,
            x1: position.x,
            y1: position.y,
        };
    };
    PartitionState.prototype.eventCallbacks = function (globalState) {
        this.onElementOverCaller(globalState);
        this.onElementOutCaller(globalState);
        this.onElementClickCaller(globalState);
    };
    return PartitionState;
}());
exports.PartitionState = PartitionState;
//# sourceMappingURL=chart_state.js.map