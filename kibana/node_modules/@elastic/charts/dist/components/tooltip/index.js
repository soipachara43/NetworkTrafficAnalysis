"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importDefault(require("react"));
var react_dom_1 = require("react-dom");
var react_redux_1 = require("react-redux");
var utils_1 = require("./utils");
var is_initialized_1 = require("../../state/selectors/is_initialized");
var get_internal_is_tooltip_visible_1 = require("../../state/selectors/get_internal_is_tooltip_visible");
var get_tooltip_header_formatter_1 = require("../../state/selectors/get_tooltip_header_formatter");
var get_internal_tooltip_info_1 = require("../../state/selectors/get_internal_tooltip_info");
var get_internal_tooltip_anchor_position_1 = require("../../state/selectors/get_internal_tooltip_anchor_position");
var TooltipComponent = (function (_super) {
    __extends(TooltipComponent, _super);
    function TooltipComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.portalNode = null;
        _this.tooltipRef = react_1.default.createRef();
        return _this;
    }
    TooltipComponent.prototype.createPortalNode = function () {
        var container = document.getElementById('echTooltipContainerPortal');
        if (container) {
            this.portalNode = container;
        }
        else {
            this.portalNode = document.createElement('div');
            this.portalNode.id = 'echTooltipContainerPortal';
            document.body.appendChild(this.portalNode);
        }
    };
    TooltipComponent.prototype.componentDidMount = function () {
        this.createPortalNode();
    };
    TooltipComponent.prototype.componentDidUpdate = function () {
        this.createPortalNode();
        var _a = this.props, getChartContainerRef = _a.getChartContainerRef, position = _a.position;
        var chartContainerRef = getChartContainerRef();
        if (!this.tooltipRef.current || !chartContainerRef.current || !this.portalNode || !position) {
            return;
        }
        var chartContainerBBox = chartContainerRef.current.getBoundingClientRect();
        var tooltipBBox = this.tooltipRef.current.getBoundingClientRect();
        var tooltipStyle = utils_1.getFinalTooltipPosition(chartContainerBBox, tooltipBBox, position);
        if (tooltipStyle.left) {
            this.portalNode.style.left = tooltipStyle.left;
        }
        if (tooltipStyle.top) {
            this.portalNode.style.top = tooltipStyle.top;
        }
    };
    TooltipComponent.prototype.componentWillUnmount = function () {
        if (this.portalNode && this.portalNode.parentNode) {
            this.portalNode.parentNode.removeChild(this.portalNode);
        }
    };
    TooltipComponent.prototype.renderHeader = function (headerData, formatter) {
        if (!headerData || !headerData.isVisible) {
            return null;
        }
        return react_1.default.createElement("div", { className: "echTooltip__header" }, formatter ? formatter(headerData) : headerData.value);
    };
    TooltipComponent.prototype.render = function () {
        var _a = this.props, isVisible = _a.isVisible, info = _a.info, headerFormatter = _a.headerFormatter, getChartContainerRef = _a.getChartContainerRef;
        var chartContainerRef = getChartContainerRef();
        if (!this.portalNode || chartContainerRef.current === null || !isVisible || !info) {
            return null;
        }
        var tooltipComponent = (react_1.default.createElement("div", { className: "echTooltip", ref: this.tooltipRef },
            this.renderHeader(info.header, headerFormatter),
            react_1.default.createElement("div", { className: "echTooltip__list" }, info.values.map(function (_a) {
                var seriesIdentifier = _a.seriesIdentifier, valueAccessor = _a.valueAccessor, label = _a.label, value = _a.value, color = _a.color, isHighlighted = _a.isHighlighted, isVisible = _a.isVisible;
                if (!isVisible) {
                    return null;
                }
                var classes = classnames_1.default('echTooltip__item', {
                    echTooltip__rowHighlighted: isHighlighted,
                });
                return (react_1.default.createElement("div", { key: seriesIdentifier.key + "__" + valueAccessor, className: classes, style: {
                        borderLeftColor: color,
                    } },
                    react_1.default.createElement("span", { className: "echTooltip__label" }, label),
                    react_1.default.createElement("span", { className: "echTooltip__value" }, value)));
            }))));
        return react_dom_1.createPortal(tooltipComponent, this.portalNode);
    };
    TooltipComponent.displayName = 'Tooltip';
    return TooltipComponent;
}(react_1.default.Component));
var HIDDEN_TOOLTIP_PROPS = {
    isVisible: false,
    info: undefined,
    position: null,
    headerFormatter: undefined,
};
var mapStateToProps = function (state) {
    if (!is_initialized_1.isInitialized(state)) {
        return HIDDEN_TOOLTIP_PROPS;
    }
    return {
        isVisible: get_internal_is_tooltip_visible_1.getInternalIsTooltipVisibleSelector(state),
        info: get_internal_tooltip_info_1.getInternalTooltipInfoSelector(state),
        position: get_internal_tooltip_anchor_position_1.getInternalTooltipAnchorPositionSelector(state),
        headerFormatter: get_tooltip_header_formatter_1.getTooltipHeaderFormatterSelector(state),
    };
};
exports.Tooltip = react_redux_1.connect(mapStateToProps)(TooltipComponent);
//# sourceMappingURL=index.js.map