"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __importDefault(require("classnames"));
var react_1 = __importStar(require("react"));
var fast_deep_equal_1 = require("../../utils/fast_deep_equal");
var icon_1 = require("../icons/icon");
function renderExtra(extra, isSeriesVisible) {
    var _a;
    var extraClassNames = classnames_1.default('echLegendItem__extra', (_a = {},
        _a['echLegendItem__extra--hidden'] = !isSeriesVisible,
        _a));
    return (react_1.default.createElement("div", { className: extraClassNames, title: extra }, extra));
}
function renderLabel(onLabelClick, hasLabelClickListener, label) {
    var _a;
    if (!label) {
        return null;
    }
    var labelClassNames = classnames_1.default('echLegendItem__label', (_a = {},
        _a['echLegendItem__label--hasClickListener'] = hasLabelClickListener,
        _a));
    return (react_1.default.createElement("div", { className: labelClassNames, title: label, onClick: onLabelClick }, label));
}
var LegendListItem = (function (_super) {
    __extends(LegendListItem, _super);
    function LegendListItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ref = react_1.createRef();
        _this.state = {
            isOpen: false,
        };
        _this.handleColorClick = function (changable) {
            return changable
                ? function (event) {
                    event.stopPropagation();
                    _this.toggleIsOpen();
                }
                : undefined;
        };
        _this.renderColor = function (color, isSeriesVisible) {
            if (isSeriesVisible === void 0) { isSeriesVisible = true; }
            if (!color) {
                return null;
            }
            if (!isSeriesVisible) {
                return (react_1.default.createElement("div", { className: "echLegendItem__color", "aria-label": "series hidden", title: "series hidden" },
                    react_1.default.createElement(icon_1.Icon, { type: "eyeClosed", viewBox: "-3 -3 22 22" })));
            }
            var changable = Boolean(_this.props.legendColorPicker);
            var colorClasses = classnames_1.default('echLegendItem__color', {
                'echLegendItem__color--changable': changable,
            });
            return (react_1.default.createElement("div", { onClick: _this.handleColorClick(changable), className: colorClasses, "aria-label": "series color", title: "series color" },
                react_1.default.createElement(icon_1.Icon, { type: "dot", color: color })));
        };
        _this.toggleIsOpen = function () {
            _this.setState(function (_a) {
                var isOpen = _a.isOpen;
                return ({ isOpen: !isOpen });
            });
        };
        _this.onLegendItemMouseOver = function () {
            var _a = _this.props, onLegendItemOverListener = _a.onLegendItemOverListener, legendItemOverAction = _a.legendItemOverAction, legendItem = _a.legendItem;
            if (onLegendItemOverListener) {
                onLegendItemOverListener(legendItem.seriesIdentifier);
            }
            legendItemOverAction(legendItem.key);
        };
        _this.onLegendItemMouseOut = function () {
            var _a = _this.props, onLegendItemOutListener = _a.onLegendItemOutListener, legendItemOutAction = _a.legendItemOutAction;
            if (onLegendItemOutListener) {
                onLegendItemOutListener();
            }
            legendItemOutAction();
        };
        _this.onVisibilityClick = function (legendItemId) { return function () {
            var _a = _this.props, onLegendItemClickListener = _a.onLegendItemClickListener, toggleDeselectSeriesAction = _a.toggleDeselectSeriesAction;
            if (onLegendItemClickListener) {
                onLegendItemClickListener(legendItemId);
            }
            toggleDeselectSeriesAction(legendItemId);
        }; };
        return _this;
    }
    LegendListItem.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        return !fast_deep_equal_1.deepEqual(this.props, nextProps) || !fast_deep_equal_1.deepEqual(this.state, nextState);
    };
    LegendListItem.prototype.renderColorPicker = function () {
        var _this = this;
        var _a = this.props, ColorPicker = _a.legendColorPicker, legendItem = _a.legendItem, clearTemporaryColors = _a.clearTemporaryColors, setTemporaryColor = _a.setTemporaryColor, setPersistedColor = _a.setPersistedColor;
        var seriesIdentifier = legendItem.seriesIdentifier, color = legendItem.color;
        var handleClose = function () {
            setPersistedColor(seriesIdentifier.key, color);
            clearTemporaryColors();
            _this.toggleIsOpen();
        };
        if (ColorPicker && this.state.isOpen && this.ref.current) {
            return (react_1.default.createElement(ColorPicker, { anchor: this.ref.current, color: color, onClose: handleClose, onChange: function (color) { return setTemporaryColor(seriesIdentifier.key, color); }, seriesIdentifier: seriesIdentifier }));
        }
    };
    LegendListItem.prototype.render = function () {
        var _a = this.props, extra = _a.extra, legendItem = _a.legendItem, legendPosition = _a.legendPosition, label = _a.label, showExtra = _a.showExtra, onLegendItemClickListener = _a.onLegendItemClickListener;
        var color = legendItem.color, isSeriesVisible = legendItem.isSeriesVisible, seriesIdentifier = legendItem.seriesIdentifier, isLegendItemVisible = legendItem.isLegendItemVisible;
        var onLabelClick = this.onVisibilityClick(seriesIdentifier);
        var hasLabelClickListener = Boolean(onLegendItemClickListener);
        var itemClassNames = classnames_1.default('echLegendItem', "echLegendItem--" + legendPosition, {
            'echLegendItem--hidden': !isSeriesVisible,
            'echLegendItem__extra--hidden': !isLegendItemVisible,
        });
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("div", { ref: this.ref, className: itemClassNames, onMouseEnter: this.onLegendItemMouseOver, onMouseLeave: this.onLegendItemMouseOut },
                this.renderColor(color, isSeriesVisible),
                renderLabel(onLabelClick, hasLabelClickListener, label),
                showExtra && renderExtra(extra, isSeriesVisible)),
            this.renderColorPicker()));
    };
    LegendListItem.displayName = 'LegendItem';
    return LegendListItem;
}(react_1.Component));
exports.LegendListItem = LegendListItem;
//# sourceMappingURL=legend_item.js.map