"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var series_1 = require("../../chart_types/xy_chart/utils/series");
var commons_1 = require("../../utils/commons");
var MockSeriesCollection = (function () {
    function MockSeriesCollection() {
    }
    MockSeriesCollection.empty = function () {
        return new Map();
    };
    MockSeriesCollection.fromSpecs = function (seriesSpecs) {
        var seriesCollection = series_1.getSplittedSeries(seriesSpecs, []).seriesCollection;
        return seriesCollection;
    };
    return MockSeriesCollection;
}());
exports.MockSeriesCollection = MockSeriesCollection;
var MockSeriesIdentifier = (function () {
    function MockSeriesIdentifier() {
    }
    MockSeriesIdentifier.default = function (partial) {
        return commons_1.mergePartial(MockSeriesIdentifier.base, partial, {
            mergeOptionalPartialValues: true,
        });
    };
    MockSeriesIdentifier.fromSpecs = function (specs) {
        var seriesCollection = series_1.getSplittedSeries(specs).seriesCollection;
        return __spread(seriesCollection.values()).map(function (_a) {
            var seriesIdentifier = _a.seriesIdentifier;
            return seriesIdentifier;
        });
    };
    MockSeriesIdentifier.base = {
        specId: 'bars',
        yAccessor: 'y',
        seriesKeys: ['a'],
        splitAccessors: new Map().set('g', 'a'),
        key: 'spec{bars}yAccessor{y}splitAccessors{g-a}',
    };
    return MockSeriesIdentifier;
}());
exports.MockSeriesIdentifier = MockSeriesIdentifier;
//# sourceMappingURL=series_identifiers.js.map