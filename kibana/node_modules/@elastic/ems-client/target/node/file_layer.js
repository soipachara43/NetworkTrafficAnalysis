"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileLayer = void 0;

var _origin = require("./origin");

var _url = _interopRequireDefault(require("url"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FileLayer {
  /**
   * Checks if url is absolute. If not, prepend the basePath.
   */
  constructor(config, emsClient, proxyPath) {
    _defineProperty(this, "_getAbsoluteUrl", url => {
      if (/^https?:\/\//.test(url)) {
        return url;
      } else {
        return (0, _utils.toAbsoluteUrl)(this._emsClient.getFileApiUrl(), url);
      }
    });

    this._config = config;
    this._emsClient = emsClient;
    this._proxyPath = proxyPath;
  }

  getAttributions() {
    return this._config.attribution.map(attribution => {
      const url = this._emsClient.getValueInLanguage(attribution.url);

      const label = this._emsClient.getValueInLanguage(attribution.label);

      return {
        url: url,
        label: label
      };
    });
  }

  getHTMLAttribution() {
    const attributions = this._config.attribution.map(attribution => {
      const url = this._emsClient.getValueInLanguage(attribution.url);

      const label = this._emsClient.getValueInLanguage(attribution.label);

      const html = url ? `<a href=${url}>${label}</a>` : label;
      return this._emsClient.sanitizeHtml(html);
    });

    return attributions.join(' | '); //!!!this is the current convention used in Kibana
  }

  getFieldsInLanguage() {
    return this._config.fields.map(field => {
      return {
        type: field.type,
        name: field.id,
        description: this._emsClient.getValueInLanguage(field.label)
      };
    });
  }

  getDisplayName() {
    const layerName = this._emsClient.getValueInLanguage(this._config.layer_name);

    return layerName ? layerName : '';
  }

  getId() {
    return this._config.layer_id;
  }

  hasId(id) {
    const matchesLegacyId = this._config.legacy_ids.indexOf(id) >= 0;
    return this._config.layer_id === id || matchesLegacyId;
  }

  _getDefaultFormat() {
    const defaultFormat = this._config.formats.find(format => {
      return format.legacy_default;
    });

    if (defaultFormat) {
      return defaultFormat;
    }

    return this._config.formats[0];
  }

  getEMSHotLink() {
    const landingPageString = this._emsClient.getLandingPageUrl();

    const urlObject = _url.default.parse(landingPageString);

    urlObject.hash = `file/${this.getId()}`;
    urlObject.query = { ...urlObject.query,
      locale: this._emsClient.getLocale()
    };
    return _url.default.format(urlObject);
  }

  getDefaultFormatType() {
    const format = this._getDefaultFormat();

    return format.type;
  }

  getDefaultFormatMeta() {
    const format = this._getDefaultFormat();

    return format.meta;
  }

  getDefaultFormatUrl() {
    const format = this._getDefaultFormat();

    const url = this._proxyPath + this._getAbsoluteUrl(format.url);

    return this._emsClient.extendUrlWithParams(url);
  }

  getCreatedAt() {
    return this._config.created_at;
  }

  getOrigin() {
    return _origin.ORIGIN.EMS;
  }

}

exports.FileLayer = FileLayer;