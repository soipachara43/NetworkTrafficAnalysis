function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { ORIGIN } from './origin';
import url from 'url';
import { toAbsoluteUrl } from './utils';
export var FileLayer = /*#__PURE__*/function () {
  /**
   * Checks if url is absolute. If not, prepend the basePath.
   */
  function FileLayer(config, emsClient, proxyPath) {
    var _this = this;

    _classCallCheck(this, FileLayer);

    _defineProperty(this, "_getAbsoluteUrl", function (url) {
      if (/^https?:\/\//.test(url)) {
        return url;
      } else {
        return toAbsoluteUrl(_this._emsClient.getFileApiUrl(), url);
      }
    });

    this._config = config;
    this._emsClient = emsClient;
    this._proxyPath = proxyPath;
  }

  _createClass(FileLayer, [{
    key: "getAttributions",
    value: function getAttributions() {
      var _this2 = this;

      return this._config.attribution.map(function (attribution) {
        var url = _this2._emsClient.getValueInLanguage(attribution.url);

        var label = _this2._emsClient.getValueInLanguage(attribution.label);

        return {
          url: url,
          label: label
        };
      });
    }
  }, {
    key: "getHTMLAttribution",
    value: function getHTMLAttribution() {
      var _this3 = this;

      var attributions = this._config.attribution.map(function (attribution) {
        var url = _this3._emsClient.getValueInLanguage(attribution.url);

        var label = _this3._emsClient.getValueInLanguage(attribution.label);

        var html = url ? "<a href=".concat(url, ">").concat(label, "</a>") : label;
        return _this3._emsClient.sanitizeHtml(html);
      });

      return attributions.join(' | '); //!!!this is the current convention used in Kibana
    }
  }, {
    key: "getFieldsInLanguage",
    value: function getFieldsInLanguage() {
      var _this4 = this;

      return this._config.fields.map(function (field) {
        return {
          type: field.type,
          name: field.id,
          description: _this4._emsClient.getValueInLanguage(field.label)
        };
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      var layerName = this._emsClient.getValueInLanguage(this._config.layer_name);

      return layerName ? layerName : '';
    }
  }, {
    key: "getId",
    value: function getId() {
      return this._config.layer_id;
    }
  }, {
    key: "hasId",
    value: function hasId(id) {
      var matchesLegacyId = this._config.legacy_ids.indexOf(id) >= 0;
      return this._config.layer_id === id || matchesLegacyId;
    }
  }, {
    key: "_getDefaultFormat",
    value: function _getDefaultFormat() {
      var defaultFormat = this._config.formats.find(function (format) {
        return format.legacy_default;
      });

      if (defaultFormat) {
        return defaultFormat;
      }

      return this._config.formats[0];
    }
  }, {
    key: "getEMSHotLink",
    value: function getEMSHotLink() {
      var landingPageString = this._emsClient.getLandingPageUrl();

      var urlObject = url.parse(landingPageString);
      urlObject.hash = "file/".concat(this.getId());
      urlObject.query = _objectSpread({}, urlObject.query, {
        locale: this._emsClient.getLocale()
      });
      return url.format(urlObject);
    }
  }, {
    key: "getDefaultFormatType",
    value: function getDefaultFormatType() {
      var format = this._getDefaultFormat();

      return format.type;
    }
  }, {
    key: "getDefaultFormatMeta",
    value: function getDefaultFormatMeta() {
      var format = this._getDefaultFormat();

      return format.meta;
    }
  }, {
    key: "getDefaultFormatUrl",
    value: function getDefaultFormatUrl() {
      var format = this._getDefaultFormat();

      var url = this._proxyPath + this._getAbsoluteUrl(format.url);

      return this._emsClient.extendUrlWithParams(url);
    }
  }, {
    key: "getCreatedAt",
    value: function getCreatedAt() {
      return this._config.created_at;
    }
  }, {
    key: "getOrigin",
    value: function getOrigin() {
      return ORIGIN.EMS;
    }
  }]);

  return FileLayer;
}();