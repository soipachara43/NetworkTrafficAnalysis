"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApplicationUsage = void 0;

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _ = require("./");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ApplicationUsage =
/*#__PURE__*/
function () {
  function ApplicationUsage() {
    _classCallCheck(this, ApplicationUsage);

    _defineProperty(this, "currentUsage", void 0);
  }

  _createClass(ApplicationUsage, [{
    key: "start",
    value: function start() {
      var _this = this;

      // Count any clicks and assign it to the current app
      if (window) window.addEventListener('click', function () {
        return _this.currentUsage && _this.currentUsage.numberOfClicks++;
      });
    }
  }, {
    key: "appChanged",
    value: function appChanged(appId) {
      var currentUsage = this.currentUsage;

      if (appId) {
        this.currentUsage = {
          type: _.METRIC_TYPE.APPLICATION_USAGE,
          appId: appId,
          startTime: (0, _momentTimezone.default)(),
          numberOfClicks: 0
        };
      } else {
        this.currentUsage = void 0;
      }

      return currentUsage;
    }
  }]);

  return ApplicationUsage;
}();

exports.ApplicationUsage = ApplicationUsage;