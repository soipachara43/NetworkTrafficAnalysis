"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Rx = tslib_1.__importStar(require("rxjs"));
const tooling_log_text_writer_1 = require("./tooling_log_text_writer");
class ToolingLog {
    constructor(writerConfig) {
        this.identWidth = 0;
        this.writers = writerConfig ? [new tooling_log_text_writer_1.ToolingLogTextWriter(writerConfig)] : [];
        this.written$ = new Rx.Subject();
    }
    indent(delta = 0) {
        this.identWidth = Math.max(this.identWidth + delta, 0);
        return this.identWidth;
    }
    verbose(...args) {
        this.sendToWriters('verbose', args);
    }
    debug(...args) {
        this.sendToWriters('debug', args);
    }
    info(...args) {
        this.sendToWriters('info', args);
    }
    success(...args) {
        this.sendToWriters('success', args);
    }
    warning(...args) {
        this.sendToWriters('warning', args);
    }
    error(error) {
        this.sendToWriters('error', [error]);
    }
    write(...args) {
        this.sendToWriters('write', args);
    }
    getWriters() {
        return this.writers.slice(0);
    }
    setWriters(writers) {
        this.writers = [...writers];
    }
    getWritten$() {
        return this.written$.asObservable();
    }
    sendToWriters(type, args) {
        const msg = {
            type,
            indent: this.identWidth,
            args,
        };
        let written = false;
        for (const writer of this.writers) {
            if (writer.write(msg)) {
                written = true;
            }
        }
        if (written) {
            this.written$.next(msg);
        }
    }
}
exports.ToolingLog = ToolingLog;
