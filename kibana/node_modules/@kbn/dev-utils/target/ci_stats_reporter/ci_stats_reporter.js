"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("util");
const axios_1 = tslib_1.__importDefault(require("axios"));
function parseConfig(log) {
    const configJson = process.env.KIBANA_CI_STATS_CONFIG;
    if (!configJson) {
        log.debug('KIBANA_CI_STATS_CONFIG environment variable not found, disabling CiStatsReporter');
        return;
    }
    let config;
    try {
        config = JSON.parse(configJson);
    }
    catch (_) {
        // handled below
    }
    if (typeof config === 'object' && config !== null) {
        return validateConfig(log, config);
    }
    log.warning('KIBANA_CI_STATS_CONFIG is invalid, stats will not be reported');
    return;
}
function validateConfig(log, config) {
    const validApiUrl = typeof config.apiUrl === 'string' && config.apiUrl.length !== 0;
    if (!validApiUrl) {
        log.warning('KIBANA_CI_STATS_CONFIG is missing a valid api url, stats will not be reported');
        return;
    }
    const validApiToken = typeof config.apiToken === 'string' && config.apiToken.length !== 0;
    if (!validApiToken) {
        log.warning('KIBANA_CI_STATS_CONFIG is missing a valid api token, stats will not be reported');
        return;
    }
    const validId = typeof config.buildId === 'string' && config.buildId.length !== 0;
    if (!validId) {
        log.warning('KIBANA_CI_STATS_CONFIG is missing a valid build id, stats will not be reported');
        return;
    }
    return config;
}
class CiStatsReporter {
    constructor(config, log) {
        this.config = config;
        this.log = log;
    }
    static fromEnv(log) {
        return new CiStatsReporter(parseConfig(log), log);
    }
    isEnabled() {
        return !!this.config;
    }
    async metric(name, subName, value) {
        var _a, _b, _c, _d;
        if (!this.config) {
            return;
        }
        let attempt = 0;
        const maxAttempts = 5;
        while (true) {
            attempt += 1;
            try {
                await axios_1.default.request({
                    method: 'POST',
                    url: '/metric',
                    baseURL: this.config.apiUrl,
                    params: {
                        buildId: this.config.buildId,
                    },
                    headers: {
                        Authorization: `token ${this.config.apiToken}`,
                    },
                    data: {
                        name,
                        subName,
                        value,
                    },
                });
                return;
            }
            catch (error) {
                if (!((_a = error) === null || _a === void 0 ? void 0 : _a.request)) {
                    // not an axios error, must be a usage error that we should notify user about
                    throw error;
                }
                if (((_b = error) === null || _b === void 0 ? void 0 : _b.response) && error.response.status !== 502) {
                    // error response from service was received so warn the user and move on
                    this.log.warning(`error recording metric [status=${error.response.status}] [resp=${util_1.inspect(error.response.data)}] [${name}/${subName}=${value}]`);
                    return;
                }
                if (attempt === maxAttempts) {
                    this.log.warning(`failed to reach kibana-ci-stats service too many times, unable to record metric [${name}/${subName}=${value}]`);
                    return;
                }
                // we failed to reach the backend and we have remaining attempts, lets retry after a short delay
                const reason = ((_d = (_c = error) === null || _c === void 0 ? void 0 : _c.response) === null || _d === void 0 ? void 0 : _d.status) ? `${error.response.status} response`
                    : 'no response';
                this.log.warning(`failed to reach kibana-ci-stats service [reason=${reason}], retrying in ${attempt} seconds`);
                await new Promise(resolve => setTimeout(resolve, attempt * 1000));
            }
        }
    }
}
exports.CiStatsReporter = CiStatsReporter;
