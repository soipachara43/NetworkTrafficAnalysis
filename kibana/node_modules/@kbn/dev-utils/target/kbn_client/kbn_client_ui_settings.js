"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kbn_client_requester_1 = require("./kbn_client_requester");
class KbnClientUiSettings {
    constructor(log, requester, defaults) {
        this.log = log;
        this.requester = requester;
        this.defaults = defaults;
    }
    async get(setting) {
        var _a;
        const all = await this.getAll();
        const value = (_a = all[setting]) === null || _a === void 0 ? void 0 : _a.userValue;
        this.log.verbose('uiSettings.value: %j', value);
        return value;
    }
    /**
     * Gets defaultIndex from the config doc.
     */
    async getDefaultIndex() {
        return await this.get('defaultIndex');
    }
    /**
     * Unset a uiSetting
     */
    async unset(setting) {
        return await this.requester.request({
            path: kbn_client_requester_1.uriencode `/api/kibana/settings/${setting}`,
            method: 'DELETE',
        });
    }
    /**
     * Replace all uiSettings with the `doc` values, `doc` is merged
     * with some defaults
     */
    async replace(doc, { retries = 5 } = {}) {
        this.log.debug('replacing kibana config doc: %j', doc);
        const changes = {
            ...this.defaults,
            ...doc,
        };
        for (const [name, { isOverridden }] of Object.entries(await this.getAll())) {
            if (!isOverridden && !changes.hasOwnProperty(name)) {
                changes[name] = null;
            }
        }
        await this.requester.request({
            method: 'POST',
            path: '/api/kibana/settings',
            body: { changes },
            retries,
        });
    }
    /**
     * Add fields to the config doc (like setting timezone and defaultIndex)
     */
    async update(updates) {
        this.log.debug('applying update to kibana config: %j', updates);
        await this.requester.request({
            path: '/api/kibana/settings',
            method: 'POST',
            body: {
                changes: updates,
            },
        });
    }
    async getAll() {
        const resp = await this.requester.request({
            path: '/api/kibana/settings',
            method: 'GET',
        });
        return resp.settings;
    }
}
exports.KbnClientUiSettings = KbnClientUiSettings;
