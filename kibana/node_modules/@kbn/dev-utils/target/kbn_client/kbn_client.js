"use strict";
/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const kbn_client_requester_1 = require("./kbn_client_requester");
const kbn_client_status_1 = require("./kbn_client_status");
const kbn_client_plugins_1 = require("./kbn_client_plugins");
const kbn_client_version_1 = require("./kbn_client_version");
const kbn_client_saved_objects_1 = require("./kbn_client_saved_objects");
const kbn_client_ui_settings_1 = require("./kbn_client_ui_settings");
class KbnClient {
    /**
     * Basic Kibana server client that implements common behaviors for talking
     * to the Kibana server from dev tooling.
     *
     * @param log ToolingLog
     * @param kibanaUrls Array of kibana server urls to send requests to
     * @param uiSettingDefaults Map of uiSetting values that will be merged with all uiSetting resets
     */
    constructor(log, kibanaUrls, uiSettingDefaults) {
        this.log = log;
        this.kibanaUrls = kibanaUrls;
        this.uiSettingDefaults = uiSettingDefaults;
        this.requester = new kbn_client_requester_1.KbnClientRequester(this.log, this.kibanaUrls);
        this.status = new kbn_client_status_1.KbnClientStatus(this.requester);
        this.plugins = new kbn_client_plugins_1.KbnClientPlugins(this.status);
        this.version = new kbn_client_version_1.KbnClientVersion(this.status);
        this.savedObjects = new kbn_client_saved_objects_1.KbnClientSavedObjects(this.log, this.requester);
        this.uiSettings = new kbn_client_ui_settings_1.KbnClientUiSettings(this.log, this.requester, this.uiSettingDefaults);
        if (!kibanaUrls.length) {
            throw new Error('missing Kibana urls');
        }
    }
    /**
     * Make a direct request to the Kibana server
     */
    async request(options) {
        return await this.requester.request(options);
    }
    resolveUrl(relativeUrl) {
        return this.requester.resolveUrl(relativeUrl);
    }
}
exports.KbnClient = KbnClient;
